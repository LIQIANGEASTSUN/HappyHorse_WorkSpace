// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SaidCliRpc.proto

#ifndef PROTOBUF_SaidCliRpc_2eproto__INCLUDED
#define PROTOBUF_SaidCliRpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "PublicStruct.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SaidCliRpc_2eproto();
void protobuf_AssignDesc_SaidCliRpc_2eproto();
void protobuf_ShutdownFile_SaidCliRpc_2eproto();

class SaidRpcSaidAsk;
class SaidRpcSaidReply;
class SaidRpcSaidBroadcasNotify;
class SaidSaidData;

// ===================================================================

class SaidRpcSaidAsk : public ::google::protobuf::Message {
 public:
  SaidRpcSaidAsk();
  virtual ~SaidRpcSaidAsk();

  SaidRpcSaidAsk(const SaidRpcSaidAsk& from);

  inline SaidRpcSaidAsk& operator=(const SaidRpcSaidAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SaidRpcSaidAsk& default_instance();

  void Swap(SaidRpcSaidAsk* other);

  // implements Message ----------------------------------------------

  SaidRpcSaidAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SaidRpcSaidAsk& from);
  void MergeFrom(const SaidRpcSaidAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SaidSaidData Value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::SaidSaidData& value() const;
  inline ::SaidSaidData* mutable_value();
  inline ::SaidSaidData* release_value();
  inline void set_allocated_value(::SaidSaidData* value);

  // @@protoc_insertion_point(class_scope:SaidRpcSaidAsk)
 private:
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SaidSaidData* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SaidCliRpc_2eproto();
  friend void protobuf_AssignDesc_SaidCliRpc_2eproto();
  friend void protobuf_ShutdownFile_SaidCliRpc_2eproto();

  void InitAsDefaultInstance();
  static SaidRpcSaidAsk* default_instance_;
};
// -------------------------------------------------------------------

class SaidRpcSaidReply : public ::google::protobuf::Message {
 public:
  SaidRpcSaidReply();
  virtual ~SaidRpcSaidReply();

  SaidRpcSaidReply(const SaidRpcSaidReply& from);

  inline SaidRpcSaidReply& operator=(const SaidRpcSaidReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SaidRpcSaidReply& default_instance();

  void Swap(SaidRpcSaidReply* other);

  // implements Message ----------------------------------------------

  SaidRpcSaidReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SaidRpcSaidReply& from);
  void MergeFrom(const SaidRpcSaidReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .SaidSaidData Value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::SaidSaidData& value() const;
  inline ::SaidSaidData* mutable_value();
  inline ::SaidSaidData* release_value();
  inline void set_allocated_value(::SaidSaidData* value);

  // @@protoc_insertion_point(class_scope:SaidRpcSaidReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SaidSaidData* value_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SaidCliRpc_2eproto();
  friend void protobuf_AssignDesc_SaidCliRpc_2eproto();
  friend void protobuf_ShutdownFile_SaidCliRpc_2eproto();

  void InitAsDefaultInstance();
  static SaidRpcSaidReply* default_instance_;
};
// -------------------------------------------------------------------

class SaidRpcSaidBroadcasNotify : public ::google::protobuf::Message {
 public:
  SaidRpcSaidBroadcasNotify();
  virtual ~SaidRpcSaidBroadcasNotify();

  SaidRpcSaidBroadcasNotify(const SaidRpcSaidBroadcasNotify& from);

  inline SaidRpcSaidBroadcasNotify& operator=(const SaidRpcSaidBroadcasNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SaidRpcSaidBroadcasNotify& default_instance();

  void Swap(SaidRpcSaidBroadcasNotify* other);

  // implements Message ----------------------------------------------

  SaidRpcSaidBroadcasNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SaidRpcSaidBroadcasNotify& from);
  void MergeFrom(const SaidRpcSaidBroadcasNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SaidSaidData Value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline const ::SaidSaidData& value() const;
  inline ::SaidSaidData* mutable_value();
  inline ::SaidSaidData* release_value();
  inline void set_allocated_value(::SaidSaidData* value);

  // @@protoc_insertion_point(class_scope:SaidRpcSaidBroadcasNotify)
 private:
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SaidSaidData* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SaidCliRpc_2eproto();
  friend void protobuf_AssignDesc_SaidCliRpc_2eproto();
  friend void protobuf_ShutdownFile_SaidCliRpc_2eproto();

  void InitAsDefaultInstance();
  static SaidRpcSaidBroadcasNotify* default_instance_;
};
// -------------------------------------------------------------------

class SaidSaidData : public ::google::protobuf::Message {
 public:
  SaidSaidData();
  virtual ~SaidSaidData();

  SaidSaidData(const SaidSaidData& from);

  inline SaidSaidData& operator=(const SaidSaidData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SaidSaidData& default_instance();

  void Swap(SaidSaidData* other);

  // implements Message ----------------------------------------------

  SaidSaidData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SaidSaidData& from);
  void MergeFrom(const SaidSaidData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Channel = 1 [default = -1];
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // optional string Content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional .SmallUser Who = 3;
  inline bool has_who() const;
  inline void clear_who();
  static const int kWhoFieldNumber = 3;
  inline const ::SmallUser& who() const;
  inline ::SmallUser* mutable_who();
  inline ::SmallUser* release_who();
  inline void set_allocated_who(::SmallUser* who);

  // optional .SmallUser To = 4;
  inline bool has_to() const;
  inline void clear_to();
  static const int kToFieldNumber = 4;
  inline const ::SmallUser& to() const;
  inline ::SmallUser* mutable_to();
  inline ::SmallUser* release_to();
  inline void set_allocated_to(::SmallUser* to);

  // optional sint32 BigType = 5 [default = 0];
  inline bool has_bigtype() const;
  inline void clear_bigtype();
  static const int kBigTypeFieldNumber = 5;
  inline ::google::protobuf::int32 bigtype() const;
  inline void set_bigtype(::google::protobuf::int32 value);

  // optional sint32 SmallType = 6 [default = 0];
  inline bool has_smalltype() const;
  inline void clear_smalltype();
  static const int kSmallTypeFieldNumber = 6;
  inline ::google::protobuf::int32 smalltype() const;
  inline void set_smalltype(::google::protobuf::int32 value);

  // optional sint64 ID = 7 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 7;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:SaidSaidData)
 private:
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_who();
  inline void clear_has_who();
  inline void set_has_to();
  inline void clear_has_to();
  inline void set_has_bigtype();
  inline void clear_has_bigtype();
  inline void set_has_smalltype();
  inline void clear_has_smalltype();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* content_;
  ::SmallUser* who_;
  ::google::protobuf::int32 channel_;
  ::google::protobuf::int32 bigtype_;
  ::SmallUser* to_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 smalltype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_SaidCliRpc_2eproto();
  friend void protobuf_AssignDesc_SaidCliRpc_2eproto();
  friend void protobuf_ShutdownFile_SaidCliRpc_2eproto();

  void InitAsDefaultInstance();
  static SaidSaidData* default_instance_;
};
// ===================================================================


// ===================================================================

// SaidRpcSaidAsk

// optional .SaidSaidData Value = 2;
inline bool SaidRpcSaidAsk::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SaidRpcSaidAsk::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SaidRpcSaidAsk::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SaidRpcSaidAsk::clear_value() {
  if (value_ != NULL) value_->::SaidSaidData::Clear();
  clear_has_value();
}
inline const ::SaidSaidData& SaidRpcSaidAsk::value() const {
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::SaidSaidData* SaidRpcSaidAsk::mutable_value() {
  set_has_value();
  if (value_ == NULL) value_ = new ::SaidSaidData;
  return value_;
}
inline ::SaidSaidData* SaidRpcSaidAsk::release_value() {
  clear_has_value();
  ::SaidSaidData* temp = value_;
  value_ = NULL;
  return temp;
}
inline void SaidRpcSaidAsk::set_allocated_value(::SaidSaidData* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
}

// -------------------------------------------------------------------

// SaidRpcSaidReply

// optional sint32 Result = 1 [default = -9999];
inline bool SaidRpcSaidReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SaidRpcSaidReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SaidRpcSaidReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SaidRpcSaidReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 SaidRpcSaidReply::result() const {
  return result_;
}
inline void SaidRpcSaidReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .SaidSaidData Value = 2;
inline bool SaidRpcSaidReply::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SaidRpcSaidReply::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SaidRpcSaidReply::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SaidRpcSaidReply::clear_value() {
  if (value_ != NULL) value_->::SaidSaidData::Clear();
  clear_has_value();
}
inline const ::SaidSaidData& SaidRpcSaidReply::value() const {
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::SaidSaidData* SaidRpcSaidReply::mutable_value() {
  set_has_value();
  if (value_ == NULL) value_ = new ::SaidSaidData;
  return value_;
}
inline ::SaidSaidData* SaidRpcSaidReply::release_value() {
  clear_has_value();
  ::SaidSaidData* temp = value_;
  value_ = NULL;
  return temp;
}
inline void SaidRpcSaidReply::set_allocated_value(::SaidSaidData* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
}

// -------------------------------------------------------------------

// SaidRpcSaidBroadcasNotify

// optional .SaidSaidData Value = 1;
inline bool SaidRpcSaidBroadcasNotify::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SaidRpcSaidBroadcasNotify::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SaidRpcSaidBroadcasNotify::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SaidRpcSaidBroadcasNotify::clear_value() {
  if (value_ != NULL) value_->::SaidSaidData::Clear();
  clear_has_value();
}
inline const ::SaidSaidData& SaidRpcSaidBroadcasNotify::value() const {
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::SaidSaidData* SaidRpcSaidBroadcasNotify::mutable_value() {
  set_has_value();
  if (value_ == NULL) value_ = new ::SaidSaidData;
  return value_;
}
inline ::SaidSaidData* SaidRpcSaidBroadcasNotify::release_value() {
  clear_has_value();
  ::SaidSaidData* temp = value_;
  value_ = NULL;
  return temp;
}
inline void SaidRpcSaidBroadcasNotify::set_allocated_value(::SaidSaidData* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
}

// -------------------------------------------------------------------

// SaidSaidData

// optional sint32 Channel = 1 [default = -1];
inline bool SaidSaidData::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SaidSaidData::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SaidSaidData::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SaidSaidData::clear_channel() {
  channel_ = -1;
  clear_has_channel();
}
inline ::google::protobuf::int32 SaidSaidData::channel() const {
  return channel_;
}
inline void SaidSaidData::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
}

// optional string Content = 2;
inline bool SaidSaidData::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SaidSaidData::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SaidSaidData::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SaidSaidData::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& SaidSaidData::content() const {
  return *content_;
}
inline void SaidSaidData::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void SaidSaidData::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void SaidSaidData::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SaidSaidData::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* SaidSaidData::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SaidSaidData::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .SmallUser Who = 3;
inline bool SaidSaidData::has_who() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SaidSaidData::set_has_who() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SaidSaidData::clear_has_who() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SaidSaidData::clear_who() {
  if (who_ != NULL) who_->::SmallUser::Clear();
  clear_has_who();
}
inline const ::SmallUser& SaidSaidData::who() const {
  return who_ != NULL ? *who_ : *default_instance_->who_;
}
inline ::SmallUser* SaidSaidData::mutable_who() {
  set_has_who();
  if (who_ == NULL) who_ = new ::SmallUser;
  return who_;
}
inline ::SmallUser* SaidSaidData::release_who() {
  clear_has_who();
  ::SmallUser* temp = who_;
  who_ = NULL;
  return temp;
}
inline void SaidSaidData::set_allocated_who(::SmallUser* who) {
  delete who_;
  who_ = who;
  if (who) {
    set_has_who();
  } else {
    clear_has_who();
  }
}

// optional .SmallUser To = 4;
inline bool SaidSaidData::has_to() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SaidSaidData::set_has_to() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SaidSaidData::clear_has_to() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SaidSaidData::clear_to() {
  if (to_ != NULL) to_->::SmallUser::Clear();
  clear_has_to();
}
inline const ::SmallUser& SaidSaidData::to() const {
  return to_ != NULL ? *to_ : *default_instance_->to_;
}
inline ::SmallUser* SaidSaidData::mutable_to() {
  set_has_to();
  if (to_ == NULL) to_ = new ::SmallUser;
  return to_;
}
inline ::SmallUser* SaidSaidData::release_to() {
  clear_has_to();
  ::SmallUser* temp = to_;
  to_ = NULL;
  return temp;
}
inline void SaidSaidData::set_allocated_to(::SmallUser* to) {
  delete to_;
  to_ = to;
  if (to) {
    set_has_to();
  } else {
    clear_has_to();
  }
}

// optional sint32 BigType = 5 [default = 0];
inline bool SaidSaidData::has_bigtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SaidSaidData::set_has_bigtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SaidSaidData::clear_has_bigtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SaidSaidData::clear_bigtype() {
  bigtype_ = 0;
  clear_has_bigtype();
}
inline ::google::protobuf::int32 SaidSaidData::bigtype() const {
  return bigtype_;
}
inline void SaidSaidData::set_bigtype(::google::protobuf::int32 value) {
  set_has_bigtype();
  bigtype_ = value;
}

// optional sint32 SmallType = 6 [default = 0];
inline bool SaidSaidData::has_smalltype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SaidSaidData::set_has_smalltype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SaidSaidData::clear_has_smalltype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SaidSaidData::clear_smalltype() {
  smalltype_ = 0;
  clear_has_smalltype();
}
inline ::google::protobuf::int32 SaidSaidData::smalltype() const {
  return smalltype_;
}
inline void SaidSaidData::set_smalltype(::google::protobuf::int32 value) {
  set_has_smalltype();
  smalltype_ = value;
}

// optional sint64 ID = 7 [default = -1];
inline bool SaidSaidData::has_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SaidSaidData::set_has_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SaidSaidData::clear_has_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SaidSaidData::clear_id() {
  id_ = GOOGLE_LONGLONG(-1);
  clear_has_id();
}
inline ::google::protobuf::int64 SaidSaidData::id() const {
  return id_;
}
inline void SaidSaidData::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SaidCliRpc_2eproto__INCLUDED
