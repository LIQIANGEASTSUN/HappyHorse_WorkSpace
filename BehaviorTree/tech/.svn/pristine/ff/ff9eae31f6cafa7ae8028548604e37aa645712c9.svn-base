// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SkillConfigCliRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SkillConfigCliRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SkillConfigRpcsyncNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillConfigRpcsyncNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillConfigSkillPhase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillConfigSkillPhase_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillConfigSkillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillConfigSkillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillConfigSkillEventBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillConfigSkillEventBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillConfigSkillCustomEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillConfigSkillCustomEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillConfigBulletTrajectoryEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillConfigBulletTrajectoryEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillConfigCameraChangeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillConfigCameraChangeInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SkillConfigCliRpc_2eproto() {
  protobuf_AddDesc_SkillConfigCliRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SkillConfigCliRpc.proto");
  GOOGLE_CHECK(file != NULL);
  SkillConfigRpcsyncNotify_descriptor_ = file->message_type(0);
  static const int SkillConfigRpcsyncNotify_offsets_[1] = {
  };
  SkillConfigRpcsyncNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillConfigRpcsyncNotify_descriptor_,
      SkillConfigRpcsyncNotify::default_instance_,
      SkillConfigRpcsyncNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigRpcsyncNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigRpcsyncNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillConfigRpcsyncNotify));
  SkillConfigSkillPhase_descriptor_ = file->message_type(1);
  static const int SkillConfigSkillPhase_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillPhase, skillphasetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillPhase, timelength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillPhase, customevetnlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillPhase, bullettrajectoryeventlist_),
  };
  SkillConfigSkillPhase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillConfigSkillPhase_descriptor_,
      SkillConfigSkillPhase::default_instance_,
      SkillConfigSkillPhase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillPhase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillPhase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillConfigSkillPhase));
  SkillConfigSkillInfo_descriptor_ = file->message_type(2);
  static const int SkillConfigSkillInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, handletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, skilltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, focotime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, skillphaselist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, unbroken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, usetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, cameradata_),
  };
  SkillConfigSkillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillConfigSkillInfo_descriptor_,
      SkillConfigSkillInfo::default_instance_,
      SkillConfigSkillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillConfigSkillInfo));
  SkillConfigSkillEventBase_descriptor_ = file->message_type(3);
  static const int SkillConfigSkillEventBase_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillEventBase, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillEventBase, eventtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillEventBase, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillEventBase, eventlength_),
  };
  SkillConfigSkillEventBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillConfigSkillEventBase_descriptor_,
      SkillConfigSkillEventBase::default_instance_,
      SkillConfigSkillEventBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillEventBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillEventBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillConfigSkillEventBase));
  SkillConfigSkillCustomEvent_descriptor_ = file->message_type(4);
  static const int SkillConfigSkillCustomEvent_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, eventbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, modelmountpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, weaponmountpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, effectmountpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, loop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, wholeanimation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, offsetx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, offsety_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, offsetz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, effectremove_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, effectremovetime_),
  };
  SkillConfigSkillCustomEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillConfigSkillCustomEvent_descriptor_,
      SkillConfigSkillCustomEvent::default_instance_,
      SkillConfigSkillCustomEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillConfigSkillCustomEvent));
  SkillConfigBulletTrajectoryEvent_descriptor_ = file->message_type(5);
  static const int SkillConfigBulletTrajectoryEvent_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigBulletTrajectoryEvent, eventbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigBulletTrajectoryEvent, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigBulletTrajectoryEvent, modelmountpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigBulletTrajectoryEvent, weaponmountpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigBulletTrajectoryEvent, offsetx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigBulletTrajectoryEvent, offsety_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigBulletTrajectoryEvent, offsetz_),
  };
  SkillConfigBulletTrajectoryEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillConfigBulletTrajectoryEvent_descriptor_,
      SkillConfigBulletTrajectoryEvent::default_instance_,
      SkillConfigBulletTrajectoryEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigBulletTrajectoryEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigBulletTrajectoryEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillConfigBulletTrajectoryEvent));
  SkillConfigCameraChangeInfo_descriptor_ = file->message_type(6);
  static const int SkillConfigCameraChangeInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigCameraChangeInfo, camerachangestarttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigCameraChangeInfo, camerafieldview_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigCameraChangeInfo, camerachangeendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigCameraChangeInfo, camerarecovertime_),
  };
  SkillConfigCameraChangeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillConfigCameraChangeInfo_descriptor_,
      SkillConfigCameraChangeInfo::default_instance_,
      SkillConfigCameraChangeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigCameraChangeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigCameraChangeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillConfigCameraChangeInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SkillConfigCliRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillConfigRpcsyncNotify_descriptor_, &SkillConfigRpcsyncNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillConfigSkillPhase_descriptor_, &SkillConfigSkillPhase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillConfigSkillInfo_descriptor_, &SkillConfigSkillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillConfigSkillEventBase_descriptor_, &SkillConfigSkillEventBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillConfigSkillCustomEvent_descriptor_, &SkillConfigSkillCustomEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillConfigBulletTrajectoryEvent_descriptor_, &SkillConfigBulletTrajectoryEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillConfigCameraChangeInfo_descriptor_, &SkillConfigCameraChangeInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SkillConfigCliRpc_2eproto() {
  delete SkillConfigRpcsyncNotify::default_instance_;
  delete SkillConfigRpcsyncNotify_reflection_;
  delete SkillConfigSkillPhase::default_instance_;
  delete SkillConfigSkillPhase_reflection_;
  delete SkillConfigSkillInfo::default_instance_;
  delete SkillConfigSkillInfo_reflection_;
  delete SkillConfigSkillEventBase::default_instance_;
  delete SkillConfigSkillEventBase_reflection_;
  delete SkillConfigSkillCustomEvent::default_instance_;
  delete SkillConfigSkillCustomEvent_reflection_;
  delete SkillConfigBulletTrajectoryEvent::default_instance_;
  delete SkillConfigBulletTrajectoryEvent_reflection_;
  delete SkillConfigCameraChangeInfo::default_instance_;
  delete SkillConfigCameraChangeInfo_reflection_;
}

void protobuf_AddDesc_SkillConfigCliRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027SkillConfigCliRpc.proto\032\022PublicStruct."
    "proto\"\032\n\030SkillConfigRpcsyncNotify\"\307\001\n\025Sk"
    "illConfigSkillPhase\022\031\n\016SkillPhaseType\030\001 "
    "\001(\021:\0010\022\026\n\nTimeLength\030\002 \001(\021:\002-1\0225\n\017Custom"
    "EvetnList\030\007 \003(\0132\034.SkillConfigSkillCustom"
    "Event\022D\n\031BulletTrajectoryEventList\030\010 \003(\013"
    "2!.SkillConfigBulletTrajectoryEvent\"\373\001\n\024"
    "SkillConfigSkillInfo\022\016\n\002Id\030\010 \001(\021:\002-1\022\025\n\n"
    "HandleType\030\004 \001(\021:\0010\022\025\n\tSkillTime\030\005 \001(\021:\002"
    "-1\022\024\n\010FocoTime\030\006 \001(\021:\002-1\022.\n\016SkillPhaseLi"
    "st\030\007 \003(\0132\026.SkillConfigSkillPhase\022\027\n\010Unbr"
    "oken\030\n \001(\010:\005false\022\024\n\010UseTimes\030\013 \001(\021:\002-1\022"
    "0\n\nCameraData\030\020 \001(\0132\034.SkillConfigCameraC"
    "hangeInfo\"m\n\031SkillConfigSkillEventBase\022\016"
    "\n\002Id\030\005 \001(\021:\002-1\022\024\n\tEventType\030\002 \001(\021:\0010\022\021\n\005"
    "Start\030\003 \001(\021:\002-1\022\027\n\013EventLength\030\004 \001(\021:\002-1"
    "\"\356\002\n\033SkillConfigSkillCustomEvent\022-\n\tEven"
    "tBase\030\021 \001(\0132\032.SkillConfigSkillEventBase\022"
    "\020\n\010FileName\030\006 \001(\t\022\032\n\017ModelMountPoint\030\007 \001"
    "(\021:\0010\022\033\n\020WeaponMountPoint\030\010 \001(\021:\0010\022\033\n\020Ef"
    "fectMountPoint\030\014 \001(\021:\0010\022\023\n\004Loop\030\t \001(\010:\005f"
    "alse\022\035\n\016WholeAnimation\030\n \001(\010:\005false\022\023\n\007O"
    "ffsetX\030\016 \001(\002:\002-1\022\023\n\007OffsetY\030\017 \001(\002:\002-1\022\023\n"
    "\007OffsetZ\030\020 \001(\002:\002-1\022\016\n\002Id\030\022 \001(\021:\002-1\022\027\n\014Ef"
    "fectRemove\030\025 \001(\021:\0010\022\034\n\020EffectRemoveTime\030"
    "\024 \001(\021:\002-1\"\331\001\n SkillConfigBulletTrajector"
    "yEvent\022-\n\tEventBase\030\001 \001(\0132\032.SkillConfigS"
    "killEventBase\022\016\n\002Id\030\002 \001(\021:\002-1\022\032\n\017ModelMo"
    "untPoint\030\004 \001(\021:\0010\022\033\n\020WeaponMountPoint\030\005 "
    "\001(\021:\0010\022\023\n\007OffsetX\030\006 \001(\002:\002-1\022\023\n\007OffsetY\030\007"
    " \001(\002:\002-1\022\023\n\007OffsetZ\030\010 \001(\002:\002-1\"\235\001\n\033SkillC"
    "onfigCameraChangeInfo\022!\n\025CameraChangeSta"
    "rtTime\030\001 \001(\021:\002-1\022\033\n\017CameraFieldView\030\002 \001("
    "\002:\002-1\022\037\n\023CameraChangeEndTime\030\003 \001(\021:\002-1\022\035"
    "\n\021CameraRecoverTime\030\004 \001(\021:\002-1", 1389);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SkillConfigCliRpc.proto", &protobuf_RegisterTypes);
  SkillConfigRpcsyncNotify::default_instance_ = new SkillConfigRpcsyncNotify();
  SkillConfigSkillPhase::default_instance_ = new SkillConfigSkillPhase();
  SkillConfigSkillInfo::default_instance_ = new SkillConfigSkillInfo();
  SkillConfigSkillEventBase::default_instance_ = new SkillConfigSkillEventBase();
  SkillConfigSkillCustomEvent::default_instance_ = new SkillConfigSkillCustomEvent();
  SkillConfigBulletTrajectoryEvent::default_instance_ = new SkillConfigBulletTrajectoryEvent();
  SkillConfigCameraChangeInfo::default_instance_ = new SkillConfigCameraChangeInfo();
  SkillConfigRpcsyncNotify::default_instance_->InitAsDefaultInstance();
  SkillConfigSkillPhase::default_instance_->InitAsDefaultInstance();
  SkillConfigSkillInfo::default_instance_->InitAsDefaultInstance();
  SkillConfigSkillEventBase::default_instance_->InitAsDefaultInstance();
  SkillConfigSkillCustomEvent::default_instance_->InitAsDefaultInstance();
  SkillConfigBulletTrajectoryEvent::default_instance_->InitAsDefaultInstance();
  SkillConfigCameraChangeInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SkillConfigCliRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SkillConfigCliRpc_2eproto {
  StaticDescriptorInitializer_SkillConfigCliRpc_2eproto() {
    protobuf_AddDesc_SkillConfigCliRpc_2eproto();
  }
} static_descriptor_initializer_SkillConfigCliRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SkillConfigRpcsyncNotify::SkillConfigRpcsyncNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillConfigRpcsyncNotify::InitAsDefaultInstance() {
}

SkillConfigRpcsyncNotify::SkillConfigRpcsyncNotify(const SkillConfigRpcsyncNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillConfigRpcsyncNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillConfigRpcsyncNotify::~SkillConfigRpcsyncNotify() {
  SharedDtor();
}

void SkillConfigRpcsyncNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillConfigRpcsyncNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillConfigRpcsyncNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillConfigRpcsyncNotify_descriptor_;
}

const SkillConfigRpcsyncNotify& SkillConfigRpcsyncNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillConfigCliRpc_2eproto();
  return *default_instance_;
}

SkillConfigRpcsyncNotify* SkillConfigRpcsyncNotify::default_instance_ = NULL;

SkillConfigRpcsyncNotify* SkillConfigRpcsyncNotify::New() const {
  return new SkillConfigRpcsyncNotify;
}

void SkillConfigRpcsyncNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillConfigRpcsyncNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SkillConfigRpcsyncNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillConfigRpcsyncNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillConfigRpcsyncNotify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillConfigRpcsyncNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillConfigRpcsyncNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillConfigRpcsyncNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillConfigRpcsyncNotify::MergeFrom(const SkillConfigRpcsyncNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillConfigRpcsyncNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillConfigRpcsyncNotify::CopyFrom(const SkillConfigRpcsyncNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillConfigRpcsyncNotify::IsInitialized() const {

  return true;
}

void SkillConfigRpcsyncNotify::Swap(SkillConfigRpcsyncNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillConfigRpcsyncNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillConfigRpcsyncNotify_descriptor_;
  metadata.reflection = SkillConfigRpcsyncNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillConfigSkillPhase::kSkillPhaseTypeFieldNumber;
const int SkillConfigSkillPhase::kTimeLengthFieldNumber;
const int SkillConfigSkillPhase::kCustomEvetnListFieldNumber;
const int SkillConfigSkillPhase::kBulletTrajectoryEventListFieldNumber;
#endif  // !_MSC_VER

SkillConfigSkillPhase::SkillConfigSkillPhase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillConfigSkillPhase::InitAsDefaultInstance() {
}

SkillConfigSkillPhase::SkillConfigSkillPhase(const SkillConfigSkillPhase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillConfigSkillPhase::SharedCtor() {
  _cached_size_ = 0;
  skillphasetype_ = 0;
  timelength_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillConfigSkillPhase::~SkillConfigSkillPhase() {
  SharedDtor();
}

void SkillConfigSkillPhase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillConfigSkillPhase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillConfigSkillPhase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillConfigSkillPhase_descriptor_;
}

const SkillConfigSkillPhase& SkillConfigSkillPhase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillConfigCliRpc_2eproto();
  return *default_instance_;
}

SkillConfigSkillPhase* SkillConfigSkillPhase::default_instance_ = NULL;

SkillConfigSkillPhase* SkillConfigSkillPhase::New() const {
  return new SkillConfigSkillPhase;
}

void SkillConfigSkillPhase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillphasetype_ = 0;
    timelength_ = -1;
  }
  customevetnlist_.Clear();
  bullettrajectoryeventlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillConfigSkillPhase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 SkillPhaseType = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &skillphasetype_)));
          set_has_skillphasetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TimeLength;
        break;
      }

      // optional sint32 TimeLength = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &timelength_)));
          set_has_timelength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_CustomEvetnList;
        break;
      }

      // repeated .SkillConfigSkillCustomEvent CustomEvetnList = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CustomEvetnList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_customevetnlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_CustomEvetnList;
        if (input->ExpectTag(66)) goto parse_BulletTrajectoryEventList;
        break;
      }

      // repeated .SkillConfigBulletTrajectoryEvent BulletTrajectoryEventList = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BulletTrajectoryEventList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bullettrajectoryeventlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_BulletTrajectoryEventList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillConfigSkillPhase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 SkillPhaseType = 1 [default = 0];
  if (has_skillphasetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->skillphasetype(), output);
  }

  // optional sint32 TimeLength = 2 [default = -1];
  if (has_timelength()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->timelength(), output);
  }

  // repeated .SkillConfigSkillCustomEvent CustomEvetnList = 7;
  for (int i = 0; i < this->customevetnlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->customevetnlist(i), output);
  }

  // repeated .SkillConfigBulletTrajectoryEvent BulletTrajectoryEventList = 8;
  for (int i = 0; i < this->bullettrajectoryeventlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->bullettrajectoryeventlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillConfigSkillPhase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 SkillPhaseType = 1 [default = 0];
  if (has_skillphasetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->skillphasetype(), target);
  }

  // optional sint32 TimeLength = 2 [default = -1];
  if (has_timelength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->timelength(), target);
  }

  // repeated .SkillConfigSkillCustomEvent CustomEvetnList = 7;
  for (int i = 0; i < this->customevetnlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->customevetnlist(i), target);
  }

  // repeated .SkillConfigBulletTrajectoryEvent BulletTrajectoryEventList = 8;
  for (int i = 0; i < this->bullettrajectoryeventlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->bullettrajectoryeventlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillConfigSkillPhase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 SkillPhaseType = 1 [default = 0];
    if (has_skillphasetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->skillphasetype());
    }

    // optional sint32 TimeLength = 2 [default = -1];
    if (has_timelength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->timelength());
    }

  }
  // repeated .SkillConfigSkillCustomEvent CustomEvetnList = 7;
  total_size += 1 * this->customevetnlist_size();
  for (int i = 0; i < this->customevetnlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->customevetnlist(i));
  }

  // repeated .SkillConfigBulletTrajectoryEvent BulletTrajectoryEventList = 8;
  total_size += 1 * this->bullettrajectoryeventlist_size();
  for (int i = 0; i < this->bullettrajectoryeventlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bullettrajectoryeventlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillConfigSkillPhase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillConfigSkillPhase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillConfigSkillPhase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillConfigSkillPhase::MergeFrom(const SkillConfigSkillPhase& from) {
  GOOGLE_CHECK_NE(&from, this);
  customevetnlist_.MergeFrom(from.customevetnlist_);
  bullettrajectoryeventlist_.MergeFrom(from.bullettrajectoryeventlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillphasetype()) {
      set_skillphasetype(from.skillphasetype());
    }
    if (from.has_timelength()) {
      set_timelength(from.timelength());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillConfigSkillPhase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillConfigSkillPhase::CopyFrom(const SkillConfigSkillPhase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillConfigSkillPhase::IsInitialized() const {

  return true;
}

void SkillConfigSkillPhase::Swap(SkillConfigSkillPhase* other) {
  if (other != this) {
    std::swap(skillphasetype_, other->skillphasetype_);
    std::swap(timelength_, other->timelength_);
    customevetnlist_.Swap(&other->customevetnlist_);
    bullettrajectoryeventlist_.Swap(&other->bullettrajectoryeventlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillConfigSkillPhase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillConfigSkillPhase_descriptor_;
  metadata.reflection = SkillConfigSkillPhase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillConfigSkillInfo::kIdFieldNumber;
const int SkillConfigSkillInfo::kHandleTypeFieldNumber;
const int SkillConfigSkillInfo::kSkillTimeFieldNumber;
const int SkillConfigSkillInfo::kFocoTimeFieldNumber;
const int SkillConfigSkillInfo::kSkillPhaseListFieldNumber;
const int SkillConfigSkillInfo::kUnbrokenFieldNumber;
const int SkillConfigSkillInfo::kUseTimesFieldNumber;
const int SkillConfigSkillInfo::kCameraDataFieldNumber;
#endif  // !_MSC_VER

SkillConfigSkillInfo::SkillConfigSkillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillConfigSkillInfo::InitAsDefaultInstance() {
  cameradata_ = const_cast< ::SkillConfigCameraChangeInfo*>(&::SkillConfigCameraChangeInfo::default_instance());
}

SkillConfigSkillInfo::SkillConfigSkillInfo(const SkillConfigSkillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillConfigSkillInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  handletype_ = 0;
  skilltime_ = -1;
  focotime_ = -1;
  unbroken_ = false;
  usetimes_ = -1;
  cameradata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillConfigSkillInfo::~SkillConfigSkillInfo() {
  SharedDtor();
}

void SkillConfigSkillInfo::SharedDtor() {
  if (this != default_instance_) {
    delete cameradata_;
  }
}

void SkillConfigSkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillConfigSkillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillConfigSkillInfo_descriptor_;
}

const SkillConfigSkillInfo& SkillConfigSkillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillConfigCliRpc_2eproto();
  return *default_instance_;
}

SkillConfigSkillInfo* SkillConfigSkillInfo::default_instance_ = NULL;

SkillConfigSkillInfo* SkillConfigSkillInfo::New() const {
  return new SkillConfigSkillInfo;
}

void SkillConfigSkillInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = -1;
    handletype_ = 0;
    skilltime_ = -1;
    focotime_ = -1;
    unbroken_ = false;
    usetimes_ = -1;
    if (has_cameradata()) {
      if (cameradata_ != NULL) cameradata_->::SkillConfigCameraChangeInfo::Clear();
    }
  }
  skillphaselist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillConfigSkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 HandleType = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &handletype_)));
          set_has_handletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_SkillTime;
        break;
      }

      // optional sint32 SkillTime = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkillTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &skilltime_)));
          set_has_skilltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_FocoTime;
        break;
      }

      // optional sint32 FocoTime = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FocoTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &focotime_)));
          set_has_focotime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_SkillPhaseList;
        break;
      }

      // repeated .SkillConfigSkillPhase SkillPhaseList = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SkillPhaseList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skillphaselist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_SkillPhaseList;
        if (input->ExpectTag(64)) goto parse_Id;
        break;
      }

      // optional sint32 Id = 8 [default = -1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_Unbroken;
        break;
      }

      // optional bool Unbroken = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Unbroken:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unbroken_)));
          set_has_unbroken();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_UseTimes;
        break;
      }

      // optional sint32 UseTimes = 11 [default = -1];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UseTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &usetimes_)));
          set_has_usetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_CameraData;
        break;
      }

      // optional .SkillConfigCameraChangeInfo CameraData = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CameraData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cameradata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillConfigSkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 HandleType = 4 [default = 0];
  if (has_handletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->handletype(), output);
  }

  // optional sint32 SkillTime = 5 [default = -1];
  if (has_skilltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->skilltime(), output);
  }

  // optional sint32 FocoTime = 6 [default = -1];
  if (has_focotime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->focotime(), output);
  }

  // repeated .SkillConfigSkillPhase SkillPhaseList = 7;
  for (int i = 0; i < this->skillphaselist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->skillphaselist(i), output);
  }

  // optional sint32 Id = 8 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->id(), output);
  }

  // optional bool Unbroken = 10 [default = false];
  if (has_unbroken()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->unbroken(), output);
  }

  // optional sint32 UseTimes = 11 [default = -1];
  if (has_usetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(11, this->usetimes(), output);
  }

  // optional .SkillConfigCameraChangeInfo CameraData = 16;
  if (has_cameradata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->cameradata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillConfigSkillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 HandleType = 4 [default = 0];
  if (has_handletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->handletype(), target);
  }

  // optional sint32 SkillTime = 5 [default = -1];
  if (has_skilltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->skilltime(), target);
  }

  // optional sint32 FocoTime = 6 [default = -1];
  if (has_focotime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->focotime(), target);
  }

  // repeated .SkillConfigSkillPhase SkillPhaseList = 7;
  for (int i = 0; i < this->skillphaselist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->skillphaselist(i), target);
  }

  // optional sint32 Id = 8 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->id(), target);
  }

  // optional bool Unbroken = 10 [default = false];
  if (has_unbroken()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->unbroken(), target);
  }

  // optional sint32 UseTimes = 11 [default = -1];
  if (has_usetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(11, this->usetimes(), target);
  }

  // optional .SkillConfigCameraChangeInfo CameraData = 16;
  if (has_cameradata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->cameradata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillConfigSkillInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Id = 8 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->id());
    }

    // optional sint32 HandleType = 4 [default = 0];
    if (has_handletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->handletype());
    }

    // optional sint32 SkillTime = 5 [default = -1];
    if (has_skilltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->skilltime());
    }

    // optional sint32 FocoTime = 6 [default = -1];
    if (has_focotime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->focotime());
    }

    // optional bool Unbroken = 10 [default = false];
    if (has_unbroken()) {
      total_size += 1 + 1;
    }

    // optional sint32 UseTimes = 11 [default = -1];
    if (has_usetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->usetimes());
    }

    // optional .SkillConfigCameraChangeInfo CameraData = 16;
    if (has_cameradata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cameradata());
    }

  }
  // repeated .SkillConfigSkillPhase SkillPhaseList = 7;
  total_size += 1 * this->skillphaselist_size();
  for (int i = 0; i < this->skillphaselist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skillphaselist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillConfigSkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillConfigSkillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillConfigSkillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillConfigSkillInfo::MergeFrom(const SkillConfigSkillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillphaselist_.MergeFrom(from.skillphaselist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_handletype()) {
      set_handletype(from.handletype());
    }
    if (from.has_skilltime()) {
      set_skilltime(from.skilltime());
    }
    if (from.has_focotime()) {
      set_focotime(from.focotime());
    }
    if (from.has_unbroken()) {
      set_unbroken(from.unbroken());
    }
    if (from.has_usetimes()) {
      set_usetimes(from.usetimes());
    }
    if (from.has_cameradata()) {
      mutable_cameradata()->::SkillConfigCameraChangeInfo::MergeFrom(from.cameradata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillConfigSkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillConfigSkillInfo::CopyFrom(const SkillConfigSkillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillConfigSkillInfo::IsInitialized() const {

  return true;
}

void SkillConfigSkillInfo::Swap(SkillConfigSkillInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(handletype_, other->handletype_);
    std::swap(skilltime_, other->skilltime_);
    std::swap(focotime_, other->focotime_);
    skillphaselist_.Swap(&other->skillphaselist_);
    std::swap(unbroken_, other->unbroken_);
    std::swap(usetimes_, other->usetimes_);
    std::swap(cameradata_, other->cameradata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillConfigSkillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillConfigSkillInfo_descriptor_;
  metadata.reflection = SkillConfigSkillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillConfigSkillEventBase::kIdFieldNumber;
const int SkillConfigSkillEventBase::kEventTypeFieldNumber;
const int SkillConfigSkillEventBase::kStartFieldNumber;
const int SkillConfigSkillEventBase::kEventLengthFieldNumber;
#endif  // !_MSC_VER

SkillConfigSkillEventBase::SkillConfigSkillEventBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillConfigSkillEventBase::InitAsDefaultInstance() {
}

SkillConfigSkillEventBase::SkillConfigSkillEventBase(const SkillConfigSkillEventBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillConfigSkillEventBase::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  eventtype_ = 0;
  start_ = -1;
  eventlength_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillConfigSkillEventBase::~SkillConfigSkillEventBase() {
  SharedDtor();
}

void SkillConfigSkillEventBase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillConfigSkillEventBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillConfigSkillEventBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillConfigSkillEventBase_descriptor_;
}

const SkillConfigSkillEventBase& SkillConfigSkillEventBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillConfigCliRpc_2eproto();
  return *default_instance_;
}

SkillConfigSkillEventBase* SkillConfigSkillEventBase::default_instance_ = NULL;

SkillConfigSkillEventBase* SkillConfigSkillEventBase::New() const {
  return new SkillConfigSkillEventBase;
}

void SkillConfigSkillEventBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = -1;
    eventtype_ = 0;
    start_ = -1;
    eventlength_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillConfigSkillEventBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 EventType = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &eventtype_)));
          set_has_eventtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Start;
        break;
      }

      // optional sint32 Start = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_EventLength;
        break;
      }

      // optional sint32 EventLength = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EventLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &eventlength_)));
          set_has_eventlength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Id;
        break;
      }

      // optional sint32 Id = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillConfigSkillEventBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 EventType = 2 [default = 0];
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->eventtype(), output);
  }

  // optional sint32 Start = 3 [default = -1];
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->start(), output);
  }

  // optional sint32 EventLength = 4 [default = -1];
  if (has_eventlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->eventlength(), output);
  }

  // optional sint32 Id = 5 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillConfigSkillEventBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 EventType = 2 [default = 0];
  if (has_eventtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->eventtype(), target);
  }

  // optional sint32 Start = 3 [default = -1];
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->start(), target);
  }

  // optional sint32 EventLength = 4 [default = -1];
  if (has_eventlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->eventlength(), target);
  }

  // optional sint32 Id = 5 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillConfigSkillEventBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Id = 5 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->id());
    }

    // optional sint32 EventType = 2 [default = 0];
    if (has_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->eventtype());
    }

    // optional sint32 Start = 3 [default = -1];
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->start());
    }

    // optional sint32 EventLength = 4 [default = -1];
    if (has_eventlength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->eventlength());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillConfigSkillEventBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillConfigSkillEventBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillConfigSkillEventBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillConfigSkillEventBase::MergeFrom(const SkillConfigSkillEventBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_eventtype()) {
      set_eventtype(from.eventtype());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_eventlength()) {
      set_eventlength(from.eventlength());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillConfigSkillEventBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillConfigSkillEventBase::CopyFrom(const SkillConfigSkillEventBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillConfigSkillEventBase::IsInitialized() const {

  return true;
}

void SkillConfigSkillEventBase::Swap(SkillConfigSkillEventBase* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(eventtype_, other->eventtype_);
    std::swap(start_, other->start_);
    std::swap(eventlength_, other->eventlength_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillConfigSkillEventBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillConfigSkillEventBase_descriptor_;
  metadata.reflection = SkillConfigSkillEventBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillConfigSkillCustomEvent::kEventBaseFieldNumber;
const int SkillConfigSkillCustomEvent::kFileNameFieldNumber;
const int SkillConfigSkillCustomEvent::kModelMountPointFieldNumber;
const int SkillConfigSkillCustomEvent::kWeaponMountPointFieldNumber;
const int SkillConfigSkillCustomEvent::kEffectMountPointFieldNumber;
const int SkillConfigSkillCustomEvent::kLoopFieldNumber;
const int SkillConfigSkillCustomEvent::kWholeAnimationFieldNumber;
const int SkillConfigSkillCustomEvent::kOffsetXFieldNumber;
const int SkillConfigSkillCustomEvent::kOffsetYFieldNumber;
const int SkillConfigSkillCustomEvent::kOffsetZFieldNumber;
const int SkillConfigSkillCustomEvent::kIdFieldNumber;
const int SkillConfigSkillCustomEvent::kEffectRemoveFieldNumber;
const int SkillConfigSkillCustomEvent::kEffectRemoveTimeFieldNumber;
#endif  // !_MSC_VER

SkillConfigSkillCustomEvent::SkillConfigSkillCustomEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillConfigSkillCustomEvent::InitAsDefaultInstance() {
  eventbase_ = const_cast< ::SkillConfigSkillEventBase*>(&::SkillConfigSkillEventBase::default_instance());
}

SkillConfigSkillCustomEvent::SkillConfigSkillCustomEvent(const SkillConfigSkillCustomEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillConfigSkillCustomEvent::SharedCtor() {
  _cached_size_ = 0;
  eventbase_ = NULL;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  modelmountpoint_ = 0;
  weaponmountpoint_ = 0;
  effectmountpoint_ = 0;
  loop_ = false;
  wholeanimation_ = false;
  offsetx_ = -1;
  offsety_ = -1;
  offsetz_ = -1;
  id_ = -1;
  effectremove_ = 0;
  effectremovetime_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillConfigSkillCustomEvent::~SkillConfigSkillCustomEvent() {
  SharedDtor();
}

void SkillConfigSkillCustomEvent::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (this != default_instance_) {
    delete eventbase_;
  }
}

void SkillConfigSkillCustomEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillConfigSkillCustomEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillConfigSkillCustomEvent_descriptor_;
}

const SkillConfigSkillCustomEvent& SkillConfigSkillCustomEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillConfigCliRpc_2eproto();
  return *default_instance_;
}

SkillConfigSkillCustomEvent* SkillConfigSkillCustomEvent::default_instance_ = NULL;

SkillConfigSkillCustomEvent* SkillConfigSkillCustomEvent::New() const {
  return new SkillConfigSkillCustomEvent;
}

void SkillConfigSkillCustomEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_eventbase()) {
      if (eventbase_ != NULL) eventbase_->::SkillConfigSkillEventBase::Clear();
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    modelmountpoint_ = 0;
    weaponmountpoint_ = 0;
    effectmountpoint_ = 0;
    loop_ = false;
    wholeanimation_ = false;
    offsetx_ = -1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    offsety_ = -1;
    offsetz_ = -1;
    id_ = -1;
    effectremove_ = 0;
    effectremovetime_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillConfigSkillCustomEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string FileName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ModelMountPoint;
        break;
      }

      // optional sint32 ModelMountPoint = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ModelMountPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &modelmountpoint_)));
          set_has_modelmountpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_WeaponMountPoint;
        break;
      }

      // optional sint32 WeaponMountPoint = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponMountPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &weaponmountpoint_)));
          set_has_weaponmountpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_Loop;
        break;
      }

      // optional bool Loop = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Loop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &loop_)));
          set_has_loop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_WholeAnimation;
        break;
      }

      // optional bool WholeAnimation = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WholeAnimation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wholeanimation_)));
          set_has_wholeanimation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_EffectMountPoint;
        break;
      }

      // optional sint32 EffectMountPoint = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EffectMountPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &effectmountpoint_)));
          set_has_effectmountpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_OffsetX;
        break;
      }

      // optional float OffsetX = 14 [default = -1];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_OffsetX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offsetx_)));
          set_has_offsetx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_OffsetY;
        break;
      }

      // optional float OffsetY = 15 [default = -1];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_OffsetY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offsety_)));
          set_has_offsety();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_OffsetZ;
        break;
      }

      // optional float OffsetZ = 16 [default = -1];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_OffsetZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offsetz_)));
          set_has_offsetz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_EventBase;
        break;
      }

      // optional .SkillConfigSkillEventBase EventBase = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EventBase:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eventbase()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_Id;
        break;
      }

      // optional sint32 Id = 18 [default = -1];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_EffectRemoveTime;
        break;
      }

      // optional sint32 EffectRemoveTime = 20 [default = -1];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EffectRemoveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &effectremovetime_)));
          set_has_effectremovetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_EffectRemove;
        break;
      }

      // optional sint32 EffectRemove = 21 [default = 0];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EffectRemove:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &effectremove_)));
          set_has_effectremove();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillConfigSkillCustomEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string FileName = 6;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->filename(), output);
  }

  // optional sint32 ModelMountPoint = 7 [default = 0];
  if (has_modelmountpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->modelmountpoint(), output);
  }

  // optional sint32 WeaponMountPoint = 8 [default = 0];
  if (has_weaponmountpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->weaponmountpoint(), output);
  }

  // optional bool Loop = 9 [default = false];
  if (has_loop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->loop(), output);
  }

  // optional bool WholeAnimation = 10 [default = false];
  if (has_wholeanimation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->wholeanimation(), output);
  }

  // optional sint32 EffectMountPoint = 12 [default = 0];
  if (has_effectmountpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(12, this->effectmountpoint(), output);
  }

  // optional float OffsetX = 14 [default = -1];
  if (has_offsetx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->offsetx(), output);
  }

  // optional float OffsetY = 15 [default = -1];
  if (has_offsety()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->offsety(), output);
  }

  // optional float OffsetZ = 16 [default = -1];
  if (has_offsetz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->offsetz(), output);
  }

  // optional .SkillConfigSkillEventBase EventBase = 17;
  if (has_eventbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->eventbase(), output);
  }

  // optional sint32 Id = 18 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(18, this->id(), output);
  }

  // optional sint32 EffectRemoveTime = 20 [default = -1];
  if (has_effectremovetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(20, this->effectremovetime(), output);
  }

  // optional sint32 EffectRemove = 21 [default = 0];
  if (has_effectremove()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(21, this->effectremove(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillConfigSkillCustomEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string FileName = 6;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->filename(), target);
  }

  // optional sint32 ModelMountPoint = 7 [default = 0];
  if (has_modelmountpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->modelmountpoint(), target);
  }

  // optional sint32 WeaponMountPoint = 8 [default = 0];
  if (has_weaponmountpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->weaponmountpoint(), target);
  }

  // optional bool Loop = 9 [default = false];
  if (has_loop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->loop(), target);
  }

  // optional bool WholeAnimation = 10 [default = false];
  if (has_wholeanimation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->wholeanimation(), target);
  }

  // optional sint32 EffectMountPoint = 12 [default = 0];
  if (has_effectmountpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(12, this->effectmountpoint(), target);
  }

  // optional float OffsetX = 14 [default = -1];
  if (has_offsetx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->offsetx(), target);
  }

  // optional float OffsetY = 15 [default = -1];
  if (has_offsety()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->offsety(), target);
  }

  // optional float OffsetZ = 16 [default = -1];
  if (has_offsetz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->offsetz(), target);
  }

  // optional .SkillConfigSkillEventBase EventBase = 17;
  if (has_eventbase()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->eventbase(), target);
  }

  // optional sint32 Id = 18 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(18, this->id(), target);
  }

  // optional sint32 EffectRemoveTime = 20 [default = -1];
  if (has_effectremovetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(20, this->effectremovetime(), target);
  }

  // optional sint32 EffectRemove = 21 [default = 0];
  if (has_effectremove()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(21, this->effectremove(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillConfigSkillCustomEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SkillConfigSkillEventBase EventBase = 17;
    if (has_eventbase()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eventbase());
    }

    // optional string FileName = 6;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional sint32 ModelMountPoint = 7 [default = 0];
    if (has_modelmountpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->modelmountpoint());
    }

    // optional sint32 WeaponMountPoint = 8 [default = 0];
    if (has_weaponmountpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->weaponmountpoint());
    }

    // optional sint32 EffectMountPoint = 12 [default = 0];
    if (has_effectmountpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->effectmountpoint());
    }

    // optional bool Loop = 9 [default = false];
    if (has_loop()) {
      total_size += 1 + 1;
    }

    // optional bool WholeAnimation = 10 [default = false];
    if (has_wholeanimation()) {
      total_size += 1 + 1;
    }

    // optional float OffsetX = 14 [default = -1];
    if (has_offsetx()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float OffsetY = 15 [default = -1];
    if (has_offsety()) {
      total_size += 1 + 4;
    }

    // optional float OffsetZ = 16 [default = -1];
    if (has_offsetz()) {
      total_size += 2 + 4;
    }

    // optional sint32 Id = 18 [default = -1];
    if (has_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->id());
    }

    // optional sint32 EffectRemove = 21 [default = 0];
    if (has_effectremove()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->effectremove());
    }

    // optional sint32 EffectRemoveTime = 20 [default = -1];
    if (has_effectremovetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->effectremovetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillConfigSkillCustomEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillConfigSkillCustomEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillConfigSkillCustomEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillConfigSkillCustomEvent::MergeFrom(const SkillConfigSkillCustomEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventbase()) {
      mutable_eventbase()->::SkillConfigSkillEventBase::MergeFrom(from.eventbase());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_modelmountpoint()) {
      set_modelmountpoint(from.modelmountpoint());
    }
    if (from.has_weaponmountpoint()) {
      set_weaponmountpoint(from.weaponmountpoint());
    }
    if (from.has_effectmountpoint()) {
      set_effectmountpoint(from.effectmountpoint());
    }
    if (from.has_loop()) {
      set_loop(from.loop());
    }
    if (from.has_wholeanimation()) {
      set_wholeanimation(from.wholeanimation());
    }
    if (from.has_offsetx()) {
      set_offsetx(from.offsetx());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_offsety()) {
      set_offsety(from.offsety());
    }
    if (from.has_offsetz()) {
      set_offsetz(from.offsetz());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_effectremove()) {
      set_effectremove(from.effectremove());
    }
    if (from.has_effectremovetime()) {
      set_effectremovetime(from.effectremovetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillConfigSkillCustomEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillConfigSkillCustomEvent::CopyFrom(const SkillConfigSkillCustomEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillConfigSkillCustomEvent::IsInitialized() const {

  return true;
}

void SkillConfigSkillCustomEvent::Swap(SkillConfigSkillCustomEvent* other) {
  if (other != this) {
    std::swap(eventbase_, other->eventbase_);
    std::swap(filename_, other->filename_);
    std::swap(modelmountpoint_, other->modelmountpoint_);
    std::swap(weaponmountpoint_, other->weaponmountpoint_);
    std::swap(effectmountpoint_, other->effectmountpoint_);
    std::swap(loop_, other->loop_);
    std::swap(wholeanimation_, other->wholeanimation_);
    std::swap(offsetx_, other->offsetx_);
    std::swap(offsety_, other->offsety_);
    std::swap(offsetz_, other->offsetz_);
    std::swap(id_, other->id_);
    std::swap(effectremove_, other->effectremove_);
    std::swap(effectremovetime_, other->effectremovetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillConfigSkillCustomEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillConfigSkillCustomEvent_descriptor_;
  metadata.reflection = SkillConfigSkillCustomEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillConfigBulletTrajectoryEvent::kEventBaseFieldNumber;
const int SkillConfigBulletTrajectoryEvent::kIdFieldNumber;
const int SkillConfigBulletTrajectoryEvent::kModelMountPointFieldNumber;
const int SkillConfigBulletTrajectoryEvent::kWeaponMountPointFieldNumber;
const int SkillConfigBulletTrajectoryEvent::kOffsetXFieldNumber;
const int SkillConfigBulletTrajectoryEvent::kOffsetYFieldNumber;
const int SkillConfigBulletTrajectoryEvent::kOffsetZFieldNumber;
#endif  // !_MSC_VER

SkillConfigBulletTrajectoryEvent::SkillConfigBulletTrajectoryEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillConfigBulletTrajectoryEvent::InitAsDefaultInstance() {
  eventbase_ = const_cast< ::SkillConfigSkillEventBase*>(&::SkillConfigSkillEventBase::default_instance());
}

SkillConfigBulletTrajectoryEvent::SkillConfigBulletTrajectoryEvent(const SkillConfigBulletTrajectoryEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillConfigBulletTrajectoryEvent::SharedCtor() {
  _cached_size_ = 0;
  eventbase_ = NULL;
  id_ = -1;
  modelmountpoint_ = 0;
  weaponmountpoint_ = 0;
  offsetx_ = -1;
  offsety_ = -1;
  offsetz_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillConfigBulletTrajectoryEvent::~SkillConfigBulletTrajectoryEvent() {
  SharedDtor();
}

void SkillConfigBulletTrajectoryEvent::SharedDtor() {
  if (this != default_instance_) {
    delete eventbase_;
  }
}

void SkillConfigBulletTrajectoryEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillConfigBulletTrajectoryEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillConfigBulletTrajectoryEvent_descriptor_;
}

const SkillConfigBulletTrajectoryEvent& SkillConfigBulletTrajectoryEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillConfigCliRpc_2eproto();
  return *default_instance_;
}

SkillConfigBulletTrajectoryEvent* SkillConfigBulletTrajectoryEvent::default_instance_ = NULL;

SkillConfigBulletTrajectoryEvent* SkillConfigBulletTrajectoryEvent::New() const {
  return new SkillConfigBulletTrajectoryEvent;
}

void SkillConfigBulletTrajectoryEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_eventbase()) {
      if (eventbase_ != NULL) eventbase_->::SkillConfigSkillEventBase::Clear();
    }
    id_ = -1;
    modelmountpoint_ = 0;
    weaponmountpoint_ = 0;
    offsetx_ = -1;
    offsety_ = -1;
    offsetz_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillConfigBulletTrajectoryEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SkillConfigSkillEventBase EventBase = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eventbase()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Id;
        break;
      }

      // optional sint32 Id = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ModelMountPoint;
        break;
      }

      // optional sint32 ModelMountPoint = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ModelMountPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &modelmountpoint_)));
          set_has_modelmountpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_WeaponMountPoint;
        break;
      }

      // optional sint32 WeaponMountPoint = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponMountPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &weaponmountpoint_)));
          set_has_weaponmountpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_OffsetX;
        break;
      }

      // optional float OffsetX = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_OffsetX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offsetx_)));
          set_has_offsetx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_OffsetY;
        break;
      }

      // optional float OffsetY = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_OffsetY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offsety_)));
          set_has_offsety();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_OffsetZ;
        break;
      }

      // optional float OffsetZ = 8 [default = -1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_OffsetZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offsetz_)));
          set_has_offsetz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillConfigBulletTrajectoryEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SkillConfigSkillEventBase EventBase = 1;
  if (has_eventbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->eventbase(), output);
  }

  // optional sint32 Id = 2 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->id(), output);
  }

  // optional sint32 ModelMountPoint = 4 [default = 0];
  if (has_modelmountpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->modelmountpoint(), output);
  }

  // optional sint32 WeaponMountPoint = 5 [default = 0];
  if (has_weaponmountpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->weaponmountpoint(), output);
  }

  // optional float OffsetX = 6 [default = -1];
  if (has_offsetx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->offsetx(), output);
  }

  // optional float OffsetY = 7 [default = -1];
  if (has_offsety()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->offsety(), output);
  }

  // optional float OffsetZ = 8 [default = -1];
  if (has_offsetz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->offsetz(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillConfigBulletTrajectoryEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SkillConfigSkillEventBase EventBase = 1;
  if (has_eventbase()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->eventbase(), target);
  }

  // optional sint32 Id = 2 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->id(), target);
  }

  // optional sint32 ModelMountPoint = 4 [default = 0];
  if (has_modelmountpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->modelmountpoint(), target);
  }

  // optional sint32 WeaponMountPoint = 5 [default = 0];
  if (has_weaponmountpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->weaponmountpoint(), target);
  }

  // optional float OffsetX = 6 [default = -1];
  if (has_offsetx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->offsetx(), target);
  }

  // optional float OffsetY = 7 [default = -1];
  if (has_offsety()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->offsety(), target);
  }

  // optional float OffsetZ = 8 [default = -1];
  if (has_offsetz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->offsetz(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillConfigBulletTrajectoryEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SkillConfigSkillEventBase EventBase = 1;
    if (has_eventbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eventbase());
    }

    // optional sint32 Id = 2 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->id());
    }

    // optional sint32 ModelMountPoint = 4 [default = 0];
    if (has_modelmountpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->modelmountpoint());
    }

    // optional sint32 WeaponMountPoint = 5 [default = 0];
    if (has_weaponmountpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->weaponmountpoint());
    }

    // optional float OffsetX = 6 [default = -1];
    if (has_offsetx()) {
      total_size += 1 + 4;
    }

    // optional float OffsetY = 7 [default = -1];
    if (has_offsety()) {
      total_size += 1 + 4;
    }

    // optional float OffsetZ = 8 [default = -1];
    if (has_offsetz()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillConfigBulletTrajectoryEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillConfigBulletTrajectoryEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillConfigBulletTrajectoryEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillConfigBulletTrajectoryEvent::MergeFrom(const SkillConfigBulletTrajectoryEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventbase()) {
      mutable_eventbase()->::SkillConfigSkillEventBase::MergeFrom(from.eventbase());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_modelmountpoint()) {
      set_modelmountpoint(from.modelmountpoint());
    }
    if (from.has_weaponmountpoint()) {
      set_weaponmountpoint(from.weaponmountpoint());
    }
    if (from.has_offsetx()) {
      set_offsetx(from.offsetx());
    }
    if (from.has_offsety()) {
      set_offsety(from.offsety());
    }
    if (from.has_offsetz()) {
      set_offsetz(from.offsetz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillConfigBulletTrajectoryEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillConfigBulletTrajectoryEvent::CopyFrom(const SkillConfigBulletTrajectoryEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillConfigBulletTrajectoryEvent::IsInitialized() const {

  return true;
}

void SkillConfigBulletTrajectoryEvent::Swap(SkillConfigBulletTrajectoryEvent* other) {
  if (other != this) {
    std::swap(eventbase_, other->eventbase_);
    std::swap(id_, other->id_);
    std::swap(modelmountpoint_, other->modelmountpoint_);
    std::swap(weaponmountpoint_, other->weaponmountpoint_);
    std::swap(offsetx_, other->offsetx_);
    std::swap(offsety_, other->offsety_);
    std::swap(offsetz_, other->offsetz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillConfigBulletTrajectoryEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillConfigBulletTrajectoryEvent_descriptor_;
  metadata.reflection = SkillConfigBulletTrajectoryEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillConfigCameraChangeInfo::kCameraChangeStartTimeFieldNumber;
const int SkillConfigCameraChangeInfo::kCameraFieldViewFieldNumber;
const int SkillConfigCameraChangeInfo::kCameraChangeEndTimeFieldNumber;
const int SkillConfigCameraChangeInfo::kCameraRecoverTimeFieldNumber;
#endif  // !_MSC_VER

SkillConfigCameraChangeInfo::SkillConfigCameraChangeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillConfigCameraChangeInfo::InitAsDefaultInstance() {
}

SkillConfigCameraChangeInfo::SkillConfigCameraChangeInfo(const SkillConfigCameraChangeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillConfigCameraChangeInfo::SharedCtor() {
  _cached_size_ = 0;
  camerachangestarttime_ = -1;
  camerafieldview_ = -1;
  camerachangeendtime_ = -1;
  camerarecovertime_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillConfigCameraChangeInfo::~SkillConfigCameraChangeInfo() {
  SharedDtor();
}

void SkillConfigCameraChangeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillConfigCameraChangeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillConfigCameraChangeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillConfigCameraChangeInfo_descriptor_;
}

const SkillConfigCameraChangeInfo& SkillConfigCameraChangeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillConfigCliRpc_2eproto();
  return *default_instance_;
}

SkillConfigCameraChangeInfo* SkillConfigCameraChangeInfo::default_instance_ = NULL;

SkillConfigCameraChangeInfo* SkillConfigCameraChangeInfo::New() const {
  return new SkillConfigCameraChangeInfo;
}

void SkillConfigCameraChangeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    camerachangestarttime_ = -1;
    camerafieldview_ = -1;
    camerachangeendtime_ = -1;
    camerarecovertime_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillConfigCameraChangeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 CameraChangeStartTime = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &camerachangestarttime_)));
          set_has_camerachangestarttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_CameraFieldView;
        break;
      }

      // optional float CameraFieldView = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_CameraFieldView:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &camerafieldview_)));
          set_has_camerafieldview();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_CameraChangeEndTime;
        break;
      }

      // optional sint32 CameraChangeEndTime = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CameraChangeEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &camerachangeendtime_)));
          set_has_camerachangeendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_CameraRecoverTime;
        break;
      }

      // optional sint32 CameraRecoverTime = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CameraRecoverTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &camerarecovertime_)));
          set_has_camerarecovertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillConfigCameraChangeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 CameraChangeStartTime = 1 [default = -1];
  if (has_camerachangestarttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->camerachangestarttime(), output);
  }

  // optional float CameraFieldView = 2 [default = -1];
  if (has_camerafieldview()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->camerafieldview(), output);
  }

  // optional sint32 CameraChangeEndTime = 3 [default = -1];
  if (has_camerachangeendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->camerachangeendtime(), output);
  }

  // optional sint32 CameraRecoverTime = 4 [default = -1];
  if (has_camerarecovertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->camerarecovertime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillConfigCameraChangeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 CameraChangeStartTime = 1 [default = -1];
  if (has_camerachangestarttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->camerachangestarttime(), target);
  }

  // optional float CameraFieldView = 2 [default = -1];
  if (has_camerafieldview()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->camerafieldview(), target);
  }

  // optional sint32 CameraChangeEndTime = 3 [default = -1];
  if (has_camerachangeendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->camerachangeendtime(), target);
  }

  // optional sint32 CameraRecoverTime = 4 [default = -1];
  if (has_camerarecovertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->camerarecovertime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillConfigCameraChangeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 CameraChangeStartTime = 1 [default = -1];
    if (has_camerachangestarttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->camerachangestarttime());
    }

    // optional float CameraFieldView = 2 [default = -1];
    if (has_camerafieldview()) {
      total_size += 1 + 4;
    }

    // optional sint32 CameraChangeEndTime = 3 [default = -1];
    if (has_camerachangeendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->camerachangeendtime());
    }

    // optional sint32 CameraRecoverTime = 4 [default = -1];
    if (has_camerarecovertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->camerarecovertime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillConfigCameraChangeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillConfigCameraChangeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillConfigCameraChangeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillConfigCameraChangeInfo::MergeFrom(const SkillConfigCameraChangeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_camerachangestarttime()) {
      set_camerachangestarttime(from.camerachangestarttime());
    }
    if (from.has_camerafieldview()) {
      set_camerafieldview(from.camerafieldview());
    }
    if (from.has_camerachangeendtime()) {
      set_camerachangeendtime(from.camerachangeendtime());
    }
    if (from.has_camerarecovertime()) {
      set_camerarecovertime(from.camerarecovertime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillConfigCameraChangeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillConfigCameraChangeInfo::CopyFrom(const SkillConfigCameraChangeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillConfigCameraChangeInfo::IsInitialized() const {

  return true;
}

void SkillConfigCameraChangeInfo::Swap(SkillConfigCameraChangeInfo* other) {
  if (other != this) {
    std::swap(camerachangestarttime_, other->camerachangestarttime_);
    std::swap(camerafieldview_, other->camerafieldview_);
    std::swap(camerachangeendtime_, other->camerachangeendtime_);
    std::swap(camerarecovertime_, other->camerarecovertime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillConfigCameraChangeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillConfigCameraChangeInfo_descriptor_;
  metadata.reflection = SkillConfigCameraChangeInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
