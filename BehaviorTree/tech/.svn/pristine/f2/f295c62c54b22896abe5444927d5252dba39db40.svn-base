// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TrajectoryCliRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TrajectoryCliRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* TrajectoryTrajectory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrajectoryTrajectory_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrajectoryBulletGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrajectoryBulletGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrajectoryBullet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrajectoryBullet_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrajectoryBulletTrajectory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrajectoryBulletTrajectory_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrajectoryRpcSyncNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrajectoryRpcSyncNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrajectoryBulletChild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrajectoryBulletChild_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TrajectoryCliRpc_2eproto() {
  protobuf_AddDesc_TrajectoryCliRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TrajectoryCliRpc.proto");
  GOOGLE_CHECK(file != NULL);
  TrajectoryTrajectory_descriptor_ = file->message_type(0);
  static const int TrajectoryTrajectory_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, trajectorytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, tracktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, raycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, circlecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, circlebulletcountlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, circleanglelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, circlenooklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, forwarddistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, random_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, horizontaloffsetangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, spaceworld_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, verticaloffsetangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, scatteringradius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, expand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, scatteringsync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, areahorizontalanglelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, areaverticalanglelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, areaoddslist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, bulletgrouplist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, bulletlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, parentbulletid_),
  };
  TrajectoryTrajectory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrajectoryTrajectory_descriptor_,
      TrajectoryTrajectory::default_instance_,
      TrajectoryTrajectory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrajectoryTrajectory));
  TrajectoryBulletGroup_descriptor_ = file->message_type(1);
  static const int TrajectoryBulletGroup_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletGroup, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletGroup, bulletshottype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletGroup, shottimeprogression_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletGroup, shottimeprogressionvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletGroup, velocitycorrection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletGroup, velocitycorrectionvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletGroup, bulletcount_),
  };
  TrajectoryBulletGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrajectoryBulletGroup_descriptor_,
      TrajectoryBulletGroup::default_instance_,
      TrajectoryBulletGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrajectoryBulletGroup));
  TrajectoryBullet_descriptor_ = file->message_type(2);
  static const int TrajectoryBullet_offsets_[53] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, sortindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, bulletid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, tracktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, shottime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, randomradius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, bulletmodelname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, bulletscalemin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, bulletscalemax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, velocityrandom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, velocitymin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, velocitymax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, mass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, linemovetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, linecoefficient1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, linecoefficient2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, velocitycoefficient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, bullettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, collisionsprite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, collisionscene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, raydamagefirst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, raytimecycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, raydamageradius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, callnpcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, lifetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, takedamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, bulletdamagerangetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, bulletdamagerangeradius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, bulletdamageangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, verticallinebegin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, verticallineend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, spraygroundshit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, spraygroundscalemin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, spraygroundscalemax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, spraywallshit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, spraywallscalemin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, spraywallscalemax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, createchildtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, childarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, modelrotate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, rotatex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, rotatey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, rotatez_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, rotatespeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, clockwise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, rotatemoveforward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, hangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, vangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, groundbounce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, wallbounce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, dampbounce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, bouncetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, bouncevelocity_),
  };
  TrajectoryBullet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrajectoryBullet_descriptor_,
      TrajectoryBullet::default_instance_,
      TrajectoryBullet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrajectoryBullet));
  TrajectoryBulletTrajectory_descriptor_ = file->message_type(3);
  static const int TrajectoryBulletTrajectory_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletTrajectory, timelength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletTrajectory, trajectorylist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletTrajectory, id_),
  };
  TrajectoryBulletTrajectory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrajectoryBulletTrajectory_descriptor_,
      TrajectoryBulletTrajectory::default_instance_,
      TrajectoryBulletTrajectory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletTrajectory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletTrajectory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrajectoryBulletTrajectory));
  TrajectoryRpcSyncNotify_descriptor_ = file->message_type(4);
  static const int TrajectoryRpcSyncNotify_offsets_[1] = {
  };
  TrajectoryRpcSyncNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrajectoryRpcSyncNotify_descriptor_,
      TrajectoryRpcSyncNotify::default_instance_,
      TrajectoryRpcSyncNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryRpcSyncNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryRpcSyncNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrajectoryRpcSyncNotify));
  TrajectoryBulletChild_descriptor_ = file->message_type(5);
  static const int TrajectoryBulletChild_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletChild, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletChild, shottimetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletChild, isfirst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletChild, timemininterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletChild, timemaxinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletChild, childmaxcount_),
  };
  TrajectoryBulletChild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrajectoryBulletChild_descriptor_,
      TrajectoryBulletChild::default_instance_,
      TrajectoryBulletChild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletChild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletChild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrajectoryBulletChild));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TrajectoryCliRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrajectoryTrajectory_descriptor_, &TrajectoryTrajectory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrajectoryBulletGroup_descriptor_, &TrajectoryBulletGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrajectoryBullet_descriptor_, &TrajectoryBullet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrajectoryBulletTrajectory_descriptor_, &TrajectoryBulletTrajectory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrajectoryRpcSyncNotify_descriptor_, &TrajectoryRpcSyncNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrajectoryBulletChild_descriptor_, &TrajectoryBulletChild::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TrajectoryCliRpc_2eproto() {
  delete TrajectoryTrajectory::default_instance_;
  delete TrajectoryTrajectory_reflection_;
  delete TrajectoryBulletGroup::default_instance_;
  delete TrajectoryBulletGroup_reflection_;
  delete TrajectoryBullet::default_instance_;
  delete TrajectoryBullet_reflection_;
  delete TrajectoryBulletTrajectory::default_instance_;
  delete TrajectoryBulletTrajectory_reflection_;
  delete TrajectoryRpcSyncNotify::default_instance_;
  delete TrajectoryRpcSyncNotify_reflection_;
  delete TrajectoryBulletChild::default_instance_;
  delete TrajectoryBulletChild_reflection_;
}

void protobuf_AddDesc_TrajectoryCliRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026TrajectoryCliRpc.proto\032\022PublicStruct.p"
    "roto\"\376\004\n\024TrajectoryTrajectory\022\016\n\002Id\030\001 \001("
    "\021:\002-1\022\031\n\016TrajectoryType\030\032 \001(\021:\0011\022\024\n\tTrac"
    "kType\030\026 \001(\021:\0010\022\024\n\010RayCount\030\003 \001(\021:\002-1\022\027\n\013"
    "CircleCount\030\005 \001(\021:\002-1\022\035\n\025CircleBulletCou"
    "ntList\030\006 \003(\021\022\027\n\017CircleAngleList\030\007 \003(\002\022\026\n"
    "\016CircleNookList\030\025 \003(\002\022\033\n\017ForwardDistance"
    "\030\010 \001(\002:\002-1\022\022\n\006Random\030\t \001(\002:\002-1\022!\n\025Horizo"
    "ntalOffsetAngle\030\n \001(\002:\002-1\022\031\n\nSpaceWorld\030"
    "\027 \001(\010:\005false\022\037\n\023VerticalOffsetAngle\030\013 \001("
    "\002:\002-1\022\033\n\020ScatteringRadius\030\031 \001(\002:\0010\022\021\n\006Ex"
    "pand\030\016 \001(\002:\0011\022\034\n\016ScatteringSync\030\030 \001(\010:\004t"
    "rue\022\037\n\027AreaHorizontalAngleList\030\017 \003(\002\022\035\n\025"
    "AreaVerticalAngleList\030\020 \003(\002\022\024\n\014AreaOddsL"
    "ist\030\021 \003(\002\022/\n\017BulletGroupList\030\022 \003(\0132\026.Tra"
    "jectoryBulletGroup\022%\n\nBulletList\030\023 \003(\0132\021"
    ".TrajectoryBullet\022\032\n\016ParentBulletId\030\024 \001("
    "\021:\002-1\"\352\001\n\025TrajectoryBulletGroup\022\023\n\007Group"
    "Id\030\001 \001(\021:\002-1\022\031\n\016BulletShotType\030\002 \001(\021:\0010\022"
    "\036\n\023ShotTimeProgression\030\003 \001(\021:\0010\022$\n\030ShotT"
    "imeProgressionValue\030\004 \001(\002:\002-1\022\035\n\022Velocit"
    "yCorrection\030\005 \001(\021:\0010\022#\n\027VelocityCorrecti"
    "onValue\030\006 \001(\002:\002-1\022\027\n\013BulletCount\030\007 \001(\021:\002"
    "-1\"\241\013\n\020TrajectoryBullet\022\025\n\tSortIndex\0308 \001"
    "(\021:\002-1\022\024\n\010BulletId\030\001 \001(\021:\002-1\022\023\n\007GroupId\030"
    "\002 \001(\021:\002-1\022\025\n\tTrackType\030@ \001(\021:\002-1\022\024\n\010Shot"
    "Time\0303 \001(\021:\002-1\022\030\n\014RandomRadius\030\n \001(\002:\002-1"
    "\022\027\n\017BulletModelName\030\013 \001(\t\022\031\n\016BulletScale"
    "Min\030G \001(\002:\0011\022\031\n\016BulletScaleMax\030H \001(\002:\0011\022"
    "\035\n\016VelocityRandom\030\014 \001(\010:\005false\022\027\n\013Veloci"
    "tyMin\030\r \001(\002:\002-1\022\027\n\013VelocityMax\030\016 \001(\002:\002-1"
    "\022\020\n\004Mass\030\017 \001(\002:\002-1\022\030\n\014LineMoveTime\0305 \001(\021"
    ":\002-1\022\034\n\020LineCoefficient1\0306 \001(\002:\002-1\022\034\n\020Li"
    "neCoefficient2\0307 \001(\002:\002-1\022\037\n\023VelocityCoef"
    "ficient\030\020 \001(\002:\002-1\022\025\n\nBulletType\030\021 \001(\021:\0010"
    "\022\032\n\017CollisionSprite\030I \001(\021:\0010\022\031\n\016Collisio"
    "nScene\030K \001(\021:\0010\022\032\n\016RayDamageFirst\030\024 \001(\002:"
    "\002-1\022\030\n\014RayTimeCycle\030\025 \001(\021:\002-1\022\033\n\017RayDama"
    "geRadius\030C \001(\002:\002-1\022\025\n\tCallNpcId\030\026 \001(\021:\002-"
    "1\022\024\n\010LifeTime\030% \001(\021:\002-1\022\031\n\nTakeDamage\030\' "
    "\001(\010:\005false\022 \n\025BulletDamageRangeType\030( \001("
    "\021:\0010\022#\n\027BulletDamageRangeRadius\030) \001(\002:\002-"
    "1\022\035\n\021BulletDamageAngle\030* \001(\002:\002-1\022\035\n\021Vert"
    "icalLineBegin\0309 \001(\002:\002-1\022\033\n\017VerticalLineE"
    "nd\030: \001(\002:\002-1\022\033\n\017SprayGroundShit\030Q \001(\021:\002-"
    "1\022\036\n\023SprayGroundScaleMin\030, \001(\002:\0011\022\036\n\023Spr"
    "ayGroundScaleMax\030- \001(\002:\0011\022\031\n\rSprayWallSh"
    "it\030R \001(\021:\002-1\022\034\n\021SprayWallScaleMin\030/ \001(\002:"
    "\0011\022\034\n\021SprayWallScaleMax\0300 \001(\002:\0011\022\033\n\017Crea"
    "teChildTime\030D \001(\021:\002-1\022(\n\010ChildArr\0304 \003(\0132"
    "\026.TrajectoryBulletChild\022\032\n\013ModelRotate\030;"
    " \001(\010:\005false\022\022\n\007RotateX\030< \001(\002:\0010\022\022\n\007Rotat"
    "eY\030= \001(\002:\0010\022\022\n\007RotateZ\030> \001(\002:\0010\022\026\n\013Rotat"
    "eSpeed\030\? \001(\002:\0010\022\030\n\tClockwise\030S \001(\010:\005fals"
    "e\022 \n\021RotateMoveForward\030B \001(\010:\005false\022\021\n\006H"
    "Angle\030E \001(\002:\0010\022\021\n\006VAngle\030F \001(\002:\0010\022\033\n\014Gro"
    "undBounce\030L \001(\010:\005false\022\031\n\nWallBounce\030M \001"
    "(\010:\005false\022\026\n\nDampBounce\030N \001(\002:\002-1\022\027\n\013Bou"
    "nceTimes\030O \001(\021:\002-1\022\032\n\016BounceVelocity\030P \001"
    "(\002:\002-1\"s\n\032TrajectoryBulletTrajectory\022\026\n\n"
    "TimeLength\030\002 \001(\021:\002-1\022-\n\016TrajectoryList\030\001"
    " \003(\0132\025.TrajectoryTrajectory\022\016\n\002Id\030\004 \001(\021:"
    "\002-1\"\031\n\027TrajectoryRpcSyncNotify\"\255\001\n\025Traje"
    "ctoryBulletChild\022\016\n\002Id\030\001 \001(\021:\002-1\022\027\n\014Shot"
    "TimeType\030\002 \001(\021:\0010\022\026\n\007IsFirst\030\003 \001(\010:\005fals"
    "e\022\033\n\017TimeMinInterval\030\006 \001(\021:\002-1\022\033\n\017TimeMa"
    "xInterval\030\005 \001(\021:\002-1\022\031\n\rChildMaxCount\030\010 \001"
    "(\021:\002-1", 2686);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TrajectoryCliRpc.proto", &protobuf_RegisterTypes);
  TrajectoryTrajectory::default_instance_ = new TrajectoryTrajectory();
  TrajectoryBulletGroup::default_instance_ = new TrajectoryBulletGroup();
  TrajectoryBullet::default_instance_ = new TrajectoryBullet();
  TrajectoryBulletTrajectory::default_instance_ = new TrajectoryBulletTrajectory();
  TrajectoryRpcSyncNotify::default_instance_ = new TrajectoryRpcSyncNotify();
  TrajectoryBulletChild::default_instance_ = new TrajectoryBulletChild();
  TrajectoryTrajectory::default_instance_->InitAsDefaultInstance();
  TrajectoryBulletGroup::default_instance_->InitAsDefaultInstance();
  TrajectoryBullet::default_instance_->InitAsDefaultInstance();
  TrajectoryBulletTrajectory::default_instance_->InitAsDefaultInstance();
  TrajectoryRpcSyncNotify::default_instance_->InitAsDefaultInstance();
  TrajectoryBulletChild::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TrajectoryCliRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TrajectoryCliRpc_2eproto {
  StaticDescriptorInitializer_TrajectoryCliRpc_2eproto() {
    protobuf_AddDesc_TrajectoryCliRpc_2eproto();
  }
} static_descriptor_initializer_TrajectoryCliRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TrajectoryTrajectory::kIdFieldNumber;
const int TrajectoryTrajectory::kTrajectoryTypeFieldNumber;
const int TrajectoryTrajectory::kTrackTypeFieldNumber;
const int TrajectoryTrajectory::kRayCountFieldNumber;
const int TrajectoryTrajectory::kCircleCountFieldNumber;
const int TrajectoryTrajectory::kCircleBulletCountListFieldNumber;
const int TrajectoryTrajectory::kCircleAngleListFieldNumber;
const int TrajectoryTrajectory::kCircleNookListFieldNumber;
const int TrajectoryTrajectory::kForwardDistanceFieldNumber;
const int TrajectoryTrajectory::kRandomFieldNumber;
const int TrajectoryTrajectory::kHorizontalOffsetAngleFieldNumber;
const int TrajectoryTrajectory::kSpaceWorldFieldNumber;
const int TrajectoryTrajectory::kVerticalOffsetAngleFieldNumber;
const int TrajectoryTrajectory::kScatteringRadiusFieldNumber;
const int TrajectoryTrajectory::kExpandFieldNumber;
const int TrajectoryTrajectory::kScatteringSyncFieldNumber;
const int TrajectoryTrajectory::kAreaHorizontalAngleListFieldNumber;
const int TrajectoryTrajectory::kAreaVerticalAngleListFieldNumber;
const int TrajectoryTrajectory::kAreaOddsListFieldNumber;
const int TrajectoryTrajectory::kBulletGroupListFieldNumber;
const int TrajectoryTrajectory::kBulletListFieldNumber;
const int TrajectoryTrajectory::kParentBulletIdFieldNumber;
#endif  // !_MSC_VER

TrajectoryTrajectory::TrajectoryTrajectory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrajectoryTrajectory::InitAsDefaultInstance() {
}

TrajectoryTrajectory::TrajectoryTrajectory(const TrajectoryTrajectory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrajectoryTrajectory::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  trajectorytype_ = 1;
  tracktype_ = 0;
  raycount_ = -1;
  circlecount_ = -1;
  forwarddistance_ = -1;
  random_ = -1;
  horizontaloffsetangle_ = -1;
  spaceworld_ = false;
  verticaloffsetangle_ = -1;
  scatteringradius_ = 0;
  expand_ = 1;
  scatteringsync_ = true;
  parentbulletid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrajectoryTrajectory::~TrajectoryTrajectory() {
  SharedDtor();
}

void TrajectoryTrajectory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrajectoryTrajectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryTrajectory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrajectoryTrajectory_descriptor_;
}

const TrajectoryTrajectory& TrajectoryTrajectory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TrajectoryCliRpc_2eproto();
  return *default_instance_;
}

TrajectoryTrajectory* TrajectoryTrajectory::default_instance_ = NULL;

TrajectoryTrajectory* TrajectoryTrajectory::New() const {
  return new TrajectoryTrajectory;
}

void TrajectoryTrajectory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = -1;
    trajectorytype_ = 1;
    tracktype_ = 0;
    raycount_ = -1;
    circlecount_ = -1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    forwarddistance_ = -1;
    random_ = -1;
    horizontaloffsetangle_ = -1;
    spaceworld_ = false;
    verticaloffsetangle_ = -1;
    scatteringradius_ = 0;
    expand_ = 1;
    scatteringsync_ = true;
  }
  if (_has_bits_[21 / 32] & (0xffu << (21 % 32))) {
    parentbulletid_ = -1;
  }
  circlebulletcountlist_.Clear();
  circleanglelist_.Clear();
  circlenooklist_.Clear();
  areahorizontalanglelist_.Clear();
  areaverticalanglelist_.Clear();
  areaoddslist_.Clear();
  bulletgrouplist_.Clear();
  bulletlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrajectoryTrajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Id = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_RayCount;
        break;
      }

      // optional sint32 RayCount = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RayCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &raycount_)));
          set_has_raycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_CircleCount;
        break;
      }

      // optional sint32 CircleCount = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CircleCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &circlecount_)));
          set_has_circlecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_CircleBulletCountList;
        break;
      }

      // repeated sint32 CircleBulletCountList = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CircleBulletCountList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 48, input, this->mutable_circlebulletcountlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_circlebulletcountlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_CircleBulletCountList;
        if (input->ExpectTag(61)) goto parse_CircleAngleList;
        break;
      }

      // repeated float CircleAngleList = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_CircleAngleList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 61, input, this->mutable_circleanglelist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_circleanglelist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_CircleAngleList;
        if (input->ExpectTag(69)) goto parse_ForwardDistance;
        break;
      }

      // optional float ForwardDistance = 8 [default = -1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ForwardDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &forwarddistance_)));
          set_has_forwarddistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_Random;
        break;
      }

      // optional float Random = 9 [default = -1];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Random:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_)));
          set_has_random();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_HorizontalOffsetAngle;
        break;
      }

      // optional float HorizontalOffsetAngle = 10 [default = -1];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_HorizontalOffsetAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &horizontaloffsetangle_)));
          set_has_horizontaloffsetangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_VerticalOffsetAngle;
        break;
      }

      // optional float VerticalOffsetAngle = 11 [default = -1];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_VerticalOffsetAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &verticaloffsetangle_)));
          set_has_verticaloffsetangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_Expand;
        break;
      }

      // optional float Expand = 14 [default = 1];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Expand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &expand_)));
          set_has_expand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_AreaHorizontalAngleList;
        break;
      }

      // repeated float AreaHorizontalAngleList = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_AreaHorizontalAngleList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 125, input, this->mutable_areahorizontalanglelist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_areahorizontalanglelist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_AreaHorizontalAngleList;
        if (input->ExpectTag(133)) goto parse_AreaVerticalAngleList;
        break;
      }

      // repeated float AreaVerticalAngleList = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_AreaVerticalAngleList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 133, input, this->mutable_areaverticalanglelist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_areaverticalanglelist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_AreaVerticalAngleList;
        if (input->ExpectTag(141)) goto parse_AreaOddsList;
        break;
      }

      // repeated float AreaOddsList = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_AreaOddsList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 141, input, this->mutable_areaoddslist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_areaoddslist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_AreaOddsList;
        if (input->ExpectTag(146)) goto parse_BulletGroupList;
        break;
      }

      // repeated .TrajectoryBulletGroup BulletGroupList = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BulletGroupList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bulletgrouplist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_BulletGroupList;
        if (input->ExpectTag(154)) goto parse_BulletList;
        break;
      }

      // repeated .TrajectoryBullet BulletList = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BulletList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bulletlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_BulletList;
        if (input->ExpectTag(160)) goto parse_ParentBulletId;
        break;
      }

      // optional sint32 ParentBulletId = 20 [default = -1];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ParentBulletId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &parentbulletid_)));
          set_has_parentbulletid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_CircleNookList;
        break;
      }

      // repeated float CircleNookList = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_CircleNookList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 173, input, this->mutable_circlenooklist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_circlenooklist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_CircleNookList;
        if (input->ExpectTag(176)) goto parse_TrackType;
        break;
      }

      // optional sint32 TrackType = 22 [default = 0];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TrackType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &tracktype_)));
          set_has_tracktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_SpaceWorld;
        break;
      }

      // optional bool SpaceWorld = 23 [default = false];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SpaceWorld:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &spaceworld_)));
          set_has_spaceworld();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_ScatteringSync;
        break;
      }

      // optional bool ScatteringSync = 24 [default = true];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ScatteringSync:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &scatteringsync_)));
          set_has_scatteringsync();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(205)) goto parse_ScatteringRadius;
        break;
      }

      // optional float ScatteringRadius = 25 [default = 0];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ScatteringRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scatteringradius_)));
          set_has_scatteringradius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_TrajectoryType;
        break;
      }

      // optional sint32 TrajectoryType = 26 [default = 1];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TrajectoryType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &trajectorytype_)));
          set_has_trajectorytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrajectoryTrajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Id = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->id(), output);
  }

  // optional sint32 RayCount = 3 [default = -1];
  if (has_raycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->raycount(), output);
  }

  // optional sint32 CircleCount = 5 [default = -1];
  if (has_circlecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->circlecount(), output);
  }

  // repeated sint32 CircleBulletCountList = 6;
  for (int i = 0; i < this->circlebulletcountlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      6, this->circlebulletcountlist(i), output);
  }

  // repeated float CircleAngleList = 7;
  for (int i = 0; i < this->circleanglelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      7, this->circleanglelist(i), output);
  }

  // optional float ForwardDistance = 8 [default = -1];
  if (has_forwarddistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->forwarddistance(), output);
  }

  // optional float Random = 9 [default = -1];
  if (has_random()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->random(), output);
  }

  // optional float HorizontalOffsetAngle = 10 [default = -1];
  if (has_horizontaloffsetangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->horizontaloffsetangle(), output);
  }

  // optional float VerticalOffsetAngle = 11 [default = -1];
  if (has_verticaloffsetangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->verticaloffsetangle(), output);
  }

  // optional float Expand = 14 [default = 1];
  if (has_expand()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->expand(), output);
  }

  // repeated float AreaHorizontalAngleList = 15;
  for (int i = 0; i < this->areahorizontalanglelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      15, this->areahorizontalanglelist(i), output);
  }

  // repeated float AreaVerticalAngleList = 16;
  for (int i = 0; i < this->areaverticalanglelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      16, this->areaverticalanglelist(i), output);
  }

  // repeated float AreaOddsList = 17;
  for (int i = 0; i < this->areaoddslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      17, this->areaoddslist(i), output);
  }

  // repeated .TrajectoryBulletGroup BulletGroupList = 18;
  for (int i = 0; i < this->bulletgrouplist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->bulletgrouplist(i), output);
  }

  // repeated .TrajectoryBullet BulletList = 19;
  for (int i = 0; i < this->bulletlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->bulletlist(i), output);
  }

  // optional sint32 ParentBulletId = 20 [default = -1];
  if (has_parentbulletid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(20, this->parentbulletid(), output);
  }

  // repeated float CircleNookList = 21;
  for (int i = 0; i < this->circlenooklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      21, this->circlenooklist(i), output);
  }

  // optional sint32 TrackType = 22 [default = 0];
  if (has_tracktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(22, this->tracktype(), output);
  }

  // optional bool SpaceWorld = 23 [default = false];
  if (has_spaceworld()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->spaceworld(), output);
  }

  // optional bool ScatteringSync = 24 [default = true];
  if (has_scatteringsync()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->scatteringsync(), output);
  }

  // optional float ScatteringRadius = 25 [default = 0];
  if (has_scatteringradius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->scatteringradius(), output);
  }

  // optional sint32 TrajectoryType = 26 [default = 1];
  if (has_trajectorytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(26, this->trajectorytype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrajectoryTrajectory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Id = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->id(), target);
  }

  // optional sint32 RayCount = 3 [default = -1];
  if (has_raycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->raycount(), target);
  }

  // optional sint32 CircleCount = 5 [default = -1];
  if (has_circlecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->circlecount(), target);
  }

  // repeated sint32 CircleBulletCountList = 6;
  for (int i = 0; i < this->circlebulletcountlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(6, this->circlebulletcountlist(i), target);
  }

  // repeated float CircleAngleList = 7;
  for (int i = 0; i < this->circleanglelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(7, this->circleanglelist(i), target);
  }

  // optional float ForwardDistance = 8 [default = -1];
  if (has_forwarddistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->forwarddistance(), target);
  }

  // optional float Random = 9 [default = -1];
  if (has_random()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->random(), target);
  }

  // optional float HorizontalOffsetAngle = 10 [default = -1];
  if (has_horizontaloffsetangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->horizontaloffsetangle(), target);
  }

  // optional float VerticalOffsetAngle = 11 [default = -1];
  if (has_verticaloffsetangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->verticaloffsetangle(), target);
  }

  // optional float Expand = 14 [default = 1];
  if (has_expand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->expand(), target);
  }

  // repeated float AreaHorizontalAngleList = 15;
  for (int i = 0; i < this->areahorizontalanglelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(15, this->areahorizontalanglelist(i), target);
  }

  // repeated float AreaVerticalAngleList = 16;
  for (int i = 0; i < this->areaverticalanglelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(16, this->areaverticalanglelist(i), target);
  }

  // repeated float AreaOddsList = 17;
  for (int i = 0; i < this->areaoddslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(17, this->areaoddslist(i), target);
  }

  // repeated .TrajectoryBulletGroup BulletGroupList = 18;
  for (int i = 0; i < this->bulletgrouplist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->bulletgrouplist(i), target);
  }

  // repeated .TrajectoryBullet BulletList = 19;
  for (int i = 0; i < this->bulletlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->bulletlist(i), target);
  }

  // optional sint32 ParentBulletId = 20 [default = -1];
  if (has_parentbulletid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(20, this->parentbulletid(), target);
  }

  // repeated float CircleNookList = 21;
  for (int i = 0; i < this->circlenooklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(21, this->circlenooklist(i), target);
  }

  // optional sint32 TrackType = 22 [default = 0];
  if (has_tracktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(22, this->tracktype(), target);
  }

  // optional bool SpaceWorld = 23 [default = false];
  if (has_spaceworld()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->spaceworld(), target);
  }

  // optional bool ScatteringSync = 24 [default = true];
  if (has_scatteringsync()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->scatteringsync(), target);
  }

  // optional float ScatteringRadius = 25 [default = 0];
  if (has_scatteringradius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->scatteringradius(), target);
  }

  // optional sint32 TrajectoryType = 26 [default = 1];
  if (has_trajectorytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(26, this->trajectorytype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrajectoryTrajectory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Id = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->id());
    }

    // optional sint32 TrajectoryType = 26 [default = 1];
    if (has_trajectorytype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->trajectorytype());
    }

    // optional sint32 TrackType = 22 [default = 0];
    if (has_tracktype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->tracktype());
    }

    // optional sint32 RayCount = 3 [default = -1];
    if (has_raycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->raycount());
    }

    // optional sint32 CircleCount = 5 [default = -1];
    if (has_circlecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->circlecount());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float ForwardDistance = 8 [default = -1];
    if (has_forwarddistance()) {
      total_size += 1 + 4;
    }

    // optional float Random = 9 [default = -1];
    if (has_random()) {
      total_size += 1 + 4;
    }

    // optional float HorizontalOffsetAngle = 10 [default = -1];
    if (has_horizontaloffsetangle()) {
      total_size += 1 + 4;
    }

    // optional bool SpaceWorld = 23 [default = false];
    if (has_spaceworld()) {
      total_size += 2 + 1;
    }

    // optional float VerticalOffsetAngle = 11 [default = -1];
    if (has_verticaloffsetangle()) {
      total_size += 1 + 4;
    }

    // optional float ScatteringRadius = 25 [default = 0];
    if (has_scatteringradius()) {
      total_size += 2 + 4;
    }

    // optional float Expand = 14 [default = 1];
    if (has_expand()) {
      total_size += 1 + 4;
    }

    // optional bool ScatteringSync = 24 [default = true];
    if (has_scatteringsync()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[21 / 32] & (0xffu << (21 % 32))) {
    // optional sint32 ParentBulletId = 20 [default = -1];
    if (has_parentbulletid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->parentbulletid());
    }

  }
  // repeated sint32 CircleBulletCountList = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->circlebulletcountlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->circlebulletcountlist(i));
    }
    total_size += 1 * this->circlebulletcountlist_size() + data_size;
  }

  // repeated float CircleAngleList = 7;
  {
    int data_size = 0;
    data_size = 4 * this->circleanglelist_size();
    total_size += 1 * this->circleanglelist_size() + data_size;
  }

  // repeated float CircleNookList = 21;
  {
    int data_size = 0;
    data_size = 4 * this->circlenooklist_size();
    total_size += 2 * this->circlenooklist_size() + data_size;
  }

  // repeated float AreaHorizontalAngleList = 15;
  {
    int data_size = 0;
    data_size = 4 * this->areahorizontalanglelist_size();
    total_size += 1 * this->areahorizontalanglelist_size() + data_size;
  }

  // repeated float AreaVerticalAngleList = 16;
  {
    int data_size = 0;
    data_size = 4 * this->areaverticalanglelist_size();
    total_size += 2 * this->areaverticalanglelist_size() + data_size;
  }

  // repeated float AreaOddsList = 17;
  {
    int data_size = 0;
    data_size = 4 * this->areaoddslist_size();
    total_size += 2 * this->areaoddslist_size() + data_size;
  }

  // repeated .TrajectoryBulletGroup BulletGroupList = 18;
  total_size += 2 * this->bulletgrouplist_size();
  for (int i = 0; i < this->bulletgrouplist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bulletgrouplist(i));
  }

  // repeated .TrajectoryBullet BulletList = 19;
  total_size += 2 * this->bulletlist_size();
  for (int i = 0; i < this->bulletlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bulletlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryTrajectory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrajectoryTrajectory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrajectoryTrajectory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrajectoryTrajectory::MergeFrom(const TrajectoryTrajectory& from) {
  GOOGLE_CHECK_NE(&from, this);
  circlebulletcountlist_.MergeFrom(from.circlebulletcountlist_);
  circleanglelist_.MergeFrom(from.circleanglelist_);
  circlenooklist_.MergeFrom(from.circlenooklist_);
  areahorizontalanglelist_.MergeFrom(from.areahorizontalanglelist_);
  areaverticalanglelist_.MergeFrom(from.areaverticalanglelist_);
  areaoddslist_.MergeFrom(from.areaoddslist_);
  bulletgrouplist_.MergeFrom(from.bulletgrouplist_);
  bulletlist_.MergeFrom(from.bulletlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_trajectorytype()) {
      set_trajectorytype(from.trajectorytype());
    }
    if (from.has_tracktype()) {
      set_tracktype(from.tracktype());
    }
    if (from.has_raycount()) {
      set_raycount(from.raycount());
    }
    if (from.has_circlecount()) {
      set_circlecount(from.circlecount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_forwarddistance()) {
      set_forwarddistance(from.forwarddistance());
    }
    if (from.has_random()) {
      set_random(from.random());
    }
    if (from.has_horizontaloffsetangle()) {
      set_horizontaloffsetangle(from.horizontaloffsetangle());
    }
    if (from.has_spaceworld()) {
      set_spaceworld(from.spaceworld());
    }
    if (from.has_verticaloffsetangle()) {
      set_verticaloffsetangle(from.verticaloffsetangle());
    }
    if (from.has_scatteringradius()) {
      set_scatteringradius(from.scatteringradius());
    }
    if (from.has_expand()) {
      set_expand(from.expand());
    }
    if (from.has_scatteringsync()) {
      set_scatteringsync(from.scatteringsync());
    }
  }
  if (from._has_bits_[21 / 32] & (0xffu << (21 % 32))) {
    if (from.has_parentbulletid()) {
      set_parentbulletid(from.parentbulletid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrajectoryTrajectory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryTrajectory::CopyFrom(const TrajectoryTrajectory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryTrajectory::IsInitialized() const {

  return true;
}

void TrajectoryTrajectory::Swap(TrajectoryTrajectory* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(trajectorytype_, other->trajectorytype_);
    std::swap(tracktype_, other->tracktype_);
    std::swap(raycount_, other->raycount_);
    std::swap(circlecount_, other->circlecount_);
    circlebulletcountlist_.Swap(&other->circlebulletcountlist_);
    circleanglelist_.Swap(&other->circleanglelist_);
    circlenooklist_.Swap(&other->circlenooklist_);
    std::swap(forwarddistance_, other->forwarddistance_);
    std::swap(random_, other->random_);
    std::swap(horizontaloffsetangle_, other->horizontaloffsetangle_);
    std::swap(spaceworld_, other->spaceworld_);
    std::swap(verticaloffsetangle_, other->verticaloffsetangle_);
    std::swap(scatteringradius_, other->scatteringradius_);
    std::swap(expand_, other->expand_);
    std::swap(scatteringsync_, other->scatteringsync_);
    areahorizontalanglelist_.Swap(&other->areahorizontalanglelist_);
    areaverticalanglelist_.Swap(&other->areaverticalanglelist_);
    areaoddslist_.Swap(&other->areaoddslist_);
    bulletgrouplist_.Swap(&other->bulletgrouplist_);
    bulletlist_.Swap(&other->bulletlist_);
    std::swap(parentbulletid_, other->parentbulletid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrajectoryTrajectory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrajectoryTrajectory_descriptor_;
  metadata.reflection = TrajectoryTrajectory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrajectoryBulletGroup::kGroupIdFieldNumber;
const int TrajectoryBulletGroup::kBulletShotTypeFieldNumber;
const int TrajectoryBulletGroup::kShotTimeProgressionFieldNumber;
const int TrajectoryBulletGroup::kShotTimeProgressionValueFieldNumber;
const int TrajectoryBulletGroup::kVelocityCorrectionFieldNumber;
const int TrajectoryBulletGroup::kVelocityCorrectionValueFieldNumber;
const int TrajectoryBulletGroup::kBulletCountFieldNumber;
#endif  // !_MSC_VER

TrajectoryBulletGroup::TrajectoryBulletGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrajectoryBulletGroup::InitAsDefaultInstance() {
}

TrajectoryBulletGroup::TrajectoryBulletGroup(const TrajectoryBulletGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrajectoryBulletGroup::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = -1;
  bulletshottype_ = 0;
  shottimeprogression_ = 0;
  shottimeprogressionvalue_ = -1;
  velocitycorrection_ = 0;
  velocitycorrectionvalue_ = -1;
  bulletcount_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrajectoryBulletGroup::~TrajectoryBulletGroup() {
  SharedDtor();
}

void TrajectoryBulletGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrajectoryBulletGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryBulletGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrajectoryBulletGroup_descriptor_;
}

const TrajectoryBulletGroup& TrajectoryBulletGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TrajectoryCliRpc_2eproto();
  return *default_instance_;
}

TrajectoryBulletGroup* TrajectoryBulletGroup::default_instance_ = NULL;

TrajectoryBulletGroup* TrajectoryBulletGroup::New() const {
  return new TrajectoryBulletGroup;
}

void TrajectoryBulletGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = -1;
    bulletshottype_ = 0;
    shottimeprogression_ = 0;
    shottimeprogressionvalue_ = -1;
    velocitycorrection_ = 0;
    velocitycorrectionvalue_ = -1;
    bulletcount_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrajectoryBulletGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 GroupId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_BulletShotType;
        break;
      }

      // optional sint32 BulletShotType = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BulletShotType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bulletshottype_)));
          set_has_bulletshottype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ShotTimeProgression;
        break;
      }

      // optional sint32 ShotTimeProgression = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShotTimeProgression:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &shottimeprogression_)));
          set_has_shottimeprogression();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_ShotTimeProgressionValue;
        break;
      }

      // optional float ShotTimeProgressionValue = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ShotTimeProgressionValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shottimeprogressionvalue_)));
          set_has_shottimeprogressionvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_VelocityCorrection;
        break;
      }

      // optional sint32 VelocityCorrection = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VelocityCorrection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &velocitycorrection_)));
          set_has_velocitycorrection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_VelocityCorrectionValue;
        break;
      }

      // optional float VelocityCorrectionValue = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_VelocityCorrectionValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocitycorrectionvalue_)));
          set_has_velocitycorrectionvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_BulletCount;
        break;
      }

      // optional sint32 BulletCount = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BulletCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bulletcount_)));
          set_has_bulletcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrajectoryBulletGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 GroupId = 1 [default = -1];
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->groupid(), output);
  }

  // optional sint32 BulletShotType = 2 [default = 0];
  if (has_bulletshottype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->bulletshottype(), output);
  }

  // optional sint32 ShotTimeProgression = 3 [default = 0];
  if (has_shottimeprogression()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->shottimeprogression(), output);
  }

  // optional float ShotTimeProgressionValue = 4 [default = -1];
  if (has_shottimeprogressionvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->shottimeprogressionvalue(), output);
  }

  // optional sint32 VelocityCorrection = 5 [default = 0];
  if (has_velocitycorrection()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->velocitycorrection(), output);
  }

  // optional float VelocityCorrectionValue = 6 [default = -1];
  if (has_velocitycorrectionvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->velocitycorrectionvalue(), output);
  }

  // optional sint32 BulletCount = 7 [default = -1];
  if (has_bulletcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->bulletcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrajectoryBulletGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 GroupId = 1 [default = -1];
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->groupid(), target);
  }

  // optional sint32 BulletShotType = 2 [default = 0];
  if (has_bulletshottype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->bulletshottype(), target);
  }

  // optional sint32 ShotTimeProgression = 3 [default = 0];
  if (has_shottimeprogression()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->shottimeprogression(), target);
  }

  // optional float ShotTimeProgressionValue = 4 [default = -1];
  if (has_shottimeprogressionvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->shottimeprogressionvalue(), target);
  }

  // optional sint32 VelocityCorrection = 5 [default = 0];
  if (has_velocitycorrection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->velocitycorrection(), target);
  }

  // optional float VelocityCorrectionValue = 6 [default = -1];
  if (has_velocitycorrectionvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->velocitycorrectionvalue(), target);
  }

  // optional sint32 BulletCount = 7 [default = -1];
  if (has_bulletcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->bulletcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrajectoryBulletGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 GroupId = 1 [default = -1];
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->groupid());
    }

    // optional sint32 BulletShotType = 2 [default = 0];
    if (has_bulletshottype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bulletshottype());
    }

    // optional sint32 ShotTimeProgression = 3 [default = 0];
    if (has_shottimeprogression()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->shottimeprogression());
    }

    // optional float ShotTimeProgressionValue = 4 [default = -1];
    if (has_shottimeprogressionvalue()) {
      total_size += 1 + 4;
    }

    // optional sint32 VelocityCorrection = 5 [default = 0];
    if (has_velocitycorrection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->velocitycorrection());
    }

    // optional float VelocityCorrectionValue = 6 [default = -1];
    if (has_velocitycorrectionvalue()) {
      total_size += 1 + 4;
    }

    // optional sint32 BulletCount = 7 [default = -1];
    if (has_bulletcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bulletcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryBulletGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrajectoryBulletGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrajectoryBulletGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrajectoryBulletGroup::MergeFrom(const TrajectoryBulletGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_bulletshottype()) {
      set_bulletshottype(from.bulletshottype());
    }
    if (from.has_shottimeprogression()) {
      set_shottimeprogression(from.shottimeprogression());
    }
    if (from.has_shottimeprogressionvalue()) {
      set_shottimeprogressionvalue(from.shottimeprogressionvalue());
    }
    if (from.has_velocitycorrection()) {
      set_velocitycorrection(from.velocitycorrection());
    }
    if (from.has_velocitycorrectionvalue()) {
      set_velocitycorrectionvalue(from.velocitycorrectionvalue());
    }
    if (from.has_bulletcount()) {
      set_bulletcount(from.bulletcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrajectoryBulletGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryBulletGroup::CopyFrom(const TrajectoryBulletGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryBulletGroup::IsInitialized() const {

  return true;
}

void TrajectoryBulletGroup::Swap(TrajectoryBulletGroup* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(bulletshottype_, other->bulletshottype_);
    std::swap(shottimeprogression_, other->shottimeprogression_);
    std::swap(shottimeprogressionvalue_, other->shottimeprogressionvalue_);
    std::swap(velocitycorrection_, other->velocitycorrection_);
    std::swap(velocitycorrectionvalue_, other->velocitycorrectionvalue_);
    std::swap(bulletcount_, other->bulletcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrajectoryBulletGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrajectoryBulletGroup_descriptor_;
  metadata.reflection = TrajectoryBulletGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrajectoryBullet::kSortIndexFieldNumber;
const int TrajectoryBullet::kBulletIdFieldNumber;
const int TrajectoryBullet::kGroupIdFieldNumber;
const int TrajectoryBullet::kTrackTypeFieldNumber;
const int TrajectoryBullet::kShotTimeFieldNumber;
const int TrajectoryBullet::kRandomRadiusFieldNumber;
const int TrajectoryBullet::kBulletModelNameFieldNumber;
const int TrajectoryBullet::kBulletScaleMinFieldNumber;
const int TrajectoryBullet::kBulletScaleMaxFieldNumber;
const int TrajectoryBullet::kVelocityRandomFieldNumber;
const int TrajectoryBullet::kVelocityMinFieldNumber;
const int TrajectoryBullet::kVelocityMaxFieldNumber;
const int TrajectoryBullet::kMassFieldNumber;
const int TrajectoryBullet::kLineMoveTimeFieldNumber;
const int TrajectoryBullet::kLineCoefficient1FieldNumber;
const int TrajectoryBullet::kLineCoefficient2FieldNumber;
const int TrajectoryBullet::kVelocityCoefficientFieldNumber;
const int TrajectoryBullet::kBulletTypeFieldNumber;
const int TrajectoryBullet::kCollisionSpriteFieldNumber;
const int TrajectoryBullet::kCollisionSceneFieldNumber;
const int TrajectoryBullet::kRayDamageFirstFieldNumber;
const int TrajectoryBullet::kRayTimeCycleFieldNumber;
const int TrajectoryBullet::kRayDamageRadiusFieldNumber;
const int TrajectoryBullet::kCallNpcIdFieldNumber;
const int TrajectoryBullet::kLifeTimeFieldNumber;
const int TrajectoryBullet::kTakeDamageFieldNumber;
const int TrajectoryBullet::kBulletDamageRangeTypeFieldNumber;
const int TrajectoryBullet::kBulletDamageRangeRadiusFieldNumber;
const int TrajectoryBullet::kBulletDamageAngleFieldNumber;
const int TrajectoryBullet::kVerticalLineBeginFieldNumber;
const int TrajectoryBullet::kVerticalLineEndFieldNumber;
const int TrajectoryBullet::kSprayGroundShitFieldNumber;
const int TrajectoryBullet::kSprayGroundScaleMinFieldNumber;
const int TrajectoryBullet::kSprayGroundScaleMaxFieldNumber;
const int TrajectoryBullet::kSprayWallShitFieldNumber;
const int TrajectoryBullet::kSprayWallScaleMinFieldNumber;
const int TrajectoryBullet::kSprayWallScaleMaxFieldNumber;
const int TrajectoryBullet::kCreateChildTimeFieldNumber;
const int TrajectoryBullet::kChildArrFieldNumber;
const int TrajectoryBullet::kModelRotateFieldNumber;
const int TrajectoryBullet::kRotateXFieldNumber;
const int TrajectoryBullet::kRotateYFieldNumber;
const int TrajectoryBullet::kRotateZFieldNumber;
const int TrajectoryBullet::kRotateSpeedFieldNumber;
const int TrajectoryBullet::kClockwiseFieldNumber;
const int TrajectoryBullet::kRotateMoveForwardFieldNumber;
const int TrajectoryBullet::kHAngleFieldNumber;
const int TrajectoryBullet::kVAngleFieldNumber;
const int TrajectoryBullet::kGroundBounceFieldNumber;
const int TrajectoryBullet::kWallBounceFieldNumber;
const int TrajectoryBullet::kDampBounceFieldNumber;
const int TrajectoryBullet::kBounceTimesFieldNumber;
const int TrajectoryBullet::kBounceVelocityFieldNumber;
#endif  // !_MSC_VER

TrajectoryBullet::TrajectoryBullet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrajectoryBullet::InitAsDefaultInstance() {
}

TrajectoryBullet::TrajectoryBullet(const TrajectoryBullet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrajectoryBullet::SharedCtor() {
  _cached_size_ = 0;
  sortindex_ = -1;
  bulletid_ = -1;
  groupid_ = -1;
  tracktype_ = -1;
  shottime_ = -1;
  randomradius_ = -1;
  bulletmodelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bulletscalemin_ = 1;
  bulletscalemax_ = 1;
  velocityrandom_ = false;
  velocitymin_ = -1;
  velocitymax_ = -1;
  mass_ = -1;
  linemovetime_ = -1;
  linecoefficient1_ = -1;
  linecoefficient2_ = -1;
  velocitycoefficient_ = -1;
  bullettype_ = 0;
  collisionsprite_ = 0;
  collisionscene_ = 0;
  raydamagefirst_ = -1;
  raytimecycle_ = -1;
  raydamageradius_ = -1;
  callnpcid_ = -1;
  lifetime_ = -1;
  takedamage_ = false;
  bulletdamagerangetype_ = 0;
  bulletdamagerangeradius_ = -1;
  bulletdamageangle_ = -1;
  verticallinebegin_ = -1;
  verticallineend_ = -1;
  spraygroundshit_ = -1;
  spraygroundscalemin_ = 1;
  spraygroundscalemax_ = 1;
  spraywallshit_ = -1;
  spraywallscalemin_ = 1;
  spraywallscalemax_ = 1;
  createchildtime_ = -1;
  modelrotate_ = false;
  rotatex_ = 0;
  rotatey_ = 0;
  rotatez_ = 0;
  rotatespeed_ = 0;
  clockwise_ = false;
  rotatemoveforward_ = false;
  hangle_ = 0;
  vangle_ = 0;
  groundbounce_ = false;
  wallbounce_ = false;
  dampbounce_ = -1;
  bouncetimes_ = -1;
  bouncevelocity_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrajectoryBullet::~TrajectoryBullet() {
  SharedDtor();
}

void TrajectoryBullet::SharedDtor() {
  if (bulletmodelname_ != &::google::protobuf::internal::kEmptyString) {
    delete bulletmodelname_;
  }
  if (this != default_instance_) {
  }
}

void TrajectoryBullet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryBullet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrajectoryBullet_descriptor_;
}

const TrajectoryBullet& TrajectoryBullet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TrajectoryCliRpc_2eproto();
  return *default_instance_;
}

TrajectoryBullet* TrajectoryBullet::default_instance_ = NULL;

TrajectoryBullet* TrajectoryBullet::New() const {
  return new TrajectoryBullet;
}

void TrajectoryBullet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sortindex_ = -1;
    bulletid_ = -1;
    groupid_ = -1;
    tracktype_ = -1;
    shottime_ = -1;
    randomradius_ = -1;
    if (has_bulletmodelname()) {
      if (bulletmodelname_ != &::google::protobuf::internal::kEmptyString) {
        bulletmodelname_->clear();
      }
    }
    bulletscalemin_ = 1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bulletscalemax_ = 1;
    velocityrandom_ = false;
    velocitymin_ = -1;
    velocitymax_ = -1;
    mass_ = -1;
    linemovetime_ = -1;
    linecoefficient1_ = -1;
    linecoefficient2_ = -1;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    velocitycoefficient_ = -1;
    bullettype_ = 0;
    collisionsprite_ = 0;
    collisionscene_ = 0;
    raydamagefirst_ = -1;
    raytimecycle_ = -1;
    raydamageradius_ = -1;
    callnpcid_ = -1;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    lifetime_ = -1;
    takedamage_ = false;
    bulletdamagerangetype_ = 0;
    bulletdamagerangeradius_ = -1;
    bulletdamageangle_ = -1;
    verticallinebegin_ = -1;
    verticallineend_ = -1;
    spraygroundshit_ = -1;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    spraygroundscalemin_ = 1;
    spraygroundscalemax_ = 1;
    spraywallshit_ = -1;
    spraywallscalemin_ = 1;
    spraywallscalemax_ = 1;
    createchildtime_ = -1;
    modelrotate_ = false;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    rotatex_ = 0;
    rotatey_ = 0;
    rotatez_ = 0;
    rotatespeed_ = 0;
    clockwise_ = false;
    rotatemoveforward_ = false;
    hangle_ = 0;
    vangle_ = 0;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    groundbounce_ = false;
    wallbounce_ = false;
    dampbounce_ = -1;
    bouncetimes_ = -1;
    bouncevelocity_ = -1;
  }
  childarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrajectoryBullet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 BulletId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bulletid_)));
          set_has_bulletid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GroupId;
        break;
      }

      // optional sint32 GroupId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_RandomRadius;
        break;
      }

      // optional float RandomRadius = 10 [default = -1];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_RandomRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &randomradius_)));
          set_has_randomradius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_BulletModelName;
        break;
      }

      // optional string BulletModelName = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BulletModelName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bulletmodelname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bulletmodelname().data(), this->bulletmodelname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_VelocityRandom;
        break;
      }

      // optional bool VelocityRandom = 12 [default = false];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VelocityRandom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &velocityrandom_)));
          set_has_velocityrandom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_VelocityMin;
        break;
      }

      // optional float VelocityMin = 13 [default = -1];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_VelocityMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocitymin_)));
          set_has_velocitymin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_VelocityMax;
        break;
      }

      // optional float VelocityMax = 14 [default = -1];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_VelocityMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocitymax_)));
          set_has_velocitymax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_Mass;
        break;
      }

      // optional float Mass = 15 [default = -1];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Mass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mass_)));
          set_has_mass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_VelocityCoefficient;
        break;
      }

      // optional float VelocityCoefficient = 16 [default = -1];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_VelocityCoefficient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocitycoefficient_)));
          set_has_velocitycoefficient();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_BulletType;
        break;
      }

      // optional sint32 BulletType = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BulletType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bullettype_)));
          set_has_bullettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_RayDamageFirst;
        break;
      }

      // optional float RayDamageFirst = 20 [default = -1];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_RayDamageFirst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &raydamagefirst_)));
          set_has_raydamagefirst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_RayTimeCycle;
        break;
      }

      // optional sint32 RayTimeCycle = 21 [default = -1];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RayTimeCycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &raytimecycle_)));
          set_has_raytimecycle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_CallNpcId;
        break;
      }

      // optional sint32 CallNpcId = 22 [default = -1];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CallNpcId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &callnpcid_)));
          set_has_callnpcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_LifeTime;
        break;
      }

      // optional sint32 LifeTime = 37 [default = -1];
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LifeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &lifetime_)));
          set_has_lifetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_TakeDamage;
        break;
      }

      // optional bool TakeDamage = 39 [default = false];
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TakeDamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &takedamage_)));
          set_has_takedamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_BulletDamageRangeType;
        break;
      }

      // optional sint32 BulletDamageRangeType = 40 [default = 0];
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BulletDamageRangeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bulletdamagerangetype_)));
          set_has_bulletdamagerangetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(333)) goto parse_BulletDamageRangeRadius;
        break;
      }

      // optional float BulletDamageRangeRadius = 41 [default = -1];
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_BulletDamageRangeRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bulletdamagerangeradius_)));
          set_has_bulletdamagerangeradius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(341)) goto parse_BulletDamageAngle;
        break;
      }

      // optional float BulletDamageAngle = 42 [default = -1];
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_BulletDamageAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bulletdamageangle_)));
          set_has_bulletdamageangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(357)) goto parse_SprayGroundScaleMin;
        break;
      }

      // optional float SprayGroundScaleMin = 44 [default = 1];
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_SprayGroundScaleMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spraygroundscalemin_)));
          set_has_spraygroundscalemin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(365)) goto parse_SprayGroundScaleMax;
        break;
      }

      // optional float SprayGroundScaleMax = 45 [default = 1];
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_SprayGroundScaleMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spraygroundscalemax_)));
          set_has_spraygroundscalemax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(381)) goto parse_SprayWallScaleMin;
        break;
      }

      // optional float SprayWallScaleMin = 47 [default = 1];
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_SprayWallScaleMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spraywallscalemin_)));
          set_has_spraywallscalemin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(389)) goto parse_SprayWallScaleMax;
        break;
      }

      // optional float SprayWallScaleMax = 48 [default = 1];
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_SprayWallScaleMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spraywallscalemax_)));
          set_has_spraywallscalemax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_ShotTime;
        break;
      }

      // optional sint32 ShotTime = 51 [default = -1];
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShotTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &shottime_)));
          set_has_shottime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_ChildArr;
        break;
      }

      // repeated .TrajectoryBulletChild ChildArr = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChildArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_childarr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_ChildArr;
        if (input->ExpectTag(424)) goto parse_LineMoveTime;
        break;
      }

      // optional sint32 LineMoveTime = 53 [default = -1];
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LineMoveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &linemovetime_)));
          set_has_linemovetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(437)) goto parse_LineCoefficient1;
        break;
      }

      // optional float LineCoefficient1 = 54 [default = -1];
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_LineCoefficient1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &linecoefficient1_)));
          set_has_linecoefficient1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(445)) goto parse_LineCoefficient2;
        break;
      }

      // optional float LineCoefficient2 = 55 [default = -1];
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_LineCoefficient2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &linecoefficient2_)));
          set_has_linecoefficient2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_SortIndex;
        break;
      }

      // optional sint32 SortIndex = 56 [default = -1];
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SortIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &sortindex_)));
          set_has_sortindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(461)) goto parse_VerticalLineBegin;
        break;
      }

      // optional float VerticalLineBegin = 57 [default = -1];
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_VerticalLineBegin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &verticallinebegin_)));
          set_has_verticallinebegin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(469)) goto parse_VerticalLineEnd;
        break;
      }

      // optional float VerticalLineEnd = 58 [default = -1];
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_VerticalLineEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &verticallineend_)));
          set_has_verticallineend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(472)) goto parse_ModelRotate;
        break;
      }

      // optional bool ModelRotate = 59 [default = false];
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ModelRotate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &modelrotate_)));
          set_has_modelrotate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(485)) goto parse_RotateX;
        break;
      }

      // optional float RotateX = 60 [default = 0];
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_RotateX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotatex_)));
          set_has_rotatex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(493)) goto parse_RotateY;
        break;
      }

      // optional float RotateY = 61 [default = 0];
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_RotateY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotatey_)));
          set_has_rotatey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(501)) goto parse_RotateZ;
        break;
      }

      // optional float RotateZ = 62 [default = 0];
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_RotateZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotatez_)));
          set_has_rotatez();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(509)) goto parse_RotateSpeed;
        break;
      }

      // optional float RotateSpeed = 63 [default = 0];
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_RotateSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotatespeed_)));
          set_has_rotatespeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(512)) goto parse_TrackType;
        break;
      }

      // optional sint32 TrackType = 64 [default = -1];
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TrackType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &tracktype_)));
          set_has_tracktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(528)) goto parse_RotateMoveForward;
        break;
      }

      // optional bool RotateMoveForward = 66 [default = false];
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RotateMoveForward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rotatemoveforward_)));
          set_has_rotatemoveforward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(541)) goto parse_RayDamageRadius;
        break;
      }

      // optional float RayDamageRadius = 67 [default = -1];
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_RayDamageRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &raydamageradius_)));
          set_has_raydamageradius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(544)) goto parse_CreateChildTime;
        break;
      }

      // optional sint32 CreateChildTime = 68 [default = -1];
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateChildTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &createchildtime_)));
          set_has_createchildtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(557)) goto parse_HAngle;
        break;
      }

      // optional float HAngle = 69 [default = 0];
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_HAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hangle_)));
          set_has_hangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(565)) goto parse_VAngle;
        break;
      }

      // optional float VAngle = 70 [default = 0];
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_VAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vangle_)));
          set_has_vangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(573)) goto parse_BulletScaleMin;
        break;
      }

      // optional float BulletScaleMin = 71 [default = 1];
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_BulletScaleMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bulletscalemin_)));
          set_has_bulletscalemin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(581)) goto parse_BulletScaleMax;
        break;
      }

      // optional float BulletScaleMax = 72 [default = 1];
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_BulletScaleMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bulletscalemax_)));
          set_has_bulletscalemax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(584)) goto parse_CollisionSprite;
        break;
      }

      // optional sint32 CollisionSprite = 73 [default = 0];
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CollisionSprite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &collisionsprite_)));
          set_has_collisionsprite();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(600)) goto parse_CollisionScene;
        break;
      }

      // optional sint32 CollisionScene = 75 [default = 0];
      case 75: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CollisionScene:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &collisionscene_)));
          set_has_collisionscene();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(608)) goto parse_GroundBounce;
        break;
      }

      // optional bool GroundBounce = 76 [default = false];
      case 76: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroundBounce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &groundbounce_)));
          set_has_groundbounce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(616)) goto parse_WallBounce;
        break;
      }

      // optional bool WallBounce = 77 [default = false];
      case 77: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WallBounce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wallbounce_)));
          set_has_wallbounce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(629)) goto parse_DampBounce;
        break;
      }

      // optional float DampBounce = 78 [default = -1];
      case 78: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_DampBounce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dampbounce_)));
          set_has_dampbounce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(632)) goto parse_BounceTimes;
        break;
      }

      // optional sint32 BounceTimes = 79 [default = -1];
      case 79: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BounceTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bouncetimes_)));
          set_has_bouncetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(645)) goto parse_BounceVelocity;
        break;
      }

      // optional float BounceVelocity = 80 [default = -1];
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_BounceVelocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bouncevelocity_)));
          set_has_bouncevelocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(648)) goto parse_SprayGroundShit;
        break;
      }

      // optional sint32 SprayGroundShit = 81 [default = -1];
      case 81: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SprayGroundShit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &spraygroundshit_)));
          set_has_spraygroundshit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(656)) goto parse_SprayWallShit;
        break;
      }

      // optional sint32 SprayWallShit = 82 [default = -1];
      case 82: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SprayWallShit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &spraywallshit_)));
          set_has_spraywallshit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(664)) goto parse_Clockwise;
        break;
      }

      // optional bool Clockwise = 83 [default = false];
      case 83: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Clockwise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clockwise_)));
          set_has_clockwise();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrajectoryBullet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 BulletId = 1 [default = -1];
  if (has_bulletid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->bulletid(), output);
  }

  // optional sint32 GroupId = 2 [default = -1];
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->groupid(), output);
  }

  // optional float RandomRadius = 10 [default = -1];
  if (has_randomradius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->randomradius(), output);
  }

  // optional string BulletModelName = 11;
  if (has_bulletmodelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bulletmodelname().data(), this->bulletmodelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->bulletmodelname(), output);
  }

  // optional bool VelocityRandom = 12 [default = false];
  if (has_velocityrandom()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->velocityrandom(), output);
  }

  // optional float VelocityMin = 13 [default = -1];
  if (has_velocitymin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->velocitymin(), output);
  }

  // optional float VelocityMax = 14 [default = -1];
  if (has_velocitymax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->velocitymax(), output);
  }

  // optional float Mass = 15 [default = -1];
  if (has_mass()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->mass(), output);
  }

  // optional float VelocityCoefficient = 16 [default = -1];
  if (has_velocitycoefficient()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->velocitycoefficient(), output);
  }

  // optional sint32 BulletType = 17 [default = 0];
  if (has_bullettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(17, this->bullettype(), output);
  }

  // optional float RayDamageFirst = 20 [default = -1];
  if (has_raydamagefirst()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->raydamagefirst(), output);
  }

  // optional sint32 RayTimeCycle = 21 [default = -1];
  if (has_raytimecycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(21, this->raytimecycle(), output);
  }

  // optional sint32 CallNpcId = 22 [default = -1];
  if (has_callnpcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(22, this->callnpcid(), output);
  }

  // optional sint32 LifeTime = 37 [default = -1];
  if (has_lifetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(37, this->lifetime(), output);
  }

  // optional bool TakeDamage = 39 [default = false];
  if (has_takedamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(39, this->takedamage(), output);
  }

  // optional sint32 BulletDamageRangeType = 40 [default = 0];
  if (has_bulletdamagerangetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(40, this->bulletdamagerangetype(), output);
  }

  // optional float BulletDamageRangeRadius = 41 [default = -1];
  if (has_bulletdamagerangeradius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(41, this->bulletdamagerangeradius(), output);
  }

  // optional float BulletDamageAngle = 42 [default = -1];
  if (has_bulletdamageangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(42, this->bulletdamageangle(), output);
  }

  // optional float SprayGroundScaleMin = 44 [default = 1];
  if (has_spraygroundscalemin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(44, this->spraygroundscalemin(), output);
  }

  // optional float SprayGroundScaleMax = 45 [default = 1];
  if (has_spraygroundscalemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(45, this->spraygroundscalemax(), output);
  }

  // optional float SprayWallScaleMin = 47 [default = 1];
  if (has_spraywallscalemin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(47, this->spraywallscalemin(), output);
  }

  // optional float SprayWallScaleMax = 48 [default = 1];
  if (has_spraywallscalemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(48, this->spraywallscalemax(), output);
  }

  // optional sint32 ShotTime = 51 [default = -1];
  if (has_shottime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(51, this->shottime(), output);
  }

  // repeated .TrajectoryBulletChild ChildArr = 52;
  for (int i = 0; i < this->childarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, this->childarr(i), output);
  }

  // optional sint32 LineMoveTime = 53 [default = -1];
  if (has_linemovetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(53, this->linemovetime(), output);
  }

  // optional float LineCoefficient1 = 54 [default = -1];
  if (has_linecoefficient1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(54, this->linecoefficient1(), output);
  }

  // optional float LineCoefficient2 = 55 [default = -1];
  if (has_linecoefficient2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(55, this->linecoefficient2(), output);
  }

  // optional sint32 SortIndex = 56 [default = -1];
  if (has_sortindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(56, this->sortindex(), output);
  }

  // optional float VerticalLineBegin = 57 [default = -1];
  if (has_verticallinebegin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(57, this->verticallinebegin(), output);
  }

  // optional float VerticalLineEnd = 58 [default = -1];
  if (has_verticallineend()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(58, this->verticallineend(), output);
  }

  // optional bool ModelRotate = 59 [default = false];
  if (has_modelrotate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(59, this->modelrotate(), output);
  }

  // optional float RotateX = 60 [default = 0];
  if (has_rotatex()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(60, this->rotatex(), output);
  }

  // optional float RotateY = 61 [default = 0];
  if (has_rotatey()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(61, this->rotatey(), output);
  }

  // optional float RotateZ = 62 [default = 0];
  if (has_rotatez()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(62, this->rotatez(), output);
  }

  // optional float RotateSpeed = 63 [default = 0];
  if (has_rotatespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(63, this->rotatespeed(), output);
  }

  // optional sint32 TrackType = 64 [default = -1];
  if (has_tracktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(64, this->tracktype(), output);
  }

  // optional bool RotateMoveForward = 66 [default = false];
  if (has_rotatemoveforward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(66, this->rotatemoveforward(), output);
  }

  // optional float RayDamageRadius = 67 [default = -1];
  if (has_raydamageradius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(67, this->raydamageradius(), output);
  }

  // optional sint32 CreateChildTime = 68 [default = -1];
  if (has_createchildtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(68, this->createchildtime(), output);
  }

  // optional float HAngle = 69 [default = 0];
  if (has_hangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(69, this->hangle(), output);
  }

  // optional float VAngle = 70 [default = 0];
  if (has_vangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(70, this->vangle(), output);
  }

  // optional float BulletScaleMin = 71 [default = 1];
  if (has_bulletscalemin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(71, this->bulletscalemin(), output);
  }

  // optional float BulletScaleMax = 72 [default = 1];
  if (has_bulletscalemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(72, this->bulletscalemax(), output);
  }

  // optional sint32 CollisionSprite = 73 [default = 0];
  if (has_collisionsprite()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(73, this->collisionsprite(), output);
  }

  // optional sint32 CollisionScene = 75 [default = 0];
  if (has_collisionscene()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(75, this->collisionscene(), output);
  }

  // optional bool GroundBounce = 76 [default = false];
  if (has_groundbounce()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(76, this->groundbounce(), output);
  }

  // optional bool WallBounce = 77 [default = false];
  if (has_wallbounce()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(77, this->wallbounce(), output);
  }

  // optional float DampBounce = 78 [default = -1];
  if (has_dampbounce()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(78, this->dampbounce(), output);
  }

  // optional sint32 BounceTimes = 79 [default = -1];
  if (has_bouncetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(79, this->bouncetimes(), output);
  }

  // optional float BounceVelocity = 80 [default = -1];
  if (has_bouncevelocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(80, this->bouncevelocity(), output);
  }

  // optional sint32 SprayGroundShit = 81 [default = -1];
  if (has_spraygroundshit()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(81, this->spraygroundshit(), output);
  }

  // optional sint32 SprayWallShit = 82 [default = -1];
  if (has_spraywallshit()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(82, this->spraywallshit(), output);
  }

  // optional bool Clockwise = 83 [default = false];
  if (has_clockwise()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(83, this->clockwise(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrajectoryBullet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 BulletId = 1 [default = -1];
  if (has_bulletid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->bulletid(), target);
  }

  // optional sint32 GroupId = 2 [default = -1];
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->groupid(), target);
  }

  // optional float RandomRadius = 10 [default = -1];
  if (has_randomradius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->randomradius(), target);
  }

  // optional string BulletModelName = 11;
  if (has_bulletmodelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bulletmodelname().data(), this->bulletmodelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->bulletmodelname(), target);
  }

  // optional bool VelocityRandom = 12 [default = false];
  if (has_velocityrandom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->velocityrandom(), target);
  }

  // optional float VelocityMin = 13 [default = -1];
  if (has_velocitymin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->velocitymin(), target);
  }

  // optional float VelocityMax = 14 [default = -1];
  if (has_velocitymax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->velocitymax(), target);
  }

  // optional float Mass = 15 [default = -1];
  if (has_mass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->mass(), target);
  }

  // optional float VelocityCoefficient = 16 [default = -1];
  if (has_velocitycoefficient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->velocitycoefficient(), target);
  }

  // optional sint32 BulletType = 17 [default = 0];
  if (has_bullettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(17, this->bullettype(), target);
  }

  // optional float RayDamageFirst = 20 [default = -1];
  if (has_raydamagefirst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->raydamagefirst(), target);
  }

  // optional sint32 RayTimeCycle = 21 [default = -1];
  if (has_raytimecycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(21, this->raytimecycle(), target);
  }

  // optional sint32 CallNpcId = 22 [default = -1];
  if (has_callnpcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(22, this->callnpcid(), target);
  }

  // optional sint32 LifeTime = 37 [default = -1];
  if (has_lifetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(37, this->lifetime(), target);
  }

  // optional bool TakeDamage = 39 [default = false];
  if (has_takedamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(39, this->takedamage(), target);
  }

  // optional sint32 BulletDamageRangeType = 40 [default = 0];
  if (has_bulletdamagerangetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(40, this->bulletdamagerangetype(), target);
  }

  // optional float BulletDamageRangeRadius = 41 [default = -1];
  if (has_bulletdamagerangeradius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(41, this->bulletdamagerangeradius(), target);
  }

  // optional float BulletDamageAngle = 42 [default = -1];
  if (has_bulletdamageangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(42, this->bulletdamageangle(), target);
  }

  // optional float SprayGroundScaleMin = 44 [default = 1];
  if (has_spraygroundscalemin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(44, this->spraygroundscalemin(), target);
  }

  // optional float SprayGroundScaleMax = 45 [default = 1];
  if (has_spraygroundscalemax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(45, this->spraygroundscalemax(), target);
  }

  // optional float SprayWallScaleMin = 47 [default = 1];
  if (has_spraywallscalemin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(47, this->spraywallscalemin(), target);
  }

  // optional float SprayWallScaleMax = 48 [default = 1];
  if (has_spraywallscalemax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(48, this->spraywallscalemax(), target);
  }

  // optional sint32 ShotTime = 51 [default = -1];
  if (has_shottime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(51, this->shottime(), target);
  }

  // repeated .TrajectoryBulletChild ChildArr = 52;
  for (int i = 0; i < this->childarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        52, this->childarr(i), target);
  }

  // optional sint32 LineMoveTime = 53 [default = -1];
  if (has_linemovetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(53, this->linemovetime(), target);
  }

  // optional float LineCoefficient1 = 54 [default = -1];
  if (has_linecoefficient1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(54, this->linecoefficient1(), target);
  }

  // optional float LineCoefficient2 = 55 [default = -1];
  if (has_linecoefficient2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(55, this->linecoefficient2(), target);
  }

  // optional sint32 SortIndex = 56 [default = -1];
  if (has_sortindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(56, this->sortindex(), target);
  }

  // optional float VerticalLineBegin = 57 [default = -1];
  if (has_verticallinebegin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(57, this->verticallinebegin(), target);
  }

  // optional float VerticalLineEnd = 58 [default = -1];
  if (has_verticallineend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(58, this->verticallineend(), target);
  }

  // optional bool ModelRotate = 59 [default = false];
  if (has_modelrotate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(59, this->modelrotate(), target);
  }

  // optional float RotateX = 60 [default = 0];
  if (has_rotatex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(60, this->rotatex(), target);
  }

  // optional float RotateY = 61 [default = 0];
  if (has_rotatey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(61, this->rotatey(), target);
  }

  // optional float RotateZ = 62 [default = 0];
  if (has_rotatez()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(62, this->rotatez(), target);
  }

  // optional float RotateSpeed = 63 [default = 0];
  if (has_rotatespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(63, this->rotatespeed(), target);
  }

  // optional sint32 TrackType = 64 [default = -1];
  if (has_tracktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(64, this->tracktype(), target);
  }

  // optional bool RotateMoveForward = 66 [default = false];
  if (has_rotatemoveforward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(66, this->rotatemoveforward(), target);
  }

  // optional float RayDamageRadius = 67 [default = -1];
  if (has_raydamageradius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(67, this->raydamageradius(), target);
  }

  // optional sint32 CreateChildTime = 68 [default = -1];
  if (has_createchildtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(68, this->createchildtime(), target);
  }

  // optional float HAngle = 69 [default = 0];
  if (has_hangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(69, this->hangle(), target);
  }

  // optional float VAngle = 70 [default = 0];
  if (has_vangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(70, this->vangle(), target);
  }

  // optional float BulletScaleMin = 71 [default = 1];
  if (has_bulletscalemin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(71, this->bulletscalemin(), target);
  }

  // optional float BulletScaleMax = 72 [default = 1];
  if (has_bulletscalemax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(72, this->bulletscalemax(), target);
  }

  // optional sint32 CollisionSprite = 73 [default = 0];
  if (has_collisionsprite()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(73, this->collisionsprite(), target);
  }

  // optional sint32 CollisionScene = 75 [default = 0];
  if (has_collisionscene()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(75, this->collisionscene(), target);
  }

  // optional bool GroundBounce = 76 [default = false];
  if (has_groundbounce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(76, this->groundbounce(), target);
  }

  // optional bool WallBounce = 77 [default = false];
  if (has_wallbounce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(77, this->wallbounce(), target);
  }

  // optional float DampBounce = 78 [default = -1];
  if (has_dampbounce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(78, this->dampbounce(), target);
  }

  // optional sint32 BounceTimes = 79 [default = -1];
  if (has_bouncetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(79, this->bouncetimes(), target);
  }

  // optional float BounceVelocity = 80 [default = -1];
  if (has_bouncevelocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(80, this->bouncevelocity(), target);
  }

  // optional sint32 SprayGroundShit = 81 [default = -1];
  if (has_spraygroundshit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(81, this->spraygroundshit(), target);
  }

  // optional sint32 SprayWallShit = 82 [default = -1];
  if (has_spraywallshit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(82, this->spraywallshit(), target);
  }

  // optional bool Clockwise = 83 [default = false];
  if (has_clockwise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(83, this->clockwise(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrajectoryBullet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 SortIndex = 56 [default = -1];
    if (has_sortindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->sortindex());
    }

    // optional sint32 BulletId = 1 [default = -1];
    if (has_bulletid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bulletid());
    }

    // optional sint32 GroupId = 2 [default = -1];
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->groupid());
    }

    // optional sint32 TrackType = 64 [default = -1];
    if (has_tracktype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->tracktype());
    }

    // optional sint32 ShotTime = 51 [default = -1];
    if (has_shottime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->shottime());
    }

    // optional float RandomRadius = 10 [default = -1];
    if (has_randomradius()) {
      total_size += 1 + 4;
    }

    // optional string BulletModelName = 11;
    if (has_bulletmodelname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bulletmodelname());
    }

    // optional float BulletScaleMin = 71 [default = 1];
    if (has_bulletscalemin()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float BulletScaleMax = 72 [default = 1];
    if (has_bulletscalemax()) {
      total_size += 2 + 4;
    }

    // optional bool VelocityRandom = 12 [default = false];
    if (has_velocityrandom()) {
      total_size += 1 + 1;
    }

    // optional float VelocityMin = 13 [default = -1];
    if (has_velocitymin()) {
      total_size += 1 + 4;
    }

    // optional float VelocityMax = 14 [default = -1];
    if (has_velocitymax()) {
      total_size += 1 + 4;
    }

    // optional float Mass = 15 [default = -1];
    if (has_mass()) {
      total_size += 1 + 4;
    }

    // optional sint32 LineMoveTime = 53 [default = -1];
    if (has_linemovetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->linemovetime());
    }

    // optional float LineCoefficient1 = 54 [default = -1];
    if (has_linecoefficient1()) {
      total_size += 2 + 4;
    }

    // optional float LineCoefficient2 = 55 [default = -1];
    if (has_linecoefficient2()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float VelocityCoefficient = 16 [default = -1];
    if (has_velocitycoefficient()) {
      total_size += 2 + 4;
    }

    // optional sint32 BulletType = 17 [default = 0];
    if (has_bullettype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bullettype());
    }

    // optional sint32 CollisionSprite = 73 [default = 0];
    if (has_collisionsprite()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->collisionsprite());
    }

    // optional sint32 CollisionScene = 75 [default = 0];
    if (has_collisionscene()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->collisionscene());
    }

    // optional float RayDamageFirst = 20 [default = -1];
    if (has_raydamagefirst()) {
      total_size += 2 + 4;
    }

    // optional sint32 RayTimeCycle = 21 [default = -1];
    if (has_raytimecycle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->raytimecycle());
    }

    // optional float RayDamageRadius = 67 [default = -1];
    if (has_raydamageradius()) {
      total_size += 2 + 4;
    }

    // optional sint32 CallNpcId = 22 [default = -1];
    if (has_callnpcid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->callnpcid());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional sint32 LifeTime = 37 [default = -1];
    if (has_lifetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->lifetime());
    }

    // optional bool TakeDamage = 39 [default = false];
    if (has_takedamage()) {
      total_size += 2 + 1;
    }

    // optional sint32 BulletDamageRangeType = 40 [default = 0];
    if (has_bulletdamagerangetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bulletdamagerangetype());
    }

    // optional float BulletDamageRangeRadius = 41 [default = -1];
    if (has_bulletdamagerangeradius()) {
      total_size += 2 + 4;
    }

    // optional float BulletDamageAngle = 42 [default = -1];
    if (has_bulletdamageangle()) {
      total_size += 2 + 4;
    }

    // optional float VerticalLineBegin = 57 [default = -1];
    if (has_verticallinebegin()) {
      total_size += 2 + 4;
    }

    // optional float VerticalLineEnd = 58 [default = -1];
    if (has_verticallineend()) {
      total_size += 2 + 4;
    }

    // optional sint32 SprayGroundShit = 81 [default = -1];
    if (has_spraygroundshit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->spraygroundshit());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional float SprayGroundScaleMin = 44 [default = 1];
    if (has_spraygroundscalemin()) {
      total_size += 2 + 4;
    }

    // optional float SprayGroundScaleMax = 45 [default = 1];
    if (has_spraygroundscalemax()) {
      total_size += 2 + 4;
    }

    // optional sint32 SprayWallShit = 82 [default = -1];
    if (has_spraywallshit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->spraywallshit());
    }

    // optional float SprayWallScaleMin = 47 [default = 1];
    if (has_spraywallscalemin()) {
      total_size += 2 + 4;
    }

    // optional float SprayWallScaleMax = 48 [default = 1];
    if (has_spraywallscalemax()) {
      total_size += 2 + 4;
    }

    // optional sint32 CreateChildTime = 68 [default = -1];
    if (has_createchildtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->createchildtime());
    }

    // optional bool ModelRotate = 59 [default = false];
    if (has_modelrotate()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional float RotateX = 60 [default = 0];
    if (has_rotatex()) {
      total_size += 2 + 4;
    }

    // optional float RotateY = 61 [default = 0];
    if (has_rotatey()) {
      total_size += 2 + 4;
    }

    // optional float RotateZ = 62 [default = 0];
    if (has_rotatez()) {
      total_size += 2 + 4;
    }

    // optional float RotateSpeed = 63 [default = 0];
    if (has_rotatespeed()) {
      total_size += 2 + 4;
    }

    // optional bool Clockwise = 83 [default = false];
    if (has_clockwise()) {
      total_size += 2 + 1;
    }

    // optional bool RotateMoveForward = 66 [default = false];
    if (has_rotatemoveforward()) {
      total_size += 2 + 1;
    }

    // optional float HAngle = 69 [default = 0];
    if (has_hangle()) {
      total_size += 2 + 4;
    }

    // optional float VAngle = 70 [default = 0];
    if (has_vangle()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional bool GroundBounce = 76 [default = false];
    if (has_groundbounce()) {
      total_size += 2 + 1;
    }

    // optional bool WallBounce = 77 [default = false];
    if (has_wallbounce()) {
      total_size += 2 + 1;
    }

    // optional float DampBounce = 78 [default = -1];
    if (has_dampbounce()) {
      total_size += 2 + 4;
    }

    // optional sint32 BounceTimes = 79 [default = -1];
    if (has_bouncetimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bouncetimes());
    }

    // optional float BounceVelocity = 80 [default = -1];
    if (has_bouncevelocity()) {
      total_size += 2 + 4;
    }

  }
  // repeated .TrajectoryBulletChild ChildArr = 52;
  total_size += 2 * this->childarr_size();
  for (int i = 0; i < this->childarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->childarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryBullet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrajectoryBullet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrajectoryBullet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrajectoryBullet::MergeFrom(const TrajectoryBullet& from) {
  GOOGLE_CHECK_NE(&from, this);
  childarr_.MergeFrom(from.childarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sortindex()) {
      set_sortindex(from.sortindex());
    }
    if (from.has_bulletid()) {
      set_bulletid(from.bulletid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_tracktype()) {
      set_tracktype(from.tracktype());
    }
    if (from.has_shottime()) {
      set_shottime(from.shottime());
    }
    if (from.has_randomradius()) {
      set_randomradius(from.randomradius());
    }
    if (from.has_bulletmodelname()) {
      set_bulletmodelname(from.bulletmodelname());
    }
    if (from.has_bulletscalemin()) {
      set_bulletscalemin(from.bulletscalemin());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bulletscalemax()) {
      set_bulletscalemax(from.bulletscalemax());
    }
    if (from.has_velocityrandom()) {
      set_velocityrandom(from.velocityrandom());
    }
    if (from.has_velocitymin()) {
      set_velocitymin(from.velocitymin());
    }
    if (from.has_velocitymax()) {
      set_velocitymax(from.velocitymax());
    }
    if (from.has_mass()) {
      set_mass(from.mass());
    }
    if (from.has_linemovetime()) {
      set_linemovetime(from.linemovetime());
    }
    if (from.has_linecoefficient1()) {
      set_linecoefficient1(from.linecoefficient1());
    }
    if (from.has_linecoefficient2()) {
      set_linecoefficient2(from.linecoefficient2());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_velocitycoefficient()) {
      set_velocitycoefficient(from.velocitycoefficient());
    }
    if (from.has_bullettype()) {
      set_bullettype(from.bullettype());
    }
    if (from.has_collisionsprite()) {
      set_collisionsprite(from.collisionsprite());
    }
    if (from.has_collisionscene()) {
      set_collisionscene(from.collisionscene());
    }
    if (from.has_raydamagefirst()) {
      set_raydamagefirst(from.raydamagefirst());
    }
    if (from.has_raytimecycle()) {
      set_raytimecycle(from.raytimecycle());
    }
    if (from.has_raydamageradius()) {
      set_raydamageradius(from.raydamageradius());
    }
    if (from.has_callnpcid()) {
      set_callnpcid(from.callnpcid());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_lifetime()) {
      set_lifetime(from.lifetime());
    }
    if (from.has_takedamage()) {
      set_takedamage(from.takedamage());
    }
    if (from.has_bulletdamagerangetype()) {
      set_bulletdamagerangetype(from.bulletdamagerangetype());
    }
    if (from.has_bulletdamagerangeradius()) {
      set_bulletdamagerangeradius(from.bulletdamagerangeradius());
    }
    if (from.has_bulletdamageangle()) {
      set_bulletdamageangle(from.bulletdamageangle());
    }
    if (from.has_verticallinebegin()) {
      set_verticallinebegin(from.verticallinebegin());
    }
    if (from.has_verticallineend()) {
      set_verticallineend(from.verticallineend());
    }
    if (from.has_spraygroundshit()) {
      set_spraygroundshit(from.spraygroundshit());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_spraygroundscalemin()) {
      set_spraygroundscalemin(from.spraygroundscalemin());
    }
    if (from.has_spraygroundscalemax()) {
      set_spraygroundscalemax(from.spraygroundscalemax());
    }
    if (from.has_spraywallshit()) {
      set_spraywallshit(from.spraywallshit());
    }
    if (from.has_spraywallscalemin()) {
      set_spraywallscalemin(from.spraywallscalemin());
    }
    if (from.has_spraywallscalemax()) {
      set_spraywallscalemax(from.spraywallscalemax());
    }
    if (from.has_createchildtime()) {
      set_createchildtime(from.createchildtime());
    }
    if (from.has_modelrotate()) {
      set_modelrotate(from.modelrotate());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_rotatex()) {
      set_rotatex(from.rotatex());
    }
    if (from.has_rotatey()) {
      set_rotatey(from.rotatey());
    }
    if (from.has_rotatez()) {
      set_rotatez(from.rotatez());
    }
    if (from.has_rotatespeed()) {
      set_rotatespeed(from.rotatespeed());
    }
    if (from.has_clockwise()) {
      set_clockwise(from.clockwise());
    }
    if (from.has_rotatemoveforward()) {
      set_rotatemoveforward(from.rotatemoveforward());
    }
    if (from.has_hangle()) {
      set_hangle(from.hangle());
    }
    if (from.has_vangle()) {
      set_vangle(from.vangle());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_groundbounce()) {
      set_groundbounce(from.groundbounce());
    }
    if (from.has_wallbounce()) {
      set_wallbounce(from.wallbounce());
    }
    if (from.has_dampbounce()) {
      set_dampbounce(from.dampbounce());
    }
    if (from.has_bouncetimes()) {
      set_bouncetimes(from.bouncetimes());
    }
    if (from.has_bouncevelocity()) {
      set_bouncevelocity(from.bouncevelocity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrajectoryBullet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryBullet::CopyFrom(const TrajectoryBullet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryBullet::IsInitialized() const {

  return true;
}

void TrajectoryBullet::Swap(TrajectoryBullet* other) {
  if (other != this) {
    std::swap(sortindex_, other->sortindex_);
    std::swap(bulletid_, other->bulletid_);
    std::swap(groupid_, other->groupid_);
    std::swap(tracktype_, other->tracktype_);
    std::swap(shottime_, other->shottime_);
    std::swap(randomradius_, other->randomradius_);
    std::swap(bulletmodelname_, other->bulletmodelname_);
    std::swap(bulletscalemin_, other->bulletscalemin_);
    std::swap(bulletscalemax_, other->bulletscalemax_);
    std::swap(velocityrandom_, other->velocityrandom_);
    std::swap(velocitymin_, other->velocitymin_);
    std::swap(velocitymax_, other->velocitymax_);
    std::swap(mass_, other->mass_);
    std::swap(linemovetime_, other->linemovetime_);
    std::swap(linecoefficient1_, other->linecoefficient1_);
    std::swap(linecoefficient2_, other->linecoefficient2_);
    std::swap(velocitycoefficient_, other->velocitycoefficient_);
    std::swap(bullettype_, other->bullettype_);
    std::swap(collisionsprite_, other->collisionsprite_);
    std::swap(collisionscene_, other->collisionscene_);
    std::swap(raydamagefirst_, other->raydamagefirst_);
    std::swap(raytimecycle_, other->raytimecycle_);
    std::swap(raydamageradius_, other->raydamageradius_);
    std::swap(callnpcid_, other->callnpcid_);
    std::swap(lifetime_, other->lifetime_);
    std::swap(takedamage_, other->takedamage_);
    std::swap(bulletdamagerangetype_, other->bulletdamagerangetype_);
    std::swap(bulletdamagerangeradius_, other->bulletdamagerangeradius_);
    std::swap(bulletdamageangle_, other->bulletdamageangle_);
    std::swap(verticallinebegin_, other->verticallinebegin_);
    std::swap(verticallineend_, other->verticallineend_);
    std::swap(spraygroundshit_, other->spraygroundshit_);
    std::swap(spraygroundscalemin_, other->spraygroundscalemin_);
    std::swap(spraygroundscalemax_, other->spraygroundscalemax_);
    std::swap(spraywallshit_, other->spraywallshit_);
    std::swap(spraywallscalemin_, other->spraywallscalemin_);
    std::swap(spraywallscalemax_, other->spraywallscalemax_);
    std::swap(createchildtime_, other->createchildtime_);
    childarr_.Swap(&other->childarr_);
    std::swap(modelrotate_, other->modelrotate_);
    std::swap(rotatex_, other->rotatex_);
    std::swap(rotatey_, other->rotatey_);
    std::swap(rotatez_, other->rotatez_);
    std::swap(rotatespeed_, other->rotatespeed_);
    std::swap(clockwise_, other->clockwise_);
    std::swap(rotatemoveforward_, other->rotatemoveforward_);
    std::swap(hangle_, other->hangle_);
    std::swap(vangle_, other->vangle_);
    std::swap(groundbounce_, other->groundbounce_);
    std::swap(wallbounce_, other->wallbounce_);
    std::swap(dampbounce_, other->dampbounce_);
    std::swap(bouncetimes_, other->bouncetimes_);
    std::swap(bouncevelocity_, other->bouncevelocity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrajectoryBullet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrajectoryBullet_descriptor_;
  metadata.reflection = TrajectoryBullet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrajectoryBulletTrajectory::kTimeLengthFieldNumber;
const int TrajectoryBulletTrajectory::kTrajectoryListFieldNumber;
const int TrajectoryBulletTrajectory::kIdFieldNumber;
#endif  // !_MSC_VER

TrajectoryBulletTrajectory::TrajectoryBulletTrajectory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrajectoryBulletTrajectory::InitAsDefaultInstance() {
}

TrajectoryBulletTrajectory::TrajectoryBulletTrajectory(const TrajectoryBulletTrajectory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrajectoryBulletTrajectory::SharedCtor() {
  _cached_size_ = 0;
  timelength_ = -1;
  id_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrajectoryBulletTrajectory::~TrajectoryBulletTrajectory() {
  SharedDtor();
}

void TrajectoryBulletTrajectory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrajectoryBulletTrajectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryBulletTrajectory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrajectoryBulletTrajectory_descriptor_;
}

const TrajectoryBulletTrajectory& TrajectoryBulletTrajectory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TrajectoryCliRpc_2eproto();
  return *default_instance_;
}

TrajectoryBulletTrajectory* TrajectoryBulletTrajectory::default_instance_ = NULL;

TrajectoryBulletTrajectory* TrajectoryBulletTrajectory::New() const {
  return new TrajectoryBulletTrajectory;
}

void TrajectoryBulletTrajectory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timelength_ = -1;
    id_ = -1;
  }
  trajectorylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrajectoryBulletTrajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TrajectoryTrajectory TrajectoryList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TrajectoryList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trajectorylist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_TrajectoryList;
        if (input->ExpectTag(16)) goto parse_TimeLength;
        break;
      }

      // optional sint32 TimeLength = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &timelength_)));
          set_has_timelength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Id;
        break;
      }

      // optional sint32 Id = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrajectoryBulletTrajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TrajectoryTrajectory TrajectoryList = 1;
  for (int i = 0; i < this->trajectorylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->trajectorylist(i), output);
  }

  // optional sint32 TimeLength = 2 [default = -1];
  if (has_timelength()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->timelength(), output);
  }

  // optional sint32 Id = 4 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrajectoryBulletTrajectory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TrajectoryTrajectory TrajectoryList = 1;
  for (int i = 0; i < this->trajectorylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->trajectorylist(i), target);
  }

  // optional sint32 TimeLength = 2 [default = -1];
  if (has_timelength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->timelength(), target);
  }

  // optional sint32 Id = 4 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrajectoryBulletTrajectory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 TimeLength = 2 [default = -1];
    if (has_timelength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->timelength());
    }

    // optional sint32 Id = 4 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->id());
    }

  }
  // repeated .TrajectoryTrajectory TrajectoryList = 1;
  total_size += 1 * this->trajectorylist_size();
  for (int i = 0; i < this->trajectorylist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trajectorylist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryBulletTrajectory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrajectoryBulletTrajectory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrajectoryBulletTrajectory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrajectoryBulletTrajectory::MergeFrom(const TrajectoryBulletTrajectory& from) {
  GOOGLE_CHECK_NE(&from, this);
  trajectorylist_.MergeFrom(from.trajectorylist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timelength()) {
      set_timelength(from.timelength());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrajectoryBulletTrajectory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryBulletTrajectory::CopyFrom(const TrajectoryBulletTrajectory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryBulletTrajectory::IsInitialized() const {

  return true;
}

void TrajectoryBulletTrajectory::Swap(TrajectoryBulletTrajectory* other) {
  if (other != this) {
    std::swap(timelength_, other->timelength_);
    trajectorylist_.Swap(&other->trajectorylist_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrajectoryBulletTrajectory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrajectoryBulletTrajectory_descriptor_;
  metadata.reflection = TrajectoryBulletTrajectory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TrajectoryRpcSyncNotify::TrajectoryRpcSyncNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrajectoryRpcSyncNotify::InitAsDefaultInstance() {
}

TrajectoryRpcSyncNotify::TrajectoryRpcSyncNotify(const TrajectoryRpcSyncNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrajectoryRpcSyncNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrajectoryRpcSyncNotify::~TrajectoryRpcSyncNotify() {
  SharedDtor();
}

void TrajectoryRpcSyncNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrajectoryRpcSyncNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryRpcSyncNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrajectoryRpcSyncNotify_descriptor_;
}

const TrajectoryRpcSyncNotify& TrajectoryRpcSyncNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TrajectoryCliRpc_2eproto();
  return *default_instance_;
}

TrajectoryRpcSyncNotify* TrajectoryRpcSyncNotify::default_instance_ = NULL;

TrajectoryRpcSyncNotify* TrajectoryRpcSyncNotify::New() const {
  return new TrajectoryRpcSyncNotify;
}

void TrajectoryRpcSyncNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrajectoryRpcSyncNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void TrajectoryRpcSyncNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrajectoryRpcSyncNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrajectoryRpcSyncNotify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryRpcSyncNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrajectoryRpcSyncNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrajectoryRpcSyncNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrajectoryRpcSyncNotify::MergeFrom(const TrajectoryRpcSyncNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrajectoryRpcSyncNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryRpcSyncNotify::CopyFrom(const TrajectoryRpcSyncNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryRpcSyncNotify::IsInitialized() const {

  return true;
}

void TrajectoryRpcSyncNotify::Swap(TrajectoryRpcSyncNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrajectoryRpcSyncNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrajectoryRpcSyncNotify_descriptor_;
  metadata.reflection = TrajectoryRpcSyncNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrajectoryBulletChild::kIdFieldNumber;
const int TrajectoryBulletChild::kShotTimeTypeFieldNumber;
const int TrajectoryBulletChild::kIsFirstFieldNumber;
const int TrajectoryBulletChild::kTimeMinIntervalFieldNumber;
const int TrajectoryBulletChild::kTimeMaxIntervalFieldNumber;
const int TrajectoryBulletChild::kChildMaxCountFieldNumber;
#endif  // !_MSC_VER

TrajectoryBulletChild::TrajectoryBulletChild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrajectoryBulletChild::InitAsDefaultInstance() {
}

TrajectoryBulletChild::TrajectoryBulletChild(const TrajectoryBulletChild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrajectoryBulletChild::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  shottimetype_ = 0;
  isfirst_ = false;
  timemininterval_ = -1;
  timemaxinterval_ = -1;
  childmaxcount_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrajectoryBulletChild::~TrajectoryBulletChild() {
  SharedDtor();
}

void TrajectoryBulletChild::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrajectoryBulletChild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryBulletChild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrajectoryBulletChild_descriptor_;
}

const TrajectoryBulletChild& TrajectoryBulletChild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TrajectoryCliRpc_2eproto();
  return *default_instance_;
}

TrajectoryBulletChild* TrajectoryBulletChild::default_instance_ = NULL;

TrajectoryBulletChild* TrajectoryBulletChild::New() const {
  return new TrajectoryBulletChild;
}

void TrajectoryBulletChild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = -1;
    shottimetype_ = 0;
    isfirst_ = false;
    timemininterval_ = -1;
    timemaxinterval_ = -1;
    childmaxcount_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrajectoryBulletChild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Id = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ShotTimeType;
        break;
      }

      // optional sint32 ShotTimeType = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShotTimeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &shottimetype_)));
          set_has_shottimetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsFirst;
        break;
      }

      // optional bool IsFirst = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsFirst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfirst_)));
          set_has_isfirst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_TimeMaxInterval;
        break;
      }

      // optional sint32 TimeMaxInterval = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeMaxInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &timemaxinterval_)));
          set_has_timemaxinterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_TimeMinInterval;
        break;
      }

      // optional sint32 TimeMinInterval = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeMinInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &timemininterval_)));
          set_has_timemininterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ChildMaxCount;
        break;
      }

      // optional sint32 ChildMaxCount = 8 [default = -1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ChildMaxCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &childmaxcount_)));
          set_has_childmaxcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrajectoryBulletChild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Id = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->id(), output);
  }

  // optional sint32 ShotTimeType = 2 [default = 0];
  if (has_shottimetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->shottimetype(), output);
  }

  // optional bool IsFirst = 3 [default = false];
  if (has_isfirst()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isfirst(), output);
  }

  // optional sint32 TimeMaxInterval = 5 [default = -1];
  if (has_timemaxinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->timemaxinterval(), output);
  }

  // optional sint32 TimeMinInterval = 6 [default = -1];
  if (has_timemininterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->timemininterval(), output);
  }

  // optional sint32 ChildMaxCount = 8 [default = -1];
  if (has_childmaxcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->childmaxcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrajectoryBulletChild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Id = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->id(), target);
  }

  // optional sint32 ShotTimeType = 2 [default = 0];
  if (has_shottimetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->shottimetype(), target);
  }

  // optional bool IsFirst = 3 [default = false];
  if (has_isfirst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isfirst(), target);
  }

  // optional sint32 TimeMaxInterval = 5 [default = -1];
  if (has_timemaxinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->timemaxinterval(), target);
  }

  // optional sint32 TimeMinInterval = 6 [default = -1];
  if (has_timemininterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->timemininterval(), target);
  }

  // optional sint32 ChildMaxCount = 8 [default = -1];
  if (has_childmaxcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->childmaxcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrajectoryBulletChild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Id = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->id());
    }

    // optional sint32 ShotTimeType = 2 [default = 0];
    if (has_shottimetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->shottimetype());
    }

    // optional bool IsFirst = 3 [default = false];
    if (has_isfirst()) {
      total_size += 1 + 1;
    }

    // optional sint32 TimeMinInterval = 6 [default = -1];
    if (has_timemininterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->timemininterval());
    }

    // optional sint32 TimeMaxInterval = 5 [default = -1];
    if (has_timemaxinterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->timemaxinterval());
    }

    // optional sint32 ChildMaxCount = 8 [default = -1];
    if (has_childmaxcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->childmaxcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryBulletChild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrajectoryBulletChild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrajectoryBulletChild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrajectoryBulletChild::MergeFrom(const TrajectoryBulletChild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_shottimetype()) {
      set_shottimetype(from.shottimetype());
    }
    if (from.has_isfirst()) {
      set_isfirst(from.isfirst());
    }
    if (from.has_timemininterval()) {
      set_timemininterval(from.timemininterval());
    }
    if (from.has_timemaxinterval()) {
      set_timemaxinterval(from.timemaxinterval());
    }
    if (from.has_childmaxcount()) {
      set_childmaxcount(from.childmaxcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrajectoryBulletChild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryBulletChild::CopyFrom(const TrajectoryBulletChild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryBulletChild::IsInitialized() const {

  return true;
}

void TrajectoryBulletChild::Swap(TrajectoryBulletChild* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(shottimetype_, other->shottimetype_);
    std::swap(isfirst_, other->isfirst_);
    std::swap(timemininterval_, other->timemininterval_);
    std::swap(timemaxinterval_, other->timemaxinterval_);
    std::swap(childmaxcount_, other->childmaxcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrajectoryBulletChild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrajectoryBulletChild_descriptor_;
  metadata.reflection = TrajectoryBulletChild_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
