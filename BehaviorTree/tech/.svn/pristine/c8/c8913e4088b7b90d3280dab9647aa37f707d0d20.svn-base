// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BattleSPVPSvrRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BattleSPVPSvrRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BattleSPVPRpcCreateRoomSPVPAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleSPVPRpcCreateRoomSPVPAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleSPVPRpcCreateRoomSPVPReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleSPVPRpcCreateRoomSPVPReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleSPVPUserP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleSPVPUserP_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BattleSPVPSvrRpc_2eproto() {
  protobuf_AddDesc_BattleSPVPSvrRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BattleSPVPSvrRpc.proto");
  GOOGLE_CHECK(file != NULL);
  BattleSPVPRpcCreateRoomSPVPAsk_descriptor_ = file->message_type(0);
  static const int BattleSPVPRpcCreateRoomSPVPAsk_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSPVPRpcCreateRoomSPVPAsk, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSPVPRpcCreateRoomSPVPAsk, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSPVPRpcCreateRoomSPVPAsk, sceneconfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSPVPRpcCreateRoomSPVPAsk, sceneid_),
  };
  BattleSPVPRpcCreateRoomSPVPAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleSPVPRpcCreateRoomSPVPAsk_descriptor_,
      BattleSPVPRpcCreateRoomSPVPAsk::default_instance_,
      BattleSPVPRpcCreateRoomSPVPAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSPVPRpcCreateRoomSPVPAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSPVPRpcCreateRoomSPVPAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleSPVPRpcCreateRoomSPVPAsk));
  BattleSPVPRpcCreateRoomSPVPReply_descriptor_ = file->message_type(1);
  static const int BattleSPVPRpcCreateRoomSPVPReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSPVPRpcCreateRoomSPVPReply, result_),
  };
  BattleSPVPRpcCreateRoomSPVPReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleSPVPRpcCreateRoomSPVPReply_descriptor_,
      BattleSPVPRpcCreateRoomSPVPReply::default_instance_,
      BattleSPVPRpcCreateRoomSPVPReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSPVPRpcCreateRoomSPVPReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSPVPRpcCreateRoomSPVPReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleSPVPRpcCreateRoomSPVPReply));
  BattleSPVPUserP_descriptor_ = file->message_type(2);
  static const int BattleSPVPUserP_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSPVPUserP, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSPVPUserP, hreoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSPVPUserP, ismonster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSPVPUserP, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSPVPUserP, teamid_),
  };
  BattleSPVPUserP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleSPVPUserP_descriptor_,
      BattleSPVPUserP::default_instance_,
      BattleSPVPUserP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSPVPUserP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSPVPUserP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleSPVPUserP));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BattleSPVPSvrRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleSPVPRpcCreateRoomSPVPAsk_descriptor_, &BattleSPVPRpcCreateRoomSPVPAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleSPVPRpcCreateRoomSPVPReply_descriptor_, &BattleSPVPRpcCreateRoomSPVPReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleSPVPUserP_descriptor_, &BattleSPVPUserP::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BattleSPVPSvrRpc_2eproto() {
  delete BattleSPVPRpcCreateRoomSPVPAsk::default_instance_;
  delete BattleSPVPRpcCreateRoomSPVPAsk_reflection_;
  delete BattleSPVPRpcCreateRoomSPVPReply::default_instance_;
  delete BattleSPVPRpcCreateRoomSPVPReply_reflection_;
  delete BattleSPVPUserP::default_instance_;
  delete BattleSPVPUserP_reflection_;
}

void protobuf_AddDesc_BattleSPVPSvrRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026BattleSPVPSvrRpc.proto\032\022PublicStruct.p"
    "roto\"\203\001\n\036BattleSPVPRpcCreateRoomSPVPAsk\022"
    "!\n\007Members\030\001 \003(\0132\020.BattleSPVPUserP\022\022\n\006Ro"
    "omID\030\003 \001(\022:\002-1\022\026\n\013SceneConfId\030\004 \001(\021:\0010\022\022"
    "\n\007SceneID\030\005 \001(\021:\0011\"9\n BattleSPVPRpcCreat"
    "eRoomSPVPReply\022\025\n\006Result\030\001 \001(\021:\005-9999\"m\n"
    "\017BattleSPVPUserP\022\017\n\003Uid\030\001 \001(\022:\002-1\022\022\n\006Hre"
    "oID\030\002 \001(\021:\002-1\022\025\n\tIsMonster\030\003 \001(\021:\002-1\022\013\n\003"
    "Key\030\004 \001(\t\022\021\n\006TeamId\030\005 \001(\021:\0010", 348);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BattleSPVPSvrRpc.proto", &protobuf_RegisterTypes);
  BattleSPVPRpcCreateRoomSPVPAsk::default_instance_ = new BattleSPVPRpcCreateRoomSPVPAsk();
  BattleSPVPRpcCreateRoomSPVPReply::default_instance_ = new BattleSPVPRpcCreateRoomSPVPReply();
  BattleSPVPUserP::default_instance_ = new BattleSPVPUserP();
  BattleSPVPRpcCreateRoomSPVPAsk::default_instance_->InitAsDefaultInstance();
  BattleSPVPRpcCreateRoomSPVPReply::default_instance_->InitAsDefaultInstance();
  BattleSPVPUserP::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BattleSPVPSvrRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BattleSPVPSvrRpc_2eproto {
  StaticDescriptorInitializer_BattleSPVPSvrRpc_2eproto() {
    protobuf_AddDesc_BattleSPVPSvrRpc_2eproto();
  }
} static_descriptor_initializer_BattleSPVPSvrRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BattleSPVPRpcCreateRoomSPVPAsk::kMembersFieldNumber;
const int BattleSPVPRpcCreateRoomSPVPAsk::kRoomIDFieldNumber;
const int BattleSPVPRpcCreateRoomSPVPAsk::kSceneConfIdFieldNumber;
const int BattleSPVPRpcCreateRoomSPVPAsk::kSceneIDFieldNumber;
#endif  // !_MSC_VER

BattleSPVPRpcCreateRoomSPVPAsk::BattleSPVPRpcCreateRoomSPVPAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleSPVPRpcCreateRoomSPVPAsk::InitAsDefaultInstance() {
}

BattleSPVPRpcCreateRoomSPVPAsk::BattleSPVPRpcCreateRoomSPVPAsk(const BattleSPVPRpcCreateRoomSPVPAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleSPVPRpcCreateRoomSPVPAsk::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_LONGLONG(-1);
  sceneconfid_ = 0;
  sceneid_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleSPVPRpcCreateRoomSPVPAsk::~BattleSPVPRpcCreateRoomSPVPAsk() {
  SharedDtor();
}

void BattleSPVPRpcCreateRoomSPVPAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleSPVPRpcCreateRoomSPVPAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleSPVPRpcCreateRoomSPVPAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleSPVPRpcCreateRoomSPVPAsk_descriptor_;
}

const BattleSPVPRpcCreateRoomSPVPAsk& BattleSPVPRpcCreateRoomSPVPAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleSPVPSvrRpc_2eproto();
  return *default_instance_;
}

BattleSPVPRpcCreateRoomSPVPAsk* BattleSPVPRpcCreateRoomSPVPAsk::default_instance_ = NULL;

BattleSPVPRpcCreateRoomSPVPAsk* BattleSPVPRpcCreateRoomSPVPAsk::New() const {
  return new BattleSPVPRpcCreateRoomSPVPAsk;
}

void BattleSPVPRpcCreateRoomSPVPAsk::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    roomid_ = GOOGLE_LONGLONG(-1);
    sceneconfid_ = 0;
    sceneid_ = 1;
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleSPVPRpcCreateRoomSPVPAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BattleSPVPUserP Members = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Members;
        if (input->ExpectTag(24)) goto parse_RoomID;
        break;
      }

      // optional sint64 RoomID = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoomID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_SceneConfId;
        break;
      }

      // optional sint32 SceneConfId = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SceneConfId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &sceneconfid_)));
          set_has_sceneconfid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_SceneID;
        break;
      }

      // optional sint32 SceneID = 5 [default = 1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SceneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleSPVPRpcCreateRoomSPVPAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .BattleSPVPUserP Members = 1;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->members(i), output);
  }

  // optional sint64 RoomID = 3 [default = -1];
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->roomid(), output);
  }

  // optional sint32 SceneConfId = 4 [default = 0];
  if (has_sceneconfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->sceneconfid(), output);
  }

  // optional sint32 SceneID = 5 [default = 1];
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleSPVPRpcCreateRoomSPVPAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .BattleSPVPUserP Members = 1;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->members(i), target);
  }

  // optional sint64 RoomID = 3 [default = -1];
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->roomid(), target);
  }

  // optional sint32 SceneConfId = 4 [default = 0];
  if (has_sceneconfid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->sceneconfid(), target);
  }

  // optional sint32 SceneID = 5 [default = 1];
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleSPVPRpcCreateRoomSPVPAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional sint64 RoomID = 3 [default = -1];
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->roomid());
    }

    // optional sint32 SceneConfId = 4 [default = 0];
    if (has_sceneconfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->sceneconfid());
    }

    // optional sint32 SceneID = 5 [default = 1];
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->sceneid());
    }

  }
  // repeated .BattleSPVPUserP Members = 1;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleSPVPRpcCreateRoomSPVPAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleSPVPRpcCreateRoomSPVPAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleSPVPRpcCreateRoomSPVPAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleSPVPRpcCreateRoomSPVPAsk::MergeFrom(const BattleSPVPRpcCreateRoomSPVPAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_sceneconfid()) {
      set_sceneconfid(from.sceneconfid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleSPVPRpcCreateRoomSPVPAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleSPVPRpcCreateRoomSPVPAsk::CopyFrom(const BattleSPVPRpcCreateRoomSPVPAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleSPVPRpcCreateRoomSPVPAsk::IsInitialized() const {

  return true;
}

void BattleSPVPRpcCreateRoomSPVPAsk::Swap(BattleSPVPRpcCreateRoomSPVPAsk* other) {
  if (other != this) {
    members_.Swap(&other->members_);
    std::swap(roomid_, other->roomid_);
    std::swap(sceneconfid_, other->sceneconfid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleSPVPRpcCreateRoomSPVPAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleSPVPRpcCreateRoomSPVPAsk_descriptor_;
  metadata.reflection = BattleSPVPRpcCreateRoomSPVPAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleSPVPRpcCreateRoomSPVPReply::kResultFieldNumber;
#endif  // !_MSC_VER

BattleSPVPRpcCreateRoomSPVPReply::BattleSPVPRpcCreateRoomSPVPReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleSPVPRpcCreateRoomSPVPReply::InitAsDefaultInstance() {
}

BattleSPVPRpcCreateRoomSPVPReply::BattleSPVPRpcCreateRoomSPVPReply(const BattleSPVPRpcCreateRoomSPVPReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleSPVPRpcCreateRoomSPVPReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleSPVPRpcCreateRoomSPVPReply::~BattleSPVPRpcCreateRoomSPVPReply() {
  SharedDtor();
}

void BattleSPVPRpcCreateRoomSPVPReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleSPVPRpcCreateRoomSPVPReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleSPVPRpcCreateRoomSPVPReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleSPVPRpcCreateRoomSPVPReply_descriptor_;
}

const BattleSPVPRpcCreateRoomSPVPReply& BattleSPVPRpcCreateRoomSPVPReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleSPVPSvrRpc_2eproto();
  return *default_instance_;
}

BattleSPVPRpcCreateRoomSPVPReply* BattleSPVPRpcCreateRoomSPVPReply::default_instance_ = NULL;

BattleSPVPRpcCreateRoomSPVPReply* BattleSPVPRpcCreateRoomSPVPReply::New() const {
  return new BattleSPVPRpcCreateRoomSPVPReply;
}

void BattleSPVPRpcCreateRoomSPVPReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleSPVPRpcCreateRoomSPVPReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleSPVPRpcCreateRoomSPVPReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleSPVPRpcCreateRoomSPVPReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleSPVPRpcCreateRoomSPVPReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleSPVPRpcCreateRoomSPVPReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleSPVPRpcCreateRoomSPVPReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleSPVPRpcCreateRoomSPVPReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleSPVPRpcCreateRoomSPVPReply::MergeFrom(const BattleSPVPRpcCreateRoomSPVPReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleSPVPRpcCreateRoomSPVPReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleSPVPRpcCreateRoomSPVPReply::CopyFrom(const BattleSPVPRpcCreateRoomSPVPReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleSPVPRpcCreateRoomSPVPReply::IsInitialized() const {

  return true;
}

void BattleSPVPRpcCreateRoomSPVPReply::Swap(BattleSPVPRpcCreateRoomSPVPReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleSPVPRpcCreateRoomSPVPReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleSPVPRpcCreateRoomSPVPReply_descriptor_;
  metadata.reflection = BattleSPVPRpcCreateRoomSPVPReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleSPVPUserP::kUidFieldNumber;
const int BattleSPVPUserP::kHreoIDFieldNumber;
const int BattleSPVPUserP::kIsMonsterFieldNumber;
const int BattleSPVPUserP::kKeyFieldNumber;
const int BattleSPVPUserP::kTeamIdFieldNumber;
#endif  // !_MSC_VER

BattleSPVPUserP::BattleSPVPUserP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleSPVPUserP::InitAsDefaultInstance() {
}

BattleSPVPUserP::BattleSPVPUserP(const BattleSPVPUserP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleSPVPUserP::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(-1);
  hreoid_ = -1;
  ismonster_ = -1;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  teamid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleSPVPUserP::~BattleSPVPUserP() {
  SharedDtor();
}

void BattleSPVPUserP::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void BattleSPVPUserP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleSPVPUserP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleSPVPUserP_descriptor_;
}

const BattleSPVPUserP& BattleSPVPUserP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleSPVPSvrRpc_2eproto();
  return *default_instance_;
}

BattleSPVPUserP* BattleSPVPUserP::default_instance_ = NULL;

BattleSPVPUserP* BattleSPVPUserP::New() const {
  return new BattleSPVPUserP;
}

void BattleSPVPUserP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(-1);
    hreoid_ = -1;
    ismonster_ = -1;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    teamid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleSPVPUserP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 Uid = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HreoID;
        break;
      }

      // optional sint32 HreoID = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HreoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &hreoid_)));
          set_has_hreoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsMonster;
        break;
      }

      // optional sint32 IsMonster = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsMonster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &ismonster_)));
          set_has_ismonster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Key;
        break;
      }

      // optional string Key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_TeamId;
        break;
      }

      // optional sint32 TeamId = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleSPVPUserP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint64 Uid = 1 [default = -1];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->uid(), output);
  }

  // optional sint32 HreoID = 2 [default = -1];
  if (has_hreoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->hreoid(), output);
  }

  // optional sint32 IsMonster = 3 [default = -1];
  if (has_ismonster()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->ismonster(), output);
  }

  // optional string Key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->key(), output);
  }

  // optional sint32 TeamId = 5 [default = 0];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleSPVPUserP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint64 Uid = 1 [default = -1];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->uid(), target);
  }

  // optional sint32 HreoID = 2 [default = -1];
  if (has_hreoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->hreoid(), target);
  }

  // optional sint32 IsMonster = 3 [default = -1];
  if (has_ismonster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->ismonster(), target);
  }

  // optional string Key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->key(), target);
  }

  // optional sint32 TeamId = 5 [default = 0];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleSPVPUserP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 Uid = 1 [default = -1];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->uid());
    }

    // optional sint32 HreoID = 2 [default = -1];
    if (has_hreoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->hreoid());
    }

    // optional sint32 IsMonster = 3 [default = -1];
    if (has_ismonster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->ismonster());
    }

    // optional string Key = 4;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional sint32 TeamId = 5 [default = 0];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleSPVPUserP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleSPVPUserP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleSPVPUserP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleSPVPUserP::MergeFrom(const BattleSPVPUserP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_hreoid()) {
      set_hreoid(from.hreoid());
    }
    if (from.has_ismonster()) {
      set_ismonster(from.ismonster());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleSPVPUserP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleSPVPUserP::CopyFrom(const BattleSPVPUserP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleSPVPUserP::IsInitialized() const {

  return true;
}

void BattleSPVPUserP::Swap(BattleSPVPUserP* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(hreoid_, other->hreoid_);
    std::swap(ismonster_, other->ismonster_);
    std::swap(key_, other->key_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleSPVPUserP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleSPVPUserP_descriptor_;
  metadata.reflection = BattleSPVPUserP_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
