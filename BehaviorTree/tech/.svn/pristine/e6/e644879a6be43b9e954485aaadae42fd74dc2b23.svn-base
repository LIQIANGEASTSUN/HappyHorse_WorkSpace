// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MatchSPVPCliRpc.proto

#ifndef PROTOBUF_MatchSPVPCliRpc_2eproto__INCLUDED
#define PROTOBUF_MatchSPVPCliRpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "PublicStruct.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
void protobuf_AssignDesc_MatchSPVPCliRpc_2eproto();
void protobuf_ShutdownFile_MatchSPVPCliRpc_2eproto();

class MatchSPVPUserMessage;
class MatchSPVPRpcStartMatchAsk;
class MatchSPVPRpcStartMatchReply;
class MatchSPVPRpcInvitationAsk;
class MatchSPVPRpcInvitationReply;
class MatchSPVPRpcMatchBroadcasNotify;
class MatchSPVPRpcAgreeInvitationNotify;
class MatchSPVPRpcStartGameNotify;
class MatchSPVPRpcDeleteMatchNotify;
class MatchSPVPRpcStartSelectNotify;
class MatchSPVPRpcSelectHeroAsk;
class MatchSPVPRpcSelectHeroReply;
class MatchSPVPRpcGetStatusAsk;
class MatchSPVPRpcGetStatusReply;
class MatchSPVPRpcChangeStatusNotify;
class MatchSPVPRpcShotOffAsk;
class MatchSPVPRpcShotOffReply;
class MatchSPVPRpcSelectSceneNotify;

// ===================================================================

class MatchSPVPUserMessage : public ::google::protobuf::Message {
 public:
  MatchSPVPUserMessage();
  virtual ~MatchSPVPUserMessage();

  MatchSPVPUserMessage(const MatchSPVPUserMessage& from);

  inline MatchSPVPUserMessage& operator=(const MatchSPVPUserMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchSPVPUserMessage& default_instance();

  void Swap(MatchSPVPUserMessage* other);

  // implements Message ----------------------------------------------

  MatchSPVPUserMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchSPVPUserMessage& from);
  void MergeFrom(const MatchSPVPUserMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 HeroID = 6 [default = 0];
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 6;
  inline ::google::protobuf::int32 heroid() const;
  inline void set_heroid(::google::protobuf::int32 value);

  // optional .SmallUser PeoM = 8;
  inline bool has_peom() const;
  inline void clear_peom();
  static const int kPeoMFieldNumber = 8;
  inline const ::SmallUser& peom() const;
  inline ::SmallUser* mutable_peom();
  inline ::SmallUser* release_peom();
  inline void set_allocated_peom(::SmallUser* peom);

  // optional sint32 IsSelect = 9 [default = 0];
  inline bool has_isselect() const;
  inline void clear_isselect();
  static const int kIsSelectFieldNumber = 9;
  inline ::google::protobuf::int32 isselect() const;
  inline void set_isselect(::google::protobuf::int32 value);

  // optional sint32 GroupID = 10 [default = 0];
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIDFieldNumber = 10;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MatchSPVPUserMessage)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_peom();
  inline void clear_has_peom();
  inline void set_has_isselect();
  inline void clear_has_isselect();
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SmallUser* peom_;
  ::google::protobuf::int32 heroid_;
  ::google::protobuf::int32 isselect_;
  ::google::protobuf::int32 groupid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
  friend void protobuf_AssignDesc_MatchSPVPCliRpc_2eproto();
  friend void protobuf_ShutdownFile_MatchSPVPCliRpc_2eproto();

  void InitAsDefaultInstance();
  static MatchSPVPUserMessage* default_instance_;
};
// -------------------------------------------------------------------

class MatchSPVPRpcStartMatchAsk : public ::google::protobuf::Message {
 public:
  MatchSPVPRpcStartMatchAsk();
  virtual ~MatchSPVPRpcStartMatchAsk();

  MatchSPVPRpcStartMatchAsk(const MatchSPVPRpcStartMatchAsk& from);

  inline MatchSPVPRpcStartMatchAsk& operator=(const MatchSPVPRpcStartMatchAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchSPVPRpcStartMatchAsk& default_instance();

  void Swap(MatchSPVPRpcStartMatchAsk* other);

  // implements Message ----------------------------------------------

  MatchSPVPRpcStartMatchAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchSPVPRpcStartMatchAsk& from);
  void MergeFrom(const MatchSPVPRpcStartMatchAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 IsMatch = 1 [default = 1];
  inline bool has_ismatch() const;
  inline void clear_ismatch();
  static const int kIsMatchFieldNumber = 1;
  inline ::google::protobuf::int32 ismatch() const;
  inline void set_ismatch(::google::protobuf::int32 value);

  // optional sint32 SceneID = 2 [default = 1];
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneIDFieldNumber = 2;
  inline ::google::protobuf::int32 sceneid() const;
  inline void set_sceneid(::google::protobuf::int32 value);

  // optional sint32 ActiveID = 3 [default = 0];
  inline bool has_activeid() const;
  inline void clear_activeid();
  static const int kActiveIDFieldNumber = 3;
  inline ::google::protobuf::int32 activeid() const;
  inline void set_activeid(::google::protobuf::int32 value);

  // optional sint64 TeamID = 4 [default = -1];
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIDFieldNumber = 4;
  inline ::google::protobuf::int64 teamid() const;
  inline void set_teamid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MatchSPVPRpcStartMatchAsk)
 private:
  inline void set_has_ismatch();
  inline void clear_has_ismatch();
  inline void set_has_sceneid();
  inline void clear_has_sceneid();
  inline void set_has_activeid();
  inline void clear_has_activeid();
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ismatch_;
  ::google::protobuf::int32 sceneid_;
  ::google::protobuf::int64 teamid_;
  ::google::protobuf::int32 activeid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
  friend void protobuf_AssignDesc_MatchSPVPCliRpc_2eproto();
  friend void protobuf_ShutdownFile_MatchSPVPCliRpc_2eproto();

  void InitAsDefaultInstance();
  static MatchSPVPRpcStartMatchAsk* default_instance_;
};
// -------------------------------------------------------------------

class MatchSPVPRpcStartMatchReply : public ::google::protobuf::Message {
 public:
  MatchSPVPRpcStartMatchReply();
  virtual ~MatchSPVPRpcStartMatchReply();

  MatchSPVPRpcStartMatchReply(const MatchSPVPRpcStartMatchReply& from);

  inline MatchSPVPRpcStartMatchReply& operator=(const MatchSPVPRpcStartMatchReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchSPVPRpcStartMatchReply& default_instance();

  void Swap(MatchSPVPRpcStartMatchReply* other);

  // implements Message ----------------------------------------------

  MatchSPVPRpcStartMatchReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchSPVPRpcStartMatchReply& from);
  void MergeFrom(const MatchSPVPRpcStartMatchReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional sint32 IsMatch = 2 [default = 1];
  inline bool has_ismatch() const;
  inline void clear_ismatch();
  static const int kIsMatchFieldNumber = 2;
  inline ::google::protobuf::int32 ismatch() const;
  inline void set_ismatch(::google::protobuf::int32 value);

  // optional sint32 TimeStart = 3 [default = -1];
  inline bool has_timestart() const;
  inline void clear_timestart();
  static const int kTimeStartFieldNumber = 3;
  inline ::google::protobuf::int32 timestart() const;
  inline void set_timestart(::google::protobuf::int32 value);

  // optional sint32 TimeEnd = 4 [default = -1];
  inline bool has_timeend() const;
  inline void clear_timeend();
  static const int kTimeEndFieldNumber = 4;
  inline ::google::protobuf::int32 timeend() const;
  inline void set_timeend(::google::protobuf::int32 value);

  // optional sint32 Timer = 5 [default = -1];
  inline bool has_timer() const;
  inline void clear_timer();
  static const int kTimerFieldNumber = 5;
  inline ::google::protobuf::int32 timer() const;
  inline void set_timer(::google::protobuf::int32 value);

  // optional sint32 SceneID = 6 [default = 1];
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneIDFieldNumber = 6;
  inline ::google::protobuf::int32 sceneid() const;
  inline void set_sceneid(::google::protobuf::int32 value);

  // optional sint32 ActiveID = 7 [default = 0];
  inline bool has_activeid() const;
  inline void clear_activeid();
  static const int kActiveIDFieldNumber = 7;
  inline ::google::protobuf::int32 activeid() const;
  inline void set_activeid(::google::protobuf::int32 value);

  // optional sint64 TeamID = 8 [default = -1];
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIDFieldNumber = 8;
  inline ::google::protobuf::int64 teamid() const;
  inline void set_teamid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MatchSPVPRpcStartMatchReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_ismatch();
  inline void clear_has_ismatch();
  inline void set_has_timestart();
  inline void clear_has_timestart();
  inline void set_has_timeend();
  inline void clear_has_timeend();
  inline void set_has_timer();
  inline void clear_has_timer();
  inline void set_has_sceneid();
  inline void clear_has_sceneid();
  inline void set_has_activeid();
  inline void clear_has_activeid();
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 ismatch_;
  ::google::protobuf::int32 timestart_;
  ::google::protobuf::int32 timeend_;
  ::google::protobuf::int32 timer_;
  ::google::protobuf::int32 sceneid_;
  ::google::protobuf::int64 teamid_;
  ::google::protobuf::int32 activeid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
  friend void protobuf_AssignDesc_MatchSPVPCliRpc_2eproto();
  friend void protobuf_ShutdownFile_MatchSPVPCliRpc_2eproto();

  void InitAsDefaultInstance();
  static MatchSPVPRpcStartMatchReply* default_instance_;
};
// -------------------------------------------------------------------

class MatchSPVPRpcInvitationAsk : public ::google::protobuf::Message {
 public:
  MatchSPVPRpcInvitationAsk();
  virtual ~MatchSPVPRpcInvitationAsk();

  MatchSPVPRpcInvitationAsk(const MatchSPVPRpcInvitationAsk& from);

  inline MatchSPVPRpcInvitationAsk& operator=(const MatchSPVPRpcInvitationAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchSPVPRpcInvitationAsk& default_instance();

  void Swap(MatchSPVPRpcInvitationAsk* other);

  // implements Message ----------------------------------------------

  MatchSPVPRpcInvitationAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchSPVPRpcInvitationAsk& from);
  void MergeFrom(const MatchSPVPRpcInvitationAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 Uid = 1 [default = -1];
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MatchSPVPRpcInvitationAsk)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
  friend void protobuf_AssignDesc_MatchSPVPCliRpc_2eproto();
  friend void protobuf_ShutdownFile_MatchSPVPCliRpc_2eproto();

  void InitAsDefaultInstance();
  static MatchSPVPRpcInvitationAsk* default_instance_;
};
// -------------------------------------------------------------------

class MatchSPVPRpcInvitationReply : public ::google::protobuf::Message {
 public:
  MatchSPVPRpcInvitationReply();
  virtual ~MatchSPVPRpcInvitationReply();

  MatchSPVPRpcInvitationReply(const MatchSPVPRpcInvitationReply& from);

  inline MatchSPVPRpcInvitationReply& operator=(const MatchSPVPRpcInvitationReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchSPVPRpcInvitationReply& default_instance();

  void Swap(MatchSPVPRpcInvitationReply* other);

  // implements Message ----------------------------------------------

  MatchSPVPRpcInvitationReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchSPVPRpcInvitationReply& from);
  void MergeFrom(const MatchSPVPRpcInvitationReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional sint64 Uid = 2 [default = -1];
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MatchSPVPRpcInvitationReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 uid_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
  friend void protobuf_AssignDesc_MatchSPVPCliRpc_2eproto();
  friend void protobuf_ShutdownFile_MatchSPVPCliRpc_2eproto();

  void InitAsDefaultInstance();
  static MatchSPVPRpcInvitationReply* default_instance_;
};
// -------------------------------------------------------------------

class MatchSPVPRpcMatchBroadcasNotify : public ::google::protobuf::Message {
 public:
  MatchSPVPRpcMatchBroadcasNotify();
  virtual ~MatchSPVPRpcMatchBroadcasNotify();

  MatchSPVPRpcMatchBroadcasNotify(const MatchSPVPRpcMatchBroadcasNotify& from);

  inline MatchSPVPRpcMatchBroadcasNotify& operator=(const MatchSPVPRpcMatchBroadcasNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchSPVPRpcMatchBroadcasNotify& default_instance();

  void Swap(MatchSPVPRpcMatchBroadcasNotify* other);

  // implements Message ----------------------------------------------

  MatchSPVPRpcMatchBroadcasNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchSPVPRpcMatchBroadcasNotify& from);
  void MergeFrom(const MatchSPVPRpcMatchBroadcasNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Type = 1 [default = 1];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional sint32 TimeStart = 2 [default = -1];
  inline bool has_timestart() const;
  inline void clear_timestart();
  static const int kTimeStartFieldNumber = 2;
  inline ::google::protobuf::int32 timestart() const;
  inline void set_timestart(::google::protobuf::int32 value);

  // optional sint32 TimeEnd = 3 [default = -1];
  inline bool has_timeend() const;
  inline void clear_timeend();
  static const int kTimeEndFieldNumber = 3;
  inline ::google::protobuf::int32 timeend() const;
  inline void set_timeend(::google::protobuf::int32 value);

  // optional sint32 Timer = 4 [default = -1];
  inline bool has_timer() const;
  inline void clear_timer();
  static const int kTimerFieldNumber = 4;
  inline ::google::protobuf::int32 timer() const;
  inline void set_timer(::google::protobuf::int32 value);

  // repeated .MatchSPVPUserMessage UMess = 5;
  inline int umess_size() const;
  inline void clear_umess();
  static const int kUMessFieldNumber = 5;
  inline const ::MatchSPVPUserMessage& umess(int index) const;
  inline ::MatchSPVPUserMessage* mutable_umess(int index);
  inline ::MatchSPVPUserMessage* add_umess();
  inline const ::google::protobuf::RepeatedPtrField< ::MatchSPVPUserMessage >&
      umess() const;
  inline ::google::protobuf::RepeatedPtrField< ::MatchSPVPUserMessage >*
      mutable_umess();

  // @@protoc_insertion_point(class_scope:MatchSPVPRpcMatchBroadcasNotify)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_timestart();
  inline void clear_has_timestart();
  inline void set_has_timeend();
  inline void clear_has_timeend();
  inline void set_has_timer();
  inline void clear_has_timer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 timestart_;
  ::google::protobuf::int32 timeend_;
  ::google::protobuf::int32 timer_;
  ::google::protobuf::RepeatedPtrField< ::MatchSPVPUserMessage > umess_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
  friend void protobuf_AssignDesc_MatchSPVPCliRpc_2eproto();
  friend void protobuf_ShutdownFile_MatchSPVPCliRpc_2eproto();

  void InitAsDefaultInstance();
  static MatchSPVPRpcMatchBroadcasNotify* default_instance_;
};
// -------------------------------------------------------------------

class MatchSPVPRpcAgreeInvitationNotify : public ::google::protobuf::Message {
 public:
  MatchSPVPRpcAgreeInvitationNotify();
  virtual ~MatchSPVPRpcAgreeInvitationNotify();

  MatchSPVPRpcAgreeInvitationNotify(const MatchSPVPRpcAgreeInvitationNotify& from);

  inline MatchSPVPRpcAgreeInvitationNotify& operator=(const MatchSPVPRpcAgreeInvitationNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchSPVPRpcAgreeInvitationNotify& default_instance();

  void Swap(MatchSPVPRpcAgreeInvitationNotify* other);

  // implements Message ----------------------------------------------

  MatchSPVPRpcAgreeInvitationNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchSPVPRpcAgreeInvitationNotify& from);
  void MergeFrom(const MatchSPVPRpcAgreeInvitationNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 Uid = 1 [default = -1];
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);

  // optional sint32 IsAgree = 2 [default = 0];
  inline bool has_isagree() const;
  inline void clear_isagree();
  static const int kIsAgreeFieldNumber = 2;
  inline ::google::protobuf::int32 isagree() const;
  inline void set_isagree(::google::protobuf::int32 value);

  // optional sint32 Type = 3 [default = 0];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MatchSPVPRpcAgreeInvitationNotify)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_isagree();
  inline void clear_has_isagree();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 uid_;
  ::google::protobuf::int32 isagree_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
  friend void protobuf_AssignDesc_MatchSPVPCliRpc_2eproto();
  friend void protobuf_ShutdownFile_MatchSPVPCliRpc_2eproto();

  void InitAsDefaultInstance();
  static MatchSPVPRpcAgreeInvitationNotify* default_instance_;
};
// -------------------------------------------------------------------

class MatchSPVPRpcStartGameNotify : public ::google::protobuf::Message {
 public:
  MatchSPVPRpcStartGameNotify();
  virtual ~MatchSPVPRpcStartGameNotify();

  MatchSPVPRpcStartGameNotify(const MatchSPVPRpcStartGameNotify& from);

  inline MatchSPVPRpcStartGameNotify& operator=(const MatchSPVPRpcStartGameNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchSPVPRpcStartGameNotify& default_instance();

  void Swap(MatchSPVPRpcStartGameNotify* other);

  // implements Message ----------------------------------------------

  MatchSPVPRpcStartGameNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchSPVPRpcStartGameNotify& from);
  void MergeFrom(const MatchSPVPRpcStartGameNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 LoadID = 1 [default = -1];
  inline bool has_loadid() const;
  inline void clear_loadid();
  static const int kLoadIDFieldNumber = 1;
  inline ::google::protobuf::int64 loadid() const;
  inline void set_loadid(::google::protobuf::int64 value);

  // repeated .MatchSPVPUserMessage UMess = 2;
  inline int umess_size() const;
  inline void clear_umess();
  static const int kUMessFieldNumber = 2;
  inline const ::MatchSPVPUserMessage& umess(int index) const;
  inline ::MatchSPVPUserMessage* mutable_umess(int index);
  inline ::MatchSPVPUserMessage* add_umess();
  inline const ::google::protobuf::RepeatedPtrField< ::MatchSPVPUserMessage >&
      umess() const;
  inline ::google::protobuf::RepeatedPtrField< ::MatchSPVPUserMessage >*
      mutable_umess();

  // repeated .MatchSPVPUserMessage UMessOther = 3;
  inline int umessother_size() const;
  inline void clear_umessother();
  static const int kUMessOtherFieldNumber = 3;
  inline const ::MatchSPVPUserMessage& umessother(int index) const;
  inline ::MatchSPVPUserMessage* mutable_umessother(int index);
  inline ::MatchSPVPUserMessage* add_umessother();
  inline const ::google::protobuf::RepeatedPtrField< ::MatchSPVPUserMessage >&
      umessother() const;
  inline ::google::protobuf::RepeatedPtrField< ::MatchSPVPUserMessage >*
      mutable_umessother();

  // optional string IP = 4;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIPFieldNumber = 4;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional sint32 Port = 5 [default = -1];
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 5;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional string Key = 6;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 6;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:MatchSPVPRpcStartGameNotify)
 private:
  inline void set_has_loadid();
  inline void clear_has_loadid();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 loadid_;
  ::google::protobuf::RepeatedPtrField< ::MatchSPVPUserMessage > umess_;
  ::google::protobuf::RepeatedPtrField< ::MatchSPVPUserMessage > umessother_;
  ::std::string* ip_;
  ::std::string* key_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
  friend void protobuf_AssignDesc_MatchSPVPCliRpc_2eproto();
  friend void protobuf_ShutdownFile_MatchSPVPCliRpc_2eproto();

  void InitAsDefaultInstance();
  static MatchSPVPRpcStartGameNotify* default_instance_;
};
// -------------------------------------------------------------------

class MatchSPVPRpcDeleteMatchNotify : public ::google::protobuf::Message {
 public:
  MatchSPVPRpcDeleteMatchNotify();
  virtual ~MatchSPVPRpcDeleteMatchNotify();

  MatchSPVPRpcDeleteMatchNotify(const MatchSPVPRpcDeleteMatchNotify& from);

  inline MatchSPVPRpcDeleteMatchNotify& operator=(const MatchSPVPRpcDeleteMatchNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchSPVPRpcDeleteMatchNotify& default_instance();

  void Swap(MatchSPVPRpcDeleteMatchNotify* other);

  // implements Message ----------------------------------------------

  MatchSPVPRpcDeleteMatchNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchSPVPRpcDeleteMatchNotify& from);
  void MergeFrom(const MatchSPVPRpcDeleteMatchNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:MatchSPVPRpcDeleteMatchNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
  friend void protobuf_AssignDesc_MatchSPVPCliRpc_2eproto();
  friend void protobuf_ShutdownFile_MatchSPVPCliRpc_2eproto();

  void InitAsDefaultInstance();
  static MatchSPVPRpcDeleteMatchNotify* default_instance_;
};
// -------------------------------------------------------------------

class MatchSPVPRpcStartSelectNotify : public ::google::protobuf::Message {
 public:
  MatchSPVPRpcStartSelectNotify();
  virtual ~MatchSPVPRpcStartSelectNotify();

  MatchSPVPRpcStartSelectNotify(const MatchSPVPRpcStartSelectNotify& from);

  inline MatchSPVPRpcStartSelectNotify& operator=(const MatchSPVPRpcStartSelectNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchSPVPRpcStartSelectNotify& default_instance();

  void Swap(MatchSPVPRpcStartSelectNotify* other);

  // implements Message ----------------------------------------------

  MatchSPVPRpcStartSelectNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchSPVPRpcStartSelectNotify& from);
  void MergeFrom(const MatchSPVPRpcStartSelectNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 TimeStart = 1 [default = -1];
  inline bool has_timestart() const;
  inline void clear_timestart();
  static const int kTimeStartFieldNumber = 1;
  inline ::google::protobuf::int32 timestart() const;
  inline void set_timestart(::google::protobuf::int32 value);

  // optional sint32 TimeEnd = 2 [default = -1];
  inline bool has_timeend() const;
  inline void clear_timeend();
  static const int kTimeEndFieldNumber = 2;
  inline ::google::protobuf::int32 timeend() const;
  inline void set_timeend(::google::protobuf::int32 value);

  // repeated .MatchSPVPUserMessage UMess = 3;
  inline int umess_size() const;
  inline void clear_umess();
  static const int kUMessFieldNumber = 3;
  inline const ::MatchSPVPUserMessage& umess(int index) const;
  inline ::MatchSPVPUserMessage* mutable_umess(int index);
  inline ::MatchSPVPUserMessage* add_umess();
  inline const ::google::protobuf::RepeatedPtrField< ::MatchSPVPUserMessage >&
      umess() const;
  inline ::google::protobuf::RepeatedPtrField< ::MatchSPVPUserMessage >*
      mutable_umess();

  // repeated .MatchSPVPUserMessage OtherUMess = 4;
  inline int otherumess_size() const;
  inline void clear_otherumess();
  static const int kOtherUMessFieldNumber = 4;
  inline const ::MatchSPVPUserMessage& otherumess(int index) const;
  inline ::MatchSPVPUserMessage* mutable_otherumess(int index);
  inline ::MatchSPVPUserMessage* add_otherumess();
  inline const ::google::protobuf::RepeatedPtrField< ::MatchSPVPUserMessage >&
      otherumess() const;
  inline ::google::protobuf::RepeatedPtrField< ::MatchSPVPUserMessage >*
      mutable_otherumess();

  // optional sint32 Timer = 5 [default = -1];
  inline bool has_timer() const;
  inline void clear_timer();
  static const int kTimerFieldNumber = 5;
  inline ::google::protobuf::int32 timer() const;
  inline void set_timer(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MatchSPVPRpcStartSelectNotify)
 private:
  inline void set_has_timestart();
  inline void clear_has_timestart();
  inline void set_has_timeend();
  inline void clear_has_timeend();
  inline void set_has_timer();
  inline void clear_has_timer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 timestart_;
  ::google::protobuf::int32 timeend_;
  ::google::protobuf::RepeatedPtrField< ::MatchSPVPUserMessage > umess_;
  ::google::protobuf::RepeatedPtrField< ::MatchSPVPUserMessage > otherumess_;
  ::google::protobuf::int32 timer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
  friend void protobuf_AssignDesc_MatchSPVPCliRpc_2eproto();
  friend void protobuf_ShutdownFile_MatchSPVPCliRpc_2eproto();

  void InitAsDefaultInstance();
  static MatchSPVPRpcStartSelectNotify* default_instance_;
};
// -------------------------------------------------------------------

class MatchSPVPRpcSelectHeroAsk : public ::google::protobuf::Message {
 public:
  MatchSPVPRpcSelectHeroAsk();
  virtual ~MatchSPVPRpcSelectHeroAsk();

  MatchSPVPRpcSelectHeroAsk(const MatchSPVPRpcSelectHeroAsk& from);

  inline MatchSPVPRpcSelectHeroAsk& operator=(const MatchSPVPRpcSelectHeroAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchSPVPRpcSelectHeroAsk& default_instance();

  void Swap(MatchSPVPRpcSelectHeroAsk* other);

  // implements Message ----------------------------------------------

  MatchSPVPRpcSelectHeroAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchSPVPRpcSelectHeroAsk& from);
  void MergeFrom(const MatchSPVPRpcSelectHeroAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 HeroID = 1 [default = -1];
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 1;
  inline ::google::protobuf::int32 heroid() const;
  inline void set_heroid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MatchSPVPRpcSelectHeroAsk)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 heroid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
  friend void protobuf_AssignDesc_MatchSPVPCliRpc_2eproto();
  friend void protobuf_ShutdownFile_MatchSPVPCliRpc_2eproto();

  void InitAsDefaultInstance();
  static MatchSPVPRpcSelectHeroAsk* default_instance_;
};
// -------------------------------------------------------------------

class MatchSPVPRpcSelectHeroReply : public ::google::protobuf::Message {
 public:
  MatchSPVPRpcSelectHeroReply();
  virtual ~MatchSPVPRpcSelectHeroReply();

  MatchSPVPRpcSelectHeroReply(const MatchSPVPRpcSelectHeroReply& from);

  inline MatchSPVPRpcSelectHeroReply& operator=(const MatchSPVPRpcSelectHeroReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchSPVPRpcSelectHeroReply& default_instance();

  void Swap(MatchSPVPRpcSelectHeroReply* other);

  // implements Message ----------------------------------------------

  MatchSPVPRpcSelectHeroReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchSPVPRpcSelectHeroReply& from);
  void MergeFrom(const MatchSPVPRpcSelectHeroReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional sint32 HeroID = 2 [default = -1];
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 2;
  inline ::google::protobuf::int32 heroid() const;
  inline void set_heroid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MatchSPVPRpcSelectHeroReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_heroid();
  inline void clear_has_heroid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 heroid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
  friend void protobuf_AssignDesc_MatchSPVPCliRpc_2eproto();
  friend void protobuf_ShutdownFile_MatchSPVPCliRpc_2eproto();

  void InitAsDefaultInstance();
  static MatchSPVPRpcSelectHeroReply* default_instance_;
};
// -------------------------------------------------------------------

class MatchSPVPRpcGetStatusAsk : public ::google::protobuf::Message {
 public:
  MatchSPVPRpcGetStatusAsk();
  virtual ~MatchSPVPRpcGetStatusAsk();

  MatchSPVPRpcGetStatusAsk(const MatchSPVPRpcGetStatusAsk& from);

  inline MatchSPVPRpcGetStatusAsk& operator=(const MatchSPVPRpcGetStatusAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchSPVPRpcGetStatusAsk& default_instance();

  void Swap(MatchSPVPRpcGetStatusAsk* other);

  // implements Message ----------------------------------------------

  MatchSPVPRpcGetStatusAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchSPVPRpcGetStatusAsk& from);
  void MergeFrom(const MatchSPVPRpcGetStatusAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:MatchSPVPRpcGetStatusAsk)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
  friend void protobuf_AssignDesc_MatchSPVPCliRpc_2eproto();
  friend void protobuf_ShutdownFile_MatchSPVPCliRpc_2eproto();

  void InitAsDefaultInstance();
  static MatchSPVPRpcGetStatusAsk* default_instance_;
};
// -------------------------------------------------------------------

class MatchSPVPRpcGetStatusReply : public ::google::protobuf::Message {
 public:
  MatchSPVPRpcGetStatusReply();
  virtual ~MatchSPVPRpcGetStatusReply();

  MatchSPVPRpcGetStatusReply(const MatchSPVPRpcGetStatusReply& from);

  inline MatchSPVPRpcGetStatusReply& operator=(const MatchSPVPRpcGetStatusReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchSPVPRpcGetStatusReply& default_instance();

  void Swap(MatchSPVPRpcGetStatusReply* other);

  // implements Message ----------------------------------------------

  MatchSPVPRpcGetStatusReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchSPVPRpcGetStatusReply& from);
  void MergeFrom(const MatchSPVPRpcGetStatusReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional sint32 Type = 2 [default = -1];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional sint32 TimeStart = 5 [default = -1];
  inline bool has_timestart() const;
  inline void clear_timestart();
  static const int kTimeStartFieldNumber = 5;
  inline ::google::protobuf::int32 timestart() const;
  inline void set_timestart(::google::protobuf::int32 value);

  // optional sint32 TimeEnd = 6 [default = -1];
  inline bool has_timeend() const;
  inline void clear_timeend();
  static const int kTimeEndFieldNumber = 6;
  inline ::google::protobuf::int32 timeend() const;
  inline void set_timeend(::google::protobuf::int32 value);

  // optional sint32 Timer = 7 [default = -1];
  inline bool has_timer() const;
  inline void clear_timer();
  static const int kTimerFieldNumber = 7;
  inline ::google::protobuf::int32 timer() const;
  inline void set_timer(::google::protobuf::int32 value);

  // repeated .MatchSPVPUserMessage UMess = 8;
  inline int umess_size() const;
  inline void clear_umess();
  static const int kUMessFieldNumber = 8;
  inline const ::MatchSPVPUserMessage& umess(int index) const;
  inline ::MatchSPVPUserMessage* mutable_umess(int index);
  inline ::MatchSPVPUserMessage* add_umess();
  inline const ::google::protobuf::RepeatedPtrField< ::MatchSPVPUserMessage >&
      umess() const;
  inline ::google::protobuf::RepeatedPtrField< ::MatchSPVPUserMessage >*
      mutable_umess();

  // repeated .MatchSPVPUserMessage UMessOther = 9;
  inline int umessother_size() const;
  inline void clear_umessother();
  static const int kUMessOtherFieldNumber = 9;
  inline const ::MatchSPVPUserMessage& umessother(int index) const;
  inline ::MatchSPVPUserMessage* mutable_umessother(int index);
  inline ::MatchSPVPUserMessage* add_umessother();
  inline const ::google::protobuf::RepeatedPtrField< ::MatchSPVPUserMessage >&
      umessother() const;
  inline ::google::protobuf::RepeatedPtrField< ::MatchSPVPUserMessage >*
      mutable_umessother();

  // optional string Key = 10;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 10;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:MatchSPVPRpcGetStatusReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_timestart();
  inline void clear_has_timestart();
  inline void set_has_timeend();
  inline void clear_has_timeend();
  inline void set_has_timer();
  inline void clear_has_timer();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 timestart_;
  ::google::protobuf::int32 timeend_;
  ::google::protobuf::RepeatedPtrField< ::MatchSPVPUserMessage > umess_;
  ::google::protobuf::RepeatedPtrField< ::MatchSPVPUserMessage > umessother_;
  ::std::string* key_;
  ::google::protobuf::int32 timer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
  friend void protobuf_AssignDesc_MatchSPVPCliRpc_2eproto();
  friend void protobuf_ShutdownFile_MatchSPVPCliRpc_2eproto();

  void InitAsDefaultInstance();
  static MatchSPVPRpcGetStatusReply* default_instance_;
};
// -------------------------------------------------------------------

class MatchSPVPRpcChangeStatusNotify : public ::google::protobuf::Message {
 public:
  MatchSPVPRpcChangeStatusNotify();
  virtual ~MatchSPVPRpcChangeStatusNotify();

  MatchSPVPRpcChangeStatusNotify(const MatchSPVPRpcChangeStatusNotify& from);

  inline MatchSPVPRpcChangeStatusNotify& operator=(const MatchSPVPRpcChangeStatusNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchSPVPRpcChangeStatusNotify& default_instance();

  void Swap(MatchSPVPRpcChangeStatusNotify* other);

  // implements Message ----------------------------------------------

  MatchSPVPRpcChangeStatusNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchSPVPRpcChangeStatusNotify& from);
  void MergeFrom(const MatchSPVPRpcChangeStatusNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MatchSPVPUserMessage UMess = 1;
  inline bool has_umess() const;
  inline void clear_umess();
  static const int kUMessFieldNumber = 1;
  inline const ::MatchSPVPUserMessage& umess() const;
  inline ::MatchSPVPUserMessage* mutable_umess();
  inline ::MatchSPVPUserMessage* release_umess();
  inline void set_allocated_umess(::MatchSPVPUserMessage* umess);

  // @@protoc_insertion_point(class_scope:MatchSPVPRpcChangeStatusNotify)
 private:
  inline void set_has_umess();
  inline void clear_has_umess();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::MatchSPVPUserMessage* umess_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
  friend void protobuf_AssignDesc_MatchSPVPCliRpc_2eproto();
  friend void protobuf_ShutdownFile_MatchSPVPCliRpc_2eproto();

  void InitAsDefaultInstance();
  static MatchSPVPRpcChangeStatusNotify* default_instance_;
};
// -------------------------------------------------------------------

class MatchSPVPRpcShotOffAsk : public ::google::protobuf::Message {
 public:
  MatchSPVPRpcShotOffAsk();
  virtual ~MatchSPVPRpcShotOffAsk();

  MatchSPVPRpcShotOffAsk(const MatchSPVPRpcShotOffAsk& from);

  inline MatchSPVPRpcShotOffAsk& operator=(const MatchSPVPRpcShotOffAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchSPVPRpcShotOffAsk& default_instance();

  void Swap(MatchSPVPRpcShotOffAsk* other);

  // implements Message ----------------------------------------------

  MatchSPVPRpcShotOffAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchSPVPRpcShotOffAsk& from);
  void MergeFrom(const MatchSPVPRpcShotOffAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 Uid = 1 [default = -1];
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MatchSPVPRpcShotOffAsk)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
  friend void protobuf_AssignDesc_MatchSPVPCliRpc_2eproto();
  friend void protobuf_ShutdownFile_MatchSPVPCliRpc_2eproto();

  void InitAsDefaultInstance();
  static MatchSPVPRpcShotOffAsk* default_instance_;
};
// -------------------------------------------------------------------

class MatchSPVPRpcShotOffReply : public ::google::protobuf::Message {
 public:
  MatchSPVPRpcShotOffReply();
  virtual ~MatchSPVPRpcShotOffReply();

  MatchSPVPRpcShotOffReply(const MatchSPVPRpcShotOffReply& from);

  inline MatchSPVPRpcShotOffReply& operator=(const MatchSPVPRpcShotOffReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchSPVPRpcShotOffReply& default_instance();

  void Swap(MatchSPVPRpcShotOffReply* other);

  // implements Message ----------------------------------------------

  MatchSPVPRpcShotOffReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchSPVPRpcShotOffReply& from);
  void MergeFrom(const MatchSPVPRpcShotOffReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional sint64 Uid = 2 [default = -1];
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MatchSPVPRpcShotOffReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 uid_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
  friend void protobuf_AssignDesc_MatchSPVPCliRpc_2eproto();
  friend void protobuf_ShutdownFile_MatchSPVPCliRpc_2eproto();

  void InitAsDefaultInstance();
  static MatchSPVPRpcShotOffReply* default_instance_;
};
// -------------------------------------------------------------------

class MatchSPVPRpcSelectSceneNotify : public ::google::protobuf::Message {
 public:
  MatchSPVPRpcSelectSceneNotify();
  virtual ~MatchSPVPRpcSelectSceneNotify();

  MatchSPVPRpcSelectSceneNotify(const MatchSPVPRpcSelectSceneNotify& from);

  inline MatchSPVPRpcSelectSceneNotify& operator=(const MatchSPVPRpcSelectSceneNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchSPVPRpcSelectSceneNotify& default_instance();

  void Swap(MatchSPVPRpcSelectSceneNotify* other);

  // implements Message ----------------------------------------------

  MatchSPVPRpcSelectSceneNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchSPVPRpcSelectSceneNotify& from);
  void MergeFrom(const MatchSPVPRpcSelectSceneNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 SceneID = 1 [default = 1];
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneIDFieldNumber = 1;
  inline ::google::protobuf::int32 sceneid() const;
  inline void set_sceneid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MatchSPVPRpcSelectSceneNotify)
 private:
  inline void set_has_sceneid();
  inline void clear_has_sceneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 sceneid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
  friend void protobuf_AssignDesc_MatchSPVPCliRpc_2eproto();
  friend void protobuf_ShutdownFile_MatchSPVPCliRpc_2eproto();

  void InitAsDefaultInstance();
  static MatchSPVPRpcSelectSceneNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// MatchSPVPUserMessage

// optional sint32 HeroID = 6 [default = 0];
inline bool MatchSPVPUserMessage::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchSPVPUserMessage::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchSPVPUserMessage::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchSPVPUserMessage::clear_heroid() {
  heroid_ = 0;
  clear_has_heroid();
}
inline ::google::protobuf::int32 MatchSPVPUserMessage::heroid() const {
  return heroid_;
}
inline void MatchSPVPUserMessage::set_heroid(::google::protobuf::int32 value) {
  set_has_heroid();
  heroid_ = value;
}

// optional .SmallUser PeoM = 8;
inline bool MatchSPVPUserMessage::has_peom() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchSPVPUserMessage::set_has_peom() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchSPVPUserMessage::clear_has_peom() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchSPVPUserMessage::clear_peom() {
  if (peom_ != NULL) peom_->::SmallUser::Clear();
  clear_has_peom();
}
inline const ::SmallUser& MatchSPVPUserMessage::peom() const {
  return peom_ != NULL ? *peom_ : *default_instance_->peom_;
}
inline ::SmallUser* MatchSPVPUserMessage::mutable_peom() {
  set_has_peom();
  if (peom_ == NULL) peom_ = new ::SmallUser;
  return peom_;
}
inline ::SmallUser* MatchSPVPUserMessage::release_peom() {
  clear_has_peom();
  ::SmallUser* temp = peom_;
  peom_ = NULL;
  return temp;
}
inline void MatchSPVPUserMessage::set_allocated_peom(::SmallUser* peom) {
  delete peom_;
  peom_ = peom;
  if (peom) {
    set_has_peom();
  } else {
    clear_has_peom();
  }
}

// optional sint32 IsSelect = 9 [default = 0];
inline bool MatchSPVPUserMessage::has_isselect() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatchSPVPUserMessage::set_has_isselect() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatchSPVPUserMessage::clear_has_isselect() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatchSPVPUserMessage::clear_isselect() {
  isselect_ = 0;
  clear_has_isselect();
}
inline ::google::protobuf::int32 MatchSPVPUserMessage::isselect() const {
  return isselect_;
}
inline void MatchSPVPUserMessage::set_isselect(::google::protobuf::int32 value) {
  set_has_isselect();
  isselect_ = value;
}

// optional sint32 GroupID = 10 [default = 0];
inline bool MatchSPVPUserMessage::has_groupid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MatchSPVPUserMessage::set_has_groupid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MatchSPVPUserMessage::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MatchSPVPUserMessage::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 MatchSPVPUserMessage::groupid() const {
  return groupid_;
}
inline void MatchSPVPUserMessage::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// -------------------------------------------------------------------

// MatchSPVPRpcStartMatchAsk

// optional sint32 IsMatch = 1 [default = 1];
inline bool MatchSPVPRpcStartMatchAsk::has_ismatch() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchSPVPRpcStartMatchAsk::set_has_ismatch() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchSPVPRpcStartMatchAsk::clear_has_ismatch() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchSPVPRpcStartMatchAsk::clear_ismatch() {
  ismatch_ = 1;
  clear_has_ismatch();
}
inline ::google::protobuf::int32 MatchSPVPRpcStartMatchAsk::ismatch() const {
  return ismatch_;
}
inline void MatchSPVPRpcStartMatchAsk::set_ismatch(::google::protobuf::int32 value) {
  set_has_ismatch();
  ismatch_ = value;
}

// optional sint32 SceneID = 2 [default = 1];
inline bool MatchSPVPRpcStartMatchAsk::has_sceneid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchSPVPRpcStartMatchAsk::set_has_sceneid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchSPVPRpcStartMatchAsk::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchSPVPRpcStartMatchAsk::clear_sceneid() {
  sceneid_ = 1;
  clear_has_sceneid();
}
inline ::google::protobuf::int32 MatchSPVPRpcStartMatchAsk::sceneid() const {
  return sceneid_;
}
inline void MatchSPVPRpcStartMatchAsk::set_sceneid(::google::protobuf::int32 value) {
  set_has_sceneid();
  sceneid_ = value;
}

// optional sint32 ActiveID = 3 [default = 0];
inline bool MatchSPVPRpcStartMatchAsk::has_activeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatchSPVPRpcStartMatchAsk::set_has_activeid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatchSPVPRpcStartMatchAsk::clear_has_activeid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatchSPVPRpcStartMatchAsk::clear_activeid() {
  activeid_ = 0;
  clear_has_activeid();
}
inline ::google::protobuf::int32 MatchSPVPRpcStartMatchAsk::activeid() const {
  return activeid_;
}
inline void MatchSPVPRpcStartMatchAsk::set_activeid(::google::protobuf::int32 value) {
  set_has_activeid();
  activeid_ = value;
}

// optional sint64 TeamID = 4 [default = -1];
inline bool MatchSPVPRpcStartMatchAsk::has_teamid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MatchSPVPRpcStartMatchAsk::set_has_teamid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MatchSPVPRpcStartMatchAsk::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MatchSPVPRpcStartMatchAsk::clear_teamid() {
  teamid_ = GOOGLE_LONGLONG(-1);
  clear_has_teamid();
}
inline ::google::protobuf::int64 MatchSPVPRpcStartMatchAsk::teamid() const {
  return teamid_;
}
inline void MatchSPVPRpcStartMatchAsk::set_teamid(::google::protobuf::int64 value) {
  set_has_teamid();
  teamid_ = value;
}

// -------------------------------------------------------------------

// MatchSPVPRpcStartMatchReply

// optional sint32 Result = 1 [default = -9999];
inline bool MatchSPVPRpcStartMatchReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchSPVPRpcStartMatchReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchSPVPRpcStartMatchReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchSPVPRpcStartMatchReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 MatchSPVPRpcStartMatchReply::result() const {
  return result_;
}
inline void MatchSPVPRpcStartMatchReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional sint32 IsMatch = 2 [default = 1];
inline bool MatchSPVPRpcStartMatchReply::has_ismatch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchSPVPRpcStartMatchReply::set_has_ismatch() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchSPVPRpcStartMatchReply::clear_has_ismatch() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchSPVPRpcStartMatchReply::clear_ismatch() {
  ismatch_ = 1;
  clear_has_ismatch();
}
inline ::google::protobuf::int32 MatchSPVPRpcStartMatchReply::ismatch() const {
  return ismatch_;
}
inline void MatchSPVPRpcStartMatchReply::set_ismatch(::google::protobuf::int32 value) {
  set_has_ismatch();
  ismatch_ = value;
}

// optional sint32 TimeStart = 3 [default = -1];
inline bool MatchSPVPRpcStartMatchReply::has_timestart() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatchSPVPRpcStartMatchReply::set_has_timestart() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatchSPVPRpcStartMatchReply::clear_has_timestart() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatchSPVPRpcStartMatchReply::clear_timestart() {
  timestart_ = -1;
  clear_has_timestart();
}
inline ::google::protobuf::int32 MatchSPVPRpcStartMatchReply::timestart() const {
  return timestart_;
}
inline void MatchSPVPRpcStartMatchReply::set_timestart(::google::protobuf::int32 value) {
  set_has_timestart();
  timestart_ = value;
}

// optional sint32 TimeEnd = 4 [default = -1];
inline bool MatchSPVPRpcStartMatchReply::has_timeend() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MatchSPVPRpcStartMatchReply::set_has_timeend() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MatchSPVPRpcStartMatchReply::clear_has_timeend() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MatchSPVPRpcStartMatchReply::clear_timeend() {
  timeend_ = -1;
  clear_has_timeend();
}
inline ::google::protobuf::int32 MatchSPVPRpcStartMatchReply::timeend() const {
  return timeend_;
}
inline void MatchSPVPRpcStartMatchReply::set_timeend(::google::protobuf::int32 value) {
  set_has_timeend();
  timeend_ = value;
}

// optional sint32 Timer = 5 [default = -1];
inline bool MatchSPVPRpcStartMatchReply::has_timer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MatchSPVPRpcStartMatchReply::set_has_timer() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MatchSPVPRpcStartMatchReply::clear_has_timer() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MatchSPVPRpcStartMatchReply::clear_timer() {
  timer_ = -1;
  clear_has_timer();
}
inline ::google::protobuf::int32 MatchSPVPRpcStartMatchReply::timer() const {
  return timer_;
}
inline void MatchSPVPRpcStartMatchReply::set_timer(::google::protobuf::int32 value) {
  set_has_timer();
  timer_ = value;
}

// optional sint32 SceneID = 6 [default = 1];
inline bool MatchSPVPRpcStartMatchReply::has_sceneid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MatchSPVPRpcStartMatchReply::set_has_sceneid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MatchSPVPRpcStartMatchReply::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MatchSPVPRpcStartMatchReply::clear_sceneid() {
  sceneid_ = 1;
  clear_has_sceneid();
}
inline ::google::protobuf::int32 MatchSPVPRpcStartMatchReply::sceneid() const {
  return sceneid_;
}
inline void MatchSPVPRpcStartMatchReply::set_sceneid(::google::protobuf::int32 value) {
  set_has_sceneid();
  sceneid_ = value;
}

// optional sint32 ActiveID = 7 [default = 0];
inline bool MatchSPVPRpcStartMatchReply::has_activeid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MatchSPVPRpcStartMatchReply::set_has_activeid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MatchSPVPRpcStartMatchReply::clear_has_activeid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MatchSPVPRpcStartMatchReply::clear_activeid() {
  activeid_ = 0;
  clear_has_activeid();
}
inline ::google::protobuf::int32 MatchSPVPRpcStartMatchReply::activeid() const {
  return activeid_;
}
inline void MatchSPVPRpcStartMatchReply::set_activeid(::google::protobuf::int32 value) {
  set_has_activeid();
  activeid_ = value;
}

// optional sint64 TeamID = 8 [default = -1];
inline bool MatchSPVPRpcStartMatchReply::has_teamid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MatchSPVPRpcStartMatchReply::set_has_teamid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MatchSPVPRpcStartMatchReply::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MatchSPVPRpcStartMatchReply::clear_teamid() {
  teamid_ = GOOGLE_LONGLONG(-1);
  clear_has_teamid();
}
inline ::google::protobuf::int64 MatchSPVPRpcStartMatchReply::teamid() const {
  return teamid_;
}
inline void MatchSPVPRpcStartMatchReply::set_teamid(::google::protobuf::int64 value) {
  set_has_teamid();
  teamid_ = value;
}

// -------------------------------------------------------------------

// MatchSPVPRpcInvitationAsk

// optional sint64 Uid = 1 [default = -1];
inline bool MatchSPVPRpcInvitationAsk::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchSPVPRpcInvitationAsk::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchSPVPRpcInvitationAsk::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchSPVPRpcInvitationAsk::clear_uid() {
  uid_ = GOOGLE_LONGLONG(-1);
  clear_has_uid();
}
inline ::google::protobuf::int64 MatchSPVPRpcInvitationAsk::uid() const {
  return uid_;
}
inline void MatchSPVPRpcInvitationAsk::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// -------------------------------------------------------------------

// MatchSPVPRpcInvitationReply

// optional sint32 Result = 1 [default = -9999];
inline bool MatchSPVPRpcInvitationReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchSPVPRpcInvitationReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchSPVPRpcInvitationReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchSPVPRpcInvitationReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 MatchSPVPRpcInvitationReply::result() const {
  return result_;
}
inline void MatchSPVPRpcInvitationReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional sint64 Uid = 2 [default = -1];
inline bool MatchSPVPRpcInvitationReply::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchSPVPRpcInvitationReply::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchSPVPRpcInvitationReply::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchSPVPRpcInvitationReply::clear_uid() {
  uid_ = GOOGLE_LONGLONG(-1);
  clear_has_uid();
}
inline ::google::protobuf::int64 MatchSPVPRpcInvitationReply::uid() const {
  return uid_;
}
inline void MatchSPVPRpcInvitationReply::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// -------------------------------------------------------------------

// MatchSPVPRpcMatchBroadcasNotify

// optional sint32 Type = 1 [default = 1];
inline bool MatchSPVPRpcMatchBroadcasNotify::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchSPVPRpcMatchBroadcasNotify::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchSPVPRpcMatchBroadcasNotify::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchSPVPRpcMatchBroadcasNotify::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::google::protobuf::int32 MatchSPVPRpcMatchBroadcasNotify::type() const {
  return type_;
}
inline void MatchSPVPRpcMatchBroadcasNotify::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional sint32 TimeStart = 2 [default = -1];
inline bool MatchSPVPRpcMatchBroadcasNotify::has_timestart() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchSPVPRpcMatchBroadcasNotify::set_has_timestart() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchSPVPRpcMatchBroadcasNotify::clear_has_timestart() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchSPVPRpcMatchBroadcasNotify::clear_timestart() {
  timestart_ = -1;
  clear_has_timestart();
}
inline ::google::protobuf::int32 MatchSPVPRpcMatchBroadcasNotify::timestart() const {
  return timestart_;
}
inline void MatchSPVPRpcMatchBroadcasNotify::set_timestart(::google::protobuf::int32 value) {
  set_has_timestart();
  timestart_ = value;
}

// optional sint32 TimeEnd = 3 [default = -1];
inline bool MatchSPVPRpcMatchBroadcasNotify::has_timeend() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatchSPVPRpcMatchBroadcasNotify::set_has_timeend() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatchSPVPRpcMatchBroadcasNotify::clear_has_timeend() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatchSPVPRpcMatchBroadcasNotify::clear_timeend() {
  timeend_ = -1;
  clear_has_timeend();
}
inline ::google::protobuf::int32 MatchSPVPRpcMatchBroadcasNotify::timeend() const {
  return timeend_;
}
inline void MatchSPVPRpcMatchBroadcasNotify::set_timeend(::google::protobuf::int32 value) {
  set_has_timeend();
  timeend_ = value;
}

// optional sint32 Timer = 4 [default = -1];
inline bool MatchSPVPRpcMatchBroadcasNotify::has_timer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MatchSPVPRpcMatchBroadcasNotify::set_has_timer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MatchSPVPRpcMatchBroadcasNotify::clear_has_timer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MatchSPVPRpcMatchBroadcasNotify::clear_timer() {
  timer_ = -1;
  clear_has_timer();
}
inline ::google::protobuf::int32 MatchSPVPRpcMatchBroadcasNotify::timer() const {
  return timer_;
}
inline void MatchSPVPRpcMatchBroadcasNotify::set_timer(::google::protobuf::int32 value) {
  set_has_timer();
  timer_ = value;
}

// repeated .MatchSPVPUserMessage UMess = 5;
inline int MatchSPVPRpcMatchBroadcasNotify::umess_size() const {
  return umess_.size();
}
inline void MatchSPVPRpcMatchBroadcasNotify::clear_umess() {
  umess_.Clear();
}
inline const ::MatchSPVPUserMessage& MatchSPVPRpcMatchBroadcasNotify::umess(int index) const {
  return umess_.Get(index);
}
inline ::MatchSPVPUserMessage* MatchSPVPRpcMatchBroadcasNotify::mutable_umess(int index) {
  return umess_.Mutable(index);
}
inline ::MatchSPVPUserMessage* MatchSPVPRpcMatchBroadcasNotify::add_umess() {
  return umess_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MatchSPVPUserMessage >&
MatchSPVPRpcMatchBroadcasNotify::umess() const {
  return umess_;
}
inline ::google::protobuf::RepeatedPtrField< ::MatchSPVPUserMessage >*
MatchSPVPRpcMatchBroadcasNotify::mutable_umess() {
  return &umess_;
}

// -------------------------------------------------------------------

// MatchSPVPRpcAgreeInvitationNotify

// optional sint64 Uid = 1 [default = -1];
inline bool MatchSPVPRpcAgreeInvitationNotify::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchSPVPRpcAgreeInvitationNotify::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchSPVPRpcAgreeInvitationNotify::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchSPVPRpcAgreeInvitationNotify::clear_uid() {
  uid_ = GOOGLE_LONGLONG(-1);
  clear_has_uid();
}
inline ::google::protobuf::int64 MatchSPVPRpcAgreeInvitationNotify::uid() const {
  return uid_;
}
inline void MatchSPVPRpcAgreeInvitationNotify::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// optional sint32 IsAgree = 2 [default = 0];
inline bool MatchSPVPRpcAgreeInvitationNotify::has_isagree() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchSPVPRpcAgreeInvitationNotify::set_has_isagree() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchSPVPRpcAgreeInvitationNotify::clear_has_isagree() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchSPVPRpcAgreeInvitationNotify::clear_isagree() {
  isagree_ = 0;
  clear_has_isagree();
}
inline ::google::protobuf::int32 MatchSPVPRpcAgreeInvitationNotify::isagree() const {
  return isagree_;
}
inline void MatchSPVPRpcAgreeInvitationNotify::set_isagree(::google::protobuf::int32 value) {
  set_has_isagree();
  isagree_ = value;
}

// optional sint32 Type = 3 [default = 0];
inline bool MatchSPVPRpcAgreeInvitationNotify::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatchSPVPRpcAgreeInvitationNotify::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatchSPVPRpcAgreeInvitationNotify::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatchSPVPRpcAgreeInvitationNotify::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 MatchSPVPRpcAgreeInvitationNotify::type() const {
  return type_;
}
inline void MatchSPVPRpcAgreeInvitationNotify::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// MatchSPVPRpcStartGameNotify

// optional sint64 LoadID = 1 [default = -1];
inline bool MatchSPVPRpcStartGameNotify::has_loadid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchSPVPRpcStartGameNotify::set_has_loadid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchSPVPRpcStartGameNotify::clear_has_loadid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchSPVPRpcStartGameNotify::clear_loadid() {
  loadid_ = GOOGLE_LONGLONG(-1);
  clear_has_loadid();
}
inline ::google::protobuf::int64 MatchSPVPRpcStartGameNotify::loadid() const {
  return loadid_;
}
inline void MatchSPVPRpcStartGameNotify::set_loadid(::google::protobuf::int64 value) {
  set_has_loadid();
  loadid_ = value;
}

// repeated .MatchSPVPUserMessage UMess = 2;
inline int MatchSPVPRpcStartGameNotify::umess_size() const {
  return umess_.size();
}
inline void MatchSPVPRpcStartGameNotify::clear_umess() {
  umess_.Clear();
}
inline const ::MatchSPVPUserMessage& MatchSPVPRpcStartGameNotify::umess(int index) const {
  return umess_.Get(index);
}
inline ::MatchSPVPUserMessage* MatchSPVPRpcStartGameNotify::mutable_umess(int index) {
  return umess_.Mutable(index);
}
inline ::MatchSPVPUserMessage* MatchSPVPRpcStartGameNotify::add_umess() {
  return umess_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MatchSPVPUserMessage >&
MatchSPVPRpcStartGameNotify::umess() const {
  return umess_;
}
inline ::google::protobuf::RepeatedPtrField< ::MatchSPVPUserMessage >*
MatchSPVPRpcStartGameNotify::mutable_umess() {
  return &umess_;
}

// repeated .MatchSPVPUserMessage UMessOther = 3;
inline int MatchSPVPRpcStartGameNotify::umessother_size() const {
  return umessother_.size();
}
inline void MatchSPVPRpcStartGameNotify::clear_umessother() {
  umessother_.Clear();
}
inline const ::MatchSPVPUserMessage& MatchSPVPRpcStartGameNotify::umessother(int index) const {
  return umessother_.Get(index);
}
inline ::MatchSPVPUserMessage* MatchSPVPRpcStartGameNotify::mutable_umessother(int index) {
  return umessother_.Mutable(index);
}
inline ::MatchSPVPUserMessage* MatchSPVPRpcStartGameNotify::add_umessother() {
  return umessother_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MatchSPVPUserMessage >&
MatchSPVPRpcStartGameNotify::umessother() const {
  return umessother_;
}
inline ::google::protobuf::RepeatedPtrField< ::MatchSPVPUserMessage >*
MatchSPVPRpcStartGameNotify::mutable_umessother() {
  return &umessother_;
}

// optional string IP = 4;
inline bool MatchSPVPRpcStartGameNotify::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MatchSPVPRpcStartGameNotify::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MatchSPVPRpcStartGameNotify::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MatchSPVPRpcStartGameNotify::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& MatchSPVPRpcStartGameNotify::ip() const {
  return *ip_;
}
inline void MatchSPVPRpcStartGameNotify::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void MatchSPVPRpcStartGameNotify::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void MatchSPVPRpcStartGameNotify::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MatchSPVPRpcStartGameNotify::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* MatchSPVPRpcStartGameNotify::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MatchSPVPRpcStartGameNotify::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional sint32 Port = 5 [default = -1];
inline bool MatchSPVPRpcStartGameNotify::has_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MatchSPVPRpcStartGameNotify::set_has_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MatchSPVPRpcStartGameNotify::clear_has_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MatchSPVPRpcStartGameNotify::clear_port() {
  port_ = -1;
  clear_has_port();
}
inline ::google::protobuf::int32 MatchSPVPRpcStartGameNotify::port() const {
  return port_;
}
inline void MatchSPVPRpcStartGameNotify::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// optional string Key = 6;
inline bool MatchSPVPRpcStartGameNotify::has_key() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MatchSPVPRpcStartGameNotify::set_has_key() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MatchSPVPRpcStartGameNotify::clear_has_key() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MatchSPVPRpcStartGameNotify::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& MatchSPVPRpcStartGameNotify::key() const {
  return *key_;
}
inline void MatchSPVPRpcStartGameNotify::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void MatchSPVPRpcStartGameNotify::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void MatchSPVPRpcStartGameNotify::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MatchSPVPRpcStartGameNotify::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* MatchSPVPRpcStartGameNotify::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MatchSPVPRpcStartGameNotify::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MatchSPVPRpcDeleteMatchNotify

// -------------------------------------------------------------------

// MatchSPVPRpcStartSelectNotify

// optional sint32 TimeStart = 1 [default = -1];
inline bool MatchSPVPRpcStartSelectNotify::has_timestart() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchSPVPRpcStartSelectNotify::set_has_timestart() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchSPVPRpcStartSelectNotify::clear_has_timestart() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchSPVPRpcStartSelectNotify::clear_timestart() {
  timestart_ = -1;
  clear_has_timestart();
}
inline ::google::protobuf::int32 MatchSPVPRpcStartSelectNotify::timestart() const {
  return timestart_;
}
inline void MatchSPVPRpcStartSelectNotify::set_timestart(::google::protobuf::int32 value) {
  set_has_timestart();
  timestart_ = value;
}

// optional sint32 TimeEnd = 2 [default = -1];
inline bool MatchSPVPRpcStartSelectNotify::has_timeend() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchSPVPRpcStartSelectNotify::set_has_timeend() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchSPVPRpcStartSelectNotify::clear_has_timeend() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchSPVPRpcStartSelectNotify::clear_timeend() {
  timeend_ = -1;
  clear_has_timeend();
}
inline ::google::protobuf::int32 MatchSPVPRpcStartSelectNotify::timeend() const {
  return timeend_;
}
inline void MatchSPVPRpcStartSelectNotify::set_timeend(::google::protobuf::int32 value) {
  set_has_timeend();
  timeend_ = value;
}

// repeated .MatchSPVPUserMessage UMess = 3;
inline int MatchSPVPRpcStartSelectNotify::umess_size() const {
  return umess_.size();
}
inline void MatchSPVPRpcStartSelectNotify::clear_umess() {
  umess_.Clear();
}
inline const ::MatchSPVPUserMessage& MatchSPVPRpcStartSelectNotify::umess(int index) const {
  return umess_.Get(index);
}
inline ::MatchSPVPUserMessage* MatchSPVPRpcStartSelectNotify::mutable_umess(int index) {
  return umess_.Mutable(index);
}
inline ::MatchSPVPUserMessage* MatchSPVPRpcStartSelectNotify::add_umess() {
  return umess_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MatchSPVPUserMessage >&
MatchSPVPRpcStartSelectNotify::umess() const {
  return umess_;
}
inline ::google::protobuf::RepeatedPtrField< ::MatchSPVPUserMessage >*
MatchSPVPRpcStartSelectNotify::mutable_umess() {
  return &umess_;
}

// repeated .MatchSPVPUserMessage OtherUMess = 4;
inline int MatchSPVPRpcStartSelectNotify::otherumess_size() const {
  return otherumess_.size();
}
inline void MatchSPVPRpcStartSelectNotify::clear_otherumess() {
  otherumess_.Clear();
}
inline const ::MatchSPVPUserMessage& MatchSPVPRpcStartSelectNotify::otherumess(int index) const {
  return otherumess_.Get(index);
}
inline ::MatchSPVPUserMessage* MatchSPVPRpcStartSelectNotify::mutable_otherumess(int index) {
  return otherumess_.Mutable(index);
}
inline ::MatchSPVPUserMessage* MatchSPVPRpcStartSelectNotify::add_otherumess() {
  return otherumess_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MatchSPVPUserMessage >&
MatchSPVPRpcStartSelectNotify::otherumess() const {
  return otherumess_;
}
inline ::google::protobuf::RepeatedPtrField< ::MatchSPVPUserMessage >*
MatchSPVPRpcStartSelectNotify::mutable_otherumess() {
  return &otherumess_;
}

// optional sint32 Timer = 5 [default = -1];
inline bool MatchSPVPRpcStartSelectNotify::has_timer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MatchSPVPRpcStartSelectNotify::set_has_timer() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MatchSPVPRpcStartSelectNotify::clear_has_timer() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MatchSPVPRpcStartSelectNotify::clear_timer() {
  timer_ = -1;
  clear_has_timer();
}
inline ::google::protobuf::int32 MatchSPVPRpcStartSelectNotify::timer() const {
  return timer_;
}
inline void MatchSPVPRpcStartSelectNotify::set_timer(::google::protobuf::int32 value) {
  set_has_timer();
  timer_ = value;
}

// -------------------------------------------------------------------

// MatchSPVPRpcSelectHeroAsk

// optional sint32 HeroID = 1 [default = -1];
inline bool MatchSPVPRpcSelectHeroAsk::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchSPVPRpcSelectHeroAsk::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchSPVPRpcSelectHeroAsk::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchSPVPRpcSelectHeroAsk::clear_heroid() {
  heroid_ = -1;
  clear_has_heroid();
}
inline ::google::protobuf::int32 MatchSPVPRpcSelectHeroAsk::heroid() const {
  return heroid_;
}
inline void MatchSPVPRpcSelectHeroAsk::set_heroid(::google::protobuf::int32 value) {
  set_has_heroid();
  heroid_ = value;
}

// -------------------------------------------------------------------

// MatchSPVPRpcSelectHeroReply

// optional sint32 Result = 1 [default = -9999];
inline bool MatchSPVPRpcSelectHeroReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchSPVPRpcSelectHeroReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchSPVPRpcSelectHeroReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchSPVPRpcSelectHeroReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 MatchSPVPRpcSelectHeroReply::result() const {
  return result_;
}
inline void MatchSPVPRpcSelectHeroReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional sint32 HeroID = 2 [default = -1];
inline bool MatchSPVPRpcSelectHeroReply::has_heroid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchSPVPRpcSelectHeroReply::set_has_heroid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchSPVPRpcSelectHeroReply::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchSPVPRpcSelectHeroReply::clear_heroid() {
  heroid_ = -1;
  clear_has_heroid();
}
inline ::google::protobuf::int32 MatchSPVPRpcSelectHeroReply::heroid() const {
  return heroid_;
}
inline void MatchSPVPRpcSelectHeroReply::set_heroid(::google::protobuf::int32 value) {
  set_has_heroid();
  heroid_ = value;
}

// -------------------------------------------------------------------

// MatchSPVPRpcGetStatusAsk

// -------------------------------------------------------------------

// MatchSPVPRpcGetStatusReply

// optional sint32 Result = 1 [default = -9999];
inline bool MatchSPVPRpcGetStatusReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchSPVPRpcGetStatusReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchSPVPRpcGetStatusReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchSPVPRpcGetStatusReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 MatchSPVPRpcGetStatusReply::result() const {
  return result_;
}
inline void MatchSPVPRpcGetStatusReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional sint32 Type = 2 [default = -1];
inline bool MatchSPVPRpcGetStatusReply::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchSPVPRpcGetStatusReply::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchSPVPRpcGetStatusReply::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchSPVPRpcGetStatusReply::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::google::protobuf::int32 MatchSPVPRpcGetStatusReply::type() const {
  return type_;
}
inline void MatchSPVPRpcGetStatusReply::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional sint32 TimeStart = 5 [default = -1];
inline bool MatchSPVPRpcGetStatusReply::has_timestart() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatchSPVPRpcGetStatusReply::set_has_timestart() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatchSPVPRpcGetStatusReply::clear_has_timestart() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatchSPVPRpcGetStatusReply::clear_timestart() {
  timestart_ = -1;
  clear_has_timestart();
}
inline ::google::protobuf::int32 MatchSPVPRpcGetStatusReply::timestart() const {
  return timestart_;
}
inline void MatchSPVPRpcGetStatusReply::set_timestart(::google::protobuf::int32 value) {
  set_has_timestart();
  timestart_ = value;
}

// optional sint32 TimeEnd = 6 [default = -1];
inline bool MatchSPVPRpcGetStatusReply::has_timeend() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MatchSPVPRpcGetStatusReply::set_has_timeend() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MatchSPVPRpcGetStatusReply::clear_has_timeend() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MatchSPVPRpcGetStatusReply::clear_timeend() {
  timeend_ = -1;
  clear_has_timeend();
}
inline ::google::protobuf::int32 MatchSPVPRpcGetStatusReply::timeend() const {
  return timeend_;
}
inline void MatchSPVPRpcGetStatusReply::set_timeend(::google::protobuf::int32 value) {
  set_has_timeend();
  timeend_ = value;
}

// optional sint32 Timer = 7 [default = -1];
inline bool MatchSPVPRpcGetStatusReply::has_timer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MatchSPVPRpcGetStatusReply::set_has_timer() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MatchSPVPRpcGetStatusReply::clear_has_timer() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MatchSPVPRpcGetStatusReply::clear_timer() {
  timer_ = -1;
  clear_has_timer();
}
inline ::google::protobuf::int32 MatchSPVPRpcGetStatusReply::timer() const {
  return timer_;
}
inline void MatchSPVPRpcGetStatusReply::set_timer(::google::protobuf::int32 value) {
  set_has_timer();
  timer_ = value;
}

// repeated .MatchSPVPUserMessage UMess = 8;
inline int MatchSPVPRpcGetStatusReply::umess_size() const {
  return umess_.size();
}
inline void MatchSPVPRpcGetStatusReply::clear_umess() {
  umess_.Clear();
}
inline const ::MatchSPVPUserMessage& MatchSPVPRpcGetStatusReply::umess(int index) const {
  return umess_.Get(index);
}
inline ::MatchSPVPUserMessage* MatchSPVPRpcGetStatusReply::mutable_umess(int index) {
  return umess_.Mutable(index);
}
inline ::MatchSPVPUserMessage* MatchSPVPRpcGetStatusReply::add_umess() {
  return umess_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MatchSPVPUserMessage >&
MatchSPVPRpcGetStatusReply::umess() const {
  return umess_;
}
inline ::google::protobuf::RepeatedPtrField< ::MatchSPVPUserMessage >*
MatchSPVPRpcGetStatusReply::mutable_umess() {
  return &umess_;
}

// repeated .MatchSPVPUserMessage UMessOther = 9;
inline int MatchSPVPRpcGetStatusReply::umessother_size() const {
  return umessother_.size();
}
inline void MatchSPVPRpcGetStatusReply::clear_umessother() {
  umessother_.Clear();
}
inline const ::MatchSPVPUserMessage& MatchSPVPRpcGetStatusReply::umessother(int index) const {
  return umessother_.Get(index);
}
inline ::MatchSPVPUserMessage* MatchSPVPRpcGetStatusReply::mutable_umessother(int index) {
  return umessother_.Mutable(index);
}
inline ::MatchSPVPUserMessage* MatchSPVPRpcGetStatusReply::add_umessother() {
  return umessother_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MatchSPVPUserMessage >&
MatchSPVPRpcGetStatusReply::umessother() const {
  return umessother_;
}
inline ::google::protobuf::RepeatedPtrField< ::MatchSPVPUserMessage >*
MatchSPVPRpcGetStatusReply::mutable_umessother() {
  return &umessother_;
}

// optional string Key = 10;
inline bool MatchSPVPRpcGetStatusReply::has_key() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MatchSPVPRpcGetStatusReply::set_has_key() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MatchSPVPRpcGetStatusReply::clear_has_key() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MatchSPVPRpcGetStatusReply::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& MatchSPVPRpcGetStatusReply::key() const {
  return *key_;
}
inline void MatchSPVPRpcGetStatusReply::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void MatchSPVPRpcGetStatusReply::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void MatchSPVPRpcGetStatusReply::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MatchSPVPRpcGetStatusReply::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* MatchSPVPRpcGetStatusReply::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MatchSPVPRpcGetStatusReply::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MatchSPVPRpcChangeStatusNotify

// optional .MatchSPVPUserMessage UMess = 1;
inline bool MatchSPVPRpcChangeStatusNotify::has_umess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchSPVPRpcChangeStatusNotify::set_has_umess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchSPVPRpcChangeStatusNotify::clear_has_umess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchSPVPRpcChangeStatusNotify::clear_umess() {
  if (umess_ != NULL) umess_->::MatchSPVPUserMessage::Clear();
  clear_has_umess();
}
inline const ::MatchSPVPUserMessage& MatchSPVPRpcChangeStatusNotify::umess() const {
  return umess_ != NULL ? *umess_ : *default_instance_->umess_;
}
inline ::MatchSPVPUserMessage* MatchSPVPRpcChangeStatusNotify::mutable_umess() {
  set_has_umess();
  if (umess_ == NULL) umess_ = new ::MatchSPVPUserMessage;
  return umess_;
}
inline ::MatchSPVPUserMessage* MatchSPVPRpcChangeStatusNotify::release_umess() {
  clear_has_umess();
  ::MatchSPVPUserMessage* temp = umess_;
  umess_ = NULL;
  return temp;
}
inline void MatchSPVPRpcChangeStatusNotify::set_allocated_umess(::MatchSPVPUserMessage* umess) {
  delete umess_;
  umess_ = umess;
  if (umess) {
    set_has_umess();
  } else {
    clear_has_umess();
  }
}

// -------------------------------------------------------------------

// MatchSPVPRpcShotOffAsk

// optional sint64 Uid = 1 [default = -1];
inline bool MatchSPVPRpcShotOffAsk::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchSPVPRpcShotOffAsk::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchSPVPRpcShotOffAsk::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchSPVPRpcShotOffAsk::clear_uid() {
  uid_ = GOOGLE_LONGLONG(-1);
  clear_has_uid();
}
inline ::google::protobuf::int64 MatchSPVPRpcShotOffAsk::uid() const {
  return uid_;
}
inline void MatchSPVPRpcShotOffAsk::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// -------------------------------------------------------------------

// MatchSPVPRpcShotOffReply

// optional sint32 Result = 1 [default = -9999];
inline bool MatchSPVPRpcShotOffReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchSPVPRpcShotOffReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchSPVPRpcShotOffReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchSPVPRpcShotOffReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 MatchSPVPRpcShotOffReply::result() const {
  return result_;
}
inline void MatchSPVPRpcShotOffReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional sint64 Uid = 2 [default = -1];
inline bool MatchSPVPRpcShotOffReply::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchSPVPRpcShotOffReply::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchSPVPRpcShotOffReply::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchSPVPRpcShotOffReply::clear_uid() {
  uid_ = GOOGLE_LONGLONG(-1);
  clear_has_uid();
}
inline ::google::protobuf::int64 MatchSPVPRpcShotOffReply::uid() const {
  return uid_;
}
inline void MatchSPVPRpcShotOffReply::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// -------------------------------------------------------------------

// MatchSPVPRpcSelectSceneNotify

// optional sint32 SceneID = 1 [default = 1];
inline bool MatchSPVPRpcSelectSceneNotify::has_sceneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchSPVPRpcSelectSceneNotify::set_has_sceneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchSPVPRpcSelectSceneNotify::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchSPVPRpcSelectSceneNotify::clear_sceneid() {
  sceneid_ = 1;
  clear_has_sceneid();
}
inline ::google::protobuf::int32 MatchSPVPRpcSelectSceneNotify::sceneid() const {
  return sceneid_;
}
inline void MatchSPVPRpcSelectSceneNotify::set_sceneid(::google::protobuf::int32 value) {
  set_has_sceneid();
  sceneid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MatchSPVPCliRpc_2eproto__INCLUDED
