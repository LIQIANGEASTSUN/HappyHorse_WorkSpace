// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PropertyCliRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PropertyCliRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PropertyRpcSyncAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropertyRpcSyncAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PropertyRpcSyncReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropertyRpcSyncReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* PropertyRpcUpdateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropertyRpcUpdateNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PropertyRpcChangeHeadAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropertyRpcChangeHeadAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PropertyRpcChangeHeadReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropertyRpcChangeHeadReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PropertyCliRpc_2eproto() {
  protobuf_AddDesc_PropertyCliRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PropertyCliRpc.proto");
  GOOGLE_CHECK(file != NULL);
  PropertyRpcSyncAsk_descriptor_ = file->message_type(0);
  static const int PropertyRpcSyncAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyRpcSyncAsk, uid_),
  };
  PropertyRpcSyncAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PropertyRpcSyncAsk_descriptor_,
      PropertyRpcSyncAsk::default_instance_,
      PropertyRpcSyncAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyRpcSyncAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyRpcSyncAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PropertyRpcSyncAsk));
  PropertyRpcSyncReply_descriptor_ = file->message_type(1);
  static const int PropertyRpcSyncReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyRpcSyncReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyRpcSyncReply, user_),
  };
  PropertyRpcSyncReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PropertyRpcSyncReply_descriptor_,
      PropertyRpcSyncReply::default_instance_,
      PropertyRpcSyncReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyRpcSyncReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyRpcSyncReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PropertyRpcSyncReply));
  PropertyRpcUpdateNotify_descriptor_ = file->message_type(2);
  static const int PropertyRpcUpdateNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyRpcUpdateNotify, user_),
  };
  PropertyRpcUpdateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PropertyRpcUpdateNotify_descriptor_,
      PropertyRpcUpdateNotify::default_instance_,
      PropertyRpcUpdateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyRpcUpdateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyRpcUpdateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PropertyRpcUpdateNotify));
  PropertyRpcChangeHeadAsk_descriptor_ = file->message_type(3);
  static const int PropertyRpcChangeHeadAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyRpcChangeHeadAsk, headid_),
  };
  PropertyRpcChangeHeadAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PropertyRpcChangeHeadAsk_descriptor_,
      PropertyRpcChangeHeadAsk::default_instance_,
      PropertyRpcChangeHeadAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyRpcChangeHeadAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyRpcChangeHeadAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PropertyRpcChangeHeadAsk));
  PropertyRpcChangeHeadReply_descriptor_ = file->message_type(4);
  static const int PropertyRpcChangeHeadReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyRpcChangeHeadReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyRpcChangeHeadReply, headid_),
  };
  PropertyRpcChangeHeadReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PropertyRpcChangeHeadReply_descriptor_,
      PropertyRpcChangeHeadReply::default_instance_,
      PropertyRpcChangeHeadReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyRpcChangeHeadReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyRpcChangeHeadReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PropertyRpcChangeHeadReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PropertyCliRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PropertyRpcSyncAsk_descriptor_, &PropertyRpcSyncAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PropertyRpcSyncReply_descriptor_, &PropertyRpcSyncReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PropertyRpcUpdateNotify_descriptor_, &PropertyRpcUpdateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PropertyRpcChangeHeadAsk_descriptor_, &PropertyRpcChangeHeadAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PropertyRpcChangeHeadReply_descriptor_, &PropertyRpcChangeHeadReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PropertyCliRpc_2eproto() {
  delete PropertyRpcSyncAsk::default_instance_;
  delete PropertyRpcSyncAsk_reflection_;
  delete PropertyRpcSyncReply::default_instance_;
  delete PropertyRpcSyncReply_reflection_;
  delete PropertyRpcUpdateNotify::default_instance_;
  delete PropertyRpcUpdateNotify_reflection_;
  delete PropertyRpcChangeHeadAsk::default_instance_;
  delete PropertyRpcChangeHeadAsk_reflection_;
  delete PropertyRpcChangeHeadReply::default_instance_;
  delete PropertyRpcChangeHeadReply_reflection_;
}

void protobuf_AddDesc_PropertyCliRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024PropertyCliRpc.proto\032\022PublicStruct.pro"
    "to\"%\n\022PropertyRpcSyncAsk\022\017\n\003Uid\030\001 \001(\022:\002-"
    "1\"B\n\024PropertyRpcSyncReply\022\025\n\006Result\030\001 \001("
    "\021:\005-9999\022\023\n\004User\030\002 \001(\0132\005.User\".\n\027Propert"
    "yRpcUpdateNotify\022\023\n\004User\030\001 \001(\0132\005.User\"-\n"
    "\030PropertyRpcChangeHeadAsk\022\021\n\006HeadID\030\001 \001("
    "\021:\0011\"F\n\032PropertyRpcChangeHeadReply\022\025\n\006Re"
    "sult\030\001 \001(\021:\005-9999\022\021\n\006HeadID\030\002 \001(\021:\0011", 316);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PropertyCliRpc.proto", &protobuf_RegisterTypes);
  PropertyRpcSyncAsk::default_instance_ = new PropertyRpcSyncAsk();
  PropertyRpcSyncReply::default_instance_ = new PropertyRpcSyncReply();
  PropertyRpcUpdateNotify::default_instance_ = new PropertyRpcUpdateNotify();
  PropertyRpcChangeHeadAsk::default_instance_ = new PropertyRpcChangeHeadAsk();
  PropertyRpcChangeHeadReply::default_instance_ = new PropertyRpcChangeHeadReply();
  PropertyRpcSyncAsk::default_instance_->InitAsDefaultInstance();
  PropertyRpcSyncReply::default_instance_->InitAsDefaultInstance();
  PropertyRpcUpdateNotify::default_instance_->InitAsDefaultInstance();
  PropertyRpcChangeHeadAsk::default_instance_->InitAsDefaultInstance();
  PropertyRpcChangeHeadReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PropertyCliRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PropertyCliRpc_2eproto {
  StaticDescriptorInitializer_PropertyCliRpc_2eproto() {
    protobuf_AddDesc_PropertyCliRpc_2eproto();
  }
} static_descriptor_initializer_PropertyCliRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PropertyRpcSyncAsk::kUidFieldNumber;
#endif  // !_MSC_VER

PropertyRpcSyncAsk::PropertyRpcSyncAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PropertyRpcSyncAsk::InitAsDefaultInstance() {
}

PropertyRpcSyncAsk::PropertyRpcSyncAsk(const PropertyRpcSyncAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PropertyRpcSyncAsk::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropertyRpcSyncAsk::~PropertyRpcSyncAsk() {
  SharedDtor();
}

void PropertyRpcSyncAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PropertyRpcSyncAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyRpcSyncAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropertyRpcSyncAsk_descriptor_;
}

const PropertyRpcSyncAsk& PropertyRpcSyncAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PropertyCliRpc_2eproto();
  return *default_instance_;
}

PropertyRpcSyncAsk* PropertyRpcSyncAsk::default_instance_ = NULL;

PropertyRpcSyncAsk* PropertyRpcSyncAsk::New() const {
  return new PropertyRpcSyncAsk;
}

void PropertyRpcSyncAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(-1);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PropertyRpcSyncAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 Uid = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PropertyRpcSyncAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint64 Uid = 1 [default = -1];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PropertyRpcSyncAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint64 Uid = 1 [default = -1];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PropertyRpcSyncAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 Uid = 1 [default = -1];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyRpcSyncAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PropertyRpcSyncAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PropertyRpcSyncAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PropertyRpcSyncAsk::MergeFrom(const PropertyRpcSyncAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PropertyRpcSyncAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyRpcSyncAsk::CopyFrom(const PropertyRpcSyncAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyRpcSyncAsk::IsInitialized() const {

  return true;
}

void PropertyRpcSyncAsk::Swap(PropertyRpcSyncAsk* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PropertyRpcSyncAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropertyRpcSyncAsk_descriptor_;
  metadata.reflection = PropertyRpcSyncAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PropertyRpcSyncReply::kResultFieldNumber;
const int PropertyRpcSyncReply::kUserFieldNumber;
#endif  // !_MSC_VER

PropertyRpcSyncReply::PropertyRpcSyncReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PropertyRpcSyncReply::InitAsDefaultInstance() {
  user_ = const_cast< ::User*>(&::User::default_instance());
}

PropertyRpcSyncReply::PropertyRpcSyncReply(const PropertyRpcSyncReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PropertyRpcSyncReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropertyRpcSyncReply::~PropertyRpcSyncReply() {
  SharedDtor();
}

void PropertyRpcSyncReply::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void PropertyRpcSyncReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyRpcSyncReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropertyRpcSyncReply_descriptor_;
}

const PropertyRpcSyncReply& PropertyRpcSyncReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PropertyCliRpc_2eproto();
  return *default_instance_;
}

PropertyRpcSyncReply* PropertyRpcSyncReply::default_instance_ = NULL;

PropertyRpcSyncReply* PropertyRpcSyncReply::New() const {
  return new PropertyRpcSyncReply;
}

void PropertyRpcSyncReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    if (has_user()) {
      if (user_ != NULL) user_->::User::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PropertyRpcSyncReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_User;
        break;
      }

      // optional .User User = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_User:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PropertyRpcSyncReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional .User User = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PropertyRpcSyncReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional .User User = 2;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PropertyRpcSyncReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional .User User = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyRpcSyncReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PropertyRpcSyncReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PropertyRpcSyncReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PropertyRpcSyncReply::MergeFrom(const PropertyRpcSyncReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user()) {
      mutable_user()->::User::MergeFrom(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PropertyRpcSyncReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyRpcSyncReply::CopyFrom(const PropertyRpcSyncReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyRpcSyncReply::IsInitialized() const {

  return true;
}

void PropertyRpcSyncReply::Swap(PropertyRpcSyncReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PropertyRpcSyncReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropertyRpcSyncReply_descriptor_;
  metadata.reflection = PropertyRpcSyncReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PropertyRpcUpdateNotify::kUserFieldNumber;
#endif  // !_MSC_VER

PropertyRpcUpdateNotify::PropertyRpcUpdateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PropertyRpcUpdateNotify::InitAsDefaultInstance() {
  user_ = const_cast< ::User*>(&::User::default_instance());
}

PropertyRpcUpdateNotify::PropertyRpcUpdateNotify(const PropertyRpcUpdateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PropertyRpcUpdateNotify::SharedCtor() {
  _cached_size_ = 0;
  user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropertyRpcUpdateNotify::~PropertyRpcUpdateNotify() {
  SharedDtor();
}

void PropertyRpcUpdateNotify::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void PropertyRpcUpdateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyRpcUpdateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropertyRpcUpdateNotify_descriptor_;
}

const PropertyRpcUpdateNotify& PropertyRpcUpdateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PropertyCliRpc_2eproto();
  return *default_instance_;
}

PropertyRpcUpdateNotify* PropertyRpcUpdateNotify::default_instance_ = NULL;

PropertyRpcUpdateNotify* PropertyRpcUpdateNotify::New() const {
  return new PropertyRpcUpdateNotify;
}

void PropertyRpcUpdateNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user()) {
      if (user_ != NULL) user_->::User::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PropertyRpcUpdateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .User User = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PropertyRpcUpdateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .User User = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PropertyRpcUpdateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .User User = 1;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PropertyRpcUpdateNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .User User = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyRpcUpdateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PropertyRpcUpdateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PropertyRpcUpdateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PropertyRpcUpdateNotify::MergeFrom(const PropertyRpcUpdateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      mutable_user()->::User::MergeFrom(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PropertyRpcUpdateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyRpcUpdateNotify::CopyFrom(const PropertyRpcUpdateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyRpcUpdateNotify::IsInitialized() const {

  return true;
}

void PropertyRpcUpdateNotify::Swap(PropertyRpcUpdateNotify* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PropertyRpcUpdateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropertyRpcUpdateNotify_descriptor_;
  metadata.reflection = PropertyRpcUpdateNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PropertyRpcChangeHeadAsk::kHeadIDFieldNumber;
#endif  // !_MSC_VER

PropertyRpcChangeHeadAsk::PropertyRpcChangeHeadAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PropertyRpcChangeHeadAsk::InitAsDefaultInstance() {
}

PropertyRpcChangeHeadAsk::PropertyRpcChangeHeadAsk(const PropertyRpcChangeHeadAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PropertyRpcChangeHeadAsk::SharedCtor() {
  _cached_size_ = 0;
  headid_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropertyRpcChangeHeadAsk::~PropertyRpcChangeHeadAsk() {
  SharedDtor();
}

void PropertyRpcChangeHeadAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PropertyRpcChangeHeadAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyRpcChangeHeadAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropertyRpcChangeHeadAsk_descriptor_;
}

const PropertyRpcChangeHeadAsk& PropertyRpcChangeHeadAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PropertyCliRpc_2eproto();
  return *default_instance_;
}

PropertyRpcChangeHeadAsk* PropertyRpcChangeHeadAsk::default_instance_ = NULL;

PropertyRpcChangeHeadAsk* PropertyRpcChangeHeadAsk::New() const {
  return new PropertyRpcChangeHeadAsk;
}

void PropertyRpcChangeHeadAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    headid_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PropertyRpcChangeHeadAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 HeadID = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PropertyRpcChangeHeadAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 HeadID = 1 [default = 1];
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->headid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PropertyRpcChangeHeadAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 HeadID = 1 [default = 1];
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->headid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PropertyRpcChangeHeadAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 HeadID = 1 [default = 1];
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->headid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyRpcChangeHeadAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PropertyRpcChangeHeadAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PropertyRpcChangeHeadAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PropertyRpcChangeHeadAsk::MergeFrom(const PropertyRpcChangeHeadAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_headid()) {
      set_headid(from.headid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PropertyRpcChangeHeadAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyRpcChangeHeadAsk::CopyFrom(const PropertyRpcChangeHeadAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyRpcChangeHeadAsk::IsInitialized() const {

  return true;
}

void PropertyRpcChangeHeadAsk::Swap(PropertyRpcChangeHeadAsk* other) {
  if (other != this) {
    std::swap(headid_, other->headid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PropertyRpcChangeHeadAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropertyRpcChangeHeadAsk_descriptor_;
  metadata.reflection = PropertyRpcChangeHeadAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PropertyRpcChangeHeadReply::kResultFieldNumber;
const int PropertyRpcChangeHeadReply::kHeadIDFieldNumber;
#endif  // !_MSC_VER

PropertyRpcChangeHeadReply::PropertyRpcChangeHeadReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PropertyRpcChangeHeadReply::InitAsDefaultInstance() {
}

PropertyRpcChangeHeadReply::PropertyRpcChangeHeadReply(const PropertyRpcChangeHeadReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PropertyRpcChangeHeadReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  headid_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropertyRpcChangeHeadReply::~PropertyRpcChangeHeadReply() {
  SharedDtor();
}

void PropertyRpcChangeHeadReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PropertyRpcChangeHeadReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyRpcChangeHeadReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropertyRpcChangeHeadReply_descriptor_;
}

const PropertyRpcChangeHeadReply& PropertyRpcChangeHeadReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PropertyCliRpc_2eproto();
  return *default_instance_;
}

PropertyRpcChangeHeadReply* PropertyRpcChangeHeadReply::default_instance_ = NULL;

PropertyRpcChangeHeadReply* PropertyRpcChangeHeadReply::New() const {
  return new PropertyRpcChangeHeadReply;
}

void PropertyRpcChangeHeadReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    headid_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PropertyRpcChangeHeadReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HeadID;
        break;
      }

      // optional sint32 HeadID = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HeadID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PropertyRpcChangeHeadReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint32 HeadID = 2 [default = 1];
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->headid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PropertyRpcChangeHeadReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint32 HeadID = 2 [default = 1];
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->headid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PropertyRpcChangeHeadReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 HeadID = 2 [default = 1];
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->headid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyRpcChangeHeadReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PropertyRpcChangeHeadReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PropertyRpcChangeHeadReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PropertyRpcChangeHeadReply::MergeFrom(const PropertyRpcChangeHeadReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PropertyRpcChangeHeadReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyRpcChangeHeadReply::CopyFrom(const PropertyRpcChangeHeadReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyRpcChangeHeadReply::IsInitialized() const {

  return true;
}

void PropertyRpcChangeHeadReply::Swap(PropertyRpcChangeHeadReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(headid_, other->headid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PropertyRpcChangeHeadReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropertyRpcChangeHeadReply_descriptor_;
  metadata.reflection = PropertyRpcChangeHeadReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
