// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AuthCliRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AuthCliRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* AuthRpcAuthAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthRpcAuthAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthRpcAuthReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthRpcAuthReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthRpcKickNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthRpcKickNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_AuthCliRpc_2eproto() {
  protobuf_AddDesc_AuthCliRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AuthCliRpc.proto");
  GOOGLE_CHECK(file != NULL);
  AuthRpcAuthAsk_descriptor_ = file->message_type(0);
  static const int AuthRpcAuthAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRpcAuthAsk, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRpcAuthAsk, password_),
  };
  AuthRpcAuthAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthRpcAuthAsk_descriptor_,
      AuthRpcAuthAsk::default_instance_,
      AuthRpcAuthAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRpcAuthAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRpcAuthAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthRpcAuthAsk));
  AuthRpcAuthReply_descriptor_ = file->message_type(1);
  static const int AuthRpcAuthReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRpcAuthReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRpcAuthReply, uid_),
  };
  AuthRpcAuthReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthRpcAuthReply_descriptor_,
      AuthRpcAuthReply::default_instance_,
      AuthRpcAuthReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRpcAuthReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRpcAuthReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthRpcAuthReply));
  AuthRpcKickNotify_descriptor_ = file->message_type(2);
  static const int AuthRpcKickNotify_offsets_[1] = {
  };
  AuthRpcKickNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthRpcKickNotify_descriptor_,
      AuthRpcKickNotify::default_instance_,
      AuthRpcKickNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRpcKickNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRpcKickNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthRpcKickNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AuthCliRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthRpcAuthAsk_descriptor_, &AuthRpcAuthAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthRpcAuthReply_descriptor_, &AuthRpcAuthReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthRpcKickNotify_descriptor_, &AuthRpcKickNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AuthCliRpc_2eproto() {
  delete AuthRpcAuthAsk::default_instance_;
  delete AuthRpcAuthAsk_reflection_;
  delete AuthRpcAuthReply::default_instance_;
  delete AuthRpcAuthReply_reflection_;
  delete AuthRpcKickNotify::default_instance_;
  delete AuthRpcKickNotify_reflection_;
}

void protobuf_AddDesc_AuthCliRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020AuthCliRpc.proto\032\022PublicStruct.proto\"4"
    "\n\016AuthRpcAuthAsk\022\020\n\010UserName\030\001 \001(\t\022\020\n\010Pa"
    "ssWord\030\002 \001(\t\"9\n\020AuthRpcAuthReply\022\025\n\006Resu"
    "lt\030\001 \001(\021:\005-9999\022\016\n\003UID\030\016 \001(\022:\0010\"\023\n\021AuthR"
    "pcKickNotify", 172);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AuthCliRpc.proto", &protobuf_RegisterTypes);
  AuthRpcAuthAsk::default_instance_ = new AuthRpcAuthAsk();
  AuthRpcAuthReply::default_instance_ = new AuthRpcAuthReply();
  AuthRpcKickNotify::default_instance_ = new AuthRpcKickNotify();
  AuthRpcAuthAsk::default_instance_->InitAsDefaultInstance();
  AuthRpcAuthReply::default_instance_->InitAsDefaultInstance();
  AuthRpcKickNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AuthCliRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AuthCliRpc_2eproto {
  StaticDescriptorInitializer_AuthCliRpc_2eproto() {
    protobuf_AddDesc_AuthCliRpc_2eproto();
  }
} static_descriptor_initializer_AuthCliRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AuthRpcAuthAsk::kUserNameFieldNumber;
const int AuthRpcAuthAsk::kPassWordFieldNumber;
#endif  // !_MSC_VER

AuthRpcAuthAsk::AuthRpcAuthAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuthRpcAuthAsk::InitAsDefaultInstance() {
}

AuthRpcAuthAsk::AuthRpcAuthAsk(const AuthRpcAuthAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuthRpcAuthAsk::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthRpcAuthAsk::~AuthRpcAuthAsk() {
  SharedDtor();
}

void AuthRpcAuthAsk::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void AuthRpcAuthAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthRpcAuthAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthRpcAuthAsk_descriptor_;
}

const AuthRpcAuthAsk& AuthRpcAuthAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuthCliRpc_2eproto();
  return *default_instance_;
}

AuthRpcAuthAsk* AuthRpcAuthAsk::default_instance_ = NULL;

AuthRpcAuthAsk* AuthRpcAuthAsk::New() const {
  return new AuthRpcAuthAsk;
}

void AuthRpcAuthAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthRpcAuthAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string UserName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PassWord;
        break;
      }

      // optional string PassWord = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PassWord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuthRpcAuthAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string UserName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }

  // optional string PassWord = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuthRpcAuthAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string UserName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional string PassWord = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuthRpcAuthAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string UserName = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string PassWord = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthRpcAuthAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthRpcAuthAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthRpcAuthAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthRpcAuthAsk::MergeFrom(const AuthRpcAuthAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthRpcAuthAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthRpcAuthAsk::CopyFrom(const AuthRpcAuthAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRpcAuthAsk::IsInitialized() const {

  return true;
}

void AuthRpcAuthAsk::Swap(AuthRpcAuthAsk* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthRpcAuthAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthRpcAuthAsk_descriptor_;
  metadata.reflection = AuthRpcAuthAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuthRpcAuthReply::kResultFieldNumber;
const int AuthRpcAuthReply::kUIDFieldNumber;
#endif  // !_MSC_VER

AuthRpcAuthReply::AuthRpcAuthReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuthRpcAuthReply::InitAsDefaultInstance() {
}

AuthRpcAuthReply::AuthRpcAuthReply(const AuthRpcAuthReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuthRpcAuthReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  uid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthRpcAuthReply::~AuthRpcAuthReply() {
  SharedDtor();
}

void AuthRpcAuthReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuthRpcAuthReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthRpcAuthReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthRpcAuthReply_descriptor_;
}

const AuthRpcAuthReply& AuthRpcAuthReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuthCliRpc_2eproto();
  return *default_instance_;
}

AuthRpcAuthReply* AuthRpcAuthReply::default_instance_ = NULL;

AuthRpcAuthReply* AuthRpcAuthReply::New() const {
  return new AuthRpcAuthReply;
}

void AuthRpcAuthReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    uid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthRpcAuthReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_UID;
        break;
      }

      // optional sint64 UID = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuthRpcAuthReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint64 UID = 14 [default = 0];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(14, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuthRpcAuthReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint64 UID = 14 [default = 0];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(14, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuthRpcAuthReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint64 UID = 14 [default = 0];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthRpcAuthReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthRpcAuthReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthRpcAuthReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthRpcAuthReply::MergeFrom(const AuthRpcAuthReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthRpcAuthReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthRpcAuthReply::CopyFrom(const AuthRpcAuthReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRpcAuthReply::IsInitialized() const {

  return true;
}

void AuthRpcAuthReply::Swap(AuthRpcAuthReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthRpcAuthReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthRpcAuthReply_descriptor_;
  metadata.reflection = AuthRpcAuthReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AuthRpcKickNotify::AuthRpcKickNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuthRpcKickNotify::InitAsDefaultInstance() {
}

AuthRpcKickNotify::AuthRpcKickNotify(const AuthRpcKickNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuthRpcKickNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthRpcKickNotify::~AuthRpcKickNotify() {
  SharedDtor();
}

void AuthRpcKickNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuthRpcKickNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthRpcKickNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthRpcKickNotify_descriptor_;
}

const AuthRpcKickNotify& AuthRpcKickNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuthCliRpc_2eproto();
  return *default_instance_;
}

AuthRpcKickNotify* AuthRpcKickNotify::default_instance_ = NULL;

AuthRpcKickNotify* AuthRpcKickNotify::New() const {
  return new AuthRpcKickNotify;
}

void AuthRpcKickNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthRpcKickNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void AuthRpcKickNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuthRpcKickNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuthRpcKickNotify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthRpcKickNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthRpcKickNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthRpcKickNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthRpcKickNotify::MergeFrom(const AuthRpcKickNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthRpcKickNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthRpcKickNotify::CopyFrom(const AuthRpcKickNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRpcKickNotify::IsInitialized() const {

  return true;
}

void AuthRpcKickNotify::Swap(AuthRpcKickNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthRpcKickNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthRpcKickNotify_descriptor_;
  metadata.reflection = AuthRpcKickNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
