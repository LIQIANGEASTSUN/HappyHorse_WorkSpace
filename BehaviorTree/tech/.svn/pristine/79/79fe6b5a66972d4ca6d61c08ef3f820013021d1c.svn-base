// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TeamSvrRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TeamSvrRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* TeamRpcGetTeamAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcGetTeamAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRpcGetTeamReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcGetTeamReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRpcTeamOverAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcTeamOverAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRpcTeamOverReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcTeamOverReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TeamSvrRpc_2eproto() {
  protobuf_AddDesc_TeamSvrRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TeamSvrRpc.proto");
  GOOGLE_CHECK(file != NULL);
  TeamRpcGetTeamAsk_descriptor_ = file->message_type(0);
  static const int TeamRpcGetTeamAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcGetTeamAsk, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcGetTeamAsk, uid_),
  };
  TeamRpcGetTeamAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcGetTeamAsk_descriptor_,
      TeamRpcGetTeamAsk::default_instance_,
      TeamRpcGetTeamAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcGetTeamAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcGetTeamAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcGetTeamAsk));
  TeamRpcGetTeamReply_descriptor_ = file->message_type(1);
  static const int TeamRpcGetTeamReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcGetTeamReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcGetTeamReply, uids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcGetTeamReply, teamid_),
  };
  TeamRpcGetTeamReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcGetTeamReply_descriptor_,
      TeamRpcGetTeamReply::default_instance_,
      TeamRpcGetTeamReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcGetTeamReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcGetTeamReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcGetTeamReply));
  TeamRpcTeamOverAsk_descriptor_ = file->message_type(2);
  static const int TeamRpcTeamOverAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcTeamOverAsk, teamid_),
  };
  TeamRpcTeamOverAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcTeamOverAsk_descriptor_,
      TeamRpcTeamOverAsk::default_instance_,
      TeamRpcTeamOverAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcTeamOverAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcTeamOverAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcTeamOverAsk));
  TeamRpcTeamOverReply_descriptor_ = file->message_type(3);
  static const int TeamRpcTeamOverReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcTeamOverReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcTeamOverReply, teamid_),
  };
  TeamRpcTeamOverReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcTeamOverReply_descriptor_,
      TeamRpcTeamOverReply::default_instance_,
      TeamRpcTeamOverReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcTeamOverReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcTeamOverReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcTeamOverReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TeamSvrRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcGetTeamAsk_descriptor_, &TeamRpcGetTeamAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcGetTeamReply_descriptor_, &TeamRpcGetTeamReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcTeamOverAsk_descriptor_, &TeamRpcTeamOverAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcTeamOverReply_descriptor_, &TeamRpcTeamOverReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TeamSvrRpc_2eproto() {
  delete TeamRpcGetTeamAsk::default_instance_;
  delete TeamRpcGetTeamAsk_reflection_;
  delete TeamRpcGetTeamReply::default_instance_;
  delete TeamRpcGetTeamReply_reflection_;
  delete TeamRpcTeamOverAsk::default_instance_;
  delete TeamRpcTeamOverAsk_reflection_;
  delete TeamRpcTeamOverReply::default_instance_;
  delete TeamRpcTeamOverReply_reflection_;
}

void protobuf_AddDesc_TeamSvrRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020TeamSvrRpc.proto\032\022PublicStruct.proto\"8"
    "\n\021TeamRpcGetTeamAsk\022\022\n\006TeamID\030\001 \001(\022:\002-1\022"
    "\017\n\003UID\030\002 \001(\022:\002-1\"N\n\023TeamRpcGetTeamReply\022"
    "\025\n\006Result\030\001 \001(\021:\005-9999\022\014\n\004UIDS\030\002 \003(\022\022\022\n\006"
    "TeamID\030\003 \001(\022:\002-1\"(\n\022TeamRpcTeamOverAsk\022\022"
    "\n\006TeamID\030\001 \001(\022:\002-1\"A\n\024TeamRpcTeamOverRep"
    "ly\022\025\n\006Result\030\001 \001(\021:\005-9999\022\022\n\006TeamID\030\002 \001("
    "\022:\002-1", 285);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TeamSvrRpc.proto", &protobuf_RegisterTypes);
  TeamRpcGetTeamAsk::default_instance_ = new TeamRpcGetTeamAsk();
  TeamRpcGetTeamReply::default_instance_ = new TeamRpcGetTeamReply();
  TeamRpcTeamOverAsk::default_instance_ = new TeamRpcTeamOverAsk();
  TeamRpcTeamOverReply::default_instance_ = new TeamRpcTeamOverReply();
  TeamRpcGetTeamAsk::default_instance_->InitAsDefaultInstance();
  TeamRpcGetTeamReply::default_instance_->InitAsDefaultInstance();
  TeamRpcTeamOverAsk::default_instance_->InitAsDefaultInstance();
  TeamRpcTeamOverReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TeamSvrRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TeamSvrRpc_2eproto {
  StaticDescriptorInitializer_TeamSvrRpc_2eproto() {
    protobuf_AddDesc_TeamSvrRpc_2eproto();
  }
} static_descriptor_initializer_TeamSvrRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TeamRpcGetTeamAsk::kTeamIDFieldNumber;
const int TeamRpcGetTeamAsk::kUIDFieldNumber;
#endif  // !_MSC_VER

TeamRpcGetTeamAsk::TeamRpcGetTeamAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcGetTeamAsk::InitAsDefaultInstance() {
}

TeamRpcGetTeamAsk::TeamRpcGetTeamAsk(const TeamRpcGetTeamAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcGetTeamAsk::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_LONGLONG(-1);
  uid_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcGetTeamAsk::~TeamRpcGetTeamAsk() {
  SharedDtor();
}

void TeamRpcGetTeamAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamRpcGetTeamAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcGetTeamAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcGetTeamAsk_descriptor_;
}

const TeamRpcGetTeamAsk& TeamRpcGetTeamAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamSvrRpc_2eproto();
  return *default_instance_;
}

TeamRpcGetTeamAsk* TeamRpcGetTeamAsk::default_instance_ = NULL;

TeamRpcGetTeamAsk* TeamRpcGetTeamAsk::New() const {
  return new TeamRpcGetTeamAsk;
}

void TeamRpcGetTeamAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = GOOGLE_LONGLONG(-1);
    uid_ = GOOGLE_LONGLONG(-1);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcGetTeamAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 TeamID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_UID;
        break;
      }

      // optional sint64 UID = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamRpcGetTeamAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint64 TeamID = 1 [default = -1];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->teamid(), output);
  }

  // optional sint64 UID = 2 [default = -1];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcGetTeamAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint64 TeamID = 1 [default = -1];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->teamid(), target);
  }

  // optional sint64 UID = 2 [default = -1];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcGetTeamAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 TeamID = 1 [default = -1];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->teamid());
    }

    // optional sint64 UID = 2 [default = -1];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcGetTeamAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcGetTeamAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcGetTeamAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcGetTeamAsk::MergeFrom(const TeamRpcGetTeamAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcGetTeamAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcGetTeamAsk::CopyFrom(const TeamRpcGetTeamAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcGetTeamAsk::IsInitialized() const {

  return true;
}

void TeamRpcGetTeamAsk::Swap(TeamRpcGetTeamAsk* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcGetTeamAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcGetTeamAsk_descriptor_;
  metadata.reflection = TeamRpcGetTeamAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRpcGetTeamReply::kResultFieldNumber;
const int TeamRpcGetTeamReply::kUIDSFieldNumber;
const int TeamRpcGetTeamReply::kTeamIDFieldNumber;
#endif  // !_MSC_VER

TeamRpcGetTeamReply::TeamRpcGetTeamReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcGetTeamReply::InitAsDefaultInstance() {
}

TeamRpcGetTeamReply::TeamRpcGetTeamReply(const TeamRpcGetTeamReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcGetTeamReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  teamid_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcGetTeamReply::~TeamRpcGetTeamReply() {
  SharedDtor();
}

void TeamRpcGetTeamReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamRpcGetTeamReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcGetTeamReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcGetTeamReply_descriptor_;
}

const TeamRpcGetTeamReply& TeamRpcGetTeamReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamSvrRpc_2eproto();
  return *default_instance_;
}

TeamRpcGetTeamReply* TeamRpcGetTeamReply::default_instance_ = NULL;

TeamRpcGetTeamReply* TeamRpcGetTeamReply::New() const {
  return new TeamRpcGetTeamReply;
}

void TeamRpcGetTeamReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    teamid_ = GOOGLE_LONGLONG(-1);
  }
  uids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcGetTeamReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_UIDS;
        break;
      }

      // repeated sint64 UIDS = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UIDS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 16, input, this->mutable_uids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_uids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_UIDS;
        if (input->ExpectTag(24)) goto parse_TeamID;
        break;
      }

      // optional sint64 TeamID = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TeamID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamRpcGetTeamReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // repeated sint64 UIDS = 2;
  for (int i = 0; i < this->uids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      2, this->uids(i), output);
  }

  // optional sint64 TeamID = 3 [default = -1];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcGetTeamReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // repeated sint64 UIDS = 2;
  for (int i = 0; i < this->uids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64ToArray(2, this->uids(i), target);
  }

  // optional sint64 TeamID = 3 [default = -1];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcGetTeamReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint64 TeamID = 3 [default = -1];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->teamid());
    }

  }
  // repeated sint64 UIDS = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->uids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->uids(i));
    }
    total_size += 1 * this->uids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcGetTeamReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcGetTeamReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcGetTeamReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcGetTeamReply::MergeFrom(const TeamRpcGetTeamReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  uids_.MergeFrom(from.uids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcGetTeamReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcGetTeamReply::CopyFrom(const TeamRpcGetTeamReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcGetTeamReply::IsInitialized() const {

  return true;
}

void TeamRpcGetTeamReply::Swap(TeamRpcGetTeamReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    uids_.Swap(&other->uids_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcGetTeamReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcGetTeamReply_descriptor_;
  metadata.reflection = TeamRpcGetTeamReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRpcTeamOverAsk::kTeamIDFieldNumber;
#endif  // !_MSC_VER

TeamRpcTeamOverAsk::TeamRpcTeamOverAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcTeamOverAsk::InitAsDefaultInstance() {
}

TeamRpcTeamOverAsk::TeamRpcTeamOverAsk(const TeamRpcTeamOverAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcTeamOverAsk::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcTeamOverAsk::~TeamRpcTeamOverAsk() {
  SharedDtor();
}

void TeamRpcTeamOverAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamRpcTeamOverAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcTeamOverAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcTeamOverAsk_descriptor_;
}

const TeamRpcTeamOverAsk& TeamRpcTeamOverAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamSvrRpc_2eproto();
  return *default_instance_;
}

TeamRpcTeamOverAsk* TeamRpcTeamOverAsk::default_instance_ = NULL;

TeamRpcTeamOverAsk* TeamRpcTeamOverAsk::New() const {
  return new TeamRpcTeamOverAsk;
}

void TeamRpcTeamOverAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = GOOGLE_LONGLONG(-1);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcTeamOverAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 TeamID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamRpcTeamOverAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint64 TeamID = 1 [default = -1];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcTeamOverAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint64 TeamID = 1 [default = -1];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcTeamOverAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 TeamID = 1 [default = -1];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcTeamOverAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcTeamOverAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcTeamOverAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcTeamOverAsk::MergeFrom(const TeamRpcTeamOverAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcTeamOverAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcTeamOverAsk::CopyFrom(const TeamRpcTeamOverAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcTeamOverAsk::IsInitialized() const {

  return true;
}

void TeamRpcTeamOverAsk::Swap(TeamRpcTeamOverAsk* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcTeamOverAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcTeamOverAsk_descriptor_;
  metadata.reflection = TeamRpcTeamOverAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRpcTeamOverReply::kResultFieldNumber;
const int TeamRpcTeamOverReply::kTeamIDFieldNumber;
#endif  // !_MSC_VER

TeamRpcTeamOverReply::TeamRpcTeamOverReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcTeamOverReply::InitAsDefaultInstance() {
}

TeamRpcTeamOverReply::TeamRpcTeamOverReply(const TeamRpcTeamOverReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcTeamOverReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  teamid_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcTeamOverReply::~TeamRpcTeamOverReply() {
  SharedDtor();
}

void TeamRpcTeamOverReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamRpcTeamOverReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcTeamOverReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcTeamOverReply_descriptor_;
}

const TeamRpcTeamOverReply& TeamRpcTeamOverReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamSvrRpc_2eproto();
  return *default_instance_;
}

TeamRpcTeamOverReply* TeamRpcTeamOverReply::default_instance_ = NULL;

TeamRpcTeamOverReply* TeamRpcTeamOverReply::New() const {
  return new TeamRpcTeamOverReply;
}

void TeamRpcTeamOverReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    teamid_ = GOOGLE_LONGLONG(-1);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcTeamOverReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TeamID;
        break;
      }

      // optional sint64 TeamID = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TeamID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamRpcTeamOverReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint64 TeamID = 2 [default = -1];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcTeamOverReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint64 TeamID = 2 [default = -1];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcTeamOverReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint64 TeamID = 2 [default = -1];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcTeamOverReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcTeamOverReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcTeamOverReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcTeamOverReply::MergeFrom(const TeamRpcTeamOverReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcTeamOverReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcTeamOverReply::CopyFrom(const TeamRpcTeamOverReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcTeamOverReply::IsInitialized() const {

  return true;
}

void TeamRpcTeamOverReply::Swap(TeamRpcTeamOverReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcTeamOverReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcTeamOverReply_descriptor_;
  metadata.reflection = TeamRpcTeamOverReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
