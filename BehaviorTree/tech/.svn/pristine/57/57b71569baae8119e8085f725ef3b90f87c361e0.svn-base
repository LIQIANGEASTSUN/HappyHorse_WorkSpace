// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IKCliRpc.proto

#ifndef PROTOBUF_IKCliRpc_2eproto__INCLUDED
#define PROTOBUF_IKCliRpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "PublicStruct.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_IKCliRpc_2eproto();
void protobuf_AssignDesc_IKCliRpc_2eproto();
void protobuf_ShutdownFile_IKCliRpc_2eproto();

class IKRpcsyncNotify;
class IKJoint;
class IKData;

// ===================================================================

class IKRpcsyncNotify : public ::google::protobuf::Message {
 public:
  IKRpcsyncNotify();
  virtual ~IKRpcsyncNotify();

  IKRpcsyncNotify(const IKRpcsyncNotify& from);

  inline IKRpcsyncNotify& operator=(const IKRpcsyncNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IKRpcsyncNotify& default_instance();

  void Swap(IKRpcsyncNotify* other);

  // implements Message ----------------------------------------------

  IKRpcsyncNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IKRpcsyncNotify& from);
  void MergeFrom(const IKRpcsyncNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IKRpcsyncNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_IKCliRpc_2eproto();
  friend void protobuf_AssignDesc_IKCliRpc_2eproto();
  friend void protobuf_ShutdownFile_IKCliRpc_2eproto();

  void InitAsDefaultInstance();
  static IKRpcsyncNotify* default_instance_;
};
// -------------------------------------------------------------------

class IKJoint : public ::google::protobuf::Message {
 public:
  IKJoint();
  virtual ~IKJoint();

  IKJoint(const IKJoint& from);

  inline IKJoint& operator=(const IKJoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IKJoint& default_instance();

  void Swap(IKJoint* other);

  // implements Message ----------------------------------------------

  IKJoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IKJoint& from);
  void MergeFrom(const IKJoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Id = 1 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional sint32 JointType = 2 [default = 0];
  inline bool has_jointtype() const;
  inline void clear_jointtype();
  static const int kJointTypeFieldNumber = 2;
  inline ::google::protobuf::int32 jointtype() const;
  inline void set_jointtype(::google::protobuf::int32 value);

  // optional string Target = 3;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 3;
  inline const ::std::string& target() const;
  inline void set_target(const ::std::string& value);
  inline void set_target(const char* value);
  inline void set_target(const char* value, size_t size);
  inline ::std::string* mutable_target();
  inline ::std::string* release_target();
  inline void set_allocated_target(::std::string* target);

  // optional float Weight = 4 [default = 1];
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 4;
  inline float weight() const;
  inline void set_weight(float value);

  // repeated sint32 ChildList = 5;
  inline int childlist_size() const;
  inline void clear_childlist();
  static const int kChildListFieldNumber = 5;
  inline ::google::protobuf::int32 childlist(int index) const;
  inline void set_childlist(int index, ::google::protobuf::int32 value);
  inline void add_childlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      childlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_childlist();

  // @@protoc_insertion_point(class_scope:IKJoint)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_jointtype();
  inline void clear_has_jointtype();
  inline void set_has_target();
  inline void clear_has_target();
  inline void set_has_weight();
  inline void clear_has_weight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 jointtype_;
  ::std::string* target_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > childlist_;
  float weight_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_IKCliRpc_2eproto();
  friend void protobuf_AssignDesc_IKCliRpc_2eproto();
  friend void protobuf_ShutdownFile_IKCliRpc_2eproto();

  void InitAsDefaultInstance();
  static IKJoint* default_instance_;
};
// -------------------------------------------------------------------

class IKData : public ::google::protobuf::Message {
 public:
  IKData();
  virtual ~IKData();

  IKData(const IKData& from);

  inline IKData& operator=(const IKData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IKData& default_instance();

  void Swap(IKData* other);

  // implements Message ----------------------------------------------

  IKData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IKData& from);
  void MergeFrom(const IKData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string FileName = 1;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFileNameFieldNumber = 1;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // repeated .IKJoint JointList = 2;
  inline int jointlist_size() const;
  inline void clear_jointlist();
  static const int kJointListFieldNumber = 2;
  inline const ::IKJoint& jointlist(int index) const;
  inline ::IKJoint* mutable_jointlist(int index);
  inline ::IKJoint* add_jointlist();
  inline const ::google::protobuf::RepeatedPtrField< ::IKJoint >&
      jointlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::IKJoint >*
      mutable_jointlist();

  // @@protoc_insertion_point(class_scope:IKData)
 private:
  inline void set_has_filename();
  inline void clear_has_filename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* filename_;
  ::google::protobuf::RepeatedPtrField< ::IKJoint > jointlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_IKCliRpc_2eproto();
  friend void protobuf_AssignDesc_IKCliRpc_2eproto();
  friend void protobuf_ShutdownFile_IKCliRpc_2eproto();

  void InitAsDefaultInstance();
  static IKData* default_instance_;
};
// ===================================================================


// ===================================================================

// IKRpcsyncNotify

// -------------------------------------------------------------------

// IKJoint

// optional sint32 Id = 1 [default = -1];
inline bool IKJoint::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IKJoint::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IKJoint::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IKJoint::clear_id() {
  id_ = -1;
  clear_has_id();
}
inline ::google::protobuf::int32 IKJoint::id() const {
  return id_;
}
inline void IKJoint::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional sint32 JointType = 2 [default = 0];
inline bool IKJoint::has_jointtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IKJoint::set_has_jointtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IKJoint::clear_has_jointtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IKJoint::clear_jointtype() {
  jointtype_ = 0;
  clear_has_jointtype();
}
inline ::google::protobuf::int32 IKJoint::jointtype() const {
  return jointtype_;
}
inline void IKJoint::set_jointtype(::google::protobuf::int32 value) {
  set_has_jointtype();
  jointtype_ = value;
}

// optional string Target = 3;
inline bool IKJoint::has_target() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IKJoint::set_has_target() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IKJoint::clear_has_target() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IKJoint::clear_target() {
  if (target_ != &::google::protobuf::internal::kEmptyString) {
    target_->clear();
  }
  clear_has_target();
}
inline const ::std::string& IKJoint::target() const {
  return *target_;
}
inline void IKJoint::set_target(const ::std::string& value) {
  set_has_target();
  if (target_ == &::google::protobuf::internal::kEmptyString) {
    target_ = new ::std::string;
  }
  target_->assign(value);
}
inline void IKJoint::set_target(const char* value) {
  set_has_target();
  if (target_ == &::google::protobuf::internal::kEmptyString) {
    target_ = new ::std::string;
  }
  target_->assign(value);
}
inline void IKJoint::set_target(const char* value, size_t size) {
  set_has_target();
  if (target_ == &::google::protobuf::internal::kEmptyString) {
    target_ = new ::std::string;
  }
  target_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IKJoint::mutable_target() {
  set_has_target();
  if (target_ == &::google::protobuf::internal::kEmptyString) {
    target_ = new ::std::string;
  }
  return target_;
}
inline ::std::string* IKJoint::release_target() {
  clear_has_target();
  if (target_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = target_;
    target_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void IKJoint::set_allocated_target(::std::string* target) {
  if (target_ != &::google::protobuf::internal::kEmptyString) {
    delete target_;
  }
  if (target) {
    set_has_target();
    target_ = target;
  } else {
    clear_has_target();
    target_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float Weight = 4 [default = 1];
inline bool IKJoint::has_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IKJoint::set_has_weight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IKJoint::clear_has_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IKJoint::clear_weight() {
  weight_ = 1;
  clear_has_weight();
}
inline float IKJoint::weight() const {
  return weight_;
}
inline void IKJoint::set_weight(float value) {
  set_has_weight();
  weight_ = value;
}

// repeated sint32 ChildList = 5;
inline int IKJoint::childlist_size() const {
  return childlist_.size();
}
inline void IKJoint::clear_childlist() {
  childlist_.Clear();
}
inline ::google::protobuf::int32 IKJoint::childlist(int index) const {
  return childlist_.Get(index);
}
inline void IKJoint::set_childlist(int index, ::google::protobuf::int32 value) {
  childlist_.Set(index, value);
}
inline void IKJoint::add_childlist(::google::protobuf::int32 value) {
  childlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
IKJoint::childlist() const {
  return childlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
IKJoint::mutable_childlist() {
  return &childlist_;
}

// -------------------------------------------------------------------

// IKData

// optional string FileName = 1;
inline bool IKData::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IKData::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IKData::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IKData::clear_filename() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& IKData::filename() const {
  return *filename_;
}
inline void IKData::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void IKData::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void IKData::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IKData::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  return filename_;
}
inline ::std::string* IKData::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void IKData::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .IKJoint JointList = 2;
inline int IKData::jointlist_size() const {
  return jointlist_.size();
}
inline void IKData::clear_jointlist() {
  jointlist_.Clear();
}
inline const ::IKJoint& IKData::jointlist(int index) const {
  return jointlist_.Get(index);
}
inline ::IKJoint* IKData::mutable_jointlist(int index) {
  return jointlist_.Mutable(index);
}
inline ::IKJoint* IKData::add_jointlist() {
  return jointlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IKJoint >&
IKData::jointlist() const {
  return jointlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::IKJoint >*
IKData::mutable_jointlist() {
  return &jointlist_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_IKCliRpc_2eproto__INCLUDED
