// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TrajectoryCliRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TrajectoryCliRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* TrajectoryTrajectory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrajectoryTrajectory_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrajectoryBulletGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrajectoryBulletGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrajectoryBullet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrajectoryBullet_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrajectoryBulletTrajectory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrajectoryBulletTrajectory_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrajectoryRpcSyncNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrajectoryRpcSyncNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrajectoryBulletChild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrajectoryBulletChild_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TrajectoryCliRpc_2eproto() {
  protobuf_AddDesc_TrajectoryCliRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TrajectoryCliRpc.proto");
  GOOGLE_CHECK(file != NULL);
  TrajectoryTrajectory_descriptor_ = file->message_type(0);
  static const int TrajectoryTrajectory_offsets_[37] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, trajectorytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, tracktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, raycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, circlecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, circlebulletcountlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, circleanglelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, circlenooklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, forwarddistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, checkheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, random_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, horizontaloffsetangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, spaceworld_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, verticaloffsetangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, triggerangleofmovingoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, movingoffsetangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, scatteringradius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, expand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, scatteringsync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, scatterbasehorizontaloffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, scatterbaseverticaloffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, scatterhorizontaloffsetonground_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, scatterverticaloffsetonground_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, scatterhorizontaloffsetonair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, scatterverticaloffsetonair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, scatterbaseodds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, scatteradditionalodds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, scatterneedbulletcountwhenaddodds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, scattermaxoddsonground_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, scattermaxoddsonair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, scatterreduceoddsperframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, bulletgrouplist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, parentbulletid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, bulletidlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, areahorizontalanglelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, areaverticalanglelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, areaoddslist_),
  };
  TrajectoryTrajectory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrajectoryTrajectory_descriptor_,
      TrajectoryTrajectory::default_instance_,
      TrajectoryTrajectory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryTrajectory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrajectoryTrajectory));
  TrajectoryBulletGroup_descriptor_ = file->message_type(1);
  static const int TrajectoryBulletGroup_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletGroup, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletGroup, bulletshottype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletGroup, shottimeprogression_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletGroup, shottimeprogressionvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletGroup, velocitycorrection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletGroup, velocitycorrectionvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletGroup, bulletcount_),
  };
  TrajectoryBulletGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrajectoryBulletGroup_descriptor_,
      TrajectoryBulletGroup::default_instance_,
      TrajectoryBulletGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrajectoryBulletGroup));
  TrajectoryBullet_descriptor_ = file->message_type(2);
  static const int TrajectoryBullet_offsets_[78] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, sortindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, bulletid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, trajectorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, tracktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, shottime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, randomradius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, bulletmodelname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, ismucus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, bulletscalemin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, bulletscalemax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, velocityrandom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, velocitymin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, velocitymax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, crosshairtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, mass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, rotatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, linemovetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, linecoefficient1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, linecoefficient2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, velocitycoefficient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, bullettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, collisionsprite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, collisionscene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, raydamagefirst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, raytimecycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, raydamageradius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, raydamagedistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, callnpcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, iscollision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, watersprinkheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, watersprinkangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, watersprinkaddpercentageperframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, lifetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, takedamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, bulletdamagerangetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, bulletdamagerangeradius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, bulletdamageangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, verticallinebegin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, verticallineend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, hammeraxleradius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, boundradius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, hammeroffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, hammersectorangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, hammeranglespeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, spraygroundangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, sggreateshit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, sggreateshitlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, sggreatescalemin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, sggreatescalemax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, hggreateeffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, sglessshit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, sglessshitlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, sglessscalemin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, sglessscalemax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, hglesseffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, spraywallshit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, spraywallscalemin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, spraywallscalemax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, hitspraywalleffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, hitnotspraywalleffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, hitspriteeffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, createchildtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, childarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, modelrotate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, rotatex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, rotatey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, rotatez_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, rotatespeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, clockwise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, rotatemoveforward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, hangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, vangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, groundbounce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, wallbounce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, dampbounce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, bouncetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, bouncevelocity_),
  };
  TrajectoryBullet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrajectoryBullet_descriptor_,
      TrajectoryBullet::default_instance_,
      TrajectoryBullet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBullet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrajectoryBullet));
  TrajectoryBulletTrajectory_descriptor_ = file->message_type(3);
  static const int TrajectoryBulletTrajectory_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletTrajectory, timelength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletTrajectory, trajectorylist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletTrajectory, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletTrajectory, bulletlist_),
  };
  TrajectoryBulletTrajectory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrajectoryBulletTrajectory_descriptor_,
      TrajectoryBulletTrajectory::default_instance_,
      TrajectoryBulletTrajectory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletTrajectory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletTrajectory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrajectoryBulletTrajectory));
  TrajectoryRpcSyncNotify_descriptor_ = file->message_type(4);
  static const int TrajectoryRpcSyncNotify_offsets_[1] = {
  };
  TrajectoryRpcSyncNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrajectoryRpcSyncNotify_descriptor_,
      TrajectoryRpcSyncNotify::default_instance_,
      TrajectoryRpcSyncNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryRpcSyncNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryRpcSyncNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrajectoryRpcSyncNotify));
  TrajectoryBulletChild_descriptor_ = file->message_type(5);
  static const int TrajectoryBulletChild_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletChild, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletChild, shottimetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletChild, isfirst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletChild, timemininterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletChild, timemaxinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletChild, timeseparator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletChild, timegreatermininterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletChild, timegreatermaxinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletChild, childmaxcount_),
  };
  TrajectoryBulletChild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrajectoryBulletChild_descriptor_,
      TrajectoryBulletChild::default_instance_,
      TrajectoryBulletChild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletChild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBulletChild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrajectoryBulletChild));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TrajectoryCliRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrajectoryTrajectory_descriptor_, &TrajectoryTrajectory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrajectoryBulletGroup_descriptor_, &TrajectoryBulletGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrajectoryBullet_descriptor_, &TrajectoryBullet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrajectoryBulletTrajectory_descriptor_, &TrajectoryBulletTrajectory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrajectoryRpcSyncNotify_descriptor_, &TrajectoryRpcSyncNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrajectoryBulletChild_descriptor_, &TrajectoryBulletChild::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TrajectoryCliRpc_2eproto() {
  delete TrajectoryTrajectory::default_instance_;
  delete TrajectoryTrajectory_reflection_;
  delete TrajectoryBulletGroup::default_instance_;
  delete TrajectoryBulletGroup_reflection_;
  delete TrajectoryBullet::default_instance_;
  delete TrajectoryBullet_reflection_;
  delete TrajectoryBulletTrajectory::default_instance_;
  delete TrajectoryBulletTrajectory_reflection_;
  delete TrajectoryRpcSyncNotify::default_instance_;
  delete TrajectoryRpcSyncNotify_reflection_;
  delete TrajectoryBulletChild::default_instance_;
  delete TrajectoryBulletChild_reflection_;
}

void protobuf_AddDesc_TrajectoryCliRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026TrajectoryCliRpc.proto\032\022PublicStruct.p"
    "roto\"\234\t\n\024TrajectoryTrajectory\022\016\n\002Id\030\001 \001("
    "\021:\002-1\022\031\n\016TrajectoryType\030\032 \001(\021:\0011\022\024\n\tTrac"
    "kType\030\026 \001(\021:\0010\022\024\n\010RayCount\030\003 \001(\021:\002-1\022\027\n\013"
    "CircleCount\030\005 \001(\021:\002-1\022\035\n\025CircleBulletCou"
    "ntList\030\006 \003(\021\022\027\n\017CircleAngleList\030\007 \003(\002\022\026\n"
    "\016CircleNookList\030\025 \003(\002\022\033\n\017ForwardDistance"
    "\030\010 \001(\002:\002-1\022\027\n\013CheckHeight\030\033 \001(\002:\002-1\022\022\n\006R"
    "andom\030\t \001(\002:\002-1\022!\n\025HorizontalOffsetAngle"
    "\030\n \001(\002:\002-1\022\031\n\nSpaceWorld\030\027 \001(\010:\005false\022\037\n"
    "\023VerticalOffsetAngle\030\013 \001(\002:\002-1\022&\n\032Trigge"
    "rAngleOfMovingOffset\030\035 \001(\002:\002-1\022\035\n\021Moving"
    "OffsetAngle\030\036 \001(\002:\002-1\022\033\n\020ScatteringRadiu"
    "s\030\031 \001(\002:\0010\022\021\n\006Expand\030\016 \001(\002:\0011\022\034\n\016Scatter"
    "ingSync\030\030 \001(\010:\004true\022\'\n\033ScatterBaseHorizo"
    "ntalOffset\030\037 \001(\002:\002-1\022%\n\031ScatterBaseVerti"
    "calOffset\030! \001(\002:\002-1\022+\n\037ScatterHorizontal"
    "OffsetOnGround\030\" \001(\002:\002-1\022)\n\035ScatterVerti"
    "calOffsetOnGround\030# \001(\002:\002-1\022(\n\034ScatterHo"
    "rizontalOffsetOnAir\030$ \001(\002:\002-1\022&\n\032Scatter"
    "VerticalOffsetOnAir\030% \001(\002:\002-1\022\032\n\017Scatter"
    "BaseOdds\030& \001(\002:\0010\022 \n\025ScatterAdditionalOd"
    "ds\030\' \001(\002:\0010\022,\n!ScatterNeedBulletCountWhe"
    "nAddOdds\030( \001(\021:\0010\022!\n\026ScatterMaxOddsOnGro"
    "und\030) \001(\002:\0010\022\036\n\023ScatterMaxOddsOnAir\030* \001("
    "\002:\0010\022$\n\031ScatterReduceOddsPerFrame\030+ \001(\002:"
    "\0010\022/\n\017BulletGroupList\030\022 \003(\0132\026.Trajectory"
    "BulletGroup\022\032\n\016ParentBulletId\030\024 \001(\021:\002-1\022"
    "\024\n\014BulletIdList\030\034 \003(\021\022\037\n\027AreaHorizontalA"
    "ngleList\030, \003(\002\022\035\n\025AreaVerticalAngleList\030"
    "- \003(\002\022\024\n\014AreaOddsList\030. \003(\002\"\352\001\n\025Trajecto"
    "ryBulletGroup\022\023\n\007GroupId\030\001 \001(\021:\002-1\022\031\n\016Bu"
    "lletShotType\030\002 \001(\021:\0010\022\036\n\023ShotTimeProgres"
    "sion\030\003 \001(\021:\0010\022$\n\030ShotTimeProgressionValu"
    "e\030\004 \001(\002:\002-1\022\035\n\022VelocityCorrection\030\005 \001(\021:"
    "\0010\022#\n\027VelocityCorrectionValue\030\006 \001(\002:\002-1\022"
    "\027\n\013BulletCount\030\007 \001(\021:\002-1\"\323\020\n\020TrajectoryB"
    "ullet\022\025\n\tSortIndex\0308 \001(\021:\002-1\022\024\n\010BulletId"
    "\030\001 \001(\021:\002-1\022\027\n\013TrajectorId\030Z \001(\021:\002-1\022\023\n\007G"
    "roupId\030\002 \001(\021:\002-1\022\025\n\tTrackType\030@ \001(\021:\002-1\022"
    "\024\n\010ShotTime\0303 \001(\021:\002-1\022\030\n\014RandomRadius\030\n "
    "\001(\002:\002-1\022\027\n\017BulletModelName\030\013 \001(\t\022\026\n\007IsMu"
    "cus\030] \001(\010:\005false\022\031\n\016BulletScaleMin\030G \001(\002"
    ":\0011\022\031\n\016BulletScaleMax\030H \001(\002:\0011\022\035\n\016Veloci"
    "tyRandom\030\014 \001(\010:\005false\022\027\n\013VelocityMin\030\r \001"
    "(\002:\002-1\022\027\n\013VelocityMax\030\016 \001(\002:\002-1\022\031\n\rCross"
    "hairTime\030q \001(\021:\002-1\022\020\n\004Mass\030\017 \001(\002:\002-1\022\026\n\n"
    "RotateTime\030[ \001(\021:\002-1\022\030\n\014LineMoveTime\0305 \001"
    "(\021:\002-1\022\034\n\020LineCoefficient1\0306 \001(\002:\002-1\022\034\n\020"
    "LineCoefficient2\0307 \001(\002:\002-1\022\037\n\023VelocityCo"
    "efficient\030\020 \001(\002:\002-1\022\025\n\nBulletType\030\021 \001(\021:"
    "\0010\022\032\n\017CollisionSprite\030I \001(\021:\0010\022\031\n\016Collis"
    "ionScene\030K \001(\021:\0010\022\032\n\016RayDamageFirst\030\024 \001("
    "\002:\002-1\022\030\n\014RayTimeCycle\030\025 \001(\021:\002-1\022\033\n\017RayDa"
    "mageRadius\030C \001(\002:\002-1\022\035\n\021RayDamageDistanc"
    "e\030b \001(\002:\002-1\022\025\n\tCallNpcId\030\026 \001(\021:\002-1\022\031\n\013Is"
    "Collision\030T \001(\010:\004true\022\035\n\021WaterSprinkHeig"
    "ht\030n \001(\002:\002-1\022\034\n\020WaterSprinkAngle\030o \001(\002:\002"
    "-1\022,\n WaterSprinkAddPercentagePerFrame\030p"
    " \001(\002:\002-1\022\024\n\010LifeTime\030% \001(\021:\002-1\022\031\n\nTakeDa"
    "mage\030\' \001(\010:\005false\022 \n\025BulletDamageRangeTy"
    "pe\030( \001(\021:\0010\022#\n\027BulletDamageRangeRadius\030)"
    " \001(\002:\002-1\022\035\n\021BulletDamageAngle\030* \001(\002:\002-1\022"
    "\035\n\021VerticalLineBegin\0309 \001(\002:\002-1\022\033\n\017Vertic"
    "alLineEnd\030: \001(\002:\002-1\022\034\n\020HammerAxleRadius\030"
    "U \001(\002:\002-1\022\027\n\013BoundRadius\030V \001(\002:\002-1\022 \n\014Ha"
    "mmerOffset\030W \001(\0132\n.Vector3PB\022\035\n\021HammerSe"
    "ctorAngle\030X \001(\002:\002-1\022\034\n\020HammerAngleSpeed\030"
    "Y \001(\002:\002-1\022\033\n\020SprayGroundAngle\030c \001(\002:\0011\022\027"
    "\n\014SGGreateShit\030d \001(\021:\0011\022\030\n\020SGGreateShitL"
    "ist\030f \003(\021\022\033\n\020SGGreateScaleMin\030h \001(\002:\0011\022\033"
    "\n\020SGGreateScaleMax\030i \001(\002:\0011\022\026\n\016HGGreateE"
    "ffect\030j \001(\t\022\025\n\nSGLessShit\030e \001(\021:\0011\022\026\n\016SG"
    "LessShitList\030g \003(\021\022\031\n\016SGLessScaleMin\030k \001"
    "(\002:\0011\022\031\n\016SGLessScaleMax\030l \001(\002:\0011\022\024\n\014HGLe"
    "ssEffect\030m \001(\t\022\030\n\rSprayWallShit\030R \001(\021:\0011"
    "\022\034\n\021SprayWallScaleMin\030/ \001(\002:\0011\022\034\n\021SprayW"
    "allScaleMax\0300 \001(\002:\0011\022\032\n\022HitSprayWallEffe"
    "ct\030^ \001(\t\022\035\n\025HitNotSprayWallEffect\030_ \001(\t\022"
    "\027\n\017HitSpriteEffect\030a \001(\t\022\033\n\017CreateChildT"
    "ime\030D \001(\021:\002-1\022(\n\010ChildArr\0304 \003(\0132\026.Trajec"
    "toryBulletChild\022\032\n\013ModelRotate\030; \001(\010:\005fa"
    "lse\022\022\n\007RotateX\030< \001(\002:\0010\022\022\n\007RotateY\030= \001(\002"
    ":\0010\022\022\n\007RotateZ\030> \001(\002:\0010\022\026\n\013RotateSpeed\030\?"
    " \001(\002:\0010\022\030\n\tClockwise\030S \001(\010:\005false\022 \n\021Rot"
    "ateMoveForward\030B \001(\010:\005false\022\021\n\006HAngle\030E "
    "\001(\002:\0010\022\021\n\006VAngle\030F \001(\002:\0010\022\033\n\014GroundBounc"
    "e\030L \001(\010:\005false\022\031\n\nWallBounce\030M \001(\010:\005fals"
    "e\022\026\n\nDampBounce\030N \001(\002:\002-1\022\027\n\013BounceTimes"
    "\030O \001(\021:\002-1\022\032\n\016BounceVelocity\030P \001(\002:\002-1\"\232"
    "\001\n\032TrajectoryBulletTrajectory\022\026\n\nTimeLen"
    "gth\030\002 \001(\021:\002-1\022-\n\016TrajectoryList\030\001 \003(\0132\025."
    "TrajectoryTrajectory\022\016\n\002Id\030\004 \001(\021:\002-1\022%\n\n"
    "BulletList\030\005 \003(\0132\021.TrajectoryBullet\"\031\n\027T"
    "rajectoryRpcSyncNotify\"\220\002\n\025TrajectoryBul"
    "letChild\022\016\n\002Id\030\001 \001(\021:\002-1\022\027\n\014ShotTimeType"
    "\030\002 \001(\021:\0010\022\026\n\007IsFirst\030\003 \001(\010:\005false\022\033\n\017Tim"
    "eMinInterval\030\006 \001(\021:\002-1\022\033\n\017TimeMaxInterva"
    "l\030\005 \001(\021:\002-1\022\031\n\rTimeSeparator\030\t \001(\021:\002-1\022\""
    "\n\026TimeGreaterMinInterval\030\n \001(\021:\002-1\022\"\n\026Ti"
    "meGreaterMaxInterval\030\013 \001(\021:\002-1\022\031\n\rChildM"
    "axCount\030\010 \001(\021:\002-1", 4057);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TrajectoryCliRpc.proto", &protobuf_RegisterTypes);
  TrajectoryTrajectory::default_instance_ = new TrajectoryTrajectory();
  TrajectoryBulletGroup::default_instance_ = new TrajectoryBulletGroup();
  TrajectoryBullet::default_instance_ = new TrajectoryBullet();
  TrajectoryBulletTrajectory::default_instance_ = new TrajectoryBulletTrajectory();
  TrajectoryRpcSyncNotify::default_instance_ = new TrajectoryRpcSyncNotify();
  TrajectoryBulletChild::default_instance_ = new TrajectoryBulletChild();
  TrajectoryTrajectory::default_instance_->InitAsDefaultInstance();
  TrajectoryBulletGroup::default_instance_->InitAsDefaultInstance();
  TrajectoryBullet::default_instance_->InitAsDefaultInstance();
  TrajectoryBulletTrajectory::default_instance_->InitAsDefaultInstance();
  TrajectoryRpcSyncNotify::default_instance_->InitAsDefaultInstance();
  TrajectoryBulletChild::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TrajectoryCliRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TrajectoryCliRpc_2eproto {
  StaticDescriptorInitializer_TrajectoryCliRpc_2eproto() {
    protobuf_AddDesc_TrajectoryCliRpc_2eproto();
  }
} static_descriptor_initializer_TrajectoryCliRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TrajectoryTrajectory::kIdFieldNumber;
const int TrajectoryTrajectory::kTrajectoryTypeFieldNumber;
const int TrajectoryTrajectory::kTrackTypeFieldNumber;
const int TrajectoryTrajectory::kRayCountFieldNumber;
const int TrajectoryTrajectory::kCircleCountFieldNumber;
const int TrajectoryTrajectory::kCircleBulletCountListFieldNumber;
const int TrajectoryTrajectory::kCircleAngleListFieldNumber;
const int TrajectoryTrajectory::kCircleNookListFieldNumber;
const int TrajectoryTrajectory::kForwardDistanceFieldNumber;
const int TrajectoryTrajectory::kCheckHeightFieldNumber;
const int TrajectoryTrajectory::kRandomFieldNumber;
const int TrajectoryTrajectory::kHorizontalOffsetAngleFieldNumber;
const int TrajectoryTrajectory::kSpaceWorldFieldNumber;
const int TrajectoryTrajectory::kVerticalOffsetAngleFieldNumber;
const int TrajectoryTrajectory::kTriggerAngleOfMovingOffsetFieldNumber;
const int TrajectoryTrajectory::kMovingOffsetAngleFieldNumber;
const int TrajectoryTrajectory::kScatteringRadiusFieldNumber;
const int TrajectoryTrajectory::kExpandFieldNumber;
const int TrajectoryTrajectory::kScatteringSyncFieldNumber;
const int TrajectoryTrajectory::kScatterBaseHorizontalOffsetFieldNumber;
const int TrajectoryTrajectory::kScatterBaseVerticalOffsetFieldNumber;
const int TrajectoryTrajectory::kScatterHorizontalOffsetOnGroundFieldNumber;
const int TrajectoryTrajectory::kScatterVerticalOffsetOnGroundFieldNumber;
const int TrajectoryTrajectory::kScatterHorizontalOffsetOnAirFieldNumber;
const int TrajectoryTrajectory::kScatterVerticalOffsetOnAirFieldNumber;
const int TrajectoryTrajectory::kScatterBaseOddsFieldNumber;
const int TrajectoryTrajectory::kScatterAdditionalOddsFieldNumber;
const int TrajectoryTrajectory::kScatterNeedBulletCountWhenAddOddsFieldNumber;
const int TrajectoryTrajectory::kScatterMaxOddsOnGroundFieldNumber;
const int TrajectoryTrajectory::kScatterMaxOddsOnAirFieldNumber;
const int TrajectoryTrajectory::kScatterReduceOddsPerFrameFieldNumber;
const int TrajectoryTrajectory::kBulletGroupListFieldNumber;
const int TrajectoryTrajectory::kParentBulletIdFieldNumber;
const int TrajectoryTrajectory::kBulletIdListFieldNumber;
const int TrajectoryTrajectory::kAreaHorizontalAngleListFieldNumber;
const int TrajectoryTrajectory::kAreaVerticalAngleListFieldNumber;
const int TrajectoryTrajectory::kAreaOddsListFieldNumber;
#endif  // !_MSC_VER

TrajectoryTrajectory::TrajectoryTrajectory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrajectoryTrajectory::InitAsDefaultInstance() {
}

TrajectoryTrajectory::TrajectoryTrajectory(const TrajectoryTrajectory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrajectoryTrajectory::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  trajectorytype_ = 1;
  tracktype_ = 0;
  raycount_ = -1;
  circlecount_ = -1;
  forwarddistance_ = -1;
  checkheight_ = -1;
  random_ = -1;
  horizontaloffsetangle_ = -1;
  spaceworld_ = false;
  verticaloffsetangle_ = -1;
  triggerangleofmovingoffset_ = -1;
  movingoffsetangle_ = -1;
  scatteringradius_ = 0;
  expand_ = 1;
  scatteringsync_ = true;
  scatterbasehorizontaloffset_ = -1;
  scatterbaseverticaloffset_ = -1;
  scatterhorizontaloffsetonground_ = -1;
  scatterverticaloffsetonground_ = -1;
  scatterhorizontaloffsetonair_ = -1;
  scatterverticaloffsetonair_ = -1;
  scatterbaseodds_ = 0;
  scatteradditionalodds_ = 0;
  scatterneedbulletcountwhenaddodds_ = 0;
  scattermaxoddsonground_ = 0;
  scattermaxoddsonair_ = 0;
  scatterreduceoddsperframe_ = 0;
  parentbulletid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrajectoryTrajectory::~TrajectoryTrajectory() {
  SharedDtor();
}

void TrajectoryTrajectory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrajectoryTrajectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryTrajectory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrajectoryTrajectory_descriptor_;
}

const TrajectoryTrajectory& TrajectoryTrajectory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TrajectoryCliRpc_2eproto();
  return *default_instance_;
}

TrajectoryTrajectory* TrajectoryTrajectory::default_instance_ = NULL;

TrajectoryTrajectory* TrajectoryTrajectory::New() const {
  return new TrajectoryTrajectory;
}

void TrajectoryTrajectory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = -1;
    trajectorytype_ = 1;
    tracktype_ = 0;
    raycount_ = -1;
    circlecount_ = -1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    forwarddistance_ = -1;
    checkheight_ = -1;
    random_ = -1;
    horizontaloffsetangle_ = -1;
    spaceworld_ = false;
    verticaloffsetangle_ = -1;
    triggerangleofmovingoffset_ = -1;
    movingoffsetangle_ = -1;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    scatteringradius_ = 0;
    expand_ = 1;
    scatteringsync_ = true;
    scatterbasehorizontaloffset_ = -1;
    scatterbaseverticaloffset_ = -1;
    scatterhorizontaloffsetonground_ = -1;
    scatterverticaloffsetonground_ = -1;
    scatterhorizontaloffsetonair_ = -1;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    scatterverticaloffsetonair_ = -1;
    scatterbaseodds_ = 0;
    scatteradditionalodds_ = 0;
    scatterneedbulletcountwhenaddodds_ = 0;
    scattermaxoddsonground_ = 0;
    scattermaxoddsonair_ = 0;
    scatterreduceoddsperframe_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    parentbulletid_ = -1;
  }
  circlebulletcountlist_.Clear();
  circleanglelist_.Clear();
  circlenooklist_.Clear();
  bulletgrouplist_.Clear();
  bulletidlist_.Clear();
  areahorizontalanglelist_.Clear();
  areaverticalanglelist_.Clear();
  areaoddslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrajectoryTrajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Id = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_RayCount;
        break;
      }

      // optional sint32 RayCount = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RayCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &raycount_)));
          set_has_raycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_CircleCount;
        break;
      }

      // optional sint32 CircleCount = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CircleCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &circlecount_)));
          set_has_circlecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_CircleBulletCountList;
        break;
      }

      // repeated sint32 CircleBulletCountList = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CircleBulletCountList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 48, input, this->mutable_circlebulletcountlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_circlebulletcountlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_CircleBulletCountList;
        if (input->ExpectTag(61)) goto parse_CircleAngleList;
        break;
      }

      // repeated float CircleAngleList = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_CircleAngleList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 61, input, this->mutable_circleanglelist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_circleanglelist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_CircleAngleList;
        if (input->ExpectTag(69)) goto parse_ForwardDistance;
        break;
      }

      // optional float ForwardDistance = 8 [default = -1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ForwardDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &forwarddistance_)));
          set_has_forwarddistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_Random;
        break;
      }

      // optional float Random = 9 [default = -1];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Random:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_)));
          set_has_random();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_HorizontalOffsetAngle;
        break;
      }

      // optional float HorizontalOffsetAngle = 10 [default = -1];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_HorizontalOffsetAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &horizontaloffsetangle_)));
          set_has_horizontaloffsetangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_VerticalOffsetAngle;
        break;
      }

      // optional float VerticalOffsetAngle = 11 [default = -1];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_VerticalOffsetAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &verticaloffsetangle_)));
          set_has_verticaloffsetangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_Expand;
        break;
      }

      // optional float Expand = 14 [default = 1];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Expand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &expand_)));
          set_has_expand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_BulletGroupList;
        break;
      }

      // repeated .TrajectoryBulletGroup BulletGroupList = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BulletGroupList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bulletgrouplist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_BulletGroupList;
        if (input->ExpectTag(160)) goto parse_ParentBulletId;
        break;
      }

      // optional sint32 ParentBulletId = 20 [default = -1];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ParentBulletId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &parentbulletid_)));
          set_has_parentbulletid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_CircleNookList;
        break;
      }

      // repeated float CircleNookList = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_CircleNookList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 173, input, this->mutable_circlenooklist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_circlenooklist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_CircleNookList;
        if (input->ExpectTag(176)) goto parse_TrackType;
        break;
      }

      // optional sint32 TrackType = 22 [default = 0];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TrackType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &tracktype_)));
          set_has_tracktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_SpaceWorld;
        break;
      }

      // optional bool SpaceWorld = 23 [default = false];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SpaceWorld:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &spaceworld_)));
          set_has_spaceworld();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_ScatteringSync;
        break;
      }

      // optional bool ScatteringSync = 24 [default = true];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ScatteringSync:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &scatteringsync_)));
          set_has_scatteringsync();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(205)) goto parse_ScatteringRadius;
        break;
      }

      // optional float ScatteringRadius = 25 [default = 0];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ScatteringRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scatteringradius_)));
          set_has_scatteringradius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_TrajectoryType;
        break;
      }

      // optional sint32 TrajectoryType = 26 [default = 1];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TrajectoryType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &trajectorytype_)));
          set_has_trajectorytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(221)) goto parse_CheckHeight;
        break;
      }

      // optional float CheckHeight = 27 [default = -1];
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_CheckHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &checkheight_)));
          set_has_checkheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_BulletIdList;
        break;
      }

      // repeated sint32 BulletIdList = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BulletIdList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 2, 224, input, this->mutable_bulletidlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_bulletidlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_BulletIdList;
        if (input->ExpectTag(237)) goto parse_TriggerAngleOfMovingOffset;
        break;
      }

      // optional float TriggerAngleOfMovingOffset = 29 [default = -1];
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_TriggerAngleOfMovingOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &triggerangleofmovingoffset_)));
          set_has_triggerangleofmovingoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(245)) goto parse_MovingOffsetAngle;
        break;
      }

      // optional float MovingOffsetAngle = 30 [default = -1];
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_MovingOffsetAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &movingoffsetangle_)));
          set_has_movingoffsetangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(253)) goto parse_ScatterBaseHorizontalOffset;
        break;
      }

      // optional float ScatterBaseHorizontalOffset = 31 [default = -1];
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ScatterBaseHorizontalOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scatterbasehorizontaloffset_)));
          set_has_scatterbasehorizontaloffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(269)) goto parse_ScatterBaseVerticalOffset;
        break;
      }

      // optional float ScatterBaseVerticalOffset = 33 [default = -1];
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ScatterBaseVerticalOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scatterbaseverticaloffset_)));
          set_has_scatterbaseverticaloffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(277)) goto parse_ScatterHorizontalOffsetOnGround;
        break;
      }

      // optional float ScatterHorizontalOffsetOnGround = 34 [default = -1];
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ScatterHorizontalOffsetOnGround:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scatterhorizontaloffsetonground_)));
          set_has_scatterhorizontaloffsetonground();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(285)) goto parse_ScatterVerticalOffsetOnGround;
        break;
      }

      // optional float ScatterVerticalOffsetOnGround = 35 [default = -1];
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ScatterVerticalOffsetOnGround:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scatterverticaloffsetonground_)));
          set_has_scatterverticaloffsetonground();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(293)) goto parse_ScatterHorizontalOffsetOnAir;
        break;
      }

      // optional float ScatterHorizontalOffsetOnAir = 36 [default = -1];
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ScatterHorizontalOffsetOnAir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scatterhorizontaloffsetonair_)));
          set_has_scatterhorizontaloffsetonair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(301)) goto parse_ScatterVerticalOffsetOnAir;
        break;
      }

      // optional float ScatterVerticalOffsetOnAir = 37 [default = -1];
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ScatterVerticalOffsetOnAir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scatterverticaloffsetonair_)));
          set_has_scatterverticaloffsetonair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(309)) goto parse_ScatterBaseOdds;
        break;
      }

      // optional float ScatterBaseOdds = 38 [default = 0];
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ScatterBaseOdds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scatterbaseodds_)));
          set_has_scatterbaseodds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(317)) goto parse_ScatterAdditionalOdds;
        break;
      }

      // optional float ScatterAdditionalOdds = 39 [default = 0];
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ScatterAdditionalOdds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scatteradditionalodds_)));
          set_has_scatteradditionalodds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_ScatterNeedBulletCountWhenAddOdds;
        break;
      }

      // optional sint32 ScatterNeedBulletCountWhenAddOdds = 40 [default = 0];
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ScatterNeedBulletCountWhenAddOdds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &scatterneedbulletcountwhenaddodds_)));
          set_has_scatterneedbulletcountwhenaddodds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(333)) goto parse_ScatterMaxOddsOnGround;
        break;
      }

      // optional float ScatterMaxOddsOnGround = 41 [default = 0];
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ScatterMaxOddsOnGround:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scattermaxoddsonground_)));
          set_has_scattermaxoddsonground();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(341)) goto parse_ScatterMaxOddsOnAir;
        break;
      }

      // optional float ScatterMaxOddsOnAir = 42 [default = 0];
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ScatterMaxOddsOnAir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scattermaxoddsonair_)));
          set_has_scattermaxoddsonair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(349)) goto parse_ScatterReduceOddsPerFrame;
        break;
      }

      // optional float ScatterReduceOddsPerFrame = 43 [default = 0];
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ScatterReduceOddsPerFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scatterreduceoddsperframe_)));
          set_has_scatterreduceoddsperframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(357)) goto parse_AreaHorizontalAngleList;
        break;
      }

      // repeated float AreaHorizontalAngleList = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_AreaHorizontalAngleList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 357, input, this->mutable_areahorizontalanglelist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_areahorizontalanglelist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(357)) goto parse_AreaHorizontalAngleList;
        if (input->ExpectTag(365)) goto parse_AreaVerticalAngleList;
        break;
      }

      // repeated float AreaVerticalAngleList = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_AreaVerticalAngleList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 365, input, this->mutable_areaverticalanglelist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_areaverticalanglelist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(365)) goto parse_AreaVerticalAngleList;
        if (input->ExpectTag(373)) goto parse_AreaOddsList;
        break;
      }

      // repeated float AreaOddsList = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_AreaOddsList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 373, input, this->mutable_areaoddslist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_areaoddslist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(373)) goto parse_AreaOddsList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrajectoryTrajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Id = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->id(), output);
  }

  // optional sint32 RayCount = 3 [default = -1];
  if (has_raycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->raycount(), output);
  }

  // optional sint32 CircleCount = 5 [default = -1];
  if (has_circlecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->circlecount(), output);
  }

  // repeated sint32 CircleBulletCountList = 6;
  for (int i = 0; i < this->circlebulletcountlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      6, this->circlebulletcountlist(i), output);
  }

  // repeated float CircleAngleList = 7;
  for (int i = 0; i < this->circleanglelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      7, this->circleanglelist(i), output);
  }

  // optional float ForwardDistance = 8 [default = -1];
  if (has_forwarddistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->forwarddistance(), output);
  }

  // optional float Random = 9 [default = -1];
  if (has_random()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->random(), output);
  }

  // optional float HorizontalOffsetAngle = 10 [default = -1];
  if (has_horizontaloffsetangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->horizontaloffsetangle(), output);
  }

  // optional float VerticalOffsetAngle = 11 [default = -1];
  if (has_verticaloffsetangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->verticaloffsetangle(), output);
  }

  // optional float Expand = 14 [default = 1];
  if (has_expand()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->expand(), output);
  }

  // repeated .TrajectoryBulletGroup BulletGroupList = 18;
  for (int i = 0; i < this->bulletgrouplist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->bulletgrouplist(i), output);
  }

  // optional sint32 ParentBulletId = 20 [default = -1];
  if (has_parentbulletid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(20, this->parentbulletid(), output);
  }

  // repeated float CircleNookList = 21;
  for (int i = 0; i < this->circlenooklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      21, this->circlenooklist(i), output);
  }

  // optional sint32 TrackType = 22 [default = 0];
  if (has_tracktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(22, this->tracktype(), output);
  }

  // optional bool SpaceWorld = 23 [default = false];
  if (has_spaceworld()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->spaceworld(), output);
  }

  // optional bool ScatteringSync = 24 [default = true];
  if (has_scatteringsync()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->scatteringsync(), output);
  }

  // optional float ScatteringRadius = 25 [default = 0];
  if (has_scatteringradius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->scatteringradius(), output);
  }

  // optional sint32 TrajectoryType = 26 [default = 1];
  if (has_trajectorytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(26, this->trajectorytype(), output);
  }

  // optional float CheckHeight = 27 [default = -1];
  if (has_checkheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->checkheight(), output);
  }

  // repeated sint32 BulletIdList = 28;
  for (int i = 0; i < this->bulletidlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      28, this->bulletidlist(i), output);
  }

  // optional float TriggerAngleOfMovingOffset = 29 [default = -1];
  if (has_triggerangleofmovingoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->triggerangleofmovingoffset(), output);
  }

  // optional float MovingOffsetAngle = 30 [default = -1];
  if (has_movingoffsetangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->movingoffsetangle(), output);
  }

  // optional float ScatterBaseHorizontalOffset = 31 [default = -1];
  if (has_scatterbasehorizontaloffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->scatterbasehorizontaloffset(), output);
  }

  // optional float ScatterBaseVerticalOffset = 33 [default = -1];
  if (has_scatterbaseverticaloffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->scatterbaseverticaloffset(), output);
  }

  // optional float ScatterHorizontalOffsetOnGround = 34 [default = -1];
  if (has_scatterhorizontaloffsetonground()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(34, this->scatterhorizontaloffsetonground(), output);
  }

  // optional float ScatterVerticalOffsetOnGround = 35 [default = -1];
  if (has_scatterverticaloffsetonground()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(35, this->scatterverticaloffsetonground(), output);
  }

  // optional float ScatterHorizontalOffsetOnAir = 36 [default = -1];
  if (has_scatterhorizontaloffsetonair()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(36, this->scatterhorizontaloffsetonair(), output);
  }

  // optional float ScatterVerticalOffsetOnAir = 37 [default = -1];
  if (has_scatterverticaloffsetonair()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(37, this->scatterverticaloffsetonair(), output);
  }

  // optional float ScatterBaseOdds = 38 [default = 0];
  if (has_scatterbaseodds()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(38, this->scatterbaseodds(), output);
  }

  // optional float ScatterAdditionalOdds = 39 [default = 0];
  if (has_scatteradditionalodds()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->scatteradditionalodds(), output);
  }

  // optional sint32 ScatterNeedBulletCountWhenAddOdds = 40 [default = 0];
  if (has_scatterneedbulletcountwhenaddodds()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(40, this->scatterneedbulletcountwhenaddodds(), output);
  }

  // optional float ScatterMaxOddsOnGround = 41 [default = 0];
  if (has_scattermaxoddsonground()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(41, this->scattermaxoddsonground(), output);
  }

  // optional float ScatterMaxOddsOnAir = 42 [default = 0];
  if (has_scattermaxoddsonair()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(42, this->scattermaxoddsonair(), output);
  }

  // optional float ScatterReduceOddsPerFrame = 43 [default = 0];
  if (has_scatterreduceoddsperframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(43, this->scatterreduceoddsperframe(), output);
  }

  // repeated float AreaHorizontalAngleList = 44;
  for (int i = 0; i < this->areahorizontalanglelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      44, this->areahorizontalanglelist(i), output);
  }

  // repeated float AreaVerticalAngleList = 45;
  for (int i = 0; i < this->areaverticalanglelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      45, this->areaverticalanglelist(i), output);
  }

  // repeated float AreaOddsList = 46;
  for (int i = 0; i < this->areaoddslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      46, this->areaoddslist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrajectoryTrajectory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Id = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->id(), target);
  }

  // optional sint32 RayCount = 3 [default = -1];
  if (has_raycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->raycount(), target);
  }

  // optional sint32 CircleCount = 5 [default = -1];
  if (has_circlecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->circlecount(), target);
  }

  // repeated sint32 CircleBulletCountList = 6;
  for (int i = 0; i < this->circlebulletcountlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(6, this->circlebulletcountlist(i), target);
  }

  // repeated float CircleAngleList = 7;
  for (int i = 0; i < this->circleanglelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(7, this->circleanglelist(i), target);
  }

  // optional float ForwardDistance = 8 [default = -1];
  if (has_forwarddistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->forwarddistance(), target);
  }

  // optional float Random = 9 [default = -1];
  if (has_random()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->random(), target);
  }

  // optional float HorizontalOffsetAngle = 10 [default = -1];
  if (has_horizontaloffsetangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->horizontaloffsetangle(), target);
  }

  // optional float VerticalOffsetAngle = 11 [default = -1];
  if (has_verticaloffsetangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->verticaloffsetangle(), target);
  }

  // optional float Expand = 14 [default = 1];
  if (has_expand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->expand(), target);
  }

  // repeated .TrajectoryBulletGroup BulletGroupList = 18;
  for (int i = 0; i < this->bulletgrouplist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->bulletgrouplist(i), target);
  }

  // optional sint32 ParentBulletId = 20 [default = -1];
  if (has_parentbulletid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(20, this->parentbulletid(), target);
  }

  // repeated float CircleNookList = 21;
  for (int i = 0; i < this->circlenooklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(21, this->circlenooklist(i), target);
  }

  // optional sint32 TrackType = 22 [default = 0];
  if (has_tracktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(22, this->tracktype(), target);
  }

  // optional bool SpaceWorld = 23 [default = false];
  if (has_spaceworld()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->spaceworld(), target);
  }

  // optional bool ScatteringSync = 24 [default = true];
  if (has_scatteringsync()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->scatteringsync(), target);
  }

  // optional float ScatteringRadius = 25 [default = 0];
  if (has_scatteringradius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->scatteringradius(), target);
  }

  // optional sint32 TrajectoryType = 26 [default = 1];
  if (has_trajectorytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(26, this->trajectorytype(), target);
  }

  // optional float CheckHeight = 27 [default = -1];
  if (has_checkheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->checkheight(), target);
  }

  // repeated sint32 BulletIdList = 28;
  for (int i = 0; i < this->bulletidlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(28, this->bulletidlist(i), target);
  }

  // optional float TriggerAngleOfMovingOffset = 29 [default = -1];
  if (has_triggerangleofmovingoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->triggerangleofmovingoffset(), target);
  }

  // optional float MovingOffsetAngle = 30 [default = -1];
  if (has_movingoffsetangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->movingoffsetangle(), target);
  }

  // optional float ScatterBaseHorizontalOffset = 31 [default = -1];
  if (has_scatterbasehorizontaloffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->scatterbasehorizontaloffset(), target);
  }

  // optional float ScatterBaseVerticalOffset = 33 [default = -1];
  if (has_scatterbaseverticaloffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(33, this->scatterbaseverticaloffset(), target);
  }

  // optional float ScatterHorizontalOffsetOnGround = 34 [default = -1];
  if (has_scatterhorizontaloffsetonground()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(34, this->scatterhorizontaloffsetonground(), target);
  }

  // optional float ScatterVerticalOffsetOnGround = 35 [default = -1];
  if (has_scatterverticaloffsetonground()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(35, this->scatterverticaloffsetonground(), target);
  }

  // optional float ScatterHorizontalOffsetOnAir = 36 [default = -1];
  if (has_scatterhorizontaloffsetonair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(36, this->scatterhorizontaloffsetonair(), target);
  }

  // optional float ScatterVerticalOffsetOnAir = 37 [default = -1];
  if (has_scatterverticaloffsetonair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(37, this->scatterverticaloffsetonair(), target);
  }

  // optional float ScatterBaseOdds = 38 [default = 0];
  if (has_scatterbaseodds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(38, this->scatterbaseodds(), target);
  }

  // optional float ScatterAdditionalOdds = 39 [default = 0];
  if (has_scatteradditionalodds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(39, this->scatteradditionalodds(), target);
  }

  // optional sint32 ScatterNeedBulletCountWhenAddOdds = 40 [default = 0];
  if (has_scatterneedbulletcountwhenaddodds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(40, this->scatterneedbulletcountwhenaddodds(), target);
  }

  // optional float ScatterMaxOddsOnGround = 41 [default = 0];
  if (has_scattermaxoddsonground()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(41, this->scattermaxoddsonground(), target);
  }

  // optional float ScatterMaxOddsOnAir = 42 [default = 0];
  if (has_scattermaxoddsonair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(42, this->scattermaxoddsonair(), target);
  }

  // optional float ScatterReduceOddsPerFrame = 43 [default = 0];
  if (has_scatterreduceoddsperframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(43, this->scatterreduceoddsperframe(), target);
  }

  // repeated float AreaHorizontalAngleList = 44;
  for (int i = 0; i < this->areahorizontalanglelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(44, this->areahorizontalanglelist(i), target);
  }

  // repeated float AreaVerticalAngleList = 45;
  for (int i = 0; i < this->areaverticalanglelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(45, this->areaverticalanglelist(i), target);
  }

  // repeated float AreaOddsList = 46;
  for (int i = 0; i < this->areaoddslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(46, this->areaoddslist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrajectoryTrajectory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Id = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->id());
    }

    // optional sint32 TrajectoryType = 26 [default = 1];
    if (has_trajectorytype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->trajectorytype());
    }

    // optional sint32 TrackType = 22 [default = 0];
    if (has_tracktype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->tracktype());
    }

    // optional sint32 RayCount = 3 [default = -1];
    if (has_raycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->raycount());
    }

    // optional sint32 CircleCount = 5 [default = -1];
    if (has_circlecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->circlecount());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float ForwardDistance = 8 [default = -1];
    if (has_forwarddistance()) {
      total_size += 1 + 4;
    }

    // optional float CheckHeight = 27 [default = -1];
    if (has_checkheight()) {
      total_size += 2 + 4;
    }

    // optional float Random = 9 [default = -1];
    if (has_random()) {
      total_size += 1 + 4;
    }

    // optional float HorizontalOffsetAngle = 10 [default = -1];
    if (has_horizontaloffsetangle()) {
      total_size += 1 + 4;
    }

    // optional bool SpaceWorld = 23 [default = false];
    if (has_spaceworld()) {
      total_size += 2 + 1;
    }

    // optional float VerticalOffsetAngle = 11 [default = -1];
    if (has_verticaloffsetangle()) {
      total_size += 1 + 4;
    }

    // optional float TriggerAngleOfMovingOffset = 29 [default = -1];
    if (has_triggerangleofmovingoffset()) {
      total_size += 2 + 4;
    }

    // optional float MovingOffsetAngle = 30 [default = -1];
    if (has_movingoffsetangle()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float ScatteringRadius = 25 [default = 0];
    if (has_scatteringradius()) {
      total_size += 2 + 4;
    }

    // optional float Expand = 14 [default = 1];
    if (has_expand()) {
      total_size += 1 + 4;
    }

    // optional bool ScatteringSync = 24 [default = true];
    if (has_scatteringsync()) {
      total_size += 2 + 1;
    }

    // optional float ScatterBaseHorizontalOffset = 31 [default = -1];
    if (has_scatterbasehorizontaloffset()) {
      total_size += 2 + 4;
    }

    // optional float ScatterBaseVerticalOffset = 33 [default = -1];
    if (has_scatterbaseverticaloffset()) {
      total_size += 2 + 4;
    }

    // optional float ScatterHorizontalOffsetOnGround = 34 [default = -1];
    if (has_scatterhorizontaloffsetonground()) {
      total_size += 2 + 4;
    }

    // optional float ScatterVerticalOffsetOnGround = 35 [default = -1];
    if (has_scatterverticaloffsetonground()) {
      total_size += 2 + 4;
    }

    // optional float ScatterHorizontalOffsetOnAir = 36 [default = -1];
    if (has_scatterhorizontaloffsetonair()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional float ScatterVerticalOffsetOnAir = 37 [default = -1];
    if (has_scatterverticaloffsetonair()) {
      total_size += 2 + 4;
    }

    // optional float ScatterBaseOdds = 38 [default = 0];
    if (has_scatterbaseodds()) {
      total_size += 2 + 4;
    }

    // optional float ScatterAdditionalOdds = 39 [default = 0];
    if (has_scatteradditionalodds()) {
      total_size += 2 + 4;
    }

    // optional sint32 ScatterNeedBulletCountWhenAddOdds = 40 [default = 0];
    if (has_scatterneedbulletcountwhenaddodds()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->scatterneedbulletcountwhenaddodds());
    }

    // optional float ScatterMaxOddsOnGround = 41 [default = 0];
    if (has_scattermaxoddsonground()) {
      total_size += 2 + 4;
    }

    // optional float ScatterMaxOddsOnAir = 42 [default = 0];
    if (has_scattermaxoddsonair()) {
      total_size += 2 + 4;
    }

    // optional float ScatterReduceOddsPerFrame = 43 [default = 0];
    if (has_scatterreduceoddsperframe()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional sint32 ParentBulletId = 20 [default = -1];
    if (has_parentbulletid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->parentbulletid());
    }

  }
  // repeated sint32 CircleBulletCountList = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->circlebulletcountlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->circlebulletcountlist(i));
    }
    total_size += 1 * this->circlebulletcountlist_size() + data_size;
  }

  // repeated float CircleAngleList = 7;
  {
    int data_size = 0;
    data_size = 4 * this->circleanglelist_size();
    total_size += 1 * this->circleanglelist_size() + data_size;
  }

  // repeated float CircleNookList = 21;
  {
    int data_size = 0;
    data_size = 4 * this->circlenooklist_size();
    total_size += 2 * this->circlenooklist_size() + data_size;
  }

  // repeated .TrajectoryBulletGroup BulletGroupList = 18;
  total_size += 2 * this->bulletgrouplist_size();
  for (int i = 0; i < this->bulletgrouplist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bulletgrouplist(i));
  }

  // repeated sint32 BulletIdList = 28;
  {
    int data_size = 0;
    for (int i = 0; i < this->bulletidlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->bulletidlist(i));
    }
    total_size += 2 * this->bulletidlist_size() + data_size;
  }

  // repeated float AreaHorizontalAngleList = 44;
  {
    int data_size = 0;
    data_size = 4 * this->areahorizontalanglelist_size();
    total_size += 2 * this->areahorizontalanglelist_size() + data_size;
  }

  // repeated float AreaVerticalAngleList = 45;
  {
    int data_size = 0;
    data_size = 4 * this->areaverticalanglelist_size();
    total_size += 2 * this->areaverticalanglelist_size() + data_size;
  }

  // repeated float AreaOddsList = 46;
  {
    int data_size = 0;
    data_size = 4 * this->areaoddslist_size();
    total_size += 2 * this->areaoddslist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryTrajectory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrajectoryTrajectory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrajectoryTrajectory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrajectoryTrajectory::MergeFrom(const TrajectoryTrajectory& from) {
  GOOGLE_CHECK_NE(&from, this);
  circlebulletcountlist_.MergeFrom(from.circlebulletcountlist_);
  circleanglelist_.MergeFrom(from.circleanglelist_);
  circlenooklist_.MergeFrom(from.circlenooklist_);
  bulletgrouplist_.MergeFrom(from.bulletgrouplist_);
  bulletidlist_.MergeFrom(from.bulletidlist_);
  areahorizontalanglelist_.MergeFrom(from.areahorizontalanglelist_);
  areaverticalanglelist_.MergeFrom(from.areaverticalanglelist_);
  areaoddslist_.MergeFrom(from.areaoddslist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_trajectorytype()) {
      set_trajectorytype(from.trajectorytype());
    }
    if (from.has_tracktype()) {
      set_tracktype(from.tracktype());
    }
    if (from.has_raycount()) {
      set_raycount(from.raycount());
    }
    if (from.has_circlecount()) {
      set_circlecount(from.circlecount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_forwarddistance()) {
      set_forwarddistance(from.forwarddistance());
    }
    if (from.has_checkheight()) {
      set_checkheight(from.checkheight());
    }
    if (from.has_random()) {
      set_random(from.random());
    }
    if (from.has_horizontaloffsetangle()) {
      set_horizontaloffsetangle(from.horizontaloffsetangle());
    }
    if (from.has_spaceworld()) {
      set_spaceworld(from.spaceworld());
    }
    if (from.has_verticaloffsetangle()) {
      set_verticaloffsetangle(from.verticaloffsetangle());
    }
    if (from.has_triggerangleofmovingoffset()) {
      set_triggerangleofmovingoffset(from.triggerangleofmovingoffset());
    }
    if (from.has_movingoffsetangle()) {
      set_movingoffsetangle(from.movingoffsetangle());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_scatteringradius()) {
      set_scatteringradius(from.scatteringradius());
    }
    if (from.has_expand()) {
      set_expand(from.expand());
    }
    if (from.has_scatteringsync()) {
      set_scatteringsync(from.scatteringsync());
    }
    if (from.has_scatterbasehorizontaloffset()) {
      set_scatterbasehorizontaloffset(from.scatterbasehorizontaloffset());
    }
    if (from.has_scatterbaseverticaloffset()) {
      set_scatterbaseverticaloffset(from.scatterbaseverticaloffset());
    }
    if (from.has_scatterhorizontaloffsetonground()) {
      set_scatterhorizontaloffsetonground(from.scatterhorizontaloffsetonground());
    }
    if (from.has_scatterverticaloffsetonground()) {
      set_scatterverticaloffsetonground(from.scatterverticaloffsetonground());
    }
    if (from.has_scatterhorizontaloffsetonair()) {
      set_scatterhorizontaloffsetonair(from.scatterhorizontaloffsetonair());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_scatterverticaloffsetonair()) {
      set_scatterverticaloffsetonair(from.scatterverticaloffsetonair());
    }
    if (from.has_scatterbaseodds()) {
      set_scatterbaseodds(from.scatterbaseodds());
    }
    if (from.has_scatteradditionalodds()) {
      set_scatteradditionalodds(from.scatteradditionalodds());
    }
    if (from.has_scatterneedbulletcountwhenaddodds()) {
      set_scatterneedbulletcountwhenaddodds(from.scatterneedbulletcountwhenaddodds());
    }
    if (from.has_scattermaxoddsonground()) {
      set_scattermaxoddsonground(from.scattermaxoddsonground());
    }
    if (from.has_scattermaxoddsonair()) {
      set_scattermaxoddsonair(from.scattermaxoddsonair());
    }
    if (from.has_scatterreduceoddsperframe()) {
      set_scatterreduceoddsperframe(from.scatterreduceoddsperframe());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_parentbulletid()) {
      set_parentbulletid(from.parentbulletid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrajectoryTrajectory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryTrajectory::CopyFrom(const TrajectoryTrajectory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryTrajectory::IsInitialized() const {

  return true;
}

void TrajectoryTrajectory::Swap(TrajectoryTrajectory* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(trajectorytype_, other->trajectorytype_);
    std::swap(tracktype_, other->tracktype_);
    std::swap(raycount_, other->raycount_);
    std::swap(circlecount_, other->circlecount_);
    circlebulletcountlist_.Swap(&other->circlebulletcountlist_);
    circleanglelist_.Swap(&other->circleanglelist_);
    circlenooklist_.Swap(&other->circlenooklist_);
    std::swap(forwarddistance_, other->forwarddistance_);
    std::swap(checkheight_, other->checkheight_);
    std::swap(random_, other->random_);
    std::swap(horizontaloffsetangle_, other->horizontaloffsetangle_);
    std::swap(spaceworld_, other->spaceworld_);
    std::swap(verticaloffsetangle_, other->verticaloffsetangle_);
    std::swap(triggerangleofmovingoffset_, other->triggerangleofmovingoffset_);
    std::swap(movingoffsetangle_, other->movingoffsetangle_);
    std::swap(scatteringradius_, other->scatteringradius_);
    std::swap(expand_, other->expand_);
    std::swap(scatteringsync_, other->scatteringsync_);
    std::swap(scatterbasehorizontaloffset_, other->scatterbasehorizontaloffset_);
    std::swap(scatterbaseverticaloffset_, other->scatterbaseverticaloffset_);
    std::swap(scatterhorizontaloffsetonground_, other->scatterhorizontaloffsetonground_);
    std::swap(scatterverticaloffsetonground_, other->scatterverticaloffsetonground_);
    std::swap(scatterhorizontaloffsetonair_, other->scatterhorizontaloffsetonair_);
    std::swap(scatterverticaloffsetonair_, other->scatterverticaloffsetonair_);
    std::swap(scatterbaseodds_, other->scatterbaseodds_);
    std::swap(scatteradditionalodds_, other->scatteradditionalodds_);
    std::swap(scatterneedbulletcountwhenaddodds_, other->scatterneedbulletcountwhenaddodds_);
    std::swap(scattermaxoddsonground_, other->scattermaxoddsonground_);
    std::swap(scattermaxoddsonair_, other->scattermaxoddsonair_);
    std::swap(scatterreduceoddsperframe_, other->scatterreduceoddsperframe_);
    bulletgrouplist_.Swap(&other->bulletgrouplist_);
    std::swap(parentbulletid_, other->parentbulletid_);
    bulletidlist_.Swap(&other->bulletidlist_);
    areahorizontalanglelist_.Swap(&other->areahorizontalanglelist_);
    areaverticalanglelist_.Swap(&other->areaverticalanglelist_);
    areaoddslist_.Swap(&other->areaoddslist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrajectoryTrajectory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrajectoryTrajectory_descriptor_;
  metadata.reflection = TrajectoryTrajectory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrajectoryBulletGroup::kGroupIdFieldNumber;
const int TrajectoryBulletGroup::kBulletShotTypeFieldNumber;
const int TrajectoryBulletGroup::kShotTimeProgressionFieldNumber;
const int TrajectoryBulletGroup::kShotTimeProgressionValueFieldNumber;
const int TrajectoryBulletGroup::kVelocityCorrectionFieldNumber;
const int TrajectoryBulletGroup::kVelocityCorrectionValueFieldNumber;
const int TrajectoryBulletGroup::kBulletCountFieldNumber;
#endif  // !_MSC_VER

TrajectoryBulletGroup::TrajectoryBulletGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrajectoryBulletGroup::InitAsDefaultInstance() {
}

TrajectoryBulletGroup::TrajectoryBulletGroup(const TrajectoryBulletGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrajectoryBulletGroup::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = -1;
  bulletshottype_ = 0;
  shottimeprogression_ = 0;
  shottimeprogressionvalue_ = -1;
  velocitycorrection_ = 0;
  velocitycorrectionvalue_ = -1;
  bulletcount_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrajectoryBulletGroup::~TrajectoryBulletGroup() {
  SharedDtor();
}

void TrajectoryBulletGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrajectoryBulletGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryBulletGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrajectoryBulletGroup_descriptor_;
}

const TrajectoryBulletGroup& TrajectoryBulletGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TrajectoryCliRpc_2eproto();
  return *default_instance_;
}

TrajectoryBulletGroup* TrajectoryBulletGroup::default_instance_ = NULL;

TrajectoryBulletGroup* TrajectoryBulletGroup::New() const {
  return new TrajectoryBulletGroup;
}

void TrajectoryBulletGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = -1;
    bulletshottype_ = 0;
    shottimeprogression_ = 0;
    shottimeprogressionvalue_ = -1;
    velocitycorrection_ = 0;
    velocitycorrectionvalue_ = -1;
    bulletcount_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrajectoryBulletGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 GroupId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_BulletShotType;
        break;
      }

      // optional sint32 BulletShotType = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BulletShotType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bulletshottype_)));
          set_has_bulletshottype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ShotTimeProgression;
        break;
      }

      // optional sint32 ShotTimeProgression = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShotTimeProgression:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &shottimeprogression_)));
          set_has_shottimeprogression();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_ShotTimeProgressionValue;
        break;
      }

      // optional float ShotTimeProgressionValue = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ShotTimeProgressionValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shottimeprogressionvalue_)));
          set_has_shottimeprogressionvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_VelocityCorrection;
        break;
      }

      // optional sint32 VelocityCorrection = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VelocityCorrection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &velocitycorrection_)));
          set_has_velocitycorrection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_VelocityCorrectionValue;
        break;
      }

      // optional float VelocityCorrectionValue = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_VelocityCorrectionValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocitycorrectionvalue_)));
          set_has_velocitycorrectionvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_BulletCount;
        break;
      }

      // optional sint32 BulletCount = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BulletCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bulletcount_)));
          set_has_bulletcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrajectoryBulletGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 GroupId = 1 [default = -1];
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->groupid(), output);
  }

  // optional sint32 BulletShotType = 2 [default = 0];
  if (has_bulletshottype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->bulletshottype(), output);
  }

  // optional sint32 ShotTimeProgression = 3 [default = 0];
  if (has_shottimeprogression()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->shottimeprogression(), output);
  }

  // optional float ShotTimeProgressionValue = 4 [default = -1];
  if (has_shottimeprogressionvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->shottimeprogressionvalue(), output);
  }

  // optional sint32 VelocityCorrection = 5 [default = 0];
  if (has_velocitycorrection()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->velocitycorrection(), output);
  }

  // optional float VelocityCorrectionValue = 6 [default = -1];
  if (has_velocitycorrectionvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->velocitycorrectionvalue(), output);
  }

  // optional sint32 BulletCount = 7 [default = -1];
  if (has_bulletcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->bulletcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrajectoryBulletGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 GroupId = 1 [default = -1];
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->groupid(), target);
  }

  // optional sint32 BulletShotType = 2 [default = 0];
  if (has_bulletshottype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->bulletshottype(), target);
  }

  // optional sint32 ShotTimeProgression = 3 [default = 0];
  if (has_shottimeprogression()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->shottimeprogression(), target);
  }

  // optional float ShotTimeProgressionValue = 4 [default = -1];
  if (has_shottimeprogressionvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->shottimeprogressionvalue(), target);
  }

  // optional sint32 VelocityCorrection = 5 [default = 0];
  if (has_velocitycorrection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->velocitycorrection(), target);
  }

  // optional float VelocityCorrectionValue = 6 [default = -1];
  if (has_velocitycorrectionvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->velocitycorrectionvalue(), target);
  }

  // optional sint32 BulletCount = 7 [default = -1];
  if (has_bulletcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->bulletcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrajectoryBulletGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 GroupId = 1 [default = -1];
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->groupid());
    }

    // optional sint32 BulletShotType = 2 [default = 0];
    if (has_bulletshottype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bulletshottype());
    }

    // optional sint32 ShotTimeProgression = 3 [default = 0];
    if (has_shottimeprogression()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->shottimeprogression());
    }

    // optional float ShotTimeProgressionValue = 4 [default = -1];
    if (has_shottimeprogressionvalue()) {
      total_size += 1 + 4;
    }

    // optional sint32 VelocityCorrection = 5 [default = 0];
    if (has_velocitycorrection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->velocitycorrection());
    }

    // optional float VelocityCorrectionValue = 6 [default = -1];
    if (has_velocitycorrectionvalue()) {
      total_size += 1 + 4;
    }

    // optional sint32 BulletCount = 7 [default = -1];
    if (has_bulletcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bulletcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryBulletGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrajectoryBulletGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrajectoryBulletGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrajectoryBulletGroup::MergeFrom(const TrajectoryBulletGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_bulletshottype()) {
      set_bulletshottype(from.bulletshottype());
    }
    if (from.has_shottimeprogression()) {
      set_shottimeprogression(from.shottimeprogression());
    }
    if (from.has_shottimeprogressionvalue()) {
      set_shottimeprogressionvalue(from.shottimeprogressionvalue());
    }
    if (from.has_velocitycorrection()) {
      set_velocitycorrection(from.velocitycorrection());
    }
    if (from.has_velocitycorrectionvalue()) {
      set_velocitycorrectionvalue(from.velocitycorrectionvalue());
    }
    if (from.has_bulletcount()) {
      set_bulletcount(from.bulletcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrajectoryBulletGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryBulletGroup::CopyFrom(const TrajectoryBulletGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryBulletGroup::IsInitialized() const {

  return true;
}

void TrajectoryBulletGroup::Swap(TrajectoryBulletGroup* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(bulletshottype_, other->bulletshottype_);
    std::swap(shottimeprogression_, other->shottimeprogression_);
    std::swap(shottimeprogressionvalue_, other->shottimeprogressionvalue_);
    std::swap(velocitycorrection_, other->velocitycorrection_);
    std::swap(velocitycorrectionvalue_, other->velocitycorrectionvalue_);
    std::swap(bulletcount_, other->bulletcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrajectoryBulletGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrajectoryBulletGroup_descriptor_;
  metadata.reflection = TrajectoryBulletGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrajectoryBullet::kSortIndexFieldNumber;
const int TrajectoryBullet::kBulletIdFieldNumber;
const int TrajectoryBullet::kTrajectorIdFieldNumber;
const int TrajectoryBullet::kGroupIdFieldNumber;
const int TrajectoryBullet::kTrackTypeFieldNumber;
const int TrajectoryBullet::kShotTimeFieldNumber;
const int TrajectoryBullet::kRandomRadiusFieldNumber;
const int TrajectoryBullet::kBulletModelNameFieldNumber;
const int TrajectoryBullet::kIsMucusFieldNumber;
const int TrajectoryBullet::kBulletScaleMinFieldNumber;
const int TrajectoryBullet::kBulletScaleMaxFieldNumber;
const int TrajectoryBullet::kVelocityRandomFieldNumber;
const int TrajectoryBullet::kVelocityMinFieldNumber;
const int TrajectoryBullet::kVelocityMaxFieldNumber;
const int TrajectoryBullet::kCrosshairTimeFieldNumber;
const int TrajectoryBullet::kMassFieldNumber;
const int TrajectoryBullet::kRotateTimeFieldNumber;
const int TrajectoryBullet::kLineMoveTimeFieldNumber;
const int TrajectoryBullet::kLineCoefficient1FieldNumber;
const int TrajectoryBullet::kLineCoefficient2FieldNumber;
const int TrajectoryBullet::kVelocityCoefficientFieldNumber;
const int TrajectoryBullet::kBulletTypeFieldNumber;
const int TrajectoryBullet::kCollisionSpriteFieldNumber;
const int TrajectoryBullet::kCollisionSceneFieldNumber;
const int TrajectoryBullet::kRayDamageFirstFieldNumber;
const int TrajectoryBullet::kRayTimeCycleFieldNumber;
const int TrajectoryBullet::kRayDamageRadiusFieldNumber;
const int TrajectoryBullet::kRayDamageDistanceFieldNumber;
const int TrajectoryBullet::kCallNpcIdFieldNumber;
const int TrajectoryBullet::kIsCollisionFieldNumber;
const int TrajectoryBullet::kWaterSprinkHeightFieldNumber;
const int TrajectoryBullet::kWaterSprinkAngleFieldNumber;
const int TrajectoryBullet::kWaterSprinkAddPercentagePerFrameFieldNumber;
const int TrajectoryBullet::kLifeTimeFieldNumber;
const int TrajectoryBullet::kTakeDamageFieldNumber;
const int TrajectoryBullet::kBulletDamageRangeTypeFieldNumber;
const int TrajectoryBullet::kBulletDamageRangeRadiusFieldNumber;
const int TrajectoryBullet::kBulletDamageAngleFieldNumber;
const int TrajectoryBullet::kVerticalLineBeginFieldNumber;
const int TrajectoryBullet::kVerticalLineEndFieldNumber;
const int TrajectoryBullet::kHammerAxleRadiusFieldNumber;
const int TrajectoryBullet::kBoundRadiusFieldNumber;
const int TrajectoryBullet::kHammerOffsetFieldNumber;
const int TrajectoryBullet::kHammerSectorAngleFieldNumber;
const int TrajectoryBullet::kHammerAngleSpeedFieldNumber;
const int TrajectoryBullet::kSprayGroundAngleFieldNumber;
const int TrajectoryBullet::kSGGreateShitFieldNumber;
const int TrajectoryBullet::kSGGreateShitListFieldNumber;
const int TrajectoryBullet::kSGGreateScaleMinFieldNumber;
const int TrajectoryBullet::kSGGreateScaleMaxFieldNumber;
const int TrajectoryBullet::kHGGreateEffectFieldNumber;
const int TrajectoryBullet::kSGLessShitFieldNumber;
const int TrajectoryBullet::kSGLessShitListFieldNumber;
const int TrajectoryBullet::kSGLessScaleMinFieldNumber;
const int TrajectoryBullet::kSGLessScaleMaxFieldNumber;
const int TrajectoryBullet::kHGLessEffectFieldNumber;
const int TrajectoryBullet::kSprayWallShitFieldNumber;
const int TrajectoryBullet::kSprayWallScaleMinFieldNumber;
const int TrajectoryBullet::kSprayWallScaleMaxFieldNumber;
const int TrajectoryBullet::kHitSprayWallEffectFieldNumber;
const int TrajectoryBullet::kHitNotSprayWallEffectFieldNumber;
const int TrajectoryBullet::kHitSpriteEffectFieldNumber;
const int TrajectoryBullet::kCreateChildTimeFieldNumber;
const int TrajectoryBullet::kChildArrFieldNumber;
const int TrajectoryBullet::kModelRotateFieldNumber;
const int TrajectoryBullet::kRotateXFieldNumber;
const int TrajectoryBullet::kRotateYFieldNumber;
const int TrajectoryBullet::kRotateZFieldNumber;
const int TrajectoryBullet::kRotateSpeedFieldNumber;
const int TrajectoryBullet::kClockwiseFieldNumber;
const int TrajectoryBullet::kRotateMoveForwardFieldNumber;
const int TrajectoryBullet::kHAngleFieldNumber;
const int TrajectoryBullet::kVAngleFieldNumber;
const int TrajectoryBullet::kGroundBounceFieldNumber;
const int TrajectoryBullet::kWallBounceFieldNumber;
const int TrajectoryBullet::kDampBounceFieldNumber;
const int TrajectoryBullet::kBounceTimesFieldNumber;
const int TrajectoryBullet::kBounceVelocityFieldNumber;
#endif  // !_MSC_VER

TrajectoryBullet::TrajectoryBullet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrajectoryBullet::InitAsDefaultInstance() {
  hammeroffset_ = const_cast< ::Vector3PB*>(&::Vector3PB::default_instance());
}

TrajectoryBullet::TrajectoryBullet(const TrajectoryBullet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrajectoryBullet::SharedCtor() {
  _cached_size_ = 0;
  sortindex_ = -1;
  bulletid_ = -1;
  trajectorid_ = -1;
  groupid_ = -1;
  tracktype_ = -1;
  shottime_ = -1;
  randomradius_ = -1;
  bulletmodelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ismucus_ = false;
  bulletscalemin_ = 1;
  bulletscalemax_ = 1;
  velocityrandom_ = false;
  velocitymin_ = -1;
  velocitymax_ = -1;
  crosshairtime_ = -1;
  mass_ = -1;
  rotatetime_ = -1;
  linemovetime_ = -1;
  linecoefficient1_ = -1;
  linecoefficient2_ = -1;
  velocitycoefficient_ = -1;
  bullettype_ = 0;
  collisionsprite_ = 0;
  collisionscene_ = 0;
  raydamagefirst_ = -1;
  raytimecycle_ = -1;
  raydamageradius_ = -1;
  raydamagedistance_ = -1;
  callnpcid_ = -1;
  iscollision_ = true;
  watersprinkheight_ = -1;
  watersprinkangle_ = -1;
  watersprinkaddpercentageperframe_ = -1;
  lifetime_ = -1;
  takedamage_ = false;
  bulletdamagerangetype_ = 0;
  bulletdamagerangeradius_ = -1;
  bulletdamageangle_ = -1;
  verticallinebegin_ = -1;
  verticallineend_ = -1;
  hammeraxleradius_ = -1;
  boundradius_ = -1;
  hammeroffset_ = NULL;
  hammersectorangle_ = -1;
  hammeranglespeed_ = -1;
  spraygroundangle_ = 1;
  sggreateshit_ = 1;
  sggreatescalemin_ = 1;
  sggreatescalemax_ = 1;
  hggreateeffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sglessshit_ = 1;
  sglessscalemin_ = 1;
  sglessscalemax_ = 1;
  hglesseffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  spraywallshit_ = 1;
  spraywallscalemin_ = 1;
  spraywallscalemax_ = 1;
  hitspraywalleffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hitnotspraywalleffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hitspriteeffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  createchildtime_ = -1;
  modelrotate_ = false;
  rotatex_ = 0;
  rotatey_ = 0;
  rotatez_ = 0;
  rotatespeed_ = 0;
  clockwise_ = false;
  rotatemoveforward_ = false;
  hangle_ = 0;
  vangle_ = 0;
  groundbounce_ = false;
  wallbounce_ = false;
  dampbounce_ = -1;
  bouncetimes_ = -1;
  bouncevelocity_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrajectoryBullet::~TrajectoryBullet() {
  SharedDtor();
}

void TrajectoryBullet::SharedDtor() {
  if (bulletmodelname_ != &::google::protobuf::internal::kEmptyString) {
    delete bulletmodelname_;
  }
  if (hggreateeffect_ != &::google::protobuf::internal::kEmptyString) {
    delete hggreateeffect_;
  }
  if (hglesseffect_ != &::google::protobuf::internal::kEmptyString) {
    delete hglesseffect_;
  }
  if (hitspraywalleffect_ != &::google::protobuf::internal::kEmptyString) {
    delete hitspraywalleffect_;
  }
  if (hitnotspraywalleffect_ != &::google::protobuf::internal::kEmptyString) {
    delete hitnotspraywalleffect_;
  }
  if (hitspriteeffect_ != &::google::protobuf::internal::kEmptyString) {
    delete hitspriteeffect_;
  }
  if (this != default_instance_) {
    delete hammeroffset_;
  }
}

void TrajectoryBullet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryBullet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrajectoryBullet_descriptor_;
}

const TrajectoryBullet& TrajectoryBullet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TrajectoryCliRpc_2eproto();
  return *default_instance_;
}

TrajectoryBullet* TrajectoryBullet::default_instance_ = NULL;

TrajectoryBullet* TrajectoryBullet::New() const {
  return new TrajectoryBullet;
}

void TrajectoryBullet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sortindex_ = -1;
    bulletid_ = -1;
    trajectorid_ = -1;
    groupid_ = -1;
    tracktype_ = -1;
    shottime_ = -1;
    randomradius_ = -1;
    if (has_bulletmodelname()) {
      if (bulletmodelname_ != &::google::protobuf::internal::kEmptyString) {
        bulletmodelname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ismucus_ = false;
    bulletscalemin_ = 1;
    bulletscalemax_ = 1;
    velocityrandom_ = false;
    velocitymin_ = -1;
    velocitymax_ = -1;
    crosshairtime_ = -1;
    mass_ = -1;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    rotatetime_ = -1;
    linemovetime_ = -1;
    linecoefficient1_ = -1;
    linecoefficient2_ = -1;
    velocitycoefficient_ = -1;
    bullettype_ = 0;
    collisionsprite_ = 0;
    collisionscene_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    raydamagefirst_ = -1;
    raytimecycle_ = -1;
    raydamageradius_ = -1;
    raydamagedistance_ = -1;
    callnpcid_ = -1;
    iscollision_ = true;
    watersprinkheight_ = -1;
    watersprinkangle_ = -1;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    watersprinkaddpercentageperframe_ = -1;
    lifetime_ = -1;
    takedamage_ = false;
    bulletdamagerangetype_ = 0;
    bulletdamagerangeradius_ = -1;
    bulletdamageangle_ = -1;
    verticallinebegin_ = -1;
    verticallineend_ = -1;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    hammeraxleradius_ = -1;
    boundradius_ = -1;
    if (has_hammeroffset()) {
      if (hammeroffset_ != NULL) hammeroffset_->::Vector3PB::Clear();
    }
    hammersectorangle_ = -1;
    hammeranglespeed_ = -1;
    spraygroundangle_ = 1;
    sggreateshit_ = 1;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    sggreatescalemin_ = 1;
    sggreatescalemax_ = 1;
    if (has_hggreateeffect()) {
      if (hggreateeffect_ != &::google::protobuf::internal::kEmptyString) {
        hggreateeffect_->clear();
      }
    }
    sglessshit_ = 1;
    sglessscalemin_ = 1;
    sglessscalemax_ = 1;
    if (has_hglesseffect()) {
      if (hglesseffect_ != &::google::protobuf::internal::kEmptyString) {
        hglesseffect_->clear();
      }
    }
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    spraywallshit_ = 1;
    spraywallscalemin_ = 1;
    spraywallscalemax_ = 1;
    if (has_hitspraywalleffect()) {
      if (hitspraywalleffect_ != &::google::protobuf::internal::kEmptyString) {
        hitspraywalleffect_->clear();
      }
    }
    if (has_hitnotspraywalleffect()) {
      if (hitnotspraywalleffect_ != &::google::protobuf::internal::kEmptyString) {
        hitnotspraywalleffect_->clear();
      }
    }
    if (has_hitspriteeffect()) {
      if (hitspriteeffect_ != &::google::protobuf::internal::kEmptyString) {
        hitspriteeffect_->clear();
      }
    }
    createchildtime_ = -1;
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    modelrotate_ = false;
    rotatex_ = 0;
    rotatey_ = 0;
    rotatez_ = 0;
    rotatespeed_ = 0;
    clockwise_ = false;
    rotatemoveforward_ = false;
    hangle_ = 0;
  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    vangle_ = 0;
    groundbounce_ = false;
    wallbounce_ = false;
    dampbounce_ = -1;
    bouncetimes_ = -1;
    bouncevelocity_ = -1;
  }
  sggreateshitlist_.Clear();
  sglessshitlist_.Clear();
  childarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrajectoryBullet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 BulletId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bulletid_)));
          set_has_bulletid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GroupId;
        break;
      }

      // optional sint32 GroupId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_RandomRadius;
        break;
      }

      // optional float RandomRadius = 10 [default = -1];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_RandomRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &randomradius_)));
          set_has_randomradius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_BulletModelName;
        break;
      }

      // optional string BulletModelName = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BulletModelName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bulletmodelname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bulletmodelname().data(), this->bulletmodelname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_VelocityRandom;
        break;
      }

      // optional bool VelocityRandom = 12 [default = false];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VelocityRandom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &velocityrandom_)));
          set_has_velocityrandom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_VelocityMin;
        break;
      }

      // optional float VelocityMin = 13 [default = -1];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_VelocityMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocitymin_)));
          set_has_velocitymin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_VelocityMax;
        break;
      }

      // optional float VelocityMax = 14 [default = -1];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_VelocityMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocitymax_)));
          set_has_velocitymax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_Mass;
        break;
      }

      // optional float Mass = 15 [default = -1];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Mass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mass_)));
          set_has_mass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_VelocityCoefficient;
        break;
      }

      // optional float VelocityCoefficient = 16 [default = -1];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_VelocityCoefficient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocitycoefficient_)));
          set_has_velocitycoefficient();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_BulletType;
        break;
      }

      // optional sint32 BulletType = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BulletType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bullettype_)));
          set_has_bullettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_RayDamageFirst;
        break;
      }

      // optional float RayDamageFirst = 20 [default = -1];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_RayDamageFirst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &raydamagefirst_)));
          set_has_raydamagefirst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_RayTimeCycle;
        break;
      }

      // optional sint32 RayTimeCycle = 21 [default = -1];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RayTimeCycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &raytimecycle_)));
          set_has_raytimecycle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_CallNpcId;
        break;
      }

      // optional sint32 CallNpcId = 22 [default = -1];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CallNpcId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &callnpcid_)));
          set_has_callnpcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_LifeTime;
        break;
      }

      // optional sint32 LifeTime = 37 [default = -1];
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LifeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &lifetime_)));
          set_has_lifetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_TakeDamage;
        break;
      }

      // optional bool TakeDamage = 39 [default = false];
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TakeDamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &takedamage_)));
          set_has_takedamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_BulletDamageRangeType;
        break;
      }

      // optional sint32 BulletDamageRangeType = 40 [default = 0];
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BulletDamageRangeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bulletdamagerangetype_)));
          set_has_bulletdamagerangetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(333)) goto parse_BulletDamageRangeRadius;
        break;
      }

      // optional float BulletDamageRangeRadius = 41 [default = -1];
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_BulletDamageRangeRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bulletdamagerangeradius_)));
          set_has_bulletdamagerangeradius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(341)) goto parse_BulletDamageAngle;
        break;
      }

      // optional float BulletDamageAngle = 42 [default = -1];
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_BulletDamageAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bulletdamageangle_)));
          set_has_bulletdamageangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(381)) goto parse_SprayWallScaleMin;
        break;
      }

      // optional float SprayWallScaleMin = 47 [default = 1];
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_SprayWallScaleMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spraywallscalemin_)));
          set_has_spraywallscalemin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(389)) goto parse_SprayWallScaleMax;
        break;
      }

      // optional float SprayWallScaleMax = 48 [default = 1];
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_SprayWallScaleMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spraywallscalemax_)));
          set_has_spraywallscalemax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_ShotTime;
        break;
      }

      // optional sint32 ShotTime = 51 [default = -1];
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShotTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &shottime_)));
          set_has_shottime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_ChildArr;
        break;
      }

      // repeated .TrajectoryBulletChild ChildArr = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChildArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_childarr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_ChildArr;
        if (input->ExpectTag(424)) goto parse_LineMoveTime;
        break;
      }

      // optional sint32 LineMoveTime = 53 [default = -1];
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LineMoveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &linemovetime_)));
          set_has_linemovetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(437)) goto parse_LineCoefficient1;
        break;
      }

      // optional float LineCoefficient1 = 54 [default = -1];
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_LineCoefficient1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &linecoefficient1_)));
          set_has_linecoefficient1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(445)) goto parse_LineCoefficient2;
        break;
      }

      // optional float LineCoefficient2 = 55 [default = -1];
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_LineCoefficient2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &linecoefficient2_)));
          set_has_linecoefficient2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_SortIndex;
        break;
      }

      // optional sint32 SortIndex = 56 [default = -1];
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SortIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &sortindex_)));
          set_has_sortindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(461)) goto parse_VerticalLineBegin;
        break;
      }

      // optional float VerticalLineBegin = 57 [default = -1];
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_VerticalLineBegin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &verticallinebegin_)));
          set_has_verticallinebegin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(469)) goto parse_VerticalLineEnd;
        break;
      }

      // optional float VerticalLineEnd = 58 [default = -1];
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_VerticalLineEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &verticallineend_)));
          set_has_verticallineend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(472)) goto parse_ModelRotate;
        break;
      }

      // optional bool ModelRotate = 59 [default = false];
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ModelRotate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &modelrotate_)));
          set_has_modelrotate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(485)) goto parse_RotateX;
        break;
      }

      // optional float RotateX = 60 [default = 0];
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_RotateX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotatex_)));
          set_has_rotatex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(493)) goto parse_RotateY;
        break;
      }

      // optional float RotateY = 61 [default = 0];
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_RotateY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotatey_)));
          set_has_rotatey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(501)) goto parse_RotateZ;
        break;
      }

      // optional float RotateZ = 62 [default = 0];
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_RotateZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotatez_)));
          set_has_rotatez();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(509)) goto parse_RotateSpeed;
        break;
      }

      // optional float RotateSpeed = 63 [default = 0];
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_RotateSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotatespeed_)));
          set_has_rotatespeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(512)) goto parse_TrackType;
        break;
      }

      // optional sint32 TrackType = 64 [default = -1];
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TrackType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &tracktype_)));
          set_has_tracktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(528)) goto parse_RotateMoveForward;
        break;
      }

      // optional bool RotateMoveForward = 66 [default = false];
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RotateMoveForward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rotatemoveforward_)));
          set_has_rotatemoveforward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(541)) goto parse_RayDamageRadius;
        break;
      }

      // optional float RayDamageRadius = 67 [default = -1];
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_RayDamageRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &raydamageradius_)));
          set_has_raydamageradius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(544)) goto parse_CreateChildTime;
        break;
      }

      // optional sint32 CreateChildTime = 68 [default = -1];
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateChildTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &createchildtime_)));
          set_has_createchildtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(557)) goto parse_HAngle;
        break;
      }

      // optional float HAngle = 69 [default = 0];
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_HAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hangle_)));
          set_has_hangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(565)) goto parse_VAngle;
        break;
      }

      // optional float VAngle = 70 [default = 0];
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_VAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vangle_)));
          set_has_vangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(573)) goto parse_BulletScaleMin;
        break;
      }

      // optional float BulletScaleMin = 71 [default = 1];
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_BulletScaleMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bulletscalemin_)));
          set_has_bulletscalemin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(581)) goto parse_BulletScaleMax;
        break;
      }

      // optional float BulletScaleMax = 72 [default = 1];
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_BulletScaleMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bulletscalemax_)));
          set_has_bulletscalemax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(584)) goto parse_CollisionSprite;
        break;
      }

      // optional sint32 CollisionSprite = 73 [default = 0];
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CollisionSprite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &collisionsprite_)));
          set_has_collisionsprite();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(600)) goto parse_CollisionScene;
        break;
      }

      // optional sint32 CollisionScene = 75 [default = 0];
      case 75: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CollisionScene:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &collisionscene_)));
          set_has_collisionscene();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(608)) goto parse_GroundBounce;
        break;
      }

      // optional bool GroundBounce = 76 [default = false];
      case 76: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroundBounce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &groundbounce_)));
          set_has_groundbounce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(616)) goto parse_WallBounce;
        break;
      }

      // optional bool WallBounce = 77 [default = false];
      case 77: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WallBounce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wallbounce_)));
          set_has_wallbounce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(629)) goto parse_DampBounce;
        break;
      }

      // optional float DampBounce = 78 [default = -1];
      case 78: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_DampBounce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dampbounce_)));
          set_has_dampbounce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(632)) goto parse_BounceTimes;
        break;
      }

      // optional sint32 BounceTimes = 79 [default = -1];
      case 79: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BounceTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bouncetimes_)));
          set_has_bouncetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(645)) goto parse_BounceVelocity;
        break;
      }

      // optional float BounceVelocity = 80 [default = -1];
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_BounceVelocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bouncevelocity_)));
          set_has_bouncevelocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(656)) goto parse_SprayWallShit;
        break;
      }

      // optional sint32 SprayWallShit = 82 [default = 1];
      case 82: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SprayWallShit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &spraywallshit_)));
          set_has_spraywallshit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(664)) goto parse_Clockwise;
        break;
      }

      // optional bool Clockwise = 83 [default = false];
      case 83: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Clockwise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clockwise_)));
          set_has_clockwise();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(672)) goto parse_IsCollision;
        break;
      }

      // optional bool IsCollision = 84 [default = true];
      case 84: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsCollision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscollision_)));
          set_has_iscollision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(685)) goto parse_HammerAxleRadius;
        break;
      }

      // optional float HammerAxleRadius = 85 [default = -1];
      case 85: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_HammerAxleRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hammeraxleradius_)));
          set_has_hammeraxleradius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(693)) goto parse_BoundRadius;
        break;
      }

      // optional float BoundRadius = 86 [default = -1];
      case 86: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_BoundRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &boundradius_)));
          set_has_boundradius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(698)) goto parse_HammerOffset;
        break;
      }

      // optional .Vector3PB HammerOffset = 87;
      case 87: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HammerOffset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hammeroffset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(709)) goto parse_HammerSectorAngle;
        break;
      }

      // optional float HammerSectorAngle = 88 [default = -1];
      case 88: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_HammerSectorAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hammersectorangle_)));
          set_has_hammersectorangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(717)) goto parse_HammerAngleSpeed;
        break;
      }

      // optional float HammerAngleSpeed = 89 [default = -1];
      case 89: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_HammerAngleSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hammeranglespeed_)));
          set_has_hammeranglespeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(720)) goto parse_TrajectorId;
        break;
      }

      // optional sint32 TrajectorId = 90 [default = -1];
      case 90: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TrajectorId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &trajectorid_)));
          set_has_trajectorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(728)) goto parse_RotateTime;
        break;
      }

      // optional sint32 RotateTime = 91 [default = -1];
      case 91: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RotateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &rotatetime_)));
          set_has_rotatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(744)) goto parse_IsMucus;
        break;
      }

      // optional bool IsMucus = 93 [default = false];
      case 93: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsMucus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismucus_)));
          set_has_ismucus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(754)) goto parse_HitSprayWallEffect;
        break;
      }

      // optional string HitSprayWallEffect = 94;
      case 94: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HitSprayWallEffect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hitspraywalleffect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hitspraywalleffect().data(), this->hitspraywalleffect().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(762)) goto parse_HitNotSprayWallEffect;
        break;
      }

      // optional string HitNotSprayWallEffect = 95;
      case 95: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HitNotSprayWallEffect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hitnotspraywalleffect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hitnotspraywalleffect().data(), this->hitnotspraywalleffect().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(778)) goto parse_HitSpriteEffect;
        break;
      }

      // optional string HitSpriteEffect = 97;
      case 97: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HitSpriteEffect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hitspriteeffect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hitspriteeffect().data(), this->hitspriteeffect().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(789)) goto parse_RayDamageDistance;
        break;
      }

      // optional float RayDamageDistance = 98 [default = -1];
      case 98: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_RayDamageDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &raydamagedistance_)));
          set_has_raydamagedistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(797)) goto parse_SprayGroundAngle;
        break;
      }

      // optional float SprayGroundAngle = 99 [default = 1];
      case 99: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_SprayGroundAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spraygroundangle_)));
          set_has_spraygroundangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(800)) goto parse_SGGreateShit;
        break;
      }

      // optional sint32 SGGreateShit = 100 [default = 1];
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SGGreateShit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &sggreateshit_)));
          set_has_sggreateshit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(808)) goto parse_SGLessShit;
        break;
      }

      // optional sint32 SGLessShit = 101 [default = 1];
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SGLessShit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &sglessshit_)));
          set_has_sglessshit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(816)) goto parse_SGGreateShitList;
        break;
      }

      // repeated sint32 SGGreateShitList = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SGGreateShitList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 2, 816, input, this->mutable_sggreateshitlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_sggreateshitlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(816)) goto parse_SGGreateShitList;
        if (input->ExpectTag(824)) goto parse_SGLessShitList;
        break;
      }

      // repeated sint32 SGLessShitList = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SGLessShitList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 2, 824, input, this->mutable_sglessshitlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_sglessshitlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(824)) goto parse_SGLessShitList;
        if (input->ExpectTag(837)) goto parse_SGGreateScaleMin;
        break;
      }

      // optional float SGGreateScaleMin = 104 [default = 1];
      case 104: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_SGGreateScaleMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sggreatescalemin_)));
          set_has_sggreatescalemin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(845)) goto parse_SGGreateScaleMax;
        break;
      }

      // optional float SGGreateScaleMax = 105 [default = 1];
      case 105: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_SGGreateScaleMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sggreatescalemax_)));
          set_has_sggreatescalemax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(850)) goto parse_HGGreateEffect;
        break;
      }

      // optional string HGGreateEffect = 106;
      case 106: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HGGreateEffect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hggreateeffect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hggreateeffect().data(), this->hggreateeffect().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(861)) goto parse_SGLessScaleMin;
        break;
      }

      // optional float SGLessScaleMin = 107 [default = 1];
      case 107: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_SGLessScaleMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sglessscalemin_)));
          set_has_sglessscalemin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(869)) goto parse_SGLessScaleMax;
        break;
      }

      // optional float SGLessScaleMax = 108 [default = 1];
      case 108: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_SGLessScaleMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sglessscalemax_)));
          set_has_sglessscalemax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(874)) goto parse_HGLessEffect;
        break;
      }

      // optional string HGLessEffect = 109;
      case 109: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HGLessEffect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hglesseffect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hglesseffect().data(), this->hglesseffect().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(885)) goto parse_WaterSprinkHeight;
        break;
      }

      // optional float WaterSprinkHeight = 110 [default = -1];
      case 110: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_WaterSprinkHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &watersprinkheight_)));
          set_has_watersprinkheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(893)) goto parse_WaterSprinkAngle;
        break;
      }

      // optional float WaterSprinkAngle = 111 [default = -1];
      case 111: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_WaterSprinkAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &watersprinkangle_)));
          set_has_watersprinkangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(901)) goto parse_WaterSprinkAddPercentagePerFrame;
        break;
      }

      // optional float WaterSprinkAddPercentagePerFrame = 112 [default = -1];
      case 112: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_WaterSprinkAddPercentagePerFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &watersprinkaddpercentageperframe_)));
          set_has_watersprinkaddpercentageperframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(904)) goto parse_CrosshairTime;
        break;
      }

      // optional sint32 CrosshairTime = 113 [default = -1];
      case 113: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CrosshairTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &crosshairtime_)));
          set_has_crosshairtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrajectoryBullet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 BulletId = 1 [default = -1];
  if (has_bulletid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->bulletid(), output);
  }

  // optional sint32 GroupId = 2 [default = -1];
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->groupid(), output);
  }

  // optional float RandomRadius = 10 [default = -1];
  if (has_randomradius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->randomradius(), output);
  }

  // optional string BulletModelName = 11;
  if (has_bulletmodelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bulletmodelname().data(), this->bulletmodelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->bulletmodelname(), output);
  }

  // optional bool VelocityRandom = 12 [default = false];
  if (has_velocityrandom()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->velocityrandom(), output);
  }

  // optional float VelocityMin = 13 [default = -1];
  if (has_velocitymin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->velocitymin(), output);
  }

  // optional float VelocityMax = 14 [default = -1];
  if (has_velocitymax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->velocitymax(), output);
  }

  // optional float Mass = 15 [default = -1];
  if (has_mass()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->mass(), output);
  }

  // optional float VelocityCoefficient = 16 [default = -1];
  if (has_velocitycoefficient()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->velocitycoefficient(), output);
  }

  // optional sint32 BulletType = 17 [default = 0];
  if (has_bullettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(17, this->bullettype(), output);
  }

  // optional float RayDamageFirst = 20 [default = -1];
  if (has_raydamagefirst()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->raydamagefirst(), output);
  }

  // optional sint32 RayTimeCycle = 21 [default = -1];
  if (has_raytimecycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(21, this->raytimecycle(), output);
  }

  // optional sint32 CallNpcId = 22 [default = -1];
  if (has_callnpcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(22, this->callnpcid(), output);
  }

  // optional sint32 LifeTime = 37 [default = -1];
  if (has_lifetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(37, this->lifetime(), output);
  }

  // optional bool TakeDamage = 39 [default = false];
  if (has_takedamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(39, this->takedamage(), output);
  }

  // optional sint32 BulletDamageRangeType = 40 [default = 0];
  if (has_bulletdamagerangetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(40, this->bulletdamagerangetype(), output);
  }

  // optional float BulletDamageRangeRadius = 41 [default = -1];
  if (has_bulletdamagerangeradius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(41, this->bulletdamagerangeradius(), output);
  }

  // optional float BulletDamageAngle = 42 [default = -1];
  if (has_bulletdamageangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(42, this->bulletdamageangle(), output);
  }

  // optional float SprayWallScaleMin = 47 [default = 1];
  if (has_spraywallscalemin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(47, this->spraywallscalemin(), output);
  }

  // optional float SprayWallScaleMax = 48 [default = 1];
  if (has_spraywallscalemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(48, this->spraywallscalemax(), output);
  }

  // optional sint32 ShotTime = 51 [default = -1];
  if (has_shottime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(51, this->shottime(), output);
  }

  // repeated .TrajectoryBulletChild ChildArr = 52;
  for (int i = 0; i < this->childarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, this->childarr(i), output);
  }

  // optional sint32 LineMoveTime = 53 [default = -1];
  if (has_linemovetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(53, this->linemovetime(), output);
  }

  // optional float LineCoefficient1 = 54 [default = -1];
  if (has_linecoefficient1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(54, this->linecoefficient1(), output);
  }

  // optional float LineCoefficient2 = 55 [default = -1];
  if (has_linecoefficient2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(55, this->linecoefficient2(), output);
  }

  // optional sint32 SortIndex = 56 [default = -1];
  if (has_sortindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(56, this->sortindex(), output);
  }

  // optional float VerticalLineBegin = 57 [default = -1];
  if (has_verticallinebegin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(57, this->verticallinebegin(), output);
  }

  // optional float VerticalLineEnd = 58 [default = -1];
  if (has_verticallineend()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(58, this->verticallineend(), output);
  }

  // optional bool ModelRotate = 59 [default = false];
  if (has_modelrotate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(59, this->modelrotate(), output);
  }

  // optional float RotateX = 60 [default = 0];
  if (has_rotatex()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(60, this->rotatex(), output);
  }

  // optional float RotateY = 61 [default = 0];
  if (has_rotatey()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(61, this->rotatey(), output);
  }

  // optional float RotateZ = 62 [default = 0];
  if (has_rotatez()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(62, this->rotatez(), output);
  }

  // optional float RotateSpeed = 63 [default = 0];
  if (has_rotatespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(63, this->rotatespeed(), output);
  }

  // optional sint32 TrackType = 64 [default = -1];
  if (has_tracktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(64, this->tracktype(), output);
  }

  // optional bool RotateMoveForward = 66 [default = false];
  if (has_rotatemoveforward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(66, this->rotatemoveforward(), output);
  }

  // optional float RayDamageRadius = 67 [default = -1];
  if (has_raydamageradius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(67, this->raydamageradius(), output);
  }

  // optional sint32 CreateChildTime = 68 [default = -1];
  if (has_createchildtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(68, this->createchildtime(), output);
  }

  // optional float HAngle = 69 [default = 0];
  if (has_hangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(69, this->hangle(), output);
  }

  // optional float VAngle = 70 [default = 0];
  if (has_vangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(70, this->vangle(), output);
  }

  // optional float BulletScaleMin = 71 [default = 1];
  if (has_bulletscalemin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(71, this->bulletscalemin(), output);
  }

  // optional float BulletScaleMax = 72 [default = 1];
  if (has_bulletscalemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(72, this->bulletscalemax(), output);
  }

  // optional sint32 CollisionSprite = 73 [default = 0];
  if (has_collisionsprite()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(73, this->collisionsprite(), output);
  }

  // optional sint32 CollisionScene = 75 [default = 0];
  if (has_collisionscene()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(75, this->collisionscene(), output);
  }

  // optional bool GroundBounce = 76 [default = false];
  if (has_groundbounce()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(76, this->groundbounce(), output);
  }

  // optional bool WallBounce = 77 [default = false];
  if (has_wallbounce()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(77, this->wallbounce(), output);
  }

  // optional float DampBounce = 78 [default = -1];
  if (has_dampbounce()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(78, this->dampbounce(), output);
  }

  // optional sint32 BounceTimes = 79 [default = -1];
  if (has_bouncetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(79, this->bouncetimes(), output);
  }

  // optional float BounceVelocity = 80 [default = -1];
  if (has_bouncevelocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(80, this->bouncevelocity(), output);
  }

  // optional sint32 SprayWallShit = 82 [default = 1];
  if (has_spraywallshit()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(82, this->spraywallshit(), output);
  }

  // optional bool Clockwise = 83 [default = false];
  if (has_clockwise()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(83, this->clockwise(), output);
  }

  // optional bool IsCollision = 84 [default = true];
  if (has_iscollision()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(84, this->iscollision(), output);
  }

  // optional float HammerAxleRadius = 85 [default = -1];
  if (has_hammeraxleradius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(85, this->hammeraxleradius(), output);
  }

  // optional float BoundRadius = 86 [default = -1];
  if (has_boundradius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(86, this->boundradius(), output);
  }

  // optional .Vector3PB HammerOffset = 87;
  if (has_hammeroffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      87, this->hammeroffset(), output);
  }

  // optional float HammerSectorAngle = 88 [default = -1];
  if (has_hammersectorangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(88, this->hammersectorangle(), output);
  }

  // optional float HammerAngleSpeed = 89 [default = -1];
  if (has_hammeranglespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(89, this->hammeranglespeed(), output);
  }

  // optional sint32 TrajectorId = 90 [default = -1];
  if (has_trajectorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(90, this->trajectorid(), output);
  }

  // optional sint32 RotateTime = 91 [default = -1];
  if (has_rotatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(91, this->rotatetime(), output);
  }

  // optional bool IsMucus = 93 [default = false];
  if (has_ismucus()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(93, this->ismucus(), output);
  }

  // optional string HitSprayWallEffect = 94;
  if (has_hitspraywalleffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hitspraywalleffect().data(), this->hitspraywalleffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      94, this->hitspraywalleffect(), output);
  }

  // optional string HitNotSprayWallEffect = 95;
  if (has_hitnotspraywalleffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hitnotspraywalleffect().data(), this->hitnotspraywalleffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      95, this->hitnotspraywalleffect(), output);
  }

  // optional string HitSpriteEffect = 97;
  if (has_hitspriteeffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hitspriteeffect().data(), this->hitspriteeffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      97, this->hitspriteeffect(), output);
  }

  // optional float RayDamageDistance = 98 [default = -1];
  if (has_raydamagedistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(98, this->raydamagedistance(), output);
  }

  // optional float SprayGroundAngle = 99 [default = 1];
  if (has_spraygroundangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(99, this->spraygroundangle(), output);
  }

  // optional sint32 SGGreateShit = 100 [default = 1];
  if (has_sggreateshit()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(100, this->sggreateshit(), output);
  }

  // optional sint32 SGLessShit = 101 [default = 1];
  if (has_sglessshit()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(101, this->sglessshit(), output);
  }

  // repeated sint32 SGGreateShitList = 102;
  for (int i = 0; i < this->sggreateshitlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      102, this->sggreateshitlist(i), output);
  }

  // repeated sint32 SGLessShitList = 103;
  for (int i = 0; i < this->sglessshitlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      103, this->sglessshitlist(i), output);
  }

  // optional float SGGreateScaleMin = 104 [default = 1];
  if (has_sggreatescalemin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(104, this->sggreatescalemin(), output);
  }

  // optional float SGGreateScaleMax = 105 [default = 1];
  if (has_sggreatescalemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(105, this->sggreatescalemax(), output);
  }

  // optional string HGGreateEffect = 106;
  if (has_hggreateeffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hggreateeffect().data(), this->hggreateeffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      106, this->hggreateeffect(), output);
  }

  // optional float SGLessScaleMin = 107 [default = 1];
  if (has_sglessscalemin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(107, this->sglessscalemin(), output);
  }

  // optional float SGLessScaleMax = 108 [default = 1];
  if (has_sglessscalemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(108, this->sglessscalemax(), output);
  }

  // optional string HGLessEffect = 109;
  if (has_hglesseffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hglesseffect().data(), this->hglesseffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      109, this->hglesseffect(), output);
  }

  // optional float WaterSprinkHeight = 110 [default = -1];
  if (has_watersprinkheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(110, this->watersprinkheight(), output);
  }

  // optional float WaterSprinkAngle = 111 [default = -1];
  if (has_watersprinkangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(111, this->watersprinkangle(), output);
  }

  // optional float WaterSprinkAddPercentagePerFrame = 112 [default = -1];
  if (has_watersprinkaddpercentageperframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(112, this->watersprinkaddpercentageperframe(), output);
  }

  // optional sint32 CrosshairTime = 113 [default = -1];
  if (has_crosshairtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(113, this->crosshairtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrajectoryBullet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 BulletId = 1 [default = -1];
  if (has_bulletid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->bulletid(), target);
  }

  // optional sint32 GroupId = 2 [default = -1];
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->groupid(), target);
  }

  // optional float RandomRadius = 10 [default = -1];
  if (has_randomradius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->randomradius(), target);
  }

  // optional string BulletModelName = 11;
  if (has_bulletmodelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bulletmodelname().data(), this->bulletmodelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->bulletmodelname(), target);
  }

  // optional bool VelocityRandom = 12 [default = false];
  if (has_velocityrandom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->velocityrandom(), target);
  }

  // optional float VelocityMin = 13 [default = -1];
  if (has_velocitymin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->velocitymin(), target);
  }

  // optional float VelocityMax = 14 [default = -1];
  if (has_velocitymax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->velocitymax(), target);
  }

  // optional float Mass = 15 [default = -1];
  if (has_mass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->mass(), target);
  }

  // optional float VelocityCoefficient = 16 [default = -1];
  if (has_velocitycoefficient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->velocitycoefficient(), target);
  }

  // optional sint32 BulletType = 17 [default = 0];
  if (has_bullettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(17, this->bullettype(), target);
  }

  // optional float RayDamageFirst = 20 [default = -1];
  if (has_raydamagefirst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->raydamagefirst(), target);
  }

  // optional sint32 RayTimeCycle = 21 [default = -1];
  if (has_raytimecycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(21, this->raytimecycle(), target);
  }

  // optional sint32 CallNpcId = 22 [default = -1];
  if (has_callnpcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(22, this->callnpcid(), target);
  }

  // optional sint32 LifeTime = 37 [default = -1];
  if (has_lifetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(37, this->lifetime(), target);
  }

  // optional bool TakeDamage = 39 [default = false];
  if (has_takedamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(39, this->takedamage(), target);
  }

  // optional sint32 BulletDamageRangeType = 40 [default = 0];
  if (has_bulletdamagerangetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(40, this->bulletdamagerangetype(), target);
  }

  // optional float BulletDamageRangeRadius = 41 [default = -1];
  if (has_bulletdamagerangeradius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(41, this->bulletdamagerangeradius(), target);
  }

  // optional float BulletDamageAngle = 42 [default = -1];
  if (has_bulletdamageangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(42, this->bulletdamageangle(), target);
  }

  // optional float SprayWallScaleMin = 47 [default = 1];
  if (has_spraywallscalemin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(47, this->spraywallscalemin(), target);
  }

  // optional float SprayWallScaleMax = 48 [default = 1];
  if (has_spraywallscalemax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(48, this->spraywallscalemax(), target);
  }

  // optional sint32 ShotTime = 51 [default = -1];
  if (has_shottime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(51, this->shottime(), target);
  }

  // repeated .TrajectoryBulletChild ChildArr = 52;
  for (int i = 0; i < this->childarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        52, this->childarr(i), target);
  }

  // optional sint32 LineMoveTime = 53 [default = -1];
  if (has_linemovetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(53, this->linemovetime(), target);
  }

  // optional float LineCoefficient1 = 54 [default = -1];
  if (has_linecoefficient1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(54, this->linecoefficient1(), target);
  }

  // optional float LineCoefficient2 = 55 [default = -1];
  if (has_linecoefficient2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(55, this->linecoefficient2(), target);
  }

  // optional sint32 SortIndex = 56 [default = -1];
  if (has_sortindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(56, this->sortindex(), target);
  }

  // optional float VerticalLineBegin = 57 [default = -1];
  if (has_verticallinebegin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(57, this->verticallinebegin(), target);
  }

  // optional float VerticalLineEnd = 58 [default = -1];
  if (has_verticallineend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(58, this->verticallineend(), target);
  }

  // optional bool ModelRotate = 59 [default = false];
  if (has_modelrotate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(59, this->modelrotate(), target);
  }

  // optional float RotateX = 60 [default = 0];
  if (has_rotatex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(60, this->rotatex(), target);
  }

  // optional float RotateY = 61 [default = 0];
  if (has_rotatey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(61, this->rotatey(), target);
  }

  // optional float RotateZ = 62 [default = 0];
  if (has_rotatez()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(62, this->rotatez(), target);
  }

  // optional float RotateSpeed = 63 [default = 0];
  if (has_rotatespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(63, this->rotatespeed(), target);
  }

  // optional sint32 TrackType = 64 [default = -1];
  if (has_tracktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(64, this->tracktype(), target);
  }

  // optional bool RotateMoveForward = 66 [default = false];
  if (has_rotatemoveforward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(66, this->rotatemoveforward(), target);
  }

  // optional float RayDamageRadius = 67 [default = -1];
  if (has_raydamageradius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(67, this->raydamageradius(), target);
  }

  // optional sint32 CreateChildTime = 68 [default = -1];
  if (has_createchildtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(68, this->createchildtime(), target);
  }

  // optional float HAngle = 69 [default = 0];
  if (has_hangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(69, this->hangle(), target);
  }

  // optional float VAngle = 70 [default = 0];
  if (has_vangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(70, this->vangle(), target);
  }

  // optional float BulletScaleMin = 71 [default = 1];
  if (has_bulletscalemin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(71, this->bulletscalemin(), target);
  }

  // optional float BulletScaleMax = 72 [default = 1];
  if (has_bulletscalemax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(72, this->bulletscalemax(), target);
  }

  // optional sint32 CollisionSprite = 73 [default = 0];
  if (has_collisionsprite()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(73, this->collisionsprite(), target);
  }

  // optional sint32 CollisionScene = 75 [default = 0];
  if (has_collisionscene()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(75, this->collisionscene(), target);
  }

  // optional bool GroundBounce = 76 [default = false];
  if (has_groundbounce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(76, this->groundbounce(), target);
  }

  // optional bool WallBounce = 77 [default = false];
  if (has_wallbounce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(77, this->wallbounce(), target);
  }

  // optional float DampBounce = 78 [default = -1];
  if (has_dampbounce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(78, this->dampbounce(), target);
  }

  // optional sint32 BounceTimes = 79 [default = -1];
  if (has_bouncetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(79, this->bouncetimes(), target);
  }

  // optional float BounceVelocity = 80 [default = -1];
  if (has_bouncevelocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(80, this->bouncevelocity(), target);
  }

  // optional sint32 SprayWallShit = 82 [default = 1];
  if (has_spraywallshit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(82, this->spraywallshit(), target);
  }

  // optional bool Clockwise = 83 [default = false];
  if (has_clockwise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(83, this->clockwise(), target);
  }

  // optional bool IsCollision = 84 [default = true];
  if (has_iscollision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(84, this->iscollision(), target);
  }

  // optional float HammerAxleRadius = 85 [default = -1];
  if (has_hammeraxleradius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(85, this->hammeraxleradius(), target);
  }

  // optional float BoundRadius = 86 [default = -1];
  if (has_boundradius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(86, this->boundradius(), target);
  }

  // optional .Vector3PB HammerOffset = 87;
  if (has_hammeroffset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        87, this->hammeroffset(), target);
  }

  // optional float HammerSectorAngle = 88 [default = -1];
  if (has_hammersectorangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(88, this->hammersectorangle(), target);
  }

  // optional float HammerAngleSpeed = 89 [default = -1];
  if (has_hammeranglespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(89, this->hammeranglespeed(), target);
  }

  // optional sint32 TrajectorId = 90 [default = -1];
  if (has_trajectorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(90, this->trajectorid(), target);
  }

  // optional sint32 RotateTime = 91 [default = -1];
  if (has_rotatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(91, this->rotatetime(), target);
  }

  // optional bool IsMucus = 93 [default = false];
  if (has_ismucus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(93, this->ismucus(), target);
  }

  // optional string HitSprayWallEffect = 94;
  if (has_hitspraywalleffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hitspraywalleffect().data(), this->hitspraywalleffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        94, this->hitspraywalleffect(), target);
  }

  // optional string HitNotSprayWallEffect = 95;
  if (has_hitnotspraywalleffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hitnotspraywalleffect().data(), this->hitnotspraywalleffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        95, this->hitnotspraywalleffect(), target);
  }

  // optional string HitSpriteEffect = 97;
  if (has_hitspriteeffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hitspriteeffect().data(), this->hitspriteeffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        97, this->hitspriteeffect(), target);
  }

  // optional float RayDamageDistance = 98 [default = -1];
  if (has_raydamagedistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(98, this->raydamagedistance(), target);
  }

  // optional float SprayGroundAngle = 99 [default = 1];
  if (has_spraygroundangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(99, this->spraygroundangle(), target);
  }

  // optional sint32 SGGreateShit = 100 [default = 1];
  if (has_sggreateshit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(100, this->sggreateshit(), target);
  }

  // optional sint32 SGLessShit = 101 [default = 1];
  if (has_sglessshit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(101, this->sglessshit(), target);
  }

  // repeated sint32 SGGreateShitList = 102;
  for (int i = 0; i < this->sggreateshitlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(102, this->sggreateshitlist(i), target);
  }

  // repeated sint32 SGLessShitList = 103;
  for (int i = 0; i < this->sglessshitlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(103, this->sglessshitlist(i), target);
  }

  // optional float SGGreateScaleMin = 104 [default = 1];
  if (has_sggreatescalemin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(104, this->sggreatescalemin(), target);
  }

  // optional float SGGreateScaleMax = 105 [default = 1];
  if (has_sggreatescalemax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(105, this->sggreatescalemax(), target);
  }

  // optional string HGGreateEffect = 106;
  if (has_hggreateeffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hggreateeffect().data(), this->hggreateeffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        106, this->hggreateeffect(), target);
  }

  // optional float SGLessScaleMin = 107 [default = 1];
  if (has_sglessscalemin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(107, this->sglessscalemin(), target);
  }

  // optional float SGLessScaleMax = 108 [default = 1];
  if (has_sglessscalemax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(108, this->sglessscalemax(), target);
  }

  // optional string HGLessEffect = 109;
  if (has_hglesseffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hglesseffect().data(), this->hglesseffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        109, this->hglesseffect(), target);
  }

  // optional float WaterSprinkHeight = 110 [default = -1];
  if (has_watersprinkheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(110, this->watersprinkheight(), target);
  }

  // optional float WaterSprinkAngle = 111 [default = -1];
  if (has_watersprinkangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(111, this->watersprinkangle(), target);
  }

  // optional float WaterSprinkAddPercentagePerFrame = 112 [default = -1];
  if (has_watersprinkaddpercentageperframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(112, this->watersprinkaddpercentageperframe(), target);
  }

  // optional sint32 CrosshairTime = 113 [default = -1];
  if (has_crosshairtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(113, this->crosshairtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrajectoryBullet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 SortIndex = 56 [default = -1];
    if (has_sortindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->sortindex());
    }

    // optional sint32 BulletId = 1 [default = -1];
    if (has_bulletid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bulletid());
    }

    // optional sint32 TrajectorId = 90 [default = -1];
    if (has_trajectorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->trajectorid());
    }

    // optional sint32 GroupId = 2 [default = -1];
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->groupid());
    }

    // optional sint32 TrackType = 64 [default = -1];
    if (has_tracktype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->tracktype());
    }

    // optional sint32 ShotTime = 51 [default = -1];
    if (has_shottime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->shottime());
    }

    // optional float RandomRadius = 10 [default = -1];
    if (has_randomradius()) {
      total_size += 1 + 4;
    }

    // optional string BulletModelName = 11;
    if (has_bulletmodelname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bulletmodelname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool IsMucus = 93 [default = false];
    if (has_ismucus()) {
      total_size += 2 + 1;
    }

    // optional float BulletScaleMin = 71 [default = 1];
    if (has_bulletscalemin()) {
      total_size += 2 + 4;
    }

    // optional float BulletScaleMax = 72 [default = 1];
    if (has_bulletscalemax()) {
      total_size += 2 + 4;
    }

    // optional bool VelocityRandom = 12 [default = false];
    if (has_velocityrandom()) {
      total_size += 1 + 1;
    }

    // optional float VelocityMin = 13 [default = -1];
    if (has_velocitymin()) {
      total_size += 1 + 4;
    }

    // optional float VelocityMax = 14 [default = -1];
    if (has_velocitymax()) {
      total_size += 1 + 4;
    }

    // optional sint32 CrosshairTime = 113 [default = -1];
    if (has_crosshairtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->crosshairtime());
    }

    // optional float Mass = 15 [default = -1];
    if (has_mass()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional sint32 RotateTime = 91 [default = -1];
    if (has_rotatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->rotatetime());
    }

    // optional sint32 LineMoveTime = 53 [default = -1];
    if (has_linemovetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->linemovetime());
    }

    // optional float LineCoefficient1 = 54 [default = -1];
    if (has_linecoefficient1()) {
      total_size += 2 + 4;
    }

    // optional float LineCoefficient2 = 55 [default = -1];
    if (has_linecoefficient2()) {
      total_size += 2 + 4;
    }

    // optional float VelocityCoefficient = 16 [default = -1];
    if (has_velocitycoefficient()) {
      total_size += 2 + 4;
    }

    // optional sint32 BulletType = 17 [default = 0];
    if (has_bullettype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bullettype());
    }

    // optional sint32 CollisionSprite = 73 [default = 0];
    if (has_collisionsprite()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->collisionsprite());
    }

    // optional sint32 CollisionScene = 75 [default = 0];
    if (has_collisionscene()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->collisionscene());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional float RayDamageFirst = 20 [default = -1];
    if (has_raydamagefirst()) {
      total_size += 2 + 4;
    }

    // optional sint32 RayTimeCycle = 21 [default = -1];
    if (has_raytimecycle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->raytimecycle());
    }

    // optional float RayDamageRadius = 67 [default = -1];
    if (has_raydamageradius()) {
      total_size += 2 + 4;
    }

    // optional float RayDamageDistance = 98 [default = -1];
    if (has_raydamagedistance()) {
      total_size += 2 + 4;
    }

    // optional sint32 CallNpcId = 22 [default = -1];
    if (has_callnpcid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->callnpcid());
    }

    // optional bool IsCollision = 84 [default = true];
    if (has_iscollision()) {
      total_size += 2 + 1;
    }

    // optional float WaterSprinkHeight = 110 [default = -1];
    if (has_watersprinkheight()) {
      total_size += 2 + 4;
    }

    // optional float WaterSprinkAngle = 111 [default = -1];
    if (has_watersprinkangle()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional float WaterSprinkAddPercentagePerFrame = 112 [default = -1];
    if (has_watersprinkaddpercentageperframe()) {
      total_size += 2 + 4;
    }

    // optional sint32 LifeTime = 37 [default = -1];
    if (has_lifetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->lifetime());
    }

    // optional bool TakeDamage = 39 [default = false];
    if (has_takedamage()) {
      total_size += 2 + 1;
    }

    // optional sint32 BulletDamageRangeType = 40 [default = 0];
    if (has_bulletdamagerangetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bulletdamagerangetype());
    }

    // optional float BulletDamageRangeRadius = 41 [default = -1];
    if (has_bulletdamagerangeradius()) {
      total_size += 2 + 4;
    }

    // optional float BulletDamageAngle = 42 [default = -1];
    if (has_bulletdamageangle()) {
      total_size += 2 + 4;
    }

    // optional float VerticalLineBegin = 57 [default = -1];
    if (has_verticallinebegin()) {
      total_size += 2 + 4;
    }

    // optional float VerticalLineEnd = 58 [default = -1];
    if (has_verticallineend()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional float HammerAxleRadius = 85 [default = -1];
    if (has_hammeraxleradius()) {
      total_size += 2 + 4;
    }

    // optional float BoundRadius = 86 [default = -1];
    if (has_boundradius()) {
      total_size += 2 + 4;
    }

    // optional .Vector3PB HammerOffset = 87;
    if (has_hammeroffset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hammeroffset());
    }

    // optional float HammerSectorAngle = 88 [default = -1];
    if (has_hammersectorangle()) {
      total_size += 2 + 4;
    }

    // optional float HammerAngleSpeed = 89 [default = -1];
    if (has_hammeranglespeed()) {
      total_size += 2 + 4;
    }

    // optional float SprayGroundAngle = 99 [default = 1];
    if (has_spraygroundangle()) {
      total_size += 2 + 4;
    }

    // optional sint32 SGGreateShit = 100 [default = 1];
    if (has_sggreateshit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->sggreateshit());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional float SGGreateScaleMin = 104 [default = 1];
    if (has_sggreatescalemin()) {
      total_size += 2 + 4;
    }

    // optional float SGGreateScaleMax = 105 [default = 1];
    if (has_sggreatescalemax()) {
      total_size += 2 + 4;
    }

    // optional string HGGreateEffect = 106;
    if (has_hggreateeffect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hggreateeffect());
    }

    // optional sint32 SGLessShit = 101 [default = 1];
    if (has_sglessshit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->sglessshit());
    }

    // optional float SGLessScaleMin = 107 [default = 1];
    if (has_sglessscalemin()) {
      total_size += 2 + 4;
    }

    // optional float SGLessScaleMax = 108 [default = 1];
    if (has_sglessscalemax()) {
      total_size += 2 + 4;
    }

    // optional string HGLessEffect = 109;
    if (has_hglesseffect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hglesseffect());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional sint32 SprayWallShit = 82 [default = 1];
    if (has_spraywallshit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->spraywallshit());
    }

    // optional float SprayWallScaleMin = 47 [default = 1];
    if (has_spraywallscalemin()) {
      total_size += 2 + 4;
    }

    // optional float SprayWallScaleMax = 48 [default = 1];
    if (has_spraywallscalemax()) {
      total_size += 2 + 4;
    }

    // optional string HitSprayWallEffect = 94;
    if (has_hitspraywalleffect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hitspraywalleffect());
    }

    // optional string HitNotSprayWallEffect = 95;
    if (has_hitnotspraywalleffect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hitnotspraywalleffect());
    }

    // optional string HitSpriteEffect = 97;
    if (has_hitspriteeffect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hitspriteeffect());
    }

    // optional sint32 CreateChildTime = 68 [default = -1];
    if (has_createchildtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->createchildtime());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional bool ModelRotate = 59 [default = false];
    if (has_modelrotate()) {
      total_size += 2 + 1;
    }

    // optional float RotateX = 60 [default = 0];
    if (has_rotatex()) {
      total_size += 2 + 4;
    }

    // optional float RotateY = 61 [default = 0];
    if (has_rotatey()) {
      total_size += 2 + 4;
    }

    // optional float RotateZ = 62 [default = 0];
    if (has_rotatez()) {
      total_size += 2 + 4;
    }

    // optional float RotateSpeed = 63 [default = 0];
    if (has_rotatespeed()) {
      total_size += 2 + 4;
    }

    // optional bool Clockwise = 83 [default = false];
    if (has_clockwise()) {
      total_size += 2 + 1;
    }

    // optional bool RotateMoveForward = 66 [default = false];
    if (has_rotatemoveforward()) {
      total_size += 2 + 1;
    }

    // optional float HAngle = 69 [default = 0];
    if (has_hangle()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional float VAngle = 70 [default = 0];
    if (has_vangle()) {
      total_size += 2 + 4;
    }

    // optional bool GroundBounce = 76 [default = false];
    if (has_groundbounce()) {
      total_size += 2 + 1;
    }

    // optional bool WallBounce = 77 [default = false];
    if (has_wallbounce()) {
      total_size += 2 + 1;
    }

    // optional float DampBounce = 78 [default = -1];
    if (has_dampbounce()) {
      total_size += 2 + 4;
    }

    // optional sint32 BounceTimes = 79 [default = -1];
    if (has_bouncetimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bouncetimes());
    }

    // optional float BounceVelocity = 80 [default = -1];
    if (has_bouncevelocity()) {
      total_size += 2 + 4;
    }

  }
  // repeated sint32 SGGreateShitList = 102;
  {
    int data_size = 0;
    for (int i = 0; i < this->sggreateshitlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->sggreateshitlist(i));
    }
    total_size += 2 * this->sggreateshitlist_size() + data_size;
  }

  // repeated sint32 SGLessShitList = 103;
  {
    int data_size = 0;
    for (int i = 0; i < this->sglessshitlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->sglessshitlist(i));
    }
    total_size += 2 * this->sglessshitlist_size() + data_size;
  }

  // repeated .TrajectoryBulletChild ChildArr = 52;
  total_size += 2 * this->childarr_size();
  for (int i = 0; i < this->childarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->childarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryBullet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrajectoryBullet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrajectoryBullet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrajectoryBullet::MergeFrom(const TrajectoryBullet& from) {
  GOOGLE_CHECK_NE(&from, this);
  sggreateshitlist_.MergeFrom(from.sggreateshitlist_);
  sglessshitlist_.MergeFrom(from.sglessshitlist_);
  childarr_.MergeFrom(from.childarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sortindex()) {
      set_sortindex(from.sortindex());
    }
    if (from.has_bulletid()) {
      set_bulletid(from.bulletid());
    }
    if (from.has_trajectorid()) {
      set_trajectorid(from.trajectorid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_tracktype()) {
      set_tracktype(from.tracktype());
    }
    if (from.has_shottime()) {
      set_shottime(from.shottime());
    }
    if (from.has_randomradius()) {
      set_randomradius(from.randomradius());
    }
    if (from.has_bulletmodelname()) {
      set_bulletmodelname(from.bulletmodelname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ismucus()) {
      set_ismucus(from.ismucus());
    }
    if (from.has_bulletscalemin()) {
      set_bulletscalemin(from.bulletscalemin());
    }
    if (from.has_bulletscalemax()) {
      set_bulletscalemax(from.bulletscalemax());
    }
    if (from.has_velocityrandom()) {
      set_velocityrandom(from.velocityrandom());
    }
    if (from.has_velocitymin()) {
      set_velocitymin(from.velocitymin());
    }
    if (from.has_velocitymax()) {
      set_velocitymax(from.velocitymax());
    }
    if (from.has_crosshairtime()) {
      set_crosshairtime(from.crosshairtime());
    }
    if (from.has_mass()) {
      set_mass(from.mass());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_rotatetime()) {
      set_rotatetime(from.rotatetime());
    }
    if (from.has_linemovetime()) {
      set_linemovetime(from.linemovetime());
    }
    if (from.has_linecoefficient1()) {
      set_linecoefficient1(from.linecoefficient1());
    }
    if (from.has_linecoefficient2()) {
      set_linecoefficient2(from.linecoefficient2());
    }
    if (from.has_velocitycoefficient()) {
      set_velocitycoefficient(from.velocitycoefficient());
    }
    if (from.has_bullettype()) {
      set_bullettype(from.bullettype());
    }
    if (from.has_collisionsprite()) {
      set_collisionsprite(from.collisionsprite());
    }
    if (from.has_collisionscene()) {
      set_collisionscene(from.collisionscene());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_raydamagefirst()) {
      set_raydamagefirst(from.raydamagefirst());
    }
    if (from.has_raytimecycle()) {
      set_raytimecycle(from.raytimecycle());
    }
    if (from.has_raydamageradius()) {
      set_raydamageradius(from.raydamageradius());
    }
    if (from.has_raydamagedistance()) {
      set_raydamagedistance(from.raydamagedistance());
    }
    if (from.has_callnpcid()) {
      set_callnpcid(from.callnpcid());
    }
    if (from.has_iscollision()) {
      set_iscollision(from.iscollision());
    }
    if (from.has_watersprinkheight()) {
      set_watersprinkheight(from.watersprinkheight());
    }
    if (from.has_watersprinkangle()) {
      set_watersprinkangle(from.watersprinkangle());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_watersprinkaddpercentageperframe()) {
      set_watersprinkaddpercentageperframe(from.watersprinkaddpercentageperframe());
    }
    if (from.has_lifetime()) {
      set_lifetime(from.lifetime());
    }
    if (from.has_takedamage()) {
      set_takedamage(from.takedamage());
    }
    if (from.has_bulletdamagerangetype()) {
      set_bulletdamagerangetype(from.bulletdamagerangetype());
    }
    if (from.has_bulletdamagerangeradius()) {
      set_bulletdamagerangeradius(from.bulletdamagerangeradius());
    }
    if (from.has_bulletdamageangle()) {
      set_bulletdamageangle(from.bulletdamageangle());
    }
    if (from.has_verticallinebegin()) {
      set_verticallinebegin(from.verticallinebegin());
    }
    if (from.has_verticallineend()) {
      set_verticallineend(from.verticallineend());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_hammeraxleradius()) {
      set_hammeraxleradius(from.hammeraxleradius());
    }
    if (from.has_boundradius()) {
      set_boundradius(from.boundradius());
    }
    if (from.has_hammeroffset()) {
      mutable_hammeroffset()->::Vector3PB::MergeFrom(from.hammeroffset());
    }
    if (from.has_hammersectorangle()) {
      set_hammersectorangle(from.hammersectorangle());
    }
    if (from.has_hammeranglespeed()) {
      set_hammeranglespeed(from.hammeranglespeed());
    }
    if (from.has_spraygroundangle()) {
      set_spraygroundangle(from.spraygroundangle());
    }
    if (from.has_sggreateshit()) {
      set_sggreateshit(from.sggreateshit());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_sggreatescalemin()) {
      set_sggreatescalemin(from.sggreatescalemin());
    }
    if (from.has_sggreatescalemax()) {
      set_sggreatescalemax(from.sggreatescalemax());
    }
    if (from.has_hggreateeffect()) {
      set_hggreateeffect(from.hggreateeffect());
    }
    if (from.has_sglessshit()) {
      set_sglessshit(from.sglessshit());
    }
    if (from.has_sglessscalemin()) {
      set_sglessscalemin(from.sglessscalemin());
    }
    if (from.has_sglessscalemax()) {
      set_sglessscalemax(from.sglessscalemax());
    }
    if (from.has_hglesseffect()) {
      set_hglesseffect(from.hglesseffect());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_spraywallshit()) {
      set_spraywallshit(from.spraywallshit());
    }
    if (from.has_spraywallscalemin()) {
      set_spraywallscalemin(from.spraywallscalemin());
    }
    if (from.has_spraywallscalemax()) {
      set_spraywallscalemax(from.spraywallscalemax());
    }
    if (from.has_hitspraywalleffect()) {
      set_hitspraywalleffect(from.hitspraywalleffect());
    }
    if (from.has_hitnotspraywalleffect()) {
      set_hitnotspraywalleffect(from.hitnotspraywalleffect());
    }
    if (from.has_hitspriteeffect()) {
      set_hitspriteeffect(from.hitspriteeffect());
    }
    if (from.has_createchildtime()) {
      set_createchildtime(from.createchildtime());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_modelrotate()) {
      set_modelrotate(from.modelrotate());
    }
    if (from.has_rotatex()) {
      set_rotatex(from.rotatex());
    }
    if (from.has_rotatey()) {
      set_rotatey(from.rotatey());
    }
    if (from.has_rotatez()) {
      set_rotatez(from.rotatez());
    }
    if (from.has_rotatespeed()) {
      set_rotatespeed(from.rotatespeed());
    }
    if (from.has_clockwise()) {
      set_clockwise(from.clockwise());
    }
    if (from.has_rotatemoveforward()) {
      set_rotatemoveforward(from.rotatemoveforward());
    }
    if (from.has_hangle()) {
      set_hangle(from.hangle());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_vangle()) {
      set_vangle(from.vangle());
    }
    if (from.has_groundbounce()) {
      set_groundbounce(from.groundbounce());
    }
    if (from.has_wallbounce()) {
      set_wallbounce(from.wallbounce());
    }
    if (from.has_dampbounce()) {
      set_dampbounce(from.dampbounce());
    }
    if (from.has_bouncetimes()) {
      set_bouncetimes(from.bouncetimes());
    }
    if (from.has_bouncevelocity()) {
      set_bouncevelocity(from.bouncevelocity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrajectoryBullet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryBullet::CopyFrom(const TrajectoryBullet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryBullet::IsInitialized() const {

  return true;
}

void TrajectoryBullet::Swap(TrajectoryBullet* other) {
  if (other != this) {
    std::swap(sortindex_, other->sortindex_);
    std::swap(bulletid_, other->bulletid_);
    std::swap(trajectorid_, other->trajectorid_);
    std::swap(groupid_, other->groupid_);
    std::swap(tracktype_, other->tracktype_);
    std::swap(shottime_, other->shottime_);
    std::swap(randomradius_, other->randomradius_);
    std::swap(bulletmodelname_, other->bulletmodelname_);
    std::swap(ismucus_, other->ismucus_);
    std::swap(bulletscalemin_, other->bulletscalemin_);
    std::swap(bulletscalemax_, other->bulletscalemax_);
    std::swap(velocityrandom_, other->velocityrandom_);
    std::swap(velocitymin_, other->velocitymin_);
    std::swap(velocitymax_, other->velocitymax_);
    std::swap(crosshairtime_, other->crosshairtime_);
    std::swap(mass_, other->mass_);
    std::swap(rotatetime_, other->rotatetime_);
    std::swap(linemovetime_, other->linemovetime_);
    std::swap(linecoefficient1_, other->linecoefficient1_);
    std::swap(linecoefficient2_, other->linecoefficient2_);
    std::swap(velocitycoefficient_, other->velocitycoefficient_);
    std::swap(bullettype_, other->bullettype_);
    std::swap(collisionsprite_, other->collisionsprite_);
    std::swap(collisionscene_, other->collisionscene_);
    std::swap(raydamagefirst_, other->raydamagefirst_);
    std::swap(raytimecycle_, other->raytimecycle_);
    std::swap(raydamageradius_, other->raydamageradius_);
    std::swap(raydamagedistance_, other->raydamagedistance_);
    std::swap(callnpcid_, other->callnpcid_);
    std::swap(iscollision_, other->iscollision_);
    std::swap(watersprinkheight_, other->watersprinkheight_);
    std::swap(watersprinkangle_, other->watersprinkangle_);
    std::swap(watersprinkaddpercentageperframe_, other->watersprinkaddpercentageperframe_);
    std::swap(lifetime_, other->lifetime_);
    std::swap(takedamage_, other->takedamage_);
    std::swap(bulletdamagerangetype_, other->bulletdamagerangetype_);
    std::swap(bulletdamagerangeradius_, other->bulletdamagerangeradius_);
    std::swap(bulletdamageangle_, other->bulletdamageangle_);
    std::swap(verticallinebegin_, other->verticallinebegin_);
    std::swap(verticallineend_, other->verticallineend_);
    std::swap(hammeraxleradius_, other->hammeraxleradius_);
    std::swap(boundradius_, other->boundradius_);
    std::swap(hammeroffset_, other->hammeroffset_);
    std::swap(hammersectorangle_, other->hammersectorangle_);
    std::swap(hammeranglespeed_, other->hammeranglespeed_);
    std::swap(spraygroundangle_, other->spraygroundangle_);
    std::swap(sggreateshit_, other->sggreateshit_);
    sggreateshitlist_.Swap(&other->sggreateshitlist_);
    std::swap(sggreatescalemin_, other->sggreatescalemin_);
    std::swap(sggreatescalemax_, other->sggreatescalemax_);
    std::swap(hggreateeffect_, other->hggreateeffect_);
    std::swap(sglessshit_, other->sglessshit_);
    sglessshitlist_.Swap(&other->sglessshitlist_);
    std::swap(sglessscalemin_, other->sglessscalemin_);
    std::swap(sglessscalemax_, other->sglessscalemax_);
    std::swap(hglesseffect_, other->hglesseffect_);
    std::swap(spraywallshit_, other->spraywallshit_);
    std::swap(spraywallscalemin_, other->spraywallscalemin_);
    std::swap(spraywallscalemax_, other->spraywallscalemax_);
    std::swap(hitspraywalleffect_, other->hitspraywalleffect_);
    std::swap(hitnotspraywalleffect_, other->hitnotspraywalleffect_);
    std::swap(hitspriteeffect_, other->hitspriteeffect_);
    std::swap(createchildtime_, other->createchildtime_);
    childarr_.Swap(&other->childarr_);
    std::swap(modelrotate_, other->modelrotate_);
    std::swap(rotatex_, other->rotatex_);
    std::swap(rotatey_, other->rotatey_);
    std::swap(rotatez_, other->rotatez_);
    std::swap(rotatespeed_, other->rotatespeed_);
    std::swap(clockwise_, other->clockwise_);
    std::swap(rotatemoveforward_, other->rotatemoveforward_);
    std::swap(hangle_, other->hangle_);
    std::swap(vangle_, other->vangle_);
    std::swap(groundbounce_, other->groundbounce_);
    std::swap(wallbounce_, other->wallbounce_);
    std::swap(dampbounce_, other->dampbounce_);
    std::swap(bouncetimes_, other->bouncetimes_);
    std::swap(bouncevelocity_, other->bouncevelocity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrajectoryBullet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrajectoryBullet_descriptor_;
  metadata.reflection = TrajectoryBullet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrajectoryBulletTrajectory::kTimeLengthFieldNumber;
const int TrajectoryBulletTrajectory::kTrajectoryListFieldNumber;
const int TrajectoryBulletTrajectory::kIdFieldNumber;
const int TrajectoryBulletTrajectory::kBulletListFieldNumber;
#endif  // !_MSC_VER

TrajectoryBulletTrajectory::TrajectoryBulletTrajectory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrajectoryBulletTrajectory::InitAsDefaultInstance() {
}

TrajectoryBulletTrajectory::TrajectoryBulletTrajectory(const TrajectoryBulletTrajectory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrajectoryBulletTrajectory::SharedCtor() {
  _cached_size_ = 0;
  timelength_ = -1;
  id_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrajectoryBulletTrajectory::~TrajectoryBulletTrajectory() {
  SharedDtor();
}

void TrajectoryBulletTrajectory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrajectoryBulletTrajectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryBulletTrajectory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrajectoryBulletTrajectory_descriptor_;
}

const TrajectoryBulletTrajectory& TrajectoryBulletTrajectory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TrajectoryCliRpc_2eproto();
  return *default_instance_;
}

TrajectoryBulletTrajectory* TrajectoryBulletTrajectory::default_instance_ = NULL;

TrajectoryBulletTrajectory* TrajectoryBulletTrajectory::New() const {
  return new TrajectoryBulletTrajectory;
}

void TrajectoryBulletTrajectory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timelength_ = -1;
    id_ = -1;
  }
  trajectorylist_.Clear();
  bulletlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrajectoryBulletTrajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TrajectoryTrajectory TrajectoryList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TrajectoryList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trajectorylist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_TrajectoryList;
        if (input->ExpectTag(16)) goto parse_TimeLength;
        break;
      }

      // optional sint32 TimeLength = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &timelength_)));
          set_has_timelength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Id;
        break;
      }

      // optional sint32 Id = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_BulletList;
        break;
      }

      // repeated .TrajectoryBullet BulletList = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BulletList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bulletlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_BulletList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrajectoryBulletTrajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TrajectoryTrajectory TrajectoryList = 1;
  for (int i = 0; i < this->trajectorylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->trajectorylist(i), output);
  }

  // optional sint32 TimeLength = 2 [default = -1];
  if (has_timelength()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->timelength(), output);
  }

  // optional sint32 Id = 4 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->id(), output);
  }

  // repeated .TrajectoryBullet BulletList = 5;
  for (int i = 0; i < this->bulletlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->bulletlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrajectoryBulletTrajectory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TrajectoryTrajectory TrajectoryList = 1;
  for (int i = 0; i < this->trajectorylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->trajectorylist(i), target);
  }

  // optional sint32 TimeLength = 2 [default = -1];
  if (has_timelength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->timelength(), target);
  }

  // optional sint32 Id = 4 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->id(), target);
  }

  // repeated .TrajectoryBullet BulletList = 5;
  for (int i = 0; i < this->bulletlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->bulletlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrajectoryBulletTrajectory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 TimeLength = 2 [default = -1];
    if (has_timelength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->timelength());
    }

    // optional sint32 Id = 4 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->id());
    }

  }
  // repeated .TrajectoryTrajectory TrajectoryList = 1;
  total_size += 1 * this->trajectorylist_size();
  for (int i = 0; i < this->trajectorylist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trajectorylist(i));
  }

  // repeated .TrajectoryBullet BulletList = 5;
  total_size += 1 * this->bulletlist_size();
  for (int i = 0; i < this->bulletlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bulletlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryBulletTrajectory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrajectoryBulletTrajectory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrajectoryBulletTrajectory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrajectoryBulletTrajectory::MergeFrom(const TrajectoryBulletTrajectory& from) {
  GOOGLE_CHECK_NE(&from, this);
  trajectorylist_.MergeFrom(from.trajectorylist_);
  bulletlist_.MergeFrom(from.bulletlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timelength()) {
      set_timelength(from.timelength());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrajectoryBulletTrajectory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryBulletTrajectory::CopyFrom(const TrajectoryBulletTrajectory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryBulletTrajectory::IsInitialized() const {

  return true;
}

void TrajectoryBulletTrajectory::Swap(TrajectoryBulletTrajectory* other) {
  if (other != this) {
    std::swap(timelength_, other->timelength_);
    trajectorylist_.Swap(&other->trajectorylist_);
    std::swap(id_, other->id_);
    bulletlist_.Swap(&other->bulletlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrajectoryBulletTrajectory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrajectoryBulletTrajectory_descriptor_;
  metadata.reflection = TrajectoryBulletTrajectory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TrajectoryRpcSyncNotify::TrajectoryRpcSyncNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrajectoryRpcSyncNotify::InitAsDefaultInstance() {
}

TrajectoryRpcSyncNotify::TrajectoryRpcSyncNotify(const TrajectoryRpcSyncNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrajectoryRpcSyncNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrajectoryRpcSyncNotify::~TrajectoryRpcSyncNotify() {
  SharedDtor();
}

void TrajectoryRpcSyncNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrajectoryRpcSyncNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryRpcSyncNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrajectoryRpcSyncNotify_descriptor_;
}

const TrajectoryRpcSyncNotify& TrajectoryRpcSyncNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TrajectoryCliRpc_2eproto();
  return *default_instance_;
}

TrajectoryRpcSyncNotify* TrajectoryRpcSyncNotify::default_instance_ = NULL;

TrajectoryRpcSyncNotify* TrajectoryRpcSyncNotify::New() const {
  return new TrajectoryRpcSyncNotify;
}

void TrajectoryRpcSyncNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrajectoryRpcSyncNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void TrajectoryRpcSyncNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrajectoryRpcSyncNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrajectoryRpcSyncNotify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryRpcSyncNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrajectoryRpcSyncNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrajectoryRpcSyncNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrajectoryRpcSyncNotify::MergeFrom(const TrajectoryRpcSyncNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrajectoryRpcSyncNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryRpcSyncNotify::CopyFrom(const TrajectoryRpcSyncNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryRpcSyncNotify::IsInitialized() const {

  return true;
}

void TrajectoryRpcSyncNotify::Swap(TrajectoryRpcSyncNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrajectoryRpcSyncNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrajectoryRpcSyncNotify_descriptor_;
  metadata.reflection = TrajectoryRpcSyncNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrajectoryBulletChild::kIdFieldNumber;
const int TrajectoryBulletChild::kShotTimeTypeFieldNumber;
const int TrajectoryBulletChild::kIsFirstFieldNumber;
const int TrajectoryBulletChild::kTimeMinIntervalFieldNumber;
const int TrajectoryBulletChild::kTimeMaxIntervalFieldNumber;
const int TrajectoryBulletChild::kTimeSeparatorFieldNumber;
const int TrajectoryBulletChild::kTimeGreaterMinIntervalFieldNumber;
const int TrajectoryBulletChild::kTimeGreaterMaxIntervalFieldNumber;
const int TrajectoryBulletChild::kChildMaxCountFieldNumber;
#endif  // !_MSC_VER

TrajectoryBulletChild::TrajectoryBulletChild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrajectoryBulletChild::InitAsDefaultInstance() {
}

TrajectoryBulletChild::TrajectoryBulletChild(const TrajectoryBulletChild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrajectoryBulletChild::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  shottimetype_ = 0;
  isfirst_ = false;
  timemininterval_ = -1;
  timemaxinterval_ = -1;
  timeseparator_ = -1;
  timegreatermininterval_ = -1;
  timegreatermaxinterval_ = -1;
  childmaxcount_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrajectoryBulletChild::~TrajectoryBulletChild() {
  SharedDtor();
}

void TrajectoryBulletChild::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrajectoryBulletChild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryBulletChild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrajectoryBulletChild_descriptor_;
}

const TrajectoryBulletChild& TrajectoryBulletChild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TrajectoryCliRpc_2eproto();
  return *default_instance_;
}

TrajectoryBulletChild* TrajectoryBulletChild::default_instance_ = NULL;

TrajectoryBulletChild* TrajectoryBulletChild::New() const {
  return new TrajectoryBulletChild;
}

void TrajectoryBulletChild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = -1;
    shottimetype_ = 0;
    isfirst_ = false;
    timemininterval_ = -1;
    timemaxinterval_ = -1;
    timeseparator_ = -1;
    timegreatermininterval_ = -1;
    timegreatermaxinterval_ = -1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    childmaxcount_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrajectoryBulletChild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Id = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ShotTimeType;
        break;
      }

      // optional sint32 ShotTimeType = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShotTimeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &shottimetype_)));
          set_has_shottimetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsFirst;
        break;
      }

      // optional bool IsFirst = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsFirst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfirst_)));
          set_has_isfirst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_TimeMaxInterval;
        break;
      }

      // optional sint32 TimeMaxInterval = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeMaxInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &timemaxinterval_)));
          set_has_timemaxinterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_TimeMinInterval;
        break;
      }

      // optional sint32 TimeMinInterval = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeMinInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &timemininterval_)));
          set_has_timemininterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ChildMaxCount;
        break;
      }

      // optional sint32 ChildMaxCount = 8 [default = -1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ChildMaxCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &childmaxcount_)));
          set_has_childmaxcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_TimeSeparator;
        break;
      }

      // optional sint32 TimeSeparator = 9 [default = -1];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeSeparator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &timeseparator_)));
          set_has_timeseparator();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_TimeGreaterMinInterval;
        break;
      }

      // optional sint32 TimeGreaterMinInterval = 10 [default = -1];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeGreaterMinInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &timegreatermininterval_)));
          set_has_timegreatermininterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_TimeGreaterMaxInterval;
        break;
      }

      // optional sint32 TimeGreaterMaxInterval = 11 [default = -1];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeGreaterMaxInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &timegreatermaxinterval_)));
          set_has_timegreatermaxinterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrajectoryBulletChild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Id = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->id(), output);
  }

  // optional sint32 ShotTimeType = 2 [default = 0];
  if (has_shottimetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->shottimetype(), output);
  }

  // optional bool IsFirst = 3 [default = false];
  if (has_isfirst()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isfirst(), output);
  }

  // optional sint32 TimeMaxInterval = 5 [default = -1];
  if (has_timemaxinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->timemaxinterval(), output);
  }

  // optional sint32 TimeMinInterval = 6 [default = -1];
  if (has_timemininterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->timemininterval(), output);
  }

  // optional sint32 ChildMaxCount = 8 [default = -1];
  if (has_childmaxcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->childmaxcount(), output);
  }

  // optional sint32 TimeSeparator = 9 [default = -1];
  if (has_timeseparator()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(9, this->timeseparator(), output);
  }

  // optional sint32 TimeGreaterMinInterval = 10 [default = -1];
  if (has_timegreatermininterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->timegreatermininterval(), output);
  }

  // optional sint32 TimeGreaterMaxInterval = 11 [default = -1];
  if (has_timegreatermaxinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(11, this->timegreatermaxinterval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrajectoryBulletChild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Id = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->id(), target);
  }

  // optional sint32 ShotTimeType = 2 [default = 0];
  if (has_shottimetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->shottimetype(), target);
  }

  // optional bool IsFirst = 3 [default = false];
  if (has_isfirst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isfirst(), target);
  }

  // optional sint32 TimeMaxInterval = 5 [default = -1];
  if (has_timemaxinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->timemaxinterval(), target);
  }

  // optional sint32 TimeMinInterval = 6 [default = -1];
  if (has_timemininterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->timemininterval(), target);
  }

  // optional sint32 ChildMaxCount = 8 [default = -1];
  if (has_childmaxcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->childmaxcount(), target);
  }

  // optional sint32 TimeSeparator = 9 [default = -1];
  if (has_timeseparator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(9, this->timeseparator(), target);
  }

  // optional sint32 TimeGreaterMinInterval = 10 [default = -1];
  if (has_timegreatermininterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->timegreatermininterval(), target);
  }

  // optional sint32 TimeGreaterMaxInterval = 11 [default = -1];
  if (has_timegreatermaxinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(11, this->timegreatermaxinterval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrajectoryBulletChild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Id = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->id());
    }

    // optional sint32 ShotTimeType = 2 [default = 0];
    if (has_shottimetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->shottimetype());
    }

    // optional bool IsFirst = 3 [default = false];
    if (has_isfirst()) {
      total_size += 1 + 1;
    }

    // optional sint32 TimeMinInterval = 6 [default = -1];
    if (has_timemininterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->timemininterval());
    }

    // optional sint32 TimeMaxInterval = 5 [default = -1];
    if (has_timemaxinterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->timemaxinterval());
    }

    // optional sint32 TimeSeparator = 9 [default = -1];
    if (has_timeseparator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->timeseparator());
    }

    // optional sint32 TimeGreaterMinInterval = 10 [default = -1];
    if (has_timegreatermininterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->timegreatermininterval());
    }

    // optional sint32 TimeGreaterMaxInterval = 11 [default = -1];
    if (has_timegreatermaxinterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->timegreatermaxinterval());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional sint32 ChildMaxCount = 8 [default = -1];
    if (has_childmaxcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->childmaxcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryBulletChild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrajectoryBulletChild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrajectoryBulletChild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrajectoryBulletChild::MergeFrom(const TrajectoryBulletChild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_shottimetype()) {
      set_shottimetype(from.shottimetype());
    }
    if (from.has_isfirst()) {
      set_isfirst(from.isfirst());
    }
    if (from.has_timemininterval()) {
      set_timemininterval(from.timemininterval());
    }
    if (from.has_timemaxinterval()) {
      set_timemaxinterval(from.timemaxinterval());
    }
    if (from.has_timeseparator()) {
      set_timeseparator(from.timeseparator());
    }
    if (from.has_timegreatermininterval()) {
      set_timegreatermininterval(from.timegreatermininterval());
    }
    if (from.has_timegreatermaxinterval()) {
      set_timegreatermaxinterval(from.timegreatermaxinterval());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_childmaxcount()) {
      set_childmaxcount(from.childmaxcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrajectoryBulletChild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryBulletChild::CopyFrom(const TrajectoryBulletChild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryBulletChild::IsInitialized() const {

  return true;
}

void TrajectoryBulletChild::Swap(TrajectoryBulletChild* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(shottimetype_, other->shottimetype_);
    std::swap(isfirst_, other->isfirst_);
    std::swap(timemininterval_, other->timemininterval_);
    std::swap(timemaxinterval_, other->timemaxinterval_);
    std::swap(timeseparator_, other->timeseparator_);
    std::swap(timegreatermininterval_, other->timegreatermininterval_);
    std::swap(timegreatermaxinterval_, other->timegreatermaxinterval_);
    std::swap(childmaxcount_, other->childmaxcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrajectoryBulletChild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrajectoryBulletChild_descriptor_;
  metadata.reflection = TrajectoryBulletChild_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
