// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SaidCliRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SaidCliRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SaidRpcSaidAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaidRpcSaidAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaidRpcSaidReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaidRpcSaidReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaidRpcSaidBroadcasNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaidRpcSaidBroadcasNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaidSaidData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaidSaidData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SaidCliRpc_2eproto() {
  protobuf_AddDesc_SaidCliRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SaidCliRpc.proto");
  GOOGLE_CHECK(file != NULL);
  SaidRpcSaidAsk_descriptor_ = file->message_type(0);
  static const int SaidRpcSaidAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaidRpcSaidAsk, value_),
  };
  SaidRpcSaidAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaidRpcSaidAsk_descriptor_,
      SaidRpcSaidAsk::default_instance_,
      SaidRpcSaidAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaidRpcSaidAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaidRpcSaidAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaidRpcSaidAsk));
  SaidRpcSaidReply_descriptor_ = file->message_type(1);
  static const int SaidRpcSaidReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaidRpcSaidReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaidRpcSaidReply, value_),
  };
  SaidRpcSaidReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaidRpcSaidReply_descriptor_,
      SaidRpcSaidReply::default_instance_,
      SaidRpcSaidReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaidRpcSaidReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaidRpcSaidReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaidRpcSaidReply));
  SaidRpcSaidBroadcasNotify_descriptor_ = file->message_type(2);
  static const int SaidRpcSaidBroadcasNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaidRpcSaidBroadcasNotify, value_),
  };
  SaidRpcSaidBroadcasNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaidRpcSaidBroadcasNotify_descriptor_,
      SaidRpcSaidBroadcasNotify::default_instance_,
      SaidRpcSaidBroadcasNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaidRpcSaidBroadcasNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaidRpcSaidBroadcasNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaidRpcSaidBroadcasNotify));
  SaidSaidData_descriptor_ = file->message_type(3);
  static const int SaidSaidData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaidSaidData, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaidSaidData, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaidSaidData, who_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaidSaidData, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaidSaidData, bigtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaidSaidData, smalltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaidSaidData, id_),
  };
  SaidSaidData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaidSaidData_descriptor_,
      SaidSaidData::default_instance_,
      SaidSaidData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaidSaidData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaidSaidData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaidSaidData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SaidCliRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaidRpcSaidAsk_descriptor_, &SaidRpcSaidAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaidRpcSaidReply_descriptor_, &SaidRpcSaidReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaidRpcSaidBroadcasNotify_descriptor_, &SaidRpcSaidBroadcasNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaidSaidData_descriptor_, &SaidSaidData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SaidCliRpc_2eproto() {
  delete SaidRpcSaidAsk::default_instance_;
  delete SaidRpcSaidAsk_reflection_;
  delete SaidRpcSaidReply::default_instance_;
  delete SaidRpcSaidReply_reflection_;
  delete SaidRpcSaidBroadcasNotify::default_instance_;
  delete SaidRpcSaidBroadcasNotify_reflection_;
  delete SaidSaidData::default_instance_;
  delete SaidSaidData_reflection_;
}

void protobuf_AddDesc_SaidCliRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020SaidCliRpc.proto\032\022PublicStruct.proto\"."
    "\n\016SaidRpcSaidAsk\022\034\n\005Value\030\002 \001(\0132\r.SaidSa"
    "idData\"G\n\020SaidRpcSaidReply\022\025\n\006Result\030\001 \001"
    "(\021:\005-9999\022\034\n\005Value\030\002 \001(\0132\r.SaidSaidData\""
    "9\n\031SaidRpcSaidBroadcasNotify\022\034\n\005Value\030\001 "
    "\001(\0132\r.SaidSaidData\"\237\001\n\014SaidSaidData\022\023\n\007C"
    "hannel\030\001 \001(\021:\002-1\022\017\n\007Content\030\002 \001(\t\022\027\n\003Who"
    "\030\003 \001(\0132\n.SmallUser\022\026\n\002To\030\004 \001(\0132\n.SmallUs"
    "er\022\022\n\007BigType\030\005 \001(\021:\0010\022\024\n\tSmallType\030\006 \001("
    "\021:\0010\022\016\n\002ID\030\007 \001(\022:\002-1", 380);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SaidCliRpc.proto", &protobuf_RegisterTypes);
  SaidRpcSaidAsk::default_instance_ = new SaidRpcSaidAsk();
  SaidRpcSaidReply::default_instance_ = new SaidRpcSaidReply();
  SaidRpcSaidBroadcasNotify::default_instance_ = new SaidRpcSaidBroadcasNotify();
  SaidSaidData::default_instance_ = new SaidSaidData();
  SaidRpcSaidAsk::default_instance_->InitAsDefaultInstance();
  SaidRpcSaidReply::default_instance_->InitAsDefaultInstance();
  SaidRpcSaidBroadcasNotify::default_instance_->InitAsDefaultInstance();
  SaidSaidData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SaidCliRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SaidCliRpc_2eproto {
  StaticDescriptorInitializer_SaidCliRpc_2eproto() {
    protobuf_AddDesc_SaidCliRpc_2eproto();
  }
} static_descriptor_initializer_SaidCliRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SaidRpcSaidAsk::kValueFieldNumber;
#endif  // !_MSC_VER

SaidRpcSaidAsk::SaidRpcSaidAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaidRpcSaidAsk::InitAsDefaultInstance() {
  value_ = const_cast< ::SaidSaidData*>(&::SaidSaidData::default_instance());
}

SaidRpcSaidAsk::SaidRpcSaidAsk(const SaidRpcSaidAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaidRpcSaidAsk::SharedCtor() {
  _cached_size_ = 0;
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaidRpcSaidAsk::~SaidRpcSaidAsk() {
  SharedDtor();
}

void SaidRpcSaidAsk::SharedDtor() {
  if (this != default_instance_) {
    delete value_;
  }
}

void SaidRpcSaidAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaidRpcSaidAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaidRpcSaidAsk_descriptor_;
}

const SaidRpcSaidAsk& SaidRpcSaidAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SaidCliRpc_2eproto();
  return *default_instance_;
}

SaidRpcSaidAsk* SaidRpcSaidAsk::default_instance_ = NULL;

SaidRpcSaidAsk* SaidRpcSaidAsk::New() const {
  return new SaidRpcSaidAsk;
}

void SaidRpcSaidAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_value()) {
      if (value_ != NULL) value_->::SaidSaidData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaidRpcSaidAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SaidSaidData Value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaidRpcSaidAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SaidSaidData Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaidRpcSaidAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SaidSaidData Value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaidRpcSaidAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SaidSaidData Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaidRpcSaidAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaidRpcSaidAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaidRpcSaidAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaidRpcSaidAsk::MergeFrom(const SaidRpcSaidAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      mutable_value()->::SaidSaidData::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaidRpcSaidAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaidRpcSaidAsk::CopyFrom(const SaidRpcSaidAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaidRpcSaidAsk::IsInitialized() const {

  return true;
}

void SaidRpcSaidAsk::Swap(SaidRpcSaidAsk* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaidRpcSaidAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaidRpcSaidAsk_descriptor_;
  metadata.reflection = SaidRpcSaidAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaidRpcSaidReply::kResultFieldNumber;
const int SaidRpcSaidReply::kValueFieldNumber;
#endif  // !_MSC_VER

SaidRpcSaidReply::SaidRpcSaidReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaidRpcSaidReply::InitAsDefaultInstance() {
  value_ = const_cast< ::SaidSaidData*>(&::SaidSaidData::default_instance());
}

SaidRpcSaidReply::SaidRpcSaidReply(const SaidRpcSaidReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaidRpcSaidReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaidRpcSaidReply::~SaidRpcSaidReply() {
  SharedDtor();
}

void SaidRpcSaidReply::SharedDtor() {
  if (this != default_instance_) {
    delete value_;
  }
}

void SaidRpcSaidReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaidRpcSaidReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaidRpcSaidReply_descriptor_;
}

const SaidRpcSaidReply& SaidRpcSaidReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SaidCliRpc_2eproto();
  return *default_instance_;
}

SaidRpcSaidReply* SaidRpcSaidReply::default_instance_ = NULL;

SaidRpcSaidReply* SaidRpcSaidReply::New() const {
  return new SaidRpcSaidReply;
}

void SaidRpcSaidReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    if (has_value()) {
      if (value_ != NULL) value_->::SaidSaidData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaidRpcSaidReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Value;
        break;
      }

      // optional .SaidSaidData Value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaidRpcSaidReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional .SaidSaidData Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaidRpcSaidReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional .SaidSaidData Value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaidRpcSaidReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional .SaidSaidData Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaidRpcSaidReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaidRpcSaidReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaidRpcSaidReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaidRpcSaidReply::MergeFrom(const SaidRpcSaidReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_value()) {
      mutable_value()->::SaidSaidData::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaidRpcSaidReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaidRpcSaidReply::CopyFrom(const SaidRpcSaidReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaidRpcSaidReply::IsInitialized() const {

  return true;
}

void SaidRpcSaidReply::Swap(SaidRpcSaidReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaidRpcSaidReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaidRpcSaidReply_descriptor_;
  metadata.reflection = SaidRpcSaidReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaidRpcSaidBroadcasNotify::kValueFieldNumber;
#endif  // !_MSC_VER

SaidRpcSaidBroadcasNotify::SaidRpcSaidBroadcasNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaidRpcSaidBroadcasNotify::InitAsDefaultInstance() {
  value_ = const_cast< ::SaidSaidData*>(&::SaidSaidData::default_instance());
}

SaidRpcSaidBroadcasNotify::SaidRpcSaidBroadcasNotify(const SaidRpcSaidBroadcasNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaidRpcSaidBroadcasNotify::SharedCtor() {
  _cached_size_ = 0;
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaidRpcSaidBroadcasNotify::~SaidRpcSaidBroadcasNotify() {
  SharedDtor();
}

void SaidRpcSaidBroadcasNotify::SharedDtor() {
  if (this != default_instance_) {
    delete value_;
  }
}

void SaidRpcSaidBroadcasNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaidRpcSaidBroadcasNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaidRpcSaidBroadcasNotify_descriptor_;
}

const SaidRpcSaidBroadcasNotify& SaidRpcSaidBroadcasNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SaidCliRpc_2eproto();
  return *default_instance_;
}

SaidRpcSaidBroadcasNotify* SaidRpcSaidBroadcasNotify::default_instance_ = NULL;

SaidRpcSaidBroadcasNotify* SaidRpcSaidBroadcasNotify::New() const {
  return new SaidRpcSaidBroadcasNotify;
}

void SaidRpcSaidBroadcasNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_value()) {
      if (value_ != NULL) value_->::SaidSaidData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaidRpcSaidBroadcasNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SaidSaidData Value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaidRpcSaidBroadcasNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SaidSaidData Value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaidRpcSaidBroadcasNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SaidSaidData Value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaidRpcSaidBroadcasNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SaidSaidData Value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaidRpcSaidBroadcasNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaidRpcSaidBroadcasNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaidRpcSaidBroadcasNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaidRpcSaidBroadcasNotify::MergeFrom(const SaidRpcSaidBroadcasNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      mutable_value()->::SaidSaidData::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaidRpcSaidBroadcasNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaidRpcSaidBroadcasNotify::CopyFrom(const SaidRpcSaidBroadcasNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaidRpcSaidBroadcasNotify::IsInitialized() const {

  return true;
}

void SaidRpcSaidBroadcasNotify::Swap(SaidRpcSaidBroadcasNotify* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaidRpcSaidBroadcasNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaidRpcSaidBroadcasNotify_descriptor_;
  metadata.reflection = SaidRpcSaidBroadcasNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaidSaidData::kChannelFieldNumber;
const int SaidSaidData::kContentFieldNumber;
const int SaidSaidData::kWhoFieldNumber;
const int SaidSaidData::kToFieldNumber;
const int SaidSaidData::kBigTypeFieldNumber;
const int SaidSaidData::kSmallTypeFieldNumber;
const int SaidSaidData::kIDFieldNumber;
#endif  // !_MSC_VER

SaidSaidData::SaidSaidData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaidSaidData::InitAsDefaultInstance() {
  who_ = const_cast< ::SmallUser*>(&::SmallUser::default_instance());
  to_ = const_cast< ::SmallUser*>(&::SmallUser::default_instance());
}

SaidSaidData::SaidSaidData(const SaidSaidData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaidSaidData::SharedCtor() {
  _cached_size_ = 0;
  channel_ = -1;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  who_ = NULL;
  to_ = NULL;
  bigtype_ = 0;
  smalltype_ = 0;
  id_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaidSaidData::~SaidSaidData() {
  SharedDtor();
}

void SaidSaidData::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
    delete who_;
    delete to_;
  }
}

void SaidSaidData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaidSaidData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaidSaidData_descriptor_;
}

const SaidSaidData& SaidSaidData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SaidCliRpc_2eproto();
  return *default_instance_;
}

SaidSaidData* SaidSaidData::default_instance_ = NULL;

SaidSaidData* SaidSaidData::New() const {
  return new SaidSaidData;
}

void SaidSaidData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_ = -1;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_who()) {
      if (who_ != NULL) who_->::SmallUser::Clear();
    }
    if (has_to()) {
      if (to_ != NULL) to_->::SmallUser::Clear();
    }
    bigtype_ = 0;
    smalltype_ = 0;
    id_ = GOOGLE_LONGLONG(-1);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaidSaidData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Channel = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Content;
        break;
      }

      // optional string Content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Who;
        break;
      }

      // optional .SmallUser Who = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Who:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_who()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_To;
        break;
      }

      // optional .SmallUser To = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_To:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_BigType;
        break;
      }

      // optional sint32 BigType = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BigType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bigtype_)));
          set_has_bigtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_SmallType;
        break;
      }

      // optional sint32 SmallType = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SmallType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &smalltype_)));
          set_has_smalltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ID;
        break;
      }

      // optional sint64 ID = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaidSaidData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Channel = 1 [default = -1];
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->channel(), output);
  }

  // optional string Content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }

  // optional .SmallUser Who = 3;
  if (has_who()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->who(), output);
  }

  // optional .SmallUser To = 4;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->to(), output);
  }

  // optional sint32 BigType = 5 [default = 0];
  if (has_bigtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->bigtype(), output);
  }

  // optional sint32 SmallType = 6 [default = 0];
  if (has_smalltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->smalltype(), output);
  }

  // optional sint64 ID = 7 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(7, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaidSaidData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Channel = 1 [default = -1];
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->channel(), target);
  }

  // optional string Content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  // optional .SmallUser Who = 3;
  if (has_who()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->who(), target);
  }

  // optional .SmallUser To = 4;
  if (has_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->to(), target);
  }

  // optional sint32 BigType = 5 [default = 0];
  if (has_bigtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->bigtype(), target);
  }

  // optional sint32 SmallType = 6 [default = 0];
  if (has_smalltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->smalltype(), target);
  }

  // optional sint64 ID = 7 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(7, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaidSaidData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Channel = 1 [default = -1];
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->channel());
    }

    // optional string Content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional .SmallUser Who = 3;
    if (has_who()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->who());
    }

    // optional .SmallUser To = 4;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->to());
    }

    // optional sint32 BigType = 5 [default = 0];
    if (has_bigtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bigtype());
    }

    // optional sint32 SmallType = 6 [default = 0];
    if (has_smalltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->smalltype());
    }

    // optional sint64 ID = 7 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaidSaidData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaidSaidData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaidSaidData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaidSaidData::MergeFrom(const SaidSaidData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_who()) {
      mutable_who()->::SmallUser::MergeFrom(from.who());
    }
    if (from.has_to()) {
      mutable_to()->::SmallUser::MergeFrom(from.to());
    }
    if (from.has_bigtype()) {
      set_bigtype(from.bigtype());
    }
    if (from.has_smalltype()) {
      set_smalltype(from.smalltype());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaidSaidData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaidSaidData::CopyFrom(const SaidSaidData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaidSaidData::IsInitialized() const {

  return true;
}

void SaidSaidData::Swap(SaidSaidData* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(content_, other->content_);
    std::swap(who_, other->who_);
    std::swap(to_, other->to_);
    std::swap(bigtype_, other->bigtype_);
    std::swap(smalltype_, other->smalltype_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaidSaidData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaidSaidData_descriptor_;
  metadata.reflection = SaidSaidData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
