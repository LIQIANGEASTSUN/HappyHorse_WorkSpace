// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LoginCliRpc.proto

#ifndef PROTOBUF_LoginCliRpc_2eproto__INCLUDED
#define PROTOBUF_LoginCliRpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "PublicStruct.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_LoginCliRpc_2eproto();
void protobuf_AssignDesc_LoginCliRpc_2eproto();
void protobuf_ShutdownFile_LoginCliRpc_2eproto();

class LoginRpcReadyAsk;
class LoginRpcReadyReply;
class LoginRpcStartNotify;
class LoginUser;

// ===================================================================

class LoginRpcReadyAsk : public ::google::protobuf::Message {
 public:
  LoginRpcReadyAsk();
  virtual ~LoginRpcReadyAsk();

  LoginRpcReadyAsk(const LoginRpcReadyAsk& from);

  inline LoginRpcReadyAsk& operator=(const LoginRpcReadyAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRpcReadyAsk& default_instance();

  void Swap(LoginRpcReadyAsk* other);

  // implements Message ----------------------------------------------

  LoginRpcReadyAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRpcReadyAsk& from);
  void MergeFrom(const LoginRpcReadyAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LoginRpcReadyAsk)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_LoginCliRpc_2eproto();
  friend void protobuf_AssignDesc_LoginCliRpc_2eproto();
  friend void protobuf_ShutdownFile_LoginCliRpc_2eproto();

  void InitAsDefaultInstance();
  static LoginRpcReadyAsk* default_instance_;
};
// -------------------------------------------------------------------

class LoginRpcReadyReply : public ::google::protobuf::Message {
 public:
  LoginRpcReadyReply();
  virtual ~LoginRpcReadyReply();

  LoginRpcReadyReply(const LoginRpcReadyReply& from);

  inline LoginRpcReadyReply& operator=(const LoginRpcReadyReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRpcReadyReply& default_instance();

  void Swap(LoginRpcReadyReply* other);

  // implements Message ----------------------------------------------

  LoginRpcReadyReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRpcReadyReply& from);
  void MergeFrom(const LoginRpcReadyReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = 0];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional sint32 RemainTime = 2 [default = -1];
  inline bool has_remaintime() const;
  inline void clear_remaintime();
  static const int kRemainTimeFieldNumber = 2;
  inline ::google::protobuf::int32 remaintime() const;
  inline void set_remaintime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LoginRpcReadyReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_remaintime();
  inline void clear_has_remaintime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 remaintime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_LoginCliRpc_2eproto();
  friend void protobuf_AssignDesc_LoginCliRpc_2eproto();
  friend void protobuf_ShutdownFile_LoginCliRpc_2eproto();

  void InitAsDefaultInstance();
  static LoginRpcReadyReply* default_instance_;
};
// -------------------------------------------------------------------

class LoginRpcStartNotify : public ::google::protobuf::Message {
 public:
  LoginRpcStartNotify();
  virtual ~LoginRpcStartNotify();

  LoginRpcStartNotify(const LoginRpcStartNotify& from);

  inline LoginRpcStartNotify& operator=(const LoginRpcStartNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRpcStartNotify& default_instance();

  void Swap(LoginRpcStartNotify* other);

  // implements Message ----------------------------------------------

  LoginRpcStartNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRpcStartNotify& from);
  void MergeFrom(const LoginRpcStartNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Uid = 1 [default = 0];
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional sint32 Sumtime = 2 [default = 0];
  inline bool has_sumtime() const;
  inline void clear_sumtime();
  static const int kSumtimeFieldNumber = 2;
  inline ::google::protobuf::int32 sumtime() const;
  inline void set_sumtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LoginRpcStartNotify)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_sumtime();
  inline void clear_has_sumtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 sumtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_LoginCliRpc_2eproto();
  friend void protobuf_AssignDesc_LoginCliRpc_2eproto();
  friend void protobuf_ShutdownFile_LoginCliRpc_2eproto();

  void InitAsDefaultInstance();
  static LoginRpcStartNotify* default_instance_;
};
// -------------------------------------------------------------------

class LoginUser : public ::google::protobuf::Message {
 public:
  LoginUser();
  virtual ~LoginUser();

  LoginUser(const LoginUser& from);

  inline LoginUser& operator=(const LoginUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginUser& default_instance();

  void Swap(LoginUser* other);

  // implements Message ----------------------------------------------

  LoginUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginUser& from);
  void MergeFrom(const LoginUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Uid = 1 [default = 0];
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional sint32 Group = 2 [default = 0];
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 2;
  inline ::google::protobuf::int32 group() const;
  inline void set_group(::google::protobuf::int32 value);

  // optional .Vector3 Pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline const ::Vector3& pos() const;
  inline ::Vector3* mutable_pos();
  inline ::Vector3* release_pos();
  inline void set_allocated_pos(::Vector3* pos);

  // optional sint32 HAngle = 4 [default = -1];
  inline bool has_hangle() const;
  inline void clear_hangle();
  static const int kHAngleFieldNumber = 4;
  inline ::google::protobuf::int32 hangle() const;
  inline void set_hangle(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LoginUser)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_hangle();
  inline void clear_has_hangle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 group_;
  ::Vector3* pos_;
  ::google::protobuf::int32 hangle_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_LoginCliRpc_2eproto();
  friend void protobuf_AssignDesc_LoginCliRpc_2eproto();
  friend void protobuf_ShutdownFile_LoginCliRpc_2eproto();

  void InitAsDefaultInstance();
  static LoginUser* default_instance_;
};
// ===================================================================


// ===================================================================

// LoginRpcReadyAsk

// -------------------------------------------------------------------

// LoginRpcReadyReply

// optional sint32 Result = 1 [default = 0];
inline bool LoginRpcReadyReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRpcReadyReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRpcReadyReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRpcReadyReply::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 LoginRpcReadyReply::result() const {
  return result_;
}
inline void LoginRpcReadyReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional sint32 RemainTime = 2 [default = -1];
inline bool LoginRpcReadyReply::has_remaintime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRpcReadyReply::set_has_remaintime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRpcReadyReply::clear_has_remaintime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRpcReadyReply::clear_remaintime() {
  remaintime_ = -1;
  clear_has_remaintime();
}
inline ::google::protobuf::int32 LoginRpcReadyReply::remaintime() const {
  return remaintime_;
}
inline void LoginRpcReadyReply::set_remaintime(::google::protobuf::int32 value) {
  set_has_remaintime();
  remaintime_ = value;
}

// -------------------------------------------------------------------

// LoginRpcStartNotify

// optional sint32 Uid = 1 [default = 0];
inline bool LoginRpcStartNotify::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRpcStartNotify::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRpcStartNotify::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRpcStartNotify::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 LoginRpcStartNotify::uid() const {
  return uid_;
}
inline void LoginRpcStartNotify::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
}

// optional sint32 Sumtime = 2 [default = 0];
inline bool LoginRpcStartNotify::has_sumtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRpcStartNotify::set_has_sumtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRpcStartNotify::clear_has_sumtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRpcStartNotify::clear_sumtime() {
  sumtime_ = 0;
  clear_has_sumtime();
}
inline ::google::protobuf::int32 LoginRpcStartNotify::sumtime() const {
  return sumtime_;
}
inline void LoginRpcStartNotify::set_sumtime(::google::protobuf::int32 value) {
  set_has_sumtime();
  sumtime_ = value;
}

// -------------------------------------------------------------------

// LoginUser

// optional sint32 Uid = 1 [default = 0];
inline bool LoginUser::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginUser::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginUser::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginUser::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 LoginUser::uid() const {
  return uid_;
}
inline void LoginUser::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
}

// optional sint32 Group = 2 [default = 0];
inline bool LoginUser::has_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginUser::set_has_group() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginUser::clear_has_group() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginUser::clear_group() {
  group_ = 0;
  clear_has_group();
}
inline ::google::protobuf::int32 LoginUser::group() const {
  return group_;
}
inline void LoginUser::set_group(::google::protobuf::int32 value) {
  set_has_group();
  group_ = value;
}

// optional .Vector3 Pos = 3;
inline bool LoginUser::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginUser::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginUser::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginUser::clear_pos() {
  if (pos_ != NULL) pos_->::Vector3::Clear();
  clear_has_pos();
}
inline const ::Vector3& LoginUser::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::Vector3* LoginUser::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::Vector3;
  return pos_;
}
inline ::Vector3* LoginUser::release_pos() {
  clear_has_pos();
  ::Vector3* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void LoginUser::set_allocated_pos(::Vector3* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// optional sint32 HAngle = 4 [default = -1];
inline bool LoginUser::has_hangle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoginUser::set_has_hangle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoginUser::clear_has_hangle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoginUser::clear_hangle() {
  hangle_ = -1;
  clear_has_hangle();
}
inline ::google::protobuf::int32 LoginUser::hangle() const {
  return hangle_;
}
inline void LoginUser::set_hangle(::google::protobuf::int32 value) {
  set_has_hangle();
  hangle_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LoginCliRpc_2eproto__INCLUDED
