// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FightCliRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FightCliRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* FightFightUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightFightUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightRpcSyncUserInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightRpcSyncUserInfoNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightRpcStartNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightRpcStartNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightRpcSyncUserPropNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightRpcSyncUserPropNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightUserProp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightUserProp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightRpcInsertRoomAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightRpcInsertRoomAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightRpcInsertRoomReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightRpcInsertRoomReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightBuffData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightBuffData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightRpcHPChangeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightRpcHPChangeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightRpcRoveOverNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightRpcRoveOverNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightRpcSkillTransferNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightRpcSkillTransferNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FightCliRpc_2eproto() {
  protobuf_AddDesc_FightCliRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FightCliRpc.proto");
  GOOGLE_CHECK(file != NULL);
  FightFightUser_descriptor_ = file->message_type(0);
  static const int FightFightUser_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightFightUser, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightFightUser, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightFightUser, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightFightUser, stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightFightUser, shake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightFightUser, vangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightFightUser, hangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightFightUser, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightFightUser, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightFightUser, forwardvec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightFightUser, footvec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightFightUser, prop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightFightUser, avatarid_),
  };
  FightFightUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightFightUser_descriptor_,
      FightFightUser::default_instance_,
      FightFightUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightFightUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightFightUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightFightUser));
  FightRpcSyncUserInfoNotify_descriptor_ = file->message_type(1);
  static const int FightRpcSyncUserInfoNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcSyncUserInfoNotify, fightuserinfos_),
  };
  FightRpcSyncUserInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightRpcSyncUserInfoNotify_descriptor_,
      FightRpcSyncUserInfoNotify::default_instance_,
      FightRpcSyncUserInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcSyncUserInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcSyncUserInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightRpcSyncUserInfoNotify));
  FightRpcStartNotify_descriptor_ = file->message_type(2);
  static const int FightRpcStartNotify_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcStartNotify, fightuserinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcStartNotify, sumtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcStartNotify, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcStartNotify, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcStartNotify, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcStartNotify, teamflagc0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcStartNotify, teamflagc1_),
  };
  FightRpcStartNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightRpcStartNotify_descriptor_,
      FightRpcStartNotify::default_instance_,
      FightRpcStartNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcStartNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcStartNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightRpcStartNotify));
  FightRpcSyncUserPropNotify_descriptor_ = file->message_type(3);
  static const int FightRpcSyncUserPropNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcSyncUserPropNotify, uservalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcSyncUserPropNotify, type_),
  };
  FightRpcSyncUserPropNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightRpcSyncUserPropNotify_descriptor_,
      FightRpcSyncUserPropNotify::default_instance_,
      FightRpcSyncUserPropNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcSyncUserPropNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcSyncUserPropNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightRpcSyncUserPropNotify));
  FightUserProp_descriptor_ = file->message_type(4);
  static const int FightUserProp_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightUserProp, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightUserProp, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightUserProp, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightUserProp, stunt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightUserProp, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightUserProp, ismonster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightUserProp, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightUserProp, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightUserProp, revivetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightUserProp, revivetimesys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightUserProp, killpeoplenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightUserProp, buffv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightUserProp, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightUserProp, seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightUserProp, mainmonster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightUserProp, avatarid_),
  };
  FightUserProp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightUserProp_descriptor_,
      FightUserProp::default_instance_,
      FightUserProp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightUserProp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightUserProp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightUserProp));
  FightRpcInsertRoomAsk_descriptor_ = file->message_type(5);
  static const int FightRpcInsertRoomAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcInsertRoomAsk, key_),
  };
  FightRpcInsertRoomAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightRpcInsertRoomAsk_descriptor_,
      FightRpcInsertRoomAsk::default_instance_,
      FightRpcInsertRoomAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcInsertRoomAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcInsertRoomAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightRpcInsertRoomAsk));
  FightRpcInsertRoomReply_descriptor_ = file->message_type(6);
  static const int FightRpcInsertRoomReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcInsertRoomReply, result_),
  };
  FightRpcInsertRoomReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightRpcInsertRoomReply_descriptor_,
      FightRpcInsertRoomReply::default_instance_,
      FightRpcInsertRoomReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcInsertRoomReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcInsertRoomReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightRpcInsertRoomReply));
  FightBuffData_descriptor_ = file->message_type(7);
  static const int FightBuffData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightBuffData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightBuffData, lifttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightBuffData, pos_),
  };
  FightBuffData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightBuffData_descriptor_,
      FightBuffData::default_instance_,
      FightBuffData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightBuffData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightBuffData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightBuffData));
  FightRpcHPChangeNotify_descriptor_ = file->message_type(8);
  static const int FightRpcHPChangeNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcHPChangeNotify, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcHPChangeNotify, objsrcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcHPChangeNotify, changehp_),
  };
  FightRpcHPChangeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightRpcHPChangeNotify_descriptor_,
      FightRpcHPChangeNotify::default_instance_,
      FightRpcHPChangeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcHPChangeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcHPChangeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightRpcHPChangeNotify));
  FightRpcRoveOverNotify_descriptor_ = file->message_type(9);
  static const int FightRpcRoveOverNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcRoveOverNotify, timer_),
  };
  FightRpcRoveOverNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightRpcRoveOverNotify_descriptor_,
      FightRpcRoveOverNotify::default_instance_,
      FightRpcRoveOverNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcRoveOverNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcRoveOverNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightRpcRoveOverNotify));
  FightRpcSkillTransferNotify_descriptor_ = file->message_type(10);
  static const int FightRpcSkillTransferNotify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcSkillTransferNotify, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcSkillTransferNotify, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcSkillTransferNotify, targetobjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcSkillTransferNotify, targetpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcSkillTransferNotify, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcSkillTransferNotify, type_),
  };
  FightRpcSkillTransferNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightRpcSkillTransferNotify_descriptor_,
      FightRpcSkillTransferNotify::default_instance_,
      FightRpcSkillTransferNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcSkillTransferNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcSkillTransferNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightRpcSkillTransferNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FightCliRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightFightUser_descriptor_, &FightFightUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightRpcSyncUserInfoNotify_descriptor_, &FightRpcSyncUserInfoNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightRpcStartNotify_descriptor_, &FightRpcStartNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightRpcSyncUserPropNotify_descriptor_, &FightRpcSyncUserPropNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightUserProp_descriptor_, &FightUserProp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightRpcInsertRoomAsk_descriptor_, &FightRpcInsertRoomAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightRpcInsertRoomReply_descriptor_, &FightRpcInsertRoomReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightBuffData_descriptor_, &FightBuffData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightRpcHPChangeNotify_descriptor_, &FightRpcHPChangeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightRpcRoveOverNotify_descriptor_, &FightRpcRoveOverNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightRpcSkillTransferNotify_descriptor_, &FightRpcSkillTransferNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FightCliRpc_2eproto() {
  delete FightFightUser::default_instance_;
  delete FightFightUser_reflection_;
  delete FightRpcSyncUserInfoNotify::default_instance_;
  delete FightRpcSyncUserInfoNotify_reflection_;
  delete FightRpcStartNotify::default_instance_;
  delete FightRpcStartNotify_reflection_;
  delete FightRpcSyncUserPropNotify::default_instance_;
  delete FightRpcSyncUserPropNotify_reflection_;
  delete FightUserProp::default_instance_;
  delete FightUserProp_reflection_;
  delete FightRpcInsertRoomAsk::default_instance_;
  delete FightRpcInsertRoomAsk_reflection_;
  delete FightRpcInsertRoomReply::default_instance_;
  delete FightRpcInsertRoomReply_reflection_;
  delete FightBuffData::default_instance_;
  delete FightBuffData_reflection_;
  delete FightRpcHPChangeNotify::default_instance_;
  delete FightRpcHPChangeNotify_reflection_;
  delete FightRpcRoveOverNotify::default_instance_;
  delete FightRpcRoveOverNotify_reflection_;
  delete FightRpcSkillTransferNotify::default_instance_;
  delete FightRpcSkillTransferNotify_reflection_;
}

void protobuf_AddDesc_FightCliRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021FightCliRpc.proto\032\022PublicStruct.proto\""
    "\257\002\n\016FightFightUser\022\016\n\003Uid\030\001 \001(\022:\0010\022\020\n\005Ob"
    "jId\030\013 \001(\021:\0010\022\027\n\003Pos\030\002 \001(\0132\n.Vector3PB\022\017\n"
    "\004Stat\030\003 \001(\021:\0010\022\024\n\005Shake\030\004 \001(\010:\005false\022\021\n\006"
    "VAngle\030\005 \001(\002:\0010\022\021\n\006HAngle\030\006 \001(\002:\0010\022\020\n\005Gr"
    "oup\030\007 \001(\021:\0010\022\022\n\006HeroID\030\010 \001(\021:\002-1\022\036\n\nForw"
    "ardVec\030\t \001(\0132\n.Vector3PB\022\033\n\007FootVec\030\n \001("
    "\0132\n.Vector3PB\022\034\n\004Prop\030\014 \001(\0132\016.FightUserP"
    "rop\022\024\n\010AvatarID\030\r \001(\021:\002-1\"E\n\032FightRpcSyn"
    "cUserInfoNotify\022\'\n\016FightUserInfos\030\001 \003(\0132"
    "\017.FightFightUser\"\267\001\n\023FightRpcStartNotify"
    "\022\'\n\016FightUserInfos\030\001 \003(\0132\017.FightFightUse"
    "r\022\022\n\007Sumtime\030\002 \001(\021:\0010\022\016\n\003Uid\030\003 \001(\022:\0010\022\022\n"
    "\007SceneID\030\004 \001(\021:\0011\022\021\n\005ObjId\030\005 \001(\021:\002-1\022\025\n\n"
    "TeamFlagC0\030\006 \001(\021:\0011\022\025\n\nTeamFlagC1\030\007 \001(\021:"
    "\0011\"P\n\032FightRpcSyncUserPropNotify\022!\n\tUser"
    "Value\030\001 \003(\0132\016.FightUserProp\022\017\n\004Type\030\007 \001("
    "\021:\0010\"\340\002\n\rFightUserProp\022\020\n\005ObjId\030\001 \001(\021:\0010"
    "\022\r\n\002Hp\030\002 \001(\002:\0010\022\021\n\006Energy\030\003 \001(\002:\0010\022\020\n\005St"
    "unt\030\004 \001(\002:\0010\022\022\n\006HeroID\030\005 \001(\021:\002-1\022\025\n\tIsMo"
    "nster\030\006 \001(\021:\002-1\022\020\n\005Group\030\010 \001(\021:\0010\022\020\n\005Sta"
    "te\030\t \001(\021:\0010\022\025\n\nReviveTime\030\n \001(\022:\0010\022\030\n\rRe"
    "viveTimeSys\030\013 \001(\022:\0010\022\030\n\rKillPeopleNum\030\014 "
    "\001(\021:\0010\022\035\n\005BuffV\030\r \003(\0132\016.FightBuffData\022\020\n"
    "\004Flag\030\016 \001(\021:\002-1\022\017\n\004Seed\030\020 \001(\021:\0010\022\027\n\013Main"
    "Monster\030\023 \001(\022:\002-1\022\024\n\010AvatarID\030\024 \001(\021:\002-1\""
    "$\n\025FightRpcInsertRoomAsk\022\013\n\003Key\030\001 \001(\t\"0\n"
    "\027FightRpcInsertRoomReply\022\025\n\006Result\030\001 \001(\021"
    ":\005-9999\"M\n\rFightBuffData\022\016\n\002ID\030\002 \001(\021:\002-1"
    "\022\023\n\010Lifttime\030\005 \001(\021:\0010\022\027\n\003Pos\030\t \001(\0132\n.Vec"
    "tor3PB\"W\n\026FightRpcHPChangeNotify\022\021\n\005Obji"
    "d\030\001 \001(\021:\002-1\022\024\n\010ObjSrcId\030\002 \001(\021:\002-1\022\024\n\010Cha"
    "ngeHP\030\003 \001(\021:\002-1\"*\n\026FightRpcRoveOverNotif"
    "y\022\020\n\005Timer\030\001 \001(\021:\0010\"\240\001\n\033FightRpcSkillTra"
    "nsferNotify\022\021\n\005ObjId\030\001 \001(\021:\002-1\022\023\n\007SkillI"
    "d\030\002 \001(\021:\002-1\022\027\n\013TargetObjId\030\003 \001(\021:\002-1\022\035\n\t"
    "TargetPos\030\004 \001(\0132\n.Vector3PB\022\017\n\003Ret\030\005 \001(\021"
    ":\002-1\022\020\n\004Type\030\006 \001(\021:\002-1", 1502);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FightCliRpc.proto", &protobuf_RegisterTypes);
  FightFightUser::default_instance_ = new FightFightUser();
  FightRpcSyncUserInfoNotify::default_instance_ = new FightRpcSyncUserInfoNotify();
  FightRpcStartNotify::default_instance_ = new FightRpcStartNotify();
  FightRpcSyncUserPropNotify::default_instance_ = new FightRpcSyncUserPropNotify();
  FightUserProp::default_instance_ = new FightUserProp();
  FightRpcInsertRoomAsk::default_instance_ = new FightRpcInsertRoomAsk();
  FightRpcInsertRoomReply::default_instance_ = new FightRpcInsertRoomReply();
  FightBuffData::default_instance_ = new FightBuffData();
  FightRpcHPChangeNotify::default_instance_ = new FightRpcHPChangeNotify();
  FightRpcRoveOverNotify::default_instance_ = new FightRpcRoveOverNotify();
  FightRpcSkillTransferNotify::default_instance_ = new FightRpcSkillTransferNotify();
  FightFightUser::default_instance_->InitAsDefaultInstance();
  FightRpcSyncUserInfoNotify::default_instance_->InitAsDefaultInstance();
  FightRpcStartNotify::default_instance_->InitAsDefaultInstance();
  FightRpcSyncUserPropNotify::default_instance_->InitAsDefaultInstance();
  FightUserProp::default_instance_->InitAsDefaultInstance();
  FightRpcInsertRoomAsk::default_instance_->InitAsDefaultInstance();
  FightRpcInsertRoomReply::default_instance_->InitAsDefaultInstance();
  FightBuffData::default_instance_->InitAsDefaultInstance();
  FightRpcHPChangeNotify::default_instance_->InitAsDefaultInstance();
  FightRpcRoveOverNotify::default_instance_->InitAsDefaultInstance();
  FightRpcSkillTransferNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FightCliRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FightCliRpc_2eproto {
  StaticDescriptorInitializer_FightCliRpc_2eproto() {
    protobuf_AddDesc_FightCliRpc_2eproto();
  }
} static_descriptor_initializer_FightCliRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FightFightUser::kUidFieldNumber;
const int FightFightUser::kObjIdFieldNumber;
const int FightFightUser::kPosFieldNumber;
const int FightFightUser::kStatFieldNumber;
const int FightFightUser::kShakeFieldNumber;
const int FightFightUser::kVAngleFieldNumber;
const int FightFightUser::kHAngleFieldNumber;
const int FightFightUser::kGroupFieldNumber;
const int FightFightUser::kHeroIDFieldNumber;
const int FightFightUser::kForwardVecFieldNumber;
const int FightFightUser::kFootVecFieldNumber;
const int FightFightUser::kPropFieldNumber;
const int FightFightUser::kAvatarIDFieldNumber;
#endif  // !_MSC_VER

FightFightUser::FightFightUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FightFightUser::InitAsDefaultInstance() {
  pos_ = const_cast< ::Vector3PB*>(&::Vector3PB::default_instance());
  forwardvec_ = const_cast< ::Vector3PB*>(&::Vector3PB::default_instance());
  footvec_ = const_cast< ::Vector3PB*>(&::Vector3PB::default_instance());
  prop_ = const_cast< ::FightUserProp*>(&::FightUserProp::default_instance());
}

FightFightUser::FightFightUser(const FightFightUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FightFightUser::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  objid_ = 0;
  pos_ = NULL;
  stat_ = 0;
  shake_ = false;
  vangle_ = 0;
  hangle_ = 0;
  group_ = 0;
  heroid_ = -1;
  forwardvec_ = NULL;
  footvec_ = NULL;
  prop_ = NULL;
  avatarid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightFightUser::~FightFightUser() {
  SharedDtor();
}

void FightFightUser::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete forwardvec_;
    delete footvec_;
    delete prop_;
  }
}

void FightFightUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightFightUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightFightUser_descriptor_;
}

const FightFightUser& FightFightUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightCliRpc_2eproto();
  return *default_instance_;
}

FightFightUser* FightFightUser::default_instance_ = NULL;

FightFightUser* FightFightUser::New() const {
  return new FightFightUser;
}

void FightFightUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    objid_ = 0;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Vector3PB::Clear();
    }
    stat_ = 0;
    shake_ = false;
    vangle_ = 0;
    hangle_ = 0;
    group_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    heroid_ = -1;
    if (has_forwardvec()) {
      if (forwardvec_ != NULL) forwardvec_->::Vector3PB::Clear();
    }
    if (has_footvec()) {
      if (footvec_ != NULL) footvec_->::Vector3PB::Clear();
    }
    if (has_prop()) {
      if (prop_ != NULL) prop_->::FightUserProp::Clear();
    }
    avatarid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightFightUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 Uid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Pos;
        break;
      }

      // optional .Vector3PB Pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Stat;
        break;
      }

      // optional sint32 Stat = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Stat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &stat_)));
          set_has_stat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Shake;
        break;
      }

      // optional bool Shake = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Shake:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shake_)));
          set_has_shake();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_VAngle;
        break;
      }

      // optional float VAngle = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_VAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vangle_)));
          set_has_vangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_HAngle;
        break;
      }

      // optional float HAngle = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_HAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hangle_)));
          set_has_hangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Group;
        break;
      }

      // optional sint32 Group = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_HeroID;
        break;
      }

      // optional sint32 HeroID = 8 [default = -1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HeroID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_ForwardVec;
        break;
      }

      // optional .Vector3PB ForwardVec = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ForwardVec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_forwardvec()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_FootVec;
        break;
      }

      // optional .Vector3PB FootVec = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FootVec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_footvec()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ObjId;
        break;
      }

      // optional sint32 ObjId = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ObjId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_Prop;
        break;
      }

      // optional .FightUserProp Prop = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Prop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_AvatarID;
        break;
      }

      // optional sint32 AvatarID = 13 [default = -1];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AvatarID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &avatarid_)));
          set_has_avatarid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightFightUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint64 Uid = 1 [default = 0];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->uid(), output);
  }

  // optional .Vector3PB Pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }

  // optional sint32 Stat = 3 [default = 0];
  if (has_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->stat(), output);
  }

  // optional bool Shake = 4 [default = false];
  if (has_shake()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->shake(), output);
  }

  // optional float VAngle = 5 [default = 0];
  if (has_vangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->vangle(), output);
  }

  // optional float HAngle = 6 [default = 0];
  if (has_hangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->hangle(), output);
  }

  // optional sint32 Group = 7 [default = 0];
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->group(), output);
  }

  // optional sint32 HeroID = 8 [default = -1];
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->heroid(), output);
  }

  // optional .Vector3PB ForwardVec = 9;
  if (has_forwardvec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->forwardvec(), output);
  }

  // optional .Vector3PB FootVec = 10;
  if (has_footvec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->footvec(), output);
  }

  // optional sint32 ObjId = 11 [default = 0];
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(11, this->objid(), output);
  }

  // optional .FightUserProp Prop = 12;
  if (has_prop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->prop(), output);
  }

  // optional sint32 AvatarID = 13 [default = -1];
  if (has_avatarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(13, this->avatarid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FightFightUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint64 Uid = 1 [default = 0];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->uid(), target);
  }

  // optional .Vector3PB Pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }

  // optional sint32 Stat = 3 [default = 0];
  if (has_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->stat(), target);
  }

  // optional bool Shake = 4 [default = false];
  if (has_shake()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->shake(), target);
  }

  // optional float VAngle = 5 [default = 0];
  if (has_vangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->vangle(), target);
  }

  // optional float HAngle = 6 [default = 0];
  if (has_hangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->hangle(), target);
  }

  // optional sint32 Group = 7 [default = 0];
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->group(), target);
  }

  // optional sint32 HeroID = 8 [default = -1];
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->heroid(), target);
  }

  // optional .Vector3PB ForwardVec = 9;
  if (has_forwardvec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->forwardvec(), target);
  }

  // optional .Vector3PB FootVec = 10;
  if (has_footvec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->footvec(), target);
  }

  // optional sint32 ObjId = 11 [default = 0];
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(11, this->objid(), target);
  }

  // optional .FightUserProp Prop = 12;
  if (has_prop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->prop(), target);
  }

  // optional sint32 AvatarID = 13 [default = -1];
  if (has_avatarid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(13, this->avatarid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FightFightUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 Uid = 1 [default = 0];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->uid());
    }

    // optional sint32 ObjId = 11 [default = 0];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->objid());
    }

    // optional .Vector3PB Pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional sint32 Stat = 3 [default = 0];
    if (has_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->stat());
    }

    // optional bool Shake = 4 [default = false];
    if (has_shake()) {
      total_size += 1 + 1;
    }

    // optional float VAngle = 5 [default = 0];
    if (has_vangle()) {
      total_size += 1 + 4;
    }

    // optional float HAngle = 6 [default = 0];
    if (has_hangle()) {
      total_size += 1 + 4;
    }

    // optional sint32 Group = 7 [default = 0];
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->group());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional sint32 HeroID = 8 [default = -1];
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->heroid());
    }

    // optional .Vector3PB ForwardVec = 9;
    if (has_forwardvec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->forwardvec());
    }

    // optional .Vector3PB FootVec = 10;
    if (has_footvec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->footvec());
    }

    // optional .FightUserProp Prop = 12;
    if (has_prop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prop());
    }

    // optional sint32 AvatarID = 13 [default = -1];
    if (has_avatarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->avatarid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightFightUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightFightUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightFightUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightFightUser::MergeFrom(const FightFightUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_pos()) {
      mutable_pos()->::Vector3PB::MergeFrom(from.pos());
    }
    if (from.has_stat()) {
      set_stat(from.stat());
    }
    if (from.has_shake()) {
      set_shake(from.shake());
    }
    if (from.has_vangle()) {
      set_vangle(from.vangle());
    }
    if (from.has_hangle()) {
      set_hangle(from.hangle());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_forwardvec()) {
      mutable_forwardvec()->::Vector3PB::MergeFrom(from.forwardvec());
    }
    if (from.has_footvec()) {
      mutable_footvec()->::Vector3PB::MergeFrom(from.footvec());
    }
    if (from.has_prop()) {
      mutable_prop()->::FightUserProp::MergeFrom(from.prop());
    }
    if (from.has_avatarid()) {
      set_avatarid(from.avatarid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightFightUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightFightUser::CopyFrom(const FightFightUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightFightUser::IsInitialized() const {

  return true;
}

void FightFightUser::Swap(FightFightUser* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(objid_, other->objid_);
    std::swap(pos_, other->pos_);
    std::swap(stat_, other->stat_);
    std::swap(shake_, other->shake_);
    std::swap(vangle_, other->vangle_);
    std::swap(hangle_, other->hangle_);
    std::swap(group_, other->group_);
    std::swap(heroid_, other->heroid_);
    std::swap(forwardvec_, other->forwardvec_);
    std::swap(footvec_, other->footvec_);
    std::swap(prop_, other->prop_);
    std::swap(avatarid_, other->avatarid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightFightUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightFightUser_descriptor_;
  metadata.reflection = FightFightUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FightRpcSyncUserInfoNotify::kFightUserInfosFieldNumber;
#endif  // !_MSC_VER

FightRpcSyncUserInfoNotify::FightRpcSyncUserInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FightRpcSyncUserInfoNotify::InitAsDefaultInstance() {
}

FightRpcSyncUserInfoNotify::FightRpcSyncUserInfoNotify(const FightRpcSyncUserInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FightRpcSyncUserInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightRpcSyncUserInfoNotify::~FightRpcSyncUserInfoNotify() {
  SharedDtor();
}

void FightRpcSyncUserInfoNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FightRpcSyncUserInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightRpcSyncUserInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightRpcSyncUserInfoNotify_descriptor_;
}

const FightRpcSyncUserInfoNotify& FightRpcSyncUserInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightCliRpc_2eproto();
  return *default_instance_;
}

FightRpcSyncUserInfoNotify* FightRpcSyncUserInfoNotify::default_instance_ = NULL;

FightRpcSyncUserInfoNotify* FightRpcSyncUserInfoNotify::New() const {
  return new FightRpcSyncUserInfoNotify;
}

void FightRpcSyncUserInfoNotify::Clear() {
  fightuserinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightRpcSyncUserInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FightFightUser FightUserInfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FightUserInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fightuserinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_FightUserInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightRpcSyncUserInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FightFightUser FightUserInfos = 1;
  for (int i = 0; i < this->fightuserinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fightuserinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FightRpcSyncUserInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FightFightUser FightUserInfos = 1;
  for (int i = 0; i < this->fightuserinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fightuserinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FightRpcSyncUserInfoNotify::ByteSize() const {
  int total_size = 0;

  // repeated .FightFightUser FightUserInfos = 1;
  total_size += 1 * this->fightuserinfos_size();
  for (int i = 0; i < this->fightuserinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fightuserinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightRpcSyncUserInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightRpcSyncUserInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightRpcSyncUserInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightRpcSyncUserInfoNotify::MergeFrom(const FightRpcSyncUserInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  fightuserinfos_.MergeFrom(from.fightuserinfos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightRpcSyncUserInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightRpcSyncUserInfoNotify::CopyFrom(const FightRpcSyncUserInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightRpcSyncUserInfoNotify::IsInitialized() const {

  return true;
}

void FightRpcSyncUserInfoNotify::Swap(FightRpcSyncUserInfoNotify* other) {
  if (other != this) {
    fightuserinfos_.Swap(&other->fightuserinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightRpcSyncUserInfoNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightRpcSyncUserInfoNotify_descriptor_;
  metadata.reflection = FightRpcSyncUserInfoNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FightRpcStartNotify::kFightUserInfosFieldNumber;
const int FightRpcStartNotify::kSumtimeFieldNumber;
const int FightRpcStartNotify::kUidFieldNumber;
const int FightRpcStartNotify::kSceneIDFieldNumber;
const int FightRpcStartNotify::kObjIdFieldNumber;
const int FightRpcStartNotify::kTeamFlagC0FieldNumber;
const int FightRpcStartNotify::kTeamFlagC1FieldNumber;
#endif  // !_MSC_VER

FightRpcStartNotify::FightRpcStartNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FightRpcStartNotify::InitAsDefaultInstance() {
}

FightRpcStartNotify::FightRpcStartNotify(const FightRpcStartNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FightRpcStartNotify::SharedCtor() {
  _cached_size_ = 0;
  sumtime_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  sceneid_ = 1;
  objid_ = -1;
  teamflagc0_ = 1;
  teamflagc1_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightRpcStartNotify::~FightRpcStartNotify() {
  SharedDtor();
}

void FightRpcStartNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FightRpcStartNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightRpcStartNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightRpcStartNotify_descriptor_;
}

const FightRpcStartNotify& FightRpcStartNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightCliRpc_2eproto();
  return *default_instance_;
}

FightRpcStartNotify* FightRpcStartNotify::default_instance_ = NULL;

FightRpcStartNotify* FightRpcStartNotify::New() const {
  return new FightRpcStartNotify;
}

void FightRpcStartNotify::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    sumtime_ = 0;
    uid_ = GOOGLE_LONGLONG(0);
    sceneid_ = 1;
    objid_ = -1;
    teamflagc0_ = 1;
    teamflagc1_ = 1;
  }
  fightuserinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightRpcStartNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FightFightUser FightUserInfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FightUserInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fightuserinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_FightUserInfos;
        if (input->ExpectTag(16)) goto parse_Sumtime;
        break;
      }

      // optional sint32 Sumtime = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Sumtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &sumtime_)));
          set_has_sumtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Uid;
        break;
      }

      // optional sint64 Uid = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_SceneID;
        break;
      }

      // optional sint32 SceneID = 4 [default = 1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SceneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ObjId;
        break;
      }

      // optional sint32 ObjId = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ObjId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_TeamFlagC0;
        break;
      }

      // optional sint32 TeamFlagC0 = 6 [default = 1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TeamFlagC0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &teamflagc0_)));
          set_has_teamflagc0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_TeamFlagC1;
        break;
      }

      // optional sint32 TeamFlagC1 = 7 [default = 1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TeamFlagC1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &teamflagc1_)));
          set_has_teamflagc1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightRpcStartNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FightFightUser FightUserInfos = 1;
  for (int i = 0; i < this->fightuserinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fightuserinfos(i), output);
  }

  // optional sint32 Sumtime = 2 [default = 0];
  if (has_sumtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->sumtime(), output);
  }

  // optional sint64 Uid = 3 [default = 0];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->uid(), output);
  }

  // optional sint32 SceneID = 4 [default = 1];
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->sceneid(), output);
  }

  // optional sint32 ObjId = 5 [default = -1];
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->objid(), output);
  }

  // optional sint32 TeamFlagC0 = 6 [default = 1];
  if (has_teamflagc0()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->teamflagc0(), output);
  }

  // optional sint32 TeamFlagC1 = 7 [default = 1];
  if (has_teamflagc1()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->teamflagc1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FightRpcStartNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FightFightUser FightUserInfos = 1;
  for (int i = 0; i < this->fightuserinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fightuserinfos(i), target);
  }

  // optional sint32 Sumtime = 2 [default = 0];
  if (has_sumtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->sumtime(), target);
  }

  // optional sint64 Uid = 3 [default = 0];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->uid(), target);
  }

  // optional sint32 SceneID = 4 [default = 1];
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->sceneid(), target);
  }

  // optional sint32 ObjId = 5 [default = -1];
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->objid(), target);
  }

  // optional sint32 TeamFlagC0 = 6 [default = 1];
  if (has_teamflagc0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->teamflagc0(), target);
  }

  // optional sint32 TeamFlagC1 = 7 [default = 1];
  if (has_teamflagc1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->teamflagc1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FightRpcStartNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional sint32 Sumtime = 2 [default = 0];
    if (has_sumtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->sumtime());
    }

    // optional sint64 Uid = 3 [default = 0];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->uid());
    }

    // optional sint32 SceneID = 4 [default = 1];
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->sceneid());
    }

    // optional sint32 ObjId = 5 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->objid());
    }

    // optional sint32 TeamFlagC0 = 6 [default = 1];
    if (has_teamflagc0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->teamflagc0());
    }

    // optional sint32 TeamFlagC1 = 7 [default = 1];
    if (has_teamflagc1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->teamflagc1());
    }

  }
  // repeated .FightFightUser FightUserInfos = 1;
  total_size += 1 * this->fightuserinfos_size();
  for (int i = 0; i < this->fightuserinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fightuserinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightRpcStartNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightRpcStartNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightRpcStartNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightRpcStartNotify::MergeFrom(const FightRpcStartNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  fightuserinfos_.MergeFrom(from.fightuserinfos_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_sumtime()) {
      set_sumtime(from.sumtime());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_teamflagc0()) {
      set_teamflagc0(from.teamflagc0());
    }
    if (from.has_teamflagc1()) {
      set_teamflagc1(from.teamflagc1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightRpcStartNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightRpcStartNotify::CopyFrom(const FightRpcStartNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightRpcStartNotify::IsInitialized() const {

  return true;
}

void FightRpcStartNotify::Swap(FightRpcStartNotify* other) {
  if (other != this) {
    fightuserinfos_.Swap(&other->fightuserinfos_);
    std::swap(sumtime_, other->sumtime_);
    std::swap(uid_, other->uid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(objid_, other->objid_);
    std::swap(teamflagc0_, other->teamflagc0_);
    std::swap(teamflagc1_, other->teamflagc1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightRpcStartNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightRpcStartNotify_descriptor_;
  metadata.reflection = FightRpcStartNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FightRpcSyncUserPropNotify::kUserValueFieldNumber;
const int FightRpcSyncUserPropNotify::kTypeFieldNumber;
#endif  // !_MSC_VER

FightRpcSyncUserPropNotify::FightRpcSyncUserPropNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FightRpcSyncUserPropNotify::InitAsDefaultInstance() {
}

FightRpcSyncUserPropNotify::FightRpcSyncUserPropNotify(const FightRpcSyncUserPropNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FightRpcSyncUserPropNotify::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightRpcSyncUserPropNotify::~FightRpcSyncUserPropNotify() {
  SharedDtor();
}

void FightRpcSyncUserPropNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FightRpcSyncUserPropNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightRpcSyncUserPropNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightRpcSyncUserPropNotify_descriptor_;
}

const FightRpcSyncUserPropNotify& FightRpcSyncUserPropNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightCliRpc_2eproto();
  return *default_instance_;
}

FightRpcSyncUserPropNotify* FightRpcSyncUserPropNotify::default_instance_ = NULL;

FightRpcSyncUserPropNotify* FightRpcSyncUserPropNotify::New() const {
  return new FightRpcSyncUserPropNotify;
}

void FightRpcSyncUserPropNotify::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    type_ = 0;
  }
  uservalue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightRpcSyncUserPropNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FightUserProp UserValue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_uservalue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_UserValue;
        if (input->ExpectTag(56)) goto parse_Type;
        break;
      }

      // optional sint32 Type = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightRpcSyncUserPropNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FightUserProp UserValue = 1;
  for (int i = 0; i < this->uservalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->uservalue(i), output);
  }

  // optional sint32 Type = 7 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FightRpcSyncUserPropNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FightUserProp UserValue = 1;
  for (int i = 0; i < this->uservalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->uservalue(i), target);
  }

  // optional sint32 Type = 7 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FightRpcSyncUserPropNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional sint32 Type = 7 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

  }
  // repeated .FightUserProp UserValue = 1;
  total_size += 1 * this->uservalue_size();
  for (int i = 0; i < this->uservalue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->uservalue(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightRpcSyncUserPropNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightRpcSyncUserPropNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightRpcSyncUserPropNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightRpcSyncUserPropNotify::MergeFrom(const FightRpcSyncUserPropNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  uservalue_.MergeFrom(from.uservalue_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightRpcSyncUserPropNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightRpcSyncUserPropNotify::CopyFrom(const FightRpcSyncUserPropNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightRpcSyncUserPropNotify::IsInitialized() const {

  return true;
}

void FightRpcSyncUserPropNotify::Swap(FightRpcSyncUserPropNotify* other) {
  if (other != this) {
    uservalue_.Swap(&other->uservalue_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightRpcSyncUserPropNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightRpcSyncUserPropNotify_descriptor_;
  metadata.reflection = FightRpcSyncUserPropNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FightUserProp::kObjIdFieldNumber;
const int FightUserProp::kHpFieldNumber;
const int FightUserProp::kEnergyFieldNumber;
const int FightUserProp::kStuntFieldNumber;
const int FightUserProp::kHeroIDFieldNumber;
const int FightUserProp::kIsMonsterFieldNumber;
const int FightUserProp::kGroupFieldNumber;
const int FightUserProp::kStateFieldNumber;
const int FightUserProp::kReviveTimeFieldNumber;
const int FightUserProp::kReviveTimeSysFieldNumber;
const int FightUserProp::kKillPeopleNumFieldNumber;
const int FightUserProp::kBuffVFieldNumber;
const int FightUserProp::kFlagFieldNumber;
const int FightUserProp::kSeedFieldNumber;
const int FightUserProp::kMainMonsterFieldNumber;
const int FightUserProp::kAvatarIDFieldNumber;
#endif  // !_MSC_VER

FightUserProp::FightUserProp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FightUserProp::InitAsDefaultInstance() {
}

FightUserProp::FightUserProp(const FightUserProp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FightUserProp::SharedCtor() {
  _cached_size_ = 0;
  objid_ = 0;
  hp_ = 0;
  energy_ = 0;
  stunt_ = 0;
  heroid_ = -1;
  ismonster_ = -1;
  group_ = 0;
  state_ = 0;
  revivetime_ = GOOGLE_LONGLONG(0);
  revivetimesys_ = GOOGLE_LONGLONG(0);
  killpeoplenum_ = 0;
  flag_ = -1;
  seed_ = 0;
  mainmonster_ = GOOGLE_LONGLONG(-1);
  avatarid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightUserProp::~FightUserProp() {
  SharedDtor();
}

void FightUserProp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FightUserProp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightUserProp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightUserProp_descriptor_;
}

const FightUserProp& FightUserProp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightCliRpc_2eproto();
  return *default_instance_;
}

FightUserProp* FightUserProp::default_instance_ = NULL;

FightUserProp* FightUserProp::New() const {
  return new FightUserProp;
}

void FightUserProp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = 0;
    hp_ = 0;
    energy_ = 0;
    stunt_ = 0;
    heroid_ = -1;
    ismonster_ = -1;
    group_ = 0;
    state_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    revivetime_ = GOOGLE_LONGLONG(0);
    revivetimesys_ = GOOGLE_LONGLONG(0);
    killpeoplenum_ = 0;
    flag_ = -1;
    seed_ = 0;
    mainmonster_ = GOOGLE_LONGLONG(-1);
    avatarid_ = -1;
  }
  buffv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightUserProp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 ObjId = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_Hp;
        break;
      }

      // optional float Hp = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_Energy;
        break;
      }

      // optional float Energy = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_Stunt;
        break;
      }

      // optional float Stunt = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Stunt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stunt_)));
          set_has_stunt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_HeroID;
        break;
      }

      // optional sint32 HeroID = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HeroID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_IsMonster;
        break;
      }

      // optional sint32 IsMonster = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsMonster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &ismonster_)));
          set_has_ismonster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_Group;
        break;
      }

      // optional sint32 Group = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_State;
        break;
      }

      // optional sint32 State = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_State:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ReviveTime;
        break;
      }

      // optional sint64 ReviveTime = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ReviveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &revivetime_)));
          set_has_revivetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ReviveTimeSys;
        break;
      }

      // optional sint64 ReviveTimeSys = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ReviveTimeSys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &revivetimesys_)));
          set_has_revivetimesys();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_KillPeopleNum;
        break;
      }

      // optional sint32 KillPeopleNum = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_KillPeopleNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &killpeoplenum_)));
          set_has_killpeoplenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_BuffV;
        break;
      }

      // repeated .FightBuffData BuffV = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BuffV:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buffv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_BuffV;
        if (input->ExpectTag(112)) goto parse_Flag;
        break;
      }

      // optional sint32 Flag = 14 [default = -1];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_Seed;
        break;
      }

      // optional sint32 Seed = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Seed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &seed_)));
          set_has_seed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_MainMonster;
        break;
      }

      // optional sint64 MainMonster = 19 [default = -1];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MainMonster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &mainmonster_)));
          set_has_mainmonster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_AvatarID;
        break;
      }

      // optional sint32 AvatarID = 20 [default = -1];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AvatarID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &avatarid_)));
          set_has_avatarid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightUserProp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 ObjId = 1 [default = 0];
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->objid(), output);
  }

  // optional float Hp = 2 [default = 0];
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->hp(), output);
  }

  // optional float Energy = 3 [default = 0];
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->energy(), output);
  }

  // optional float Stunt = 4 [default = 0];
  if (has_stunt()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->stunt(), output);
  }

  // optional sint32 HeroID = 5 [default = -1];
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->heroid(), output);
  }

  // optional sint32 IsMonster = 6 [default = -1];
  if (has_ismonster()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->ismonster(), output);
  }

  // optional sint32 Group = 8 [default = 0];
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->group(), output);
  }

  // optional sint32 State = 9 [default = 0];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(9, this->state(), output);
  }

  // optional sint64 ReviveTime = 10 [default = 0];
  if (has_revivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(10, this->revivetime(), output);
  }

  // optional sint64 ReviveTimeSys = 11 [default = 0];
  if (has_revivetimesys()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(11, this->revivetimesys(), output);
  }

  // optional sint32 KillPeopleNum = 12 [default = 0];
  if (has_killpeoplenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(12, this->killpeoplenum(), output);
  }

  // repeated .FightBuffData BuffV = 13;
  for (int i = 0; i < this->buffv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->buffv(i), output);
  }

  // optional sint32 Flag = 14 [default = -1];
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(14, this->flag(), output);
  }

  // optional sint32 Seed = 16 [default = 0];
  if (has_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(16, this->seed(), output);
  }

  // optional sint64 MainMonster = 19 [default = -1];
  if (has_mainmonster()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(19, this->mainmonster(), output);
  }

  // optional sint32 AvatarID = 20 [default = -1];
  if (has_avatarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(20, this->avatarid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FightUserProp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 ObjId = 1 [default = 0];
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->objid(), target);
  }

  // optional float Hp = 2 [default = 0];
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->hp(), target);
  }

  // optional float Energy = 3 [default = 0];
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->energy(), target);
  }

  // optional float Stunt = 4 [default = 0];
  if (has_stunt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->stunt(), target);
  }

  // optional sint32 HeroID = 5 [default = -1];
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->heroid(), target);
  }

  // optional sint32 IsMonster = 6 [default = -1];
  if (has_ismonster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->ismonster(), target);
  }

  // optional sint32 Group = 8 [default = 0];
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->group(), target);
  }

  // optional sint32 State = 9 [default = 0];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(9, this->state(), target);
  }

  // optional sint64 ReviveTime = 10 [default = 0];
  if (has_revivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(10, this->revivetime(), target);
  }

  // optional sint64 ReviveTimeSys = 11 [default = 0];
  if (has_revivetimesys()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(11, this->revivetimesys(), target);
  }

  // optional sint32 KillPeopleNum = 12 [default = 0];
  if (has_killpeoplenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(12, this->killpeoplenum(), target);
  }

  // repeated .FightBuffData BuffV = 13;
  for (int i = 0; i < this->buffv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->buffv(i), target);
  }

  // optional sint32 Flag = 14 [default = -1];
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(14, this->flag(), target);
  }

  // optional sint32 Seed = 16 [default = 0];
  if (has_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(16, this->seed(), target);
  }

  // optional sint64 MainMonster = 19 [default = -1];
  if (has_mainmonster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(19, this->mainmonster(), target);
  }

  // optional sint32 AvatarID = 20 [default = -1];
  if (has_avatarid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(20, this->avatarid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FightUserProp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 ObjId = 1 [default = 0];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->objid());
    }

    // optional float Hp = 2 [default = 0];
    if (has_hp()) {
      total_size += 1 + 4;
    }

    // optional float Energy = 3 [default = 0];
    if (has_energy()) {
      total_size += 1 + 4;
    }

    // optional float Stunt = 4 [default = 0];
    if (has_stunt()) {
      total_size += 1 + 4;
    }

    // optional sint32 HeroID = 5 [default = -1];
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->heroid());
    }

    // optional sint32 IsMonster = 6 [default = -1];
    if (has_ismonster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->ismonster());
    }

    // optional sint32 Group = 8 [default = 0];
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->group());
    }

    // optional sint32 State = 9 [default = 0];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->state());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional sint64 ReviveTime = 10 [default = 0];
    if (has_revivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->revivetime());
    }

    // optional sint64 ReviveTimeSys = 11 [default = 0];
    if (has_revivetimesys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->revivetimesys());
    }

    // optional sint32 KillPeopleNum = 12 [default = 0];
    if (has_killpeoplenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->killpeoplenum());
    }

    // optional sint32 Flag = 14 [default = -1];
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->flag());
    }

    // optional sint32 Seed = 16 [default = 0];
    if (has_seed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->seed());
    }

    // optional sint64 MainMonster = 19 [default = -1];
    if (has_mainmonster()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->mainmonster());
    }

    // optional sint32 AvatarID = 20 [default = -1];
    if (has_avatarid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->avatarid());
    }

  }
  // repeated .FightBuffData BuffV = 13;
  total_size += 1 * this->buffv_size();
  for (int i = 0; i < this->buffv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buffv(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightUserProp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightUserProp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightUserProp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightUserProp::MergeFrom(const FightUserProp& from) {
  GOOGLE_CHECK_NE(&from, this);
  buffv_.MergeFrom(from.buffv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_stunt()) {
      set_stunt(from.stunt());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_ismonster()) {
      set_ismonster(from.ismonster());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_revivetime()) {
      set_revivetime(from.revivetime());
    }
    if (from.has_revivetimesys()) {
      set_revivetimesys(from.revivetimesys());
    }
    if (from.has_killpeoplenum()) {
      set_killpeoplenum(from.killpeoplenum());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_seed()) {
      set_seed(from.seed());
    }
    if (from.has_mainmonster()) {
      set_mainmonster(from.mainmonster());
    }
    if (from.has_avatarid()) {
      set_avatarid(from.avatarid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightUserProp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightUserProp::CopyFrom(const FightUserProp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightUserProp::IsInitialized() const {

  return true;
}

void FightUserProp::Swap(FightUserProp* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(hp_, other->hp_);
    std::swap(energy_, other->energy_);
    std::swap(stunt_, other->stunt_);
    std::swap(heroid_, other->heroid_);
    std::swap(ismonster_, other->ismonster_);
    std::swap(group_, other->group_);
    std::swap(state_, other->state_);
    std::swap(revivetime_, other->revivetime_);
    std::swap(revivetimesys_, other->revivetimesys_);
    std::swap(killpeoplenum_, other->killpeoplenum_);
    buffv_.Swap(&other->buffv_);
    std::swap(flag_, other->flag_);
    std::swap(seed_, other->seed_);
    std::swap(mainmonster_, other->mainmonster_);
    std::swap(avatarid_, other->avatarid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightUserProp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightUserProp_descriptor_;
  metadata.reflection = FightUserProp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FightRpcInsertRoomAsk::kKeyFieldNumber;
#endif  // !_MSC_VER

FightRpcInsertRoomAsk::FightRpcInsertRoomAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FightRpcInsertRoomAsk::InitAsDefaultInstance() {
}

FightRpcInsertRoomAsk::FightRpcInsertRoomAsk(const FightRpcInsertRoomAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FightRpcInsertRoomAsk::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightRpcInsertRoomAsk::~FightRpcInsertRoomAsk() {
  SharedDtor();
}

void FightRpcInsertRoomAsk::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void FightRpcInsertRoomAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightRpcInsertRoomAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightRpcInsertRoomAsk_descriptor_;
}

const FightRpcInsertRoomAsk& FightRpcInsertRoomAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightCliRpc_2eproto();
  return *default_instance_;
}

FightRpcInsertRoomAsk* FightRpcInsertRoomAsk::default_instance_ = NULL;

FightRpcInsertRoomAsk* FightRpcInsertRoomAsk::New() const {
  return new FightRpcInsertRoomAsk;
}

void FightRpcInsertRoomAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightRpcInsertRoomAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightRpcInsertRoomAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FightRpcInsertRoomAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FightRpcInsertRoomAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightRpcInsertRoomAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightRpcInsertRoomAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightRpcInsertRoomAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightRpcInsertRoomAsk::MergeFrom(const FightRpcInsertRoomAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightRpcInsertRoomAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightRpcInsertRoomAsk::CopyFrom(const FightRpcInsertRoomAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightRpcInsertRoomAsk::IsInitialized() const {

  return true;
}

void FightRpcInsertRoomAsk::Swap(FightRpcInsertRoomAsk* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightRpcInsertRoomAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightRpcInsertRoomAsk_descriptor_;
  metadata.reflection = FightRpcInsertRoomAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FightRpcInsertRoomReply::kResultFieldNumber;
#endif  // !_MSC_VER

FightRpcInsertRoomReply::FightRpcInsertRoomReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FightRpcInsertRoomReply::InitAsDefaultInstance() {
}

FightRpcInsertRoomReply::FightRpcInsertRoomReply(const FightRpcInsertRoomReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FightRpcInsertRoomReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightRpcInsertRoomReply::~FightRpcInsertRoomReply() {
  SharedDtor();
}

void FightRpcInsertRoomReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FightRpcInsertRoomReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightRpcInsertRoomReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightRpcInsertRoomReply_descriptor_;
}

const FightRpcInsertRoomReply& FightRpcInsertRoomReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightCliRpc_2eproto();
  return *default_instance_;
}

FightRpcInsertRoomReply* FightRpcInsertRoomReply::default_instance_ = NULL;

FightRpcInsertRoomReply* FightRpcInsertRoomReply::New() const {
  return new FightRpcInsertRoomReply;
}

void FightRpcInsertRoomReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightRpcInsertRoomReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightRpcInsertRoomReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FightRpcInsertRoomReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FightRpcInsertRoomReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightRpcInsertRoomReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightRpcInsertRoomReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightRpcInsertRoomReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightRpcInsertRoomReply::MergeFrom(const FightRpcInsertRoomReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightRpcInsertRoomReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightRpcInsertRoomReply::CopyFrom(const FightRpcInsertRoomReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightRpcInsertRoomReply::IsInitialized() const {

  return true;
}

void FightRpcInsertRoomReply::Swap(FightRpcInsertRoomReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightRpcInsertRoomReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightRpcInsertRoomReply_descriptor_;
  metadata.reflection = FightRpcInsertRoomReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FightBuffData::kIDFieldNumber;
const int FightBuffData::kLifttimeFieldNumber;
const int FightBuffData::kPosFieldNumber;
#endif  // !_MSC_VER

FightBuffData::FightBuffData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FightBuffData::InitAsDefaultInstance() {
  pos_ = const_cast< ::Vector3PB*>(&::Vector3PB::default_instance());
}

FightBuffData::FightBuffData(const FightBuffData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FightBuffData::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  lifttime_ = 0;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightBuffData::~FightBuffData() {
  SharedDtor();
}

void FightBuffData::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void FightBuffData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightBuffData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightBuffData_descriptor_;
}

const FightBuffData& FightBuffData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightCliRpc_2eproto();
  return *default_instance_;
}

FightBuffData* FightBuffData::default_instance_ = NULL;

FightBuffData* FightBuffData::New() const {
  return new FightBuffData;
}

void FightBuffData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = -1;
    lifttime_ = 0;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Vector3PB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightBuffData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 ID = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Lifttime;
        break;
      }

      // optional sint32 Lifttime = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Lifttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &lifttime_)));
          set_has_lifttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_Pos;
        break;
      }

      // optional .Vector3PB Pos = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightBuffData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 ID = 2 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->id(), output);
  }

  // optional sint32 Lifttime = 5 [default = 0];
  if (has_lifttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->lifttime(), output);
  }

  // optional .Vector3PB Pos = 9;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FightBuffData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 ID = 2 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->id(), target);
  }

  // optional sint32 Lifttime = 5 [default = 0];
  if (has_lifttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->lifttime(), target);
  }

  // optional .Vector3PB Pos = 9;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FightBuffData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 ID = 2 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->id());
    }

    // optional sint32 Lifttime = 5 [default = 0];
    if (has_lifttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->lifttime());
    }

    // optional .Vector3PB Pos = 9;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightBuffData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightBuffData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightBuffData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightBuffData::MergeFrom(const FightBuffData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lifttime()) {
      set_lifttime(from.lifttime());
    }
    if (from.has_pos()) {
      mutable_pos()->::Vector3PB::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightBuffData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightBuffData::CopyFrom(const FightBuffData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightBuffData::IsInitialized() const {

  return true;
}

void FightBuffData::Swap(FightBuffData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(lifttime_, other->lifttime_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightBuffData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightBuffData_descriptor_;
  metadata.reflection = FightBuffData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FightRpcHPChangeNotify::kObjidFieldNumber;
const int FightRpcHPChangeNotify::kObjSrcIdFieldNumber;
const int FightRpcHPChangeNotify::kChangeHPFieldNumber;
#endif  // !_MSC_VER

FightRpcHPChangeNotify::FightRpcHPChangeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FightRpcHPChangeNotify::InitAsDefaultInstance() {
}

FightRpcHPChangeNotify::FightRpcHPChangeNotify(const FightRpcHPChangeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FightRpcHPChangeNotify::SharedCtor() {
  _cached_size_ = 0;
  objid_ = -1;
  objsrcid_ = -1;
  changehp_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightRpcHPChangeNotify::~FightRpcHPChangeNotify() {
  SharedDtor();
}

void FightRpcHPChangeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FightRpcHPChangeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightRpcHPChangeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightRpcHPChangeNotify_descriptor_;
}

const FightRpcHPChangeNotify& FightRpcHPChangeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightCliRpc_2eproto();
  return *default_instance_;
}

FightRpcHPChangeNotify* FightRpcHPChangeNotify::default_instance_ = NULL;

FightRpcHPChangeNotify* FightRpcHPChangeNotify::New() const {
  return new FightRpcHPChangeNotify;
}

void FightRpcHPChangeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = -1;
    objsrcid_ = -1;
    changehp_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightRpcHPChangeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Objid = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ObjSrcId;
        break;
      }

      // optional sint32 ObjSrcId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ObjSrcId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &objsrcid_)));
          set_has_objsrcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ChangeHP;
        break;
      }

      // optional sint32 ChangeHP = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ChangeHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &changehp_)));
          set_has_changehp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightRpcHPChangeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Objid = 1 [default = -1];
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->objid(), output);
  }

  // optional sint32 ObjSrcId = 2 [default = -1];
  if (has_objsrcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->objsrcid(), output);
  }

  // optional sint32 ChangeHP = 3 [default = -1];
  if (has_changehp()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->changehp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FightRpcHPChangeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Objid = 1 [default = -1];
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->objid(), target);
  }

  // optional sint32 ObjSrcId = 2 [default = -1];
  if (has_objsrcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->objsrcid(), target);
  }

  // optional sint32 ChangeHP = 3 [default = -1];
  if (has_changehp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->changehp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FightRpcHPChangeNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Objid = 1 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->objid());
    }

    // optional sint32 ObjSrcId = 2 [default = -1];
    if (has_objsrcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->objsrcid());
    }

    // optional sint32 ChangeHP = 3 [default = -1];
    if (has_changehp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->changehp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightRpcHPChangeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightRpcHPChangeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightRpcHPChangeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightRpcHPChangeNotify::MergeFrom(const FightRpcHPChangeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_objsrcid()) {
      set_objsrcid(from.objsrcid());
    }
    if (from.has_changehp()) {
      set_changehp(from.changehp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightRpcHPChangeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightRpcHPChangeNotify::CopyFrom(const FightRpcHPChangeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightRpcHPChangeNotify::IsInitialized() const {

  return true;
}

void FightRpcHPChangeNotify::Swap(FightRpcHPChangeNotify* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(objsrcid_, other->objsrcid_);
    std::swap(changehp_, other->changehp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightRpcHPChangeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightRpcHPChangeNotify_descriptor_;
  metadata.reflection = FightRpcHPChangeNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FightRpcRoveOverNotify::kTimerFieldNumber;
#endif  // !_MSC_VER

FightRpcRoveOverNotify::FightRpcRoveOverNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FightRpcRoveOverNotify::InitAsDefaultInstance() {
}

FightRpcRoveOverNotify::FightRpcRoveOverNotify(const FightRpcRoveOverNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FightRpcRoveOverNotify::SharedCtor() {
  _cached_size_ = 0;
  timer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightRpcRoveOverNotify::~FightRpcRoveOverNotify() {
  SharedDtor();
}

void FightRpcRoveOverNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FightRpcRoveOverNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightRpcRoveOverNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightRpcRoveOverNotify_descriptor_;
}

const FightRpcRoveOverNotify& FightRpcRoveOverNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightCliRpc_2eproto();
  return *default_instance_;
}

FightRpcRoveOverNotify* FightRpcRoveOverNotify::default_instance_ = NULL;

FightRpcRoveOverNotify* FightRpcRoveOverNotify::New() const {
  return new FightRpcRoveOverNotify;
}

void FightRpcRoveOverNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timer_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightRpcRoveOverNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Timer = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &timer_)));
          set_has_timer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightRpcRoveOverNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Timer = 1 [default = 0];
  if (has_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->timer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FightRpcRoveOverNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Timer = 1 [default = 0];
  if (has_timer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->timer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FightRpcRoveOverNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Timer = 1 [default = 0];
    if (has_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->timer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightRpcRoveOverNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightRpcRoveOverNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightRpcRoveOverNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightRpcRoveOverNotify::MergeFrom(const FightRpcRoveOverNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timer()) {
      set_timer(from.timer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightRpcRoveOverNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightRpcRoveOverNotify::CopyFrom(const FightRpcRoveOverNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightRpcRoveOverNotify::IsInitialized() const {

  return true;
}

void FightRpcRoveOverNotify::Swap(FightRpcRoveOverNotify* other) {
  if (other != this) {
    std::swap(timer_, other->timer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightRpcRoveOverNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightRpcRoveOverNotify_descriptor_;
  metadata.reflection = FightRpcRoveOverNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FightRpcSkillTransferNotify::kObjIdFieldNumber;
const int FightRpcSkillTransferNotify::kSkillIdFieldNumber;
const int FightRpcSkillTransferNotify::kTargetObjIdFieldNumber;
const int FightRpcSkillTransferNotify::kTargetPosFieldNumber;
const int FightRpcSkillTransferNotify::kRetFieldNumber;
const int FightRpcSkillTransferNotify::kTypeFieldNumber;
#endif  // !_MSC_VER

FightRpcSkillTransferNotify::FightRpcSkillTransferNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FightRpcSkillTransferNotify::InitAsDefaultInstance() {
  targetpos_ = const_cast< ::Vector3PB*>(&::Vector3PB::default_instance());
}

FightRpcSkillTransferNotify::FightRpcSkillTransferNotify(const FightRpcSkillTransferNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FightRpcSkillTransferNotify::SharedCtor() {
  _cached_size_ = 0;
  objid_ = -1;
  skillid_ = -1;
  targetobjid_ = -1;
  targetpos_ = NULL;
  ret_ = -1;
  type_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightRpcSkillTransferNotify::~FightRpcSkillTransferNotify() {
  SharedDtor();
}

void FightRpcSkillTransferNotify::SharedDtor() {
  if (this != default_instance_) {
    delete targetpos_;
  }
}

void FightRpcSkillTransferNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightRpcSkillTransferNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightRpcSkillTransferNotify_descriptor_;
}

const FightRpcSkillTransferNotify& FightRpcSkillTransferNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightCliRpc_2eproto();
  return *default_instance_;
}

FightRpcSkillTransferNotify* FightRpcSkillTransferNotify::default_instance_ = NULL;

FightRpcSkillTransferNotify* FightRpcSkillTransferNotify::New() const {
  return new FightRpcSkillTransferNotify;
}

void FightRpcSkillTransferNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objid_ = -1;
    skillid_ = -1;
    targetobjid_ = -1;
    if (has_targetpos()) {
      if (targetpos_ != NULL) targetpos_->::Vector3PB::Clear();
    }
    ret_ = -1;
    type_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightRpcSkillTransferNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 ObjId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SkillId;
        break;
      }

      // optional sint32 SkillId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TargetObjId;
        break;
      }

      // optional sint32 TargetObjId = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TargetObjId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &targetobjid_)));
          set_has_targetobjid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_TargetPos;
        break;
      }

      // optional .Vector3PB TargetPos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TargetPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Ret;
        break;
      }

      // optional sint32 Ret = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Type;
        break;
      }

      // optional sint32 Type = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightRpcSkillTransferNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 ObjId = 1 [default = -1];
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->objid(), output);
  }

  // optional sint32 SkillId = 2 [default = -1];
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->skillid(), output);
  }

  // optional sint32 TargetObjId = 3 [default = -1];
  if (has_targetobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->targetobjid(), output);
  }

  // optional .Vector3PB TargetPos = 4;
  if (has_targetpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->targetpos(), output);
  }

  // optional sint32 Ret = 5 [default = -1];
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->ret(), output);
  }

  // optional sint32 Type = 6 [default = -1];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FightRpcSkillTransferNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 ObjId = 1 [default = -1];
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->objid(), target);
  }

  // optional sint32 SkillId = 2 [default = -1];
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->skillid(), target);
  }

  // optional sint32 TargetObjId = 3 [default = -1];
  if (has_targetobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->targetobjid(), target);
  }

  // optional .Vector3PB TargetPos = 4;
  if (has_targetpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->targetpos(), target);
  }

  // optional sint32 Ret = 5 [default = -1];
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->ret(), target);
  }

  // optional sint32 Type = 6 [default = -1];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FightRpcSkillTransferNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 ObjId = 1 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->objid());
    }

    // optional sint32 SkillId = 2 [default = -1];
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->skillid());
    }

    // optional sint32 TargetObjId = 3 [default = -1];
    if (has_targetobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->targetobjid());
    }

    // optional .Vector3PB TargetPos = 4;
    if (has_targetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetpos());
    }

    // optional sint32 Ret = 5 [default = -1];
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->ret());
    }

    // optional sint32 Type = 6 [default = -1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightRpcSkillTransferNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightRpcSkillTransferNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightRpcSkillTransferNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightRpcSkillTransferNotify::MergeFrom(const FightRpcSkillTransferNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_targetobjid()) {
      set_targetobjid(from.targetobjid());
    }
    if (from.has_targetpos()) {
      mutable_targetpos()->::Vector3PB::MergeFrom(from.targetpos());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightRpcSkillTransferNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightRpcSkillTransferNotify::CopyFrom(const FightRpcSkillTransferNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightRpcSkillTransferNotify::IsInitialized() const {

  return true;
}

void FightRpcSkillTransferNotify::Swap(FightRpcSkillTransferNotify* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(skillid_, other->skillid_);
    std::swap(targetobjid_, other->targetobjid_);
    std::swap(targetpos_, other->targetpos_);
    std::swap(ret_, other->ret_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightRpcSkillTransferNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightRpcSkillTransferNotify_descriptor_;
  metadata.reflection = FightRpcSkillTransferNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
