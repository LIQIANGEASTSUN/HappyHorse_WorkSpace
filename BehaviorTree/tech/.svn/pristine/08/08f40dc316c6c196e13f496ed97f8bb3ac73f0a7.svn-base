// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AISvrRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AISvrRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* AIRpcCreateAISceneAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AIRpcCreateAISceneAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* AIRpcCreateAISceneReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AIRpcCreateAISceneReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AIUserP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AIUserP_reflection_ = NULL;
const ::google::protobuf::Descriptor* AIRpcDeleteAISceneNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AIRpcDeleteAISceneNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* AIRpcLoadUsersNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AIRpcLoadUsersNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* AIRpcNoticeAIUserOperNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AIRpcNoticeAIUserOperNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* AIRpcNoticeSceneInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AIRpcNoticeSceneInfoNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* AIRpcNoticeUpdateSceneInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AIRpcNoticeUpdateSceneInfoNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* AIUserData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AIUserData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AIUserCom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AIUserCom_reflection_ = NULL;
const ::google::protobuf::Descriptor* AIUserProp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AIUserProp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AIUserPosCom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AIUserPosCom_reflection_ = NULL;
const ::google::protobuf::Descriptor* AIRpcDeleteUserNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AIRpcDeleteUserNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_AISvrRpc_2eproto() {
  protobuf_AddDesc_AISvrRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AISvrRpc.proto");
  GOOGLE_CHECK(file != NULL);
  AIRpcCreateAISceneAsk_descriptor_ = file->message_type(0);
  static const int AIRpcCreateAISceneAsk_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcCreateAISceneAsk, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcCreateAISceneAsk, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcCreateAISceneAsk, sceneconfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcCreateAISceneAsk, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcCreateAISceneAsk, nodename_),
  };
  AIRpcCreateAISceneAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AIRpcCreateAISceneAsk_descriptor_,
      AIRpcCreateAISceneAsk::default_instance_,
      AIRpcCreateAISceneAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcCreateAISceneAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcCreateAISceneAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AIRpcCreateAISceneAsk));
  AIRpcCreateAISceneReply_descriptor_ = file->message_type(1);
  static const int AIRpcCreateAISceneReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcCreateAISceneReply, result_),
  };
  AIRpcCreateAISceneReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AIRpcCreateAISceneReply_descriptor_,
      AIRpcCreateAISceneReply::default_instance_,
      AIRpcCreateAISceneReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcCreateAISceneReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcCreateAISceneReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AIRpcCreateAISceneReply));
  AIUserP_descriptor_ = file->message_type(2);
  static const int AIUserP_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIUserP, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIUserP, hreoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIUserP, ismonster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIUserP, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIUserP, teamid_),
  };
  AIUserP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AIUserP_descriptor_,
      AIUserP::default_instance_,
      AIUserP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIUserP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIUserP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AIUserP));
  AIRpcDeleteAISceneNotify_descriptor_ = file->message_type(3);
  static const int AIRpcDeleteAISceneNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcDeleteAISceneNotify, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcDeleteAISceneNotify, nodename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcDeleteAISceneNotify, sceneid_),
  };
  AIRpcDeleteAISceneNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AIRpcDeleteAISceneNotify_descriptor_,
      AIRpcDeleteAISceneNotify::default_instance_,
      AIRpcDeleteAISceneNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcDeleteAISceneNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcDeleteAISceneNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AIRpcDeleteAISceneNotify));
  AIRpcLoadUsersNotify_descriptor_ = file->message_type(4);
  static const int AIRpcLoadUsersNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcLoadUsersNotify, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcLoadUsersNotify, sceneid_),
  };
  AIRpcLoadUsersNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AIRpcLoadUsersNotify_descriptor_,
      AIRpcLoadUsersNotify::default_instance_,
      AIRpcLoadUsersNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcLoadUsersNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcLoadUsersNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AIRpcLoadUsersNotify));
  AIRpcNoticeAIUserOperNotify_descriptor_ = file->message_type(5);
  static const int AIRpcNoticeAIUserOperNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcNoticeAIUserOperNotify, opertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcNoticeAIUserOperNotify, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcNoticeAIUserOperNotify, msginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcNoticeAIUserOperNotify, sceneid_),
  };
  AIRpcNoticeAIUserOperNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AIRpcNoticeAIUserOperNotify_descriptor_,
      AIRpcNoticeAIUserOperNotify::default_instance_,
      AIRpcNoticeAIUserOperNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcNoticeAIUserOperNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcNoticeAIUserOperNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AIRpcNoticeAIUserOperNotify));
  AIRpcNoticeSceneInfoNotify_descriptor_ = file->message_type(6);
  static const int AIRpcNoticeSceneInfoNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcNoticeSceneInfoNotify, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcNoticeSceneInfoNotify, sceneinfo_),
  };
  AIRpcNoticeSceneInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AIRpcNoticeSceneInfoNotify_descriptor_,
      AIRpcNoticeSceneInfoNotify::default_instance_,
      AIRpcNoticeSceneInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcNoticeSceneInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcNoticeSceneInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AIRpcNoticeSceneInfoNotify));
  AIRpcNoticeUpdateSceneInfoNotify_descriptor_ = file->message_type(7);
  static const int AIRpcNoticeUpdateSceneInfoNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcNoticeUpdateSceneInfoNotify, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcNoticeUpdateSceneInfoNotify, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcNoticeUpdateSceneInfoNotify, sprayinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcNoticeUpdateSceneInfoNotify, sendtime_),
  };
  AIRpcNoticeUpdateSceneInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AIRpcNoticeUpdateSceneInfoNotify_descriptor_,
      AIRpcNoticeUpdateSceneInfoNotify::default_instance_,
      AIRpcNoticeUpdateSceneInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcNoticeUpdateSceneInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcNoticeUpdateSceneInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AIRpcNoticeUpdateSceneInfoNotify));
  AIUserData_descriptor_ = file->message_type(8);
  static const int AIUserData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIUserData, usercom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIUserData, userposinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIUserData, userprop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIUserData, useskillret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIUserData, shootret_),
  };
  AIUserData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AIUserData_descriptor_,
      AIUserData::default_instance_,
      AIUserData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIUserData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIUserData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AIUserData));
  AIUserCom_descriptor_ = file->message_type(9);
  static const int AIUserCom_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIUserCom, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIUserCom, dead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIUserCom, revivepos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIUserCom, facedir_),
  };
  AIUserCom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AIUserCom_descriptor_,
      AIUserCom::default_instance_,
      AIUserCom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIUserCom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIUserCom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AIUserCom));
  AIUserProp_descriptor_ = file->message_type(10);
  static const int AIUserProp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIUserProp, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIUserProp, energy_),
  };
  AIUserProp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AIUserProp_descriptor_,
      AIUserProp::default_instance_,
      AIUserProp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIUserProp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIUserProp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AIUserProp));
  AIUserPosCom_descriptor_ = file->message_type(11);
  static const int AIUserPosCom_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIUserPosCom, bmoving_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIUserPosCom, footray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIUserPosCom, rockdir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIUserPosCom, movedir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIUserPosCom, pos_),
  };
  AIUserPosCom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AIUserPosCom_descriptor_,
      AIUserPosCom::default_instance_,
      AIUserPosCom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIUserPosCom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIUserPosCom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AIUserPosCom));
  AIRpcDeleteUserNotify_descriptor_ = file->message_type(12);
  static const int AIRpcDeleteUserNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcDeleteUserNotify, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcDeleteUserNotify, sceneid_),
  };
  AIRpcDeleteUserNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AIRpcDeleteUserNotify_descriptor_,
      AIRpcDeleteUserNotify::default_instance_,
      AIRpcDeleteUserNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcDeleteUserNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRpcDeleteUserNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AIRpcDeleteUserNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AISvrRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AIRpcCreateAISceneAsk_descriptor_, &AIRpcCreateAISceneAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AIRpcCreateAISceneReply_descriptor_, &AIRpcCreateAISceneReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AIUserP_descriptor_, &AIUserP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AIRpcDeleteAISceneNotify_descriptor_, &AIRpcDeleteAISceneNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AIRpcLoadUsersNotify_descriptor_, &AIRpcLoadUsersNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AIRpcNoticeAIUserOperNotify_descriptor_, &AIRpcNoticeAIUserOperNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AIRpcNoticeSceneInfoNotify_descriptor_, &AIRpcNoticeSceneInfoNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AIRpcNoticeUpdateSceneInfoNotify_descriptor_, &AIRpcNoticeUpdateSceneInfoNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AIUserData_descriptor_, &AIUserData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AIUserCom_descriptor_, &AIUserCom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AIUserProp_descriptor_, &AIUserProp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AIUserPosCom_descriptor_, &AIUserPosCom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AIRpcDeleteUserNotify_descriptor_, &AIRpcDeleteUserNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AISvrRpc_2eproto() {
  delete AIRpcCreateAISceneAsk::default_instance_;
  delete AIRpcCreateAISceneAsk_reflection_;
  delete AIRpcCreateAISceneReply::default_instance_;
  delete AIRpcCreateAISceneReply_reflection_;
  delete AIUserP::default_instance_;
  delete AIUserP_reflection_;
  delete AIRpcDeleteAISceneNotify::default_instance_;
  delete AIRpcDeleteAISceneNotify_reflection_;
  delete AIRpcLoadUsersNotify::default_instance_;
  delete AIRpcLoadUsersNotify_reflection_;
  delete AIRpcNoticeAIUserOperNotify::default_instance_;
  delete AIRpcNoticeAIUserOperNotify_reflection_;
  delete AIRpcNoticeSceneInfoNotify::default_instance_;
  delete AIRpcNoticeSceneInfoNotify_reflection_;
  delete AIRpcNoticeUpdateSceneInfoNotify::default_instance_;
  delete AIRpcNoticeUpdateSceneInfoNotify_reflection_;
  delete AIUserData::default_instance_;
  delete AIUserData_reflection_;
  delete AIUserCom::default_instance_;
  delete AIUserCom_reflection_;
  delete AIUserProp::default_instance_;
  delete AIUserProp_reflection_;
  delete AIUserPosCom::default_instance_;
  delete AIUserPosCom_reflection_;
  delete AIRpcDeleteUserNotify::default_instance_;
  delete AIRpcDeleteUserNotify_reflection_;
}

void protobuf_AddDesc_AISvrRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016AISvrRpc.proto\032\022PublicStruct.proto\"\204\001\n"
    "\025AIRpcCreateAISceneAsk\022\031\n\007Members\030\001 \003(\0132"
    "\010.AIUserP\022\022\n\006RoomID\030\002 \001(\022:\002-1\022\026\n\013SceneCo"
    "nfId\030\003 \001(\021:\0010\022\022\n\007SceneID\030\004 \001(\021:\0011\022\020\n\010Nod"
    "eName\030\006 \001(\t\"0\n\027AIRpcCreateAISceneReply\022\025"
    "\n\006Result\030\002 \001(\021:\005-9999\"e\n\007AIUserP\022\017\n\003Uid\030"
    "\006 \001(\022:\002-1\022\022\n\006HreoID\030\007 \001(\021:\002-1\022\025\n\tIsMonst"
    "er\030\010 \001(\021:\002-1\022\013\n\003Key\030\t \001(\t\022\021\n\006TeamId\030\n \001("
    "\021:\0010\"T\n\030AIRpcDeleteAISceneNotify\022\022\n\006Room"
    "ID\030\001 \001(\022:\002-1\022\020\n\010NodeName\030\002 \001(\t\022\022\n\007SceneI"
    "D\030\003 \001(\021:\0011\"=\n\024AIRpcLoadUsersNotify\022\020\n\010Us"
    "erinfo\030\001 \001(\014\022\023\n\007SceneId\030\002 \001(\022:\002-1\"m\n\033AIR"
    "pcNoticeAIUserOperNotify\022\024\n\010OperType\030\001 \001"
    "(\021:\002-1\022\022\n\006UserId\030\002 \001(\022:\002-1\022\017\n\007MsgInfo\030\003 "
    "\003(\014\022\023\n\007SceneId\030\004 \001(\022:\002-1\"D\n\032AIRpcNoticeS"
    "ceneInfoNotify\022\023\n\007SceneId\030\001 \001(\022:\002-1\022\021\n\tS"
    "ceneInfo\030\002 \001(\014\"\177\n AIRpcNoticeUpdateScene"
    "InfoNotify\022\023\n\007SceneId\030\001 \001(\022:\002-1\022\035\n\010Useri"
    "nfo\030\003 \003(\0132\013.AIUserData\022\021\n\tSprayinfo\030\004 \003("
    "\014\022\024\n\010Sendtime\030\005 \001(\022:\002-1\"\223\001\n\nAIUserData\022\033"
    "\n\007Usercom\030\003 \001(\0132\n.AIUserCom\022\"\n\013Userposin"
    "fo\030\004 \001(\0132\r.AIUserPosCom\022\035\n\010Userprop\030\005 \001("
    "\0132\013.AIUserProp\022\023\n\013UseskillRet\030\006 \003(\014\022\020\n\010S"
    "hootRet\030\007 \003(\014\"m\n\tAIUserCom\022\017\n\003Uid\030\001 \001(\022:"
    "\002-1\022\023\n\004Dead\030\002 \001(\010:\005false\022\035\n\tRevivepos\030\003 "
    "\001(\0132\n.Vector3PB\022\033\n\007FaceDir\030\004 \001(\0132\n.Vecto"
    "r3PB\"0\n\nAIUserProp\022\016\n\002Hp\030\001 \001(\002:\002-1\022\022\n\006En"
    "ergy\030\002 \001(\002:\002-1\"\226\001\n\014AIUserPosCom\022\026\n\007Bmovi"
    "ng\030\001 \001(\010:\005false\022\033\n\007Footray\030\002 \001(\0132\n.Vecto"
    "r3PB\022\033\n\007Rockdir\030\003 \001(\0132\n.Vector3PB\022\033\n\007Mov"
    "edir\030\004 \001(\0132\n.Vector3PB\022\027\n\003Pos\030\005 \001(\0132\n.Ve"
    "ctor3PB\"=\n\025AIRpcDeleteUserNotify\022\017\n\003Uid\030"
    "\001 \001(\022:\002-1\022\023\n\007SceneId\030\002 \001(\022:\002-1", 1310);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AISvrRpc.proto", &protobuf_RegisterTypes);
  AIRpcCreateAISceneAsk::default_instance_ = new AIRpcCreateAISceneAsk();
  AIRpcCreateAISceneReply::default_instance_ = new AIRpcCreateAISceneReply();
  AIUserP::default_instance_ = new AIUserP();
  AIRpcDeleteAISceneNotify::default_instance_ = new AIRpcDeleteAISceneNotify();
  AIRpcLoadUsersNotify::default_instance_ = new AIRpcLoadUsersNotify();
  AIRpcNoticeAIUserOperNotify::default_instance_ = new AIRpcNoticeAIUserOperNotify();
  AIRpcNoticeSceneInfoNotify::default_instance_ = new AIRpcNoticeSceneInfoNotify();
  AIRpcNoticeUpdateSceneInfoNotify::default_instance_ = new AIRpcNoticeUpdateSceneInfoNotify();
  AIUserData::default_instance_ = new AIUserData();
  AIUserCom::default_instance_ = new AIUserCom();
  AIUserProp::default_instance_ = new AIUserProp();
  AIUserPosCom::default_instance_ = new AIUserPosCom();
  AIRpcDeleteUserNotify::default_instance_ = new AIRpcDeleteUserNotify();
  AIRpcCreateAISceneAsk::default_instance_->InitAsDefaultInstance();
  AIRpcCreateAISceneReply::default_instance_->InitAsDefaultInstance();
  AIUserP::default_instance_->InitAsDefaultInstance();
  AIRpcDeleteAISceneNotify::default_instance_->InitAsDefaultInstance();
  AIRpcLoadUsersNotify::default_instance_->InitAsDefaultInstance();
  AIRpcNoticeAIUserOperNotify::default_instance_->InitAsDefaultInstance();
  AIRpcNoticeSceneInfoNotify::default_instance_->InitAsDefaultInstance();
  AIRpcNoticeUpdateSceneInfoNotify::default_instance_->InitAsDefaultInstance();
  AIUserData::default_instance_->InitAsDefaultInstance();
  AIUserCom::default_instance_->InitAsDefaultInstance();
  AIUserProp::default_instance_->InitAsDefaultInstance();
  AIUserPosCom::default_instance_->InitAsDefaultInstance();
  AIRpcDeleteUserNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AISvrRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AISvrRpc_2eproto {
  StaticDescriptorInitializer_AISvrRpc_2eproto() {
    protobuf_AddDesc_AISvrRpc_2eproto();
  }
} static_descriptor_initializer_AISvrRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AIRpcCreateAISceneAsk::kMembersFieldNumber;
const int AIRpcCreateAISceneAsk::kRoomIDFieldNumber;
const int AIRpcCreateAISceneAsk::kSceneConfIdFieldNumber;
const int AIRpcCreateAISceneAsk::kSceneIDFieldNumber;
const int AIRpcCreateAISceneAsk::kNodeNameFieldNumber;
#endif  // !_MSC_VER

AIRpcCreateAISceneAsk::AIRpcCreateAISceneAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AIRpcCreateAISceneAsk::InitAsDefaultInstance() {
}

AIRpcCreateAISceneAsk::AIRpcCreateAISceneAsk(const AIRpcCreateAISceneAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AIRpcCreateAISceneAsk::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_LONGLONG(-1);
  sceneconfid_ = 0;
  sceneid_ = 1;
  nodename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AIRpcCreateAISceneAsk::~AIRpcCreateAISceneAsk() {
  SharedDtor();
}

void AIRpcCreateAISceneAsk::SharedDtor() {
  if (nodename_ != &::google::protobuf::internal::kEmptyString) {
    delete nodename_;
  }
  if (this != default_instance_) {
  }
}

void AIRpcCreateAISceneAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AIRpcCreateAISceneAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AIRpcCreateAISceneAsk_descriptor_;
}

const AIRpcCreateAISceneAsk& AIRpcCreateAISceneAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AISvrRpc_2eproto();
  return *default_instance_;
}

AIRpcCreateAISceneAsk* AIRpcCreateAISceneAsk::default_instance_ = NULL;

AIRpcCreateAISceneAsk* AIRpcCreateAISceneAsk::New() const {
  return new AIRpcCreateAISceneAsk;
}

void AIRpcCreateAISceneAsk::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    roomid_ = GOOGLE_LONGLONG(-1);
    sceneconfid_ = 0;
    sceneid_ = 1;
    if (has_nodename()) {
      if (nodename_ != &::google::protobuf::internal::kEmptyString) {
        nodename_->clear();
      }
    }
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AIRpcCreateAISceneAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AIUserP Members = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Members;
        if (input->ExpectTag(16)) goto parse_RoomID;
        break;
      }

      // optional sint64 RoomID = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoomID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SceneConfId;
        break;
      }

      // optional sint32 SceneConfId = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SceneConfId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &sceneconfid_)));
          set_has_sceneconfid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_SceneID;
        break;
      }

      // optional sint32 SceneID = 4 [default = 1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SceneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_NodeName;
        break;
      }

      // optional string NodeName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NodeName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nodename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nodename().data(), this->nodename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AIRpcCreateAISceneAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .AIUserP Members = 1;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->members(i), output);
  }

  // optional sint64 RoomID = 2 [default = -1];
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->roomid(), output);
  }

  // optional sint32 SceneConfId = 3 [default = 0];
  if (has_sceneconfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->sceneconfid(), output);
  }

  // optional sint32 SceneID = 4 [default = 1];
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->sceneid(), output);
  }

  // optional string NodeName = 6;
  if (has_nodename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodename().data(), this->nodename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->nodename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AIRpcCreateAISceneAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .AIUserP Members = 1;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->members(i), target);
  }

  // optional sint64 RoomID = 2 [default = -1];
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->roomid(), target);
  }

  // optional sint32 SceneConfId = 3 [default = 0];
  if (has_sceneconfid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->sceneconfid(), target);
  }

  // optional sint32 SceneID = 4 [default = 1];
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->sceneid(), target);
  }

  // optional string NodeName = 6;
  if (has_nodename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodename().data(), this->nodename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->nodename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AIRpcCreateAISceneAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional sint64 RoomID = 2 [default = -1];
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->roomid());
    }

    // optional sint32 SceneConfId = 3 [default = 0];
    if (has_sceneconfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->sceneconfid());
    }

    // optional sint32 SceneID = 4 [default = 1];
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->sceneid());
    }

    // optional string NodeName = 6;
    if (has_nodename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nodename());
    }

  }
  // repeated .AIUserP Members = 1;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AIRpcCreateAISceneAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AIRpcCreateAISceneAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AIRpcCreateAISceneAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AIRpcCreateAISceneAsk::MergeFrom(const AIRpcCreateAISceneAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_sceneconfid()) {
      set_sceneconfid(from.sceneconfid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_nodename()) {
      set_nodename(from.nodename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AIRpcCreateAISceneAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIRpcCreateAISceneAsk::CopyFrom(const AIRpcCreateAISceneAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIRpcCreateAISceneAsk::IsInitialized() const {

  return true;
}

void AIRpcCreateAISceneAsk::Swap(AIRpcCreateAISceneAsk* other) {
  if (other != this) {
    members_.Swap(&other->members_);
    std::swap(roomid_, other->roomid_);
    std::swap(sceneconfid_, other->sceneconfid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(nodename_, other->nodename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AIRpcCreateAISceneAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AIRpcCreateAISceneAsk_descriptor_;
  metadata.reflection = AIRpcCreateAISceneAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AIRpcCreateAISceneReply::kResultFieldNumber;
#endif  // !_MSC_VER

AIRpcCreateAISceneReply::AIRpcCreateAISceneReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AIRpcCreateAISceneReply::InitAsDefaultInstance() {
}

AIRpcCreateAISceneReply::AIRpcCreateAISceneReply(const AIRpcCreateAISceneReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AIRpcCreateAISceneReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AIRpcCreateAISceneReply::~AIRpcCreateAISceneReply() {
  SharedDtor();
}

void AIRpcCreateAISceneReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AIRpcCreateAISceneReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AIRpcCreateAISceneReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AIRpcCreateAISceneReply_descriptor_;
}

const AIRpcCreateAISceneReply& AIRpcCreateAISceneReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AISvrRpc_2eproto();
  return *default_instance_;
}

AIRpcCreateAISceneReply* AIRpcCreateAISceneReply::default_instance_ = NULL;

AIRpcCreateAISceneReply* AIRpcCreateAISceneReply::New() const {
  return new AIRpcCreateAISceneReply;
}

void AIRpcCreateAISceneReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AIRpcCreateAISceneReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 2 [default = -9999];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AIRpcCreateAISceneReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 2 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AIRpcCreateAISceneReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 2 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AIRpcCreateAISceneReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 2 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AIRpcCreateAISceneReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AIRpcCreateAISceneReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AIRpcCreateAISceneReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AIRpcCreateAISceneReply::MergeFrom(const AIRpcCreateAISceneReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AIRpcCreateAISceneReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIRpcCreateAISceneReply::CopyFrom(const AIRpcCreateAISceneReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIRpcCreateAISceneReply::IsInitialized() const {

  return true;
}

void AIRpcCreateAISceneReply::Swap(AIRpcCreateAISceneReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AIRpcCreateAISceneReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AIRpcCreateAISceneReply_descriptor_;
  metadata.reflection = AIRpcCreateAISceneReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AIUserP::kUidFieldNumber;
const int AIUserP::kHreoIDFieldNumber;
const int AIUserP::kIsMonsterFieldNumber;
const int AIUserP::kKeyFieldNumber;
const int AIUserP::kTeamIdFieldNumber;
#endif  // !_MSC_VER

AIUserP::AIUserP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AIUserP::InitAsDefaultInstance() {
}

AIUserP::AIUserP(const AIUserP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AIUserP::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(-1);
  hreoid_ = -1;
  ismonster_ = -1;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  teamid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AIUserP::~AIUserP() {
  SharedDtor();
}

void AIUserP::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void AIUserP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AIUserP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AIUserP_descriptor_;
}

const AIUserP& AIUserP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AISvrRpc_2eproto();
  return *default_instance_;
}

AIUserP* AIUserP::default_instance_ = NULL;

AIUserP* AIUserP::New() const {
  return new AIUserP;
}

void AIUserP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(-1);
    hreoid_ = -1;
    ismonster_ = -1;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    teamid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AIUserP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 Uid = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_HreoID;
        break;
      }

      // optional sint32 HreoID = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HreoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &hreoid_)));
          set_has_hreoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_IsMonster;
        break;
      }

      // optional sint32 IsMonster = 8 [default = -1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsMonster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &ismonster_)));
          set_has_ismonster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_Key;
        break;
      }

      // optional string Key = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_TeamId;
        break;
      }

      // optional sint32 TeamId = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AIUserP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint64 Uid = 6 [default = -1];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(6, this->uid(), output);
  }

  // optional sint32 HreoID = 7 [default = -1];
  if (has_hreoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->hreoid(), output);
  }

  // optional sint32 IsMonster = 8 [default = -1];
  if (has_ismonster()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->ismonster(), output);
  }

  // optional string Key = 9;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->key(), output);
  }

  // optional sint32 TeamId = 10 [default = 0];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AIUserP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint64 Uid = 6 [default = -1];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(6, this->uid(), target);
  }

  // optional sint32 HreoID = 7 [default = -1];
  if (has_hreoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->hreoid(), target);
  }

  // optional sint32 IsMonster = 8 [default = -1];
  if (has_ismonster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->ismonster(), target);
  }

  // optional string Key = 9;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->key(), target);
  }

  // optional sint32 TeamId = 10 [default = 0];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AIUserP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 Uid = 6 [default = -1];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->uid());
    }

    // optional sint32 HreoID = 7 [default = -1];
    if (has_hreoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->hreoid());
    }

    // optional sint32 IsMonster = 8 [default = -1];
    if (has_ismonster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->ismonster());
    }

    // optional string Key = 9;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional sint32 TeamId = 10 [default = 0];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AIUserP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AIUserP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AIUserP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AIUserP::MergeFrom(const AIUserP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_hreoid()) {
      set_hreoid(from.hreoid());
    }
    if (from.has_ismonster()) {
      set_ismonster(from.ismonster());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AIUserP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIUserP::CopyFrom(const AIUserP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIUserP::IsInitialized() const {

  return true;
}

void AIUserP::Swap(AIUserP* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(hreoid_, other->hreoid_);
    std::swap(ismonster_, other->ismonster_);
    std::swap(key_, other->key_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AIUserP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AIUserP_descriptor_;
  metadata.reflection = AIUserP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AIRpcDeleteAISceneNotify::kRoomIDFieldNumber;
const int AIRpcDeleteAISceneNotify::kNodeNameFieldNumber;
const int AIRpcDeleteAISceneNotify::kSceneIDFieldNumber;
#endif  // !_MSC_VER

AIRpcDeleteAISceneNotify::AIRpcDeleteAISceneNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AIRpcDeleteAISceneNotify::InitAsDefaultInstance() {
}

AIRpcDeleteAISceneNotify::AIRpcDeleteAISceneNotify(const AIRpcDeleteAISceneNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AIRpcDeleteAISceneNotify::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_LONGLONG(-1);
  nodename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sceneid_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AIRpcDeleteAISceneNotify::~AIRpcDeleteAISceneNotify() {
  SharedDtor();
}

void AIRpcDeleteAISceneNotify::SharedDtor() {
  if (nodename_ != &::google::protobuf::internal::kEmptyString) {
    delete nodename_;
  }
  if (this != default_instance_) {
  }
}

void AIRpcDeleteAISceneNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AIRpcDeleteAISceneNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AIRpcDeleteAISceneNotify_descriptor_;
}

const AIRpcDeleteAISceneNotify& AIRpcDeleteAISceneNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AISvrRpc_2eproto();
  return *default_instance_;
}

AIRpcDeleteAISceneNotify* AIRpcDeleteAISceneNotify::default_instance_ = NULL;

AIRpcDeleteAISceneNotify* AIRpcDeleteAISceneNotify::New() const {
  return new AIRpcDeleteAISceneNotify;
}

void AIRpcDeleteAISceneNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = GOOGLE_LONGLONG(-1);
    if (has_nodename()) {
      if (nodename_ != &::google::protobuf::internal::kEmptyString) {
        nodename_->clear();
      }
    }
    sceneid_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AIRpcDeleteAISceneNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 RoomID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_NodeName;
        break;
      }

      // optional string NodeName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NodeName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nodename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nodename().data(), this->nodename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SceneID;
        break;
      }

      // optional sint32 SceneID = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SceneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AIRpcDeleteAISceneNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint64 RoomID = 1 [default = -1];
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->roomid(), output);
  }

  // optional string NodeName = 2;
  if (has_nodename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodename().data(), this->nodename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nodename(), output);
  }

  // optional sint32 SceneID = 3 [default = 1];
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AIRpcDeleteAISceneNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint64 RoomID = 1 [default = -1];
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->roomid(), target);
  }

  // optional string NodeName = 2;
  if (has_nodename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodename().data(), this->nodename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nodename(), target);
  }

  // optional sint32 SceneID = 3 [default = 1];
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AIRpcDeleteAISceneNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 RoomID = 1 [default = -1];
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->roomid());
    }

    // optional string NodeName = 2;
    if (has_nodename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nodename());
    }

    // optional sint32 SceneID = 3 [default = 1];
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AIRpcDeleteAISceneNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AIRpcDeleteAISceneNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AIRpcDeleteAISceneNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AIRpcDeleteAISceneNotify::MergeFrom(const AIRpcDeleteAISceneNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_nodename()) {
      set_nodename(from.nodename());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AIRpcDeleteAISceneNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIRpcDeleteAISceneNotify::CopyFrom(const AIRpcDeleteAISceneNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIRpcDeleteAISceneNotify::IsInitialized() const {

  return true;
}

void AIRpcDeleteAISceneNotify::Swap(AIRpcDeleteAISceneNotify* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(nodename_, other->nodename_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AIRpcDeleteAISceneNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AIRpcDeleteAISceneNotify_descriptor_;
  metadata.reflection = AIRpcDeleteAISceneNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AIRpcLoadUsersNotify::kUserinfoFieldNumber;
const int AIRpcLoadUsersNotify::kSceneIdFieldNumber;
#endif  // !_MSC_VER

AIRpcLoadUsersNotify::AIRpcLoadUsersNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AIRpcLoadUsersNotify::InitAsDefaultInstance() {
}

AIRpcLoadUsersNotify::AIRpcLoadUsersNotify(const AIRpcLoadUsersNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AIRpcLoadUsersNotify::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sceneid_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AIRpcLoadUsersNotify::~AIRpcLoadUsersNotify() {
  SharedDtor();
}

void AIRpcLoadUsersNotify::SharedDtor() {
  if (userinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete userinfo_;
  }
  if (this != default_instance_) {
  }
}

void AIRpcLoadUsersNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AIRpcLoadUsersNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AIRpcLoadUsersNotify_descriptor_;
}

const AIRpcLoadUsersNotify& AIRpcLoadUsersNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AISvrRpc_2eproto();
  return *default_instance_;
}

AIRpcLoadUsersNotify* AIRpcLoadUsersNotify::default_instance_ = NULL;

AIRpcLoadUsersNotify* AIRpcLoadUsersNotify::New() const {
  return new AIRpcLoadUsersNotify;
}

void AIRpcLoadUsersNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userinfo()) {
      if (userinfo_ != &::google::protobuf::internal::kEmptyString) {
        userinfo_->clear();
      }
    }
    sceneid_ = GOOGLE_LONGLONG(-1);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AIRpcLoadUsersNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes Userinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SceneId;
        break;
      }

      // optional sint64 SceneId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AIRpcLoadUsersNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes Userinfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->userinfo(), output);
  }

  // optional sint64 SceneId = 2 [default = -1];
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AIRpcLoadUsersNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes Userinfo = 1;
  if (has_userinfo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->userinfo(), target);
  }

  // optional sint64 SceneId = 2 [default = -1];
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AIRpcLoadUsersNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes Userinfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->userinfo());
    }

    // optional sint64 SceneId = 2 [default = -1];
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AIRpcLoadUsersNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AIRpcLoadUsersNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AIRpcLoadUsersNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AIRpcLoadUsersNotify::MergeFrom(const AIRpcLoadUsersNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      set_userinfo(from.userinfo());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AIRpcLoadUsersNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIRpcLoadUsersNotify::CopyFrom(const AIRpcLoadUsersNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIRpcLoadUsersNotify::IsInitialized() const {

  return true;
}

void AIRpcLoadUsersNotify::Swap(AIRpcLoadUsersNotify* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AIRpcLoadUsersNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AIRpcLoadUsersNotify_descriptor_;
  metadata.reflection = AIRpcLoadUsersNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AIRpcNoticeAIUserOperNotify::kOperTypeFieldNumber;
const int AIRpcNoticeAIUserOperNotify::kUserIdFieldNumber;
const int AIRpcNoticeAIUserOperNotify::kMsgInfoFieldNumber;
const int AIRpcNoticeAIUserOperNotify::kSceneIdFieldNumber;
#endif  // !_MSC_VER

AIRpcNoticeAIUserOperNotify::AIRpcNoticeAIUserOperNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AIRpcNoticeAIUserOperNotify::InitAsDefaultInstance() {
}

AIRpcNoticeAIUserOperNotify::AIRpcNoticeAIUserOperNotify(const AIRpcNoticeAIUserOperNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AIRpcNoticeAIUserOperNotify::SharedCtor() {
  _cached_size_ = 0;
  opertype_ = -1;
  userid_ = GOOGLE_LONGLONG(-1);
  sceneid_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AIRpcNoticeAIUserOperNotify::~AIRpcNoticeAIUserOperNotify() {
  SharedDtor();
}

void AIRpcNoticeAIUserOperNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AIRpcNoticeAIUserOperNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AIRpcNoticeAIUserOperNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AIRpcNoticeAIUserOperNotify_descriptor_;
}

const AIRpcNoticeAIUserOperNotify& AIRpcNoticeAIUserOperNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AISvrRpc_2eproto();
  return *default_instance_;
}

AIRpcNoticeAIUserOperNotify* AIRpcNoticeAIUserOperNotify::default_instance_ = NULL;

AIRpcNoticeAIUserOperNotify* AIRpcNoticeAIUserOperNotify::New() const {
  return new AIRpcNoticeAIUserOperNotify;
}

void AIRpcNoticeAIUserOperNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opertype_ = -1;
    userid_ = GOOGLE_LONGLONG(-1);
    sceneid_ = GOOGLE_LONGLONG(-1);
  }
  msginfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AIRpcNoticeAIUserOperNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 OperType = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &opertype_)));
          set_has_opertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_UserId;
        break;
      }

      // optional sint64 UserId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_MsgInfo;
        break;
      }

      // repeated bytes MsgInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MsgInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_msginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_MsgInfo;
        if (input->ExpectTag(32)) goto parse_SceneId;
        break;
      }

      // optional sint64 SceneId = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AIRpcNoticeAIUserOperNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 OperType = 1 [default = -1];
  if (has_opertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->opertype(), output);
  }

  // optional sint64 UserId = 2 [default = -1];
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->userid(), output);
  }

  // repeated bytes MsgInfo = 3;
  for (int i = 0; i < this->msginfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->msginfo(i), output);
  }

  // optional sint64 SceneId = 4 [default = -1];
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AIRpcNoticeAIUserOperNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 OperType = 1 [default = -1];
  if (has_opertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->opertype(), target);
  }

  // optional sint64 UserId = 2 [default = -1];
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->userid(), target);
  }

  // repeated bytes MsgInfo = 3;
  for (int i = 0; i < this->msginfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->msginfo(i), target);
  }

  // optional sint64 SceneId = 4 [default = -1];
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AIRpcNoticeAIUserOperNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 OperType = 1 [default = -1];
    if (has_opertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->opertype());
    }

    // optional sint64 UserId = 2 [default = -1];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->userid());
    }

    // optional sint64 SceneId = 4 [default = -1];
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->sceneid());
    }

  }
  // repeated bytes MsgInfo = 3;
  total_size += 1 * this->msginfo_size();
  for (int i = 0; i < this->msginfo_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->msginfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AIRpcNoticeAIUserOperNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AIRpcNoticeAIUserOperNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AIRpcNoticeAIUserOperNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AIRpcNoticeAIUserOperNotify::MergeFrom(const AIRpcNoticeAIUserOperNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  msginfo_.MergeFrom(from.msginfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opertype()) {
      set_opertype(from.opertype());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AIRpcNoticeAIUserOperNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIRpcNoticeAIUserOperNotify::CopyFrom(const AIRpcNoticeAIUserOperNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIRpcNoticeAIUserOperNotify::IsInitialized() const {

  return true;
}

void AIRpcNoticeAIUserOperNotify::Swap(AIRpcNoticeAIUserOperNotify* other) {
  if (other != this) {
    std::swap(opertype_, other->opertype_);
    std::swap(userid_, other->userid_);
    msginfo_.Swap(&other->msginfo_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AIRpcNoticeAIUserOperNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AIRpcNoticeAIUserOperNotify_descriptor_;
  metadata.reflection = AIRpcNoticeAIUserOperNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AIRpcNoticeSceneInfoNotify::kSceneIdFieldNumber;
const int AIRpcNoticeSceneInfoNotify::kSceneInfoFieldNumber;
#endif  // !_MSC_VER

AIRpcNoticeSceneInfoNotify::AIRpcNoticeSceneInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AIRpcNoticeSceneInfoNotify::InitAsDefaultInstance() {
}

AIRpcNoticeSceneInfoNotify::AIRpcNoticeSceneInfoNotify(const AIRpcNoticeSceneInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AIRpcNoticeSceneInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = GOOGLE_LONGLONG(-1);
  sceneinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AIRpcNoticeSceneInfoNotify::~AIRpcNoticeSceneInfoNotify() {
  SharedDtor();
}

void AIRpcNoticeSceneInfoNotify::SharedDtor() {
  if (sceneinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete sceneinfo_;
  }
  if (this != default_instance_) {
  }
}

void AIRpcNoticeSceneInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AIRpcNoticeSceneInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AIRpcNoticeSceneInfoNotify_descriptor_;
}

const AIRpcNoticeSceneInfoNotify& AIRpcNoticeSceneInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AISvrRpc_2eproto();
  return *default_instance_;
}

AIRpcNoticeSceneInfoNotify* AIRpcNoticeSceneInfoNotify::default_instance_ = NULL;

AIRpcNoticeSceneInfoNotify* AIRpcNoticeSceneInfoNotify::New() const {
  return new AIRpcNoticeSceneInfoNotify;
}

void AIRpcNoticeSceneInfoNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = GOOGLE_LONGLONG(-1);
    if (has_sceneinfo()) {
      if (sceneinfo_ != &::google::protobuf::internal::kEmptyString) {
        sceneinfo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AIRpcNoticeSceneInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 SceneId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_SceneInfo;
        break;
      }

      // optional bytes SceneInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SceneInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sceneinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AIRpcNoticeSceneInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint64 SceneId = 1 [default = -1];
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->sceneid(), output);
  }

  // optional bytes SceneInfo = 2;
  if (has_sceneinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->sceneinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AIRpcNoticeSceneInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint64 SceneId = 1 [default = -1];
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->sceneid(), target);
  }

  // optional bytes SceneInfo = 2;
  if (has_sceneinfo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sceneinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AIRpcNoticeSceneInfoNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 SceneId = 1 [default = -1];
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->sceneid());
    }

    // optional bytes SceneInfo = 2;
    if (has_sceneinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sceneinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AIRpcNoticeSceneInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AIRpcNoticeSceneInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AIRpcNoticeSceneInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AIRpcNoticeSceneInfoNotify::MergeFrom(const AIRpcNoticeSceneInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_sceneinfo()) {
      set_sceneinfo(from.sceneinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AIRpcNoticeSceneInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIRpcNoticeSceneInfoNotify::CopyFrom(const AIRpcNoticeSceneInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIRpcNoticeSceneInfoNotify::IsInitialized() const {

  return true;
}

void AIRpcNoticeSceneInfoNotify::Swap(AIRpcNoticeSceneInfoNotify* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(sceneinfo_, other->sceneinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AIRpcNoticeSceneInfoNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AIRpcNoticeSceneInfoNotify_descriptor_;
  metadata.reflection = AIRpcNoticeSceneInfoNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AIRpcNoticeUpdateSceneInfoNotify::kSceneIdFieldNumber;
const int AIRpcNoticeUpdateSceneInfoNotify::kUserinfoFieldNumber;
const int AIRpcNoticeUpdateSceneInfoNotify::kSprayinfoFieldNumber;
const int AIRpcNoticeUpdateSceneInfoNotify::kSendtimeFieldNumber;
#endif  // !_MSC_VER

AIRpcNoticeUpdateSceneInfoNotify::AIRpcNoticeUpdateSceneInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AIRpcNoticeUpdateSceneInfoNotify::InitAsDefaultInstance() {
}

AIRpcNoticeUpdateSceneInfoNotify::AIRpcNoticeUpdateSceneInfoNotify(const AIRpcNoticeUpdateSceneInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AIRpcNoticeUpdateSceneInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = GOOGLE_LONGLONG(-1);
  sendtime_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AIRpcNoticeUpdateSceneInfoNotify::~AIRpcNoticeUpdateSceneInfoNotify() {
  SharedDtor();
}

void AIRpcNoticeUpdateSceneInfoNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AIRpcNoticeUpdateSceneInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AIRpcNoticeUpdateSceneInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AIRpcNoticeUpdateSceneInfoNotify_descriptor_;
}

const AIRpcNoticeUpdateSceneInfoNotify& AIRpcNoticeUpdateSceneInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AISvrRpc_2eproto();
  return *default_instance_;
}

AIRpcNoticeUpdateSceneInfoNotify* AIRpcNoticeUpdateSceneInfoNotify::default_instance_ = NULL;

AIRpcNoticeUpdateSceneInfoNotify* AIRpcNoticeUpdateSceneInfoNotify::New() const {
  return new AIRpcNoticeUpdateSceneInfoNotify;
}

void AIRpcNoticeUpdateSceneInfoNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = GOOGLE_LONGLONG(-1);
    sendtime_ = GOOGLE_LONGLONG(-1);
  }
  userinfo_.Clear();
  sprayinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AIRpcNoticeUpdateSceneInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 SceneId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Userinfo;
        break;
      }

      // repeated .AIUserData Userinfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Userinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Userinfo;
        if (input->ExpectTag(34)) goto parse_Sprayinfo;
        break;
      }

      // repeated bytes Sprayinfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Sprayinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_sprayinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Sprayinfo;
        if (input->ExpectTag(40)) goto parse_Sendtime;
        break;
      }

      // optional sint64 Sendtime = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Sendtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &sendtime_)));
          set_has_sendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AIRpcNoticeUpdateSceneInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint64 SceneId = 1 [default = -1];
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->sceneid(), output);
  }

  // repeated .AIUserData Userinfo = 3;
  for (int i = 0; i < this->userinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->userinfo(i), output);
  }

  // repeated bytes Sprayinfo = 4;
  for (int i = 0; i < this->sprayinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->sprayinfo(i), output);
  }

  // optional sint64 Sendtime = 5 [default = -1];
  if (has_sendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->sendtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AIRpcNoticeUpdateSceneInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint64 SceneId = 1 [default = -1];
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->sceneid(), target);
  }

  // repeated .AIUserData Userinfo = 3;
  for (int i = 0; i < this->userinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->userinfo(i), target);
  }

  // repeated bytes Sprayinfo = 4;
  for (int i = 0; i < this->sprayinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->sprayinfo(i), target);
  }

  // optional sint64 Sendtime = 5 [default = -1];
  if (has_sendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(5, this->sendtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AIRpcNoticeUpdateSceneInfoNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 SceneId = 1 [default = -1];
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->sceneid());
    }

    // optional sint64 Sendtime = 5 [default = -1];
    if (has_sendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->sendtime());
    }

  }
  // repeated .AIUserData Userinfo = 3;
  total_size += 1 * this->userinfo_size();
  for (int i = 0; i < this->userinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userinfo(i));
  }

  // repeated bytes Sprayinfo = 4;
  total_size += 1 * this->sprayinfo_size();
  for (int i = 0; i < this->sprayinfo_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->sprayinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AIRpcNoticeUpdateSceneInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AIRpcNoticeUpdateSceneInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AIRpcNoticeUpdateSceneInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AIRpcNoticeUpdateSceneInfoNotify::MergeFrom(const AIRpcNoticeUpdateSceneInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  userinfo_.MergeFrom(from.userinfo_);
  sprayinfo_.MergeFrom(from.sprayinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_sendtime()) {
      set_sendtime(from.sendtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AIRpcNoticeUpdateSceneInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIRpcNoticeUpdateSceneInfoNotify::CopyFrom(const AIRpcNoticeUpdateSceneInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIRpcNoticeUpdateSceneInfoNotify::IsInitialized() const {

  return true;
}

void AIRpcNoticeUpdateSceneInfoNotify::Swap(AIRpcNoticeUpdateSceneInfoNotify* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    userinfo_.Swap(&other->userinfo_);
    sprayinfo_.Swap(&other->sprayinfo_);
    std::swap(sendtime_, other->sendtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AIRpcNoticeUpdateSceneInfoNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AIRpcNoticeUpdateSceneInfoNotify_descriptor_;
  metadata.reflection = AIRpcNoticeUpdateSceneInfoNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AIUserData::kUsercomFieldNumber;
const int AIUserData::kUserposinfoFieldNumber;
const int AIUserData::kUserpropFieldNumber;
const int AIUserData::kUseskillRetFieldNumber;
const int AIUserData::kShootRetFieldNumber;
#endif  // !_MSC_VER

AIUserData::AIUserData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AIUserData::InitAsDefaultInstance() {
  usercom_ = const_cast< ::AIUserCom*>(&::AIUserCom::default_instance());
  userposinfo_ = const_cast< ::AIUserPosCom*>(&::AIUserPosCom::default_instance());
  userprop_ = const_cast< ::AIUserProp*>(&::AIUserProp::default_instance());
}

AIUserData::AIUserData(const AIUserData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AIUserData::SharedCtor() {
  _cached_size_ = 0;
  usercom_ = NULL;
  userposinfo_ = NULL;
  userprop_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AIUserData::~AIUserData() {
  SharedDtor();
}

void AIUserData::SharedDtor() {
  if (this != default_instance_) {
    delete usercom_;
    delete userposinfo_;
    delete userprop_;
  }
}

void AIUserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AIUserData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AIUserData_descriptor_;
}

const AIUserData& AIUserData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AISvrRpc_2eproto();
  return *default_instance_;
}

AIUserData* AIUserData::default_instance_ = NULL;

AIUserData* AIUserData::New() const {
  return new AIUserData;
}

void AIUserData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_usercom()) {
      if (usercom_ != NULL) usercom_->::AIUserCom::Clear();
    }
    if (has_userposinfo()) {
      if (userposinfo_ != NULL) userposinfo_->::AIUserPosCom::Clear();
    }
    if (has_userprop()) {
      if (userprop_ != NULL) userprop_->::AIUserProp::Clear();
    }
  }
  useskillret_.Clear();
  shootret_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AIUserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AIUserCom Usercom = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_usercom()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Userposinfo;
        break;
      }

      // optional .AIUserPosCom Userposinfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Userposinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userposinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Userprop;
        break;
      }

      // optional .AIUserProp Userprop = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Userprop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userprop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_UseskillRet;
        break;
      }

      // repeated bytes UseskillRet = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UseskillRet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_useskillret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_UseskillRet;
        if (input->ExpectTag(58)) goto parse_ShootRet;
        break;
      }

      // repeated bytes ShootRet = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ShootRet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_shootret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ShootRet;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AIUserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .AIUserCom Usercom = 3;
  if (has_usercom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->usercom(), output);
  }

  // optional .AIUserPosCom Userposinfo = 4;
  if (has_userposinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->userposinfo(), output);
  }

  // optional .AIUserProp Userprop = 5;
  if (has_userprop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->userprop(), output);
  }

  // repeated bytes UseskillRet = 6;
  for (int i = 0; i < this->useskillret_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->useskillret(i), output);
  }

  // repeated bytes ShootRet = 7;
  for (int i = 0; i < this->shootret_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->shootret(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AIUserData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .AIUserCom Usercom = 3;
  if (has_usercom()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->usercom(), target);
  }

  // optional .AIUserPosCom Userposinfo = 4;
  if (has_userposinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->userposinfo(), target);
  }

  // optional .AIUserProp Userprop = 5;
  if (has_userprop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->userprop(), target);
  }

  // repeated bytes UseskillRet = 6;
  for (int i = 0; i < this->useskillret_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(6, this->useskillret(i), target);
  }

  // repeated bytes ShootRet = 7;
  for (int i = 0; i < this->shootret_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(7, this->shootret(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AIUserData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AIUserCom Usercom = 3;
    if (has_usercom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->usercom());
    }

    // optional .AIUserPosCom Userposinfo = 4;
    if (has_userposinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userposinfo());
    }

    // optional .AIUserProp Userprop = 5;
    if (has_userprop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userprop());
    }

  }
  // repeated bytes UseskillRet = 6;
  total_size += 1 * this->useskillret_size();
  for (int i = 0; i < this->useskillret_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->useskillret(i));
  }

  // repeated bytes ShootRet = 7;
  total_size += 1 * this->shootret_size();
  for (int i = 0; i < this->shootret_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->shootret(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AIUserData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AIUserData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AIUserData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AIUserData::MergeFrom(const AIUserData& from) {
  GOOGLE_CHECK_NE(&from, this);
  useskillret_.MergeFrom(from.useskillret_);
  shootret_.MergeFrom(from.shootret_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usercom()) {
      mutable_usercom()->::AIUserCom::MergeFrom(from.usercom());
    }
    if (from.has_userposinfo()) {
      mutable_userposinfo()->::AIUserPosCom::MergeFrom(from.userposinfo());
    }
    if (from.has_userprop()) {
      mutable_userprop()->::AIUserProp::MergeFrom(from.userprop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AIUserData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIUserData::CopyFrom(const AIUserData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIUserData::IsInitialized() const {

  return true;
}

void AIUserData::Swap(AIUserData* other) {
  if (other != this) {
    std::swap(usercom_, other->usercom_);
    std::swap(userposinfo_, other->userposinfo_);
    std::swap(userprop_, other->userprop_);
    useskillret_.Swap(&other->useskillret_);
    shootret_.Swap(&other->shootret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AIUserData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AIUserData_descriptor_;
  metadata.reflection = AIUserData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AIUserCom::kUidFieldNumber;
const int AIUserCom::kDeadFieldNumber;
const int AIUserCom::kReviveposFieldNumber;
const int AIUserCom::kFaceDirFieldNumber;
#endif  // !_MSC_VER

AIUserCom::AIUserCom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AIUserCom::InitAsDefaultInstance() {
  revivepos_ = const_cast< ::Vector3PB*>(&::Vector3PB::default_instance());
  facedir_ = const_cast< ::Vector3PB*>(&::Vector3PB::default_instance());
}

AIUserCom::AIUserCom(const AIUserCom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AIUserCom::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(-1);
  dead_ = false;
  revivepos_ = NULL;
  facedir_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AIUserCom::~AIUserCom() {
  SharedDtor();
}

void AIUserCom::SharedDtor() {
  if (this != default_instance_) {
    delete revivepos_;
    delete facedir_;
  }
}

void AIUserCom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AIUserCom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AIUserCom_descriptor_;
}

const AIUserCom& AIUserCom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AISvrRpc_2eproto();
  return *default_instance_;
}

AIUserCom* AIUserCom::default_instance_ = NULL;

AIUserCom* AIUserCom::New() const {
  return new AIUserCom;
}

void AIUserCom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(-1);
    dead_ = false;
    if (has_revivepos()) {
      if (revivepos_ != NULL) revivepos_->::Vector3PB::Clear();
    }
    if (has_facedir()) {
      if (facedir_ != NULL) facedir_->::Vector3PB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AIUserCom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 Uid = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Dead;
        break;
      }

      // optional bool Dead = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Dead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dead_)));
          set_has_dead();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Revivepos;
        break;
      }

      // optional .Vector3PB Revivepos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Revivepos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_revivepos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_FaceDir;
        break;
      }

      // optional .Vector3PB FaceDir = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FaceDir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_facedir()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AIUserCom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint64 Uid = 1 [default = -1];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->uid(), output);
  }

  // optional bool Dead = 2 [default = false];
  if (has_dead()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->dead(), output);
  }

  // optional .Vector3PB Revivepos = 3;
  if (has_revivepos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->revivepos(), output);
  }

  // optional .Vector3PB FaceDir = 4;
  if (has_facedir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->facedir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AIUserCom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint64 Uid = 1 [default = -1];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->uid(), target);
  }

  // optional bool Dead = 2 [default = false];
  if (has_dead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->dead(), target);
  }

  // optional .Vector3PB Revivepos = 3;
  if (has_revivepos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->revivepos(), target);
  }

  // optional .Vector3PB FaceDir = 4;
  if (has_facedir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->facedir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AIUserCom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 Uid = 1 [default = -1];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->uid());
    }

    // optional bool Dead = 2 [default = false];
    if (has_dead()) {
      total_size += 1 + 1;
    }

    // optional .Vector3PB Revivepos = 3;
    if (has_revivepos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->revivepos());
    }

    // optional .Vector3PB FaceDir = 4;
    if (has_facedir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->facedir());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AIUserCom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AIUserCom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AIUserCom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AIUserCom::MergeFrom(const AIUserCom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_dead()) {
      set_dead(from.dead());
    }
    if (from.has_revivepos()) {
      mutable_revivepos()->::Vector3PB::MergeFrom(from.revivepos());
    }
    if (from.has_facedir()) {
      mutable_facedir()->::Vector3PB::MergeFrom(from.facedir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AIUserCom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIUserCom::CopyFrom(const AIUserCom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIUserCom::IsInitialized() const {

  return true;
}

void AIUserCom::Swap(AIUserCom* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(dead_, other->dead_);
    std::swap(revivepos_, other->revivepos_);
    std::swap(facedir_, other->facedir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AIUserCom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AIUserCom_descriptor_;
  metadata.reflection = AIUserCom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AIUserProp::kHpFieldNumber;
const int AIUserProp::kEnergyFieldNumber;
#endif  // !_MSC_VER

AIUserProp::AIUserProp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AIUserProp::InitAsDefaultInstance() {
}

AIUserProp::AIUserProp(const AIUserProp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AIUserProp::SharedCtor() {
  _cached_size_ = 0;
  hp_ = -1;
  energy_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AIUserProp::~AIUserProp() {
  SharedDtor();
}

void AIUserProp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AIUserProp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AIUserProp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AIUserProp_descriptor_;
}

const AIUserProp& AIUserProp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AISvrRpc_2eproto();
  return *default_instance_;
}

AIUserProp* AIUserProp::default_instance_ = NULL;

AIUserProp* AIUserProp::New() const {
  return new AIUserProp;
}

void AIUserProp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hp_ = -1;
    energy_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AIUserProp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float Hp = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_Energy;
        break;
      }

      // optional float Energy = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AIUserProp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float Hp = 1 [default = -1];
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->hp(), output);
  }

  // optional float Energy = 2 [default = -1];
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->energy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AIUserProp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float Hp = 1 [default = -1];
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->hp(), target);
  }

  // optional float Energy = 2 [default = -1];
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->energy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AIUserProp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float Hp = 1 [default = -1];
    if (has_hp()) {
      total_size += 1 + 4;
    }

    // optional float Energy = 2 [default = -1];
    if (has_energy()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AIUserProp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AIUserProp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AIUserProp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AIUserProp::MergeFrom(const AIUserProp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AIUserProp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIUserProp::CopyFrom(const AIUserProp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIUserProp::IsInitialized() const {

  return true;
}

void AIUserProp::Swap(AIUserProp* other) {
  if (other != this) {
    std::swap(hp_, other->hp_);
    std::swap(energy_, other->energy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AIUserProp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AIUserProp_descriptor_;
  metadata.reflection = AIUserProp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AIUserPosCom::kBmovingFieldNumber;
const int AIUserPosCom::kFootrayFieldNumber;
const int AIUserPosCom::kRockdirFieldNumber;
const int AIUserPosCom::kMovedirFieldNumber;
const int AIUserPosCom::kPosFieldNumber;
#endif  // !_MSC_VER

AIUserPosCom::AIUserPosCom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AIUserPosCom::InitAsDefaultInstance() {
  footray_ = const_cast< ::Vector3PB*>(&::Vector3PB::default_instance());
  rockdir_ = const_cast< ::Vector3PB*>(&::Vector3PB::default_instance());
  movedir_ = const_cast< ::Vector3PB*>(&::Vector3PB::default_instance());
  pos_ = const_cast< ::Vector3PB*>(&::Vector3PB::default_instance());
}

AIUserPosCom::AIUserPosCom(const AIUserPosCom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AIUserPosCom::SharedCtor() {
  _cached_size_ = 0;
  bmoving_ = false;
  footray_ = NULL;
  rockdir_ = NULL;
  movedir_ = NULL;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AIUserPosCom::~AIUserPosCom() {
  SharedDtor();
}

void AIUserPosCom::SharedDtor() {
  if (this != default_instance_) {
    delete footray_;
    delete rockdir_;
    delete movedir_;
    delete pos_;
  }
}

void AIUserPosCom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AIUserPosCom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AIUserPosCom_descriptor_;
}

const AIUserPosCom& AIUserPosCom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AISvrRpc_2eproto();
  return *default_instance_;
}

AIUserPosCom* AIUserPosCom::default_instance_ = NULL;

AIUserPosCom* AIUserPosCom::New() const {
  return new AIUserPosCom;
}

void AIUserPosCom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bmoving_ = false;
    if (has_footray()) {
      if (footray_ != NULL) footray_->::Vector3PB::Clear();
    }
    if (has_rockdir()) {
      if (rockdir_ != NULL) rockdir_->::Vector3PB::Clear();
    }
    if (has_movedir()) {
      if (movedir_ != NULL) movedir_->::Vector3PB::Clear();
    }
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Vector3PB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AIUserPosCom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Bmoving = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bmoving_)));
          set_has_bmoving();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Footray;
        break;
      }

      // optional .Vector3PB Footray = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Footray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_footray()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Rockdir;
        break;
      }

      // optional .Vector3PB Rockdir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Rockdir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rockdir()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Movedir;
        break;
      }

      // optional .Vector3PB Movedir = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Movedir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_movedir()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Pos;
        break;
      }

      // optional .Vector3PB Pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AIUserPosCom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool Bmoving = 1 [default = false];
  if (has_bmoving()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bmoving(), output);
  }

  // optional .Vector3PB Footray = 2;
  if (has_footray()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->footray(), output);
  }

  // optional .Vector3PB Rockdir = 3;
  if (has_rockdir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rockdir(), output);
  }

  // optional .Vector3PB Movedir = 4;
  if (has_movedir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->movedir(), output);
  }

  // optional .Vector3PB Pos = 5;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AIUserPosCom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool Bmoving = 1 [default = false];
  if (has_bmoving()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bmoving(), target);
  }

  // optional .Vector3PB Footray = 2;
  if (has_footray()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->footray(), target);
  }

  // optional .Vector3PB Rockdir = 3;
  if (has_rockdir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rockdir(), target);
  }

  // optional .Vector3PB Movedir = 4;
  if (has_movedir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->movedir(), target);
  }

  // optional .Vector3PB Pos = 5;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AIUserPosCom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Bmoving = 1 [default = false];
    if (has_bmoving()) {
      total_size += 1 + 1;
    }

    // optional .Vector3PB Footray = 2;
    if (has_footray()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->footray());
    }

    // optional .Vector3PB Rockdir = 3;
    if (has_rockdir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rockdir());
    }

    // optional .Vector3PB Movedir = 4;
    if (has_movedir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->movedir());
    }

    // optional .Vector3PB Pos = 5;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AIUserPosCom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AIUserPosCom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AIUserPosCom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AIUserPosCom::MergeFrom(const AIUserPosCom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bmoving()) {
      set_bmoving(from.bmoving());
    }
    if (from.has_footray()) {
      mutable_footray()->::Vector3PB::MergeFrom(from.footray());
    }
    if (from.has_rockdir()) {
      mutable_rockdir()->::Vector3PB::MergeFrom(from.rockdir());
    }
    if (from.has_movedir()) {
      mutable_movedir()->::Vector3PB::MergeFrom(from.movedir());
    }
    if (from.has_pos()) {
      mutable_pos()->::Vector3PB::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AIUserPosCom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIUserPosCom::CopyFrom(const AIUserPosCom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIUserPosCom::IsInitialized() const {

  return true;
}

void AIUserPosCom::Swap(AIUserPosCom* other) {
  if (other != this) {
    std::swap(bmoving_, other->bmoving_);
    std::swap(footray_, other->footray_);
    std::swap(rockdir_, other->rockdir_);
    std::swap(movedir_, other->movedir_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AIUserPosCom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AIUserPosCom_descriptor_;
  metadata.reflection = AIUserPosCom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AIRpcDeleteUserNotify::kUidFieldNumber;
const int AIRpcDeleteUserNotify::kSceneIdFieldNumber;
#endif  // !_MSC_VER

AIRpcDeleteUserNotify::AIRpcDeleteUserNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AIRpcDeleteUserNotify::InitAsDefaultInstance() {
}

AIRpcDeleteUserNotify::AIRpcDeleteUserNotify(const AIRpcDeleteUserNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AIRpcDeleteUserNotify::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(-1);
  sceneid_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AIRpcDeleteUserNotify::~AIRpcDeleteUserNotify() {
  SharedDtor();
}

void AIRpcDeleteUserNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AIRpcDeleteUserNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AIRpcDeleteUserNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AIRpcDeleteUserNotify_descriptor_;
}

const AIRpcDeleteUserNotify& AIRpcDeleteUserNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AISvrRpc_2eproto();
  return *default_instance_;
}

AIRpcDeleteUserNotify* AIRpcDeleteUserNotify::default_instance_ = NULL;

AIRpcDeleteUserNotify* AIRpcDeleteUserNotify::New() const {
  return new AIRpcDeleteUserNotify;
}

void AIRpcDeleteUserNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(-1);
    sceneid_ = GOOGLE_LONGLONG(-1);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AIRpcDeleteUserNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 Uid = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SceneId;
        break;
      }

      // optional sint64 SceneId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AIRpcDeleteUserNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint64 Uid = 1 [default = -1];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->uid(), output);
  }

  // optional sint64 SceneId = 2 [default = -1];
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AIRpcDeleteUserNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint64 Uid = 1 [default = -1];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->uid(), target);
  }

  // optional sint64 SceneId = 2 [default = -1];
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AIRpcDeleteUserNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 Uid = 1 [default = -1];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->uid());
    }

    // optional sint64 SceneId = 2 [default = -1];
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AIRpcDeleteUserNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AIRpcDeleteUserNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AIRpcDeleteUserNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AIRpcDeleteUserNotify::MergeFrom(const AIRpcDeleteUserNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AIRpcDeleteUserNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIRpcDeleteUserNotify::CopyFrom(const AIRpcDeleteUserNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIRpcDeleteUserNotify::IsInitialized() const {

  return true;
}

void AIRpcDeleteUserNotify::Swap(AIRpcDeleteUserNotify* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AIRpcDeleteUserNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AIRpcDeleteUserNotify_descriptor_;
  metadata.reflection = AIRpcDeleteUserNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
