// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MatchSPVPSvrRpc.proto

#ifndef PROTOBUF_MatchSPVPSvrRpc_2eproto__INCLUDED
#define PROTOBUF_MatchSPVPSvrRpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "PublicStruct.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MatchSPVPSvrRpc_2eproto();
void protobuf_AssignDesc_MatchSPVPSvrRpc_2eproto();
void protobuf_ShutdownFile_MatchSPVPSvrRpc_2eproto();

class MatchSPVPRpcBattleNumNotify;

// ===================================================================

class MatchSPVPRpcBattleNumNotify : public ::google::protobuf::Message {
 public:
  MatchSPVPRpcBattleNumNotify();
  virtual ~MatchSPVPRpcBattleNumNotify();

  MatchSPVPRpcBattleNumNotify(const MatchSPVPRpcBattleNumNotify& from);

  inline MatchSPVPRpcBattleNumNotify& operator=(const MatchSPVPRpcBattleNumNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchSPVPRpcBattleNumNotify& default_instance();

  void Swap(MatchSPVPRpcBattleNumNotify* other);

  // implements Message ----------------------------------------------

  MatchSPVPRpcBattleNumNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchSPVPRpcBattleNumNotify& from);
  void MergeFrom(const MatchSPVPRpcBattleNumNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string IP = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIPFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional sint32 Port = 2 [default = -1];
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional sint32 SceneNum = 3 [default = 0];
  inline bool has_scenenum() const;
  inline void clear_scenenum();
  static const int kSceneNumFieldNumber = 3;
  inline ::google::protobuf::int32 scenenum() const;
  inline void set_scenenum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MatchSPVPRpcBattleNumNotify)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_scenenum();
  inline void clear_has_scenenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 scenenum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_MatchSPVPSvrRpc_2eproto();
  friend void protobuf_AssignDesc_MatchSPVPSvrRpc_2eproto();
  friend void protobuf_ShutdownFile_MatchSPVPSvrRpc_2eproto();

  void InitAsDefaultInstance();
  static MatchSPVPRpcBattleNumNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// MatchSPVPRpcBattleNumNotify

// optional string IP = 1;
inline bool MatchSPVPRpcBattleNumNotify::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchSPVPRpcBattleNumNotify::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchSPVPRpcBattleNumNotify::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchSPVPRpcBattleNumNotify::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& MatchSPVPRpcBattleNumNotify::ip() const {
  return *ip_;
}
inline void MatchSPVPRpcBattleNumNotify::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void MatchSPVPRpcBattleNumNotify::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void MatchSPVPRpcBattleNumNotify::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MatchSPVPRpcBattleNumNotify::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* MatchSPVPRpcBattleNumNotify::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MatchSPVPRpcBattleNumNotify::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional sint32 Port = 2 [default = -1];
inline bool MatchSPVPRpcBattleNumNotify::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchSPVPRpcBattleNumNotify::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchSPVPRpcBattleNumNotify::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchSPVPRpcBattleNumNotify::clear_port() {
  port_ = -1;
  clear_has_port();
}
inline ::google::protobuf::int32 MatchSPVPRpcBattleNumNotify::port() const {
  return port_;
}
inline void MatchSPVPRpcBattleNumNotify::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// optional sint32 SceneNum = 3 [default = 0];
inline bool MatchSPVPRpcBattleNumNotify::has_scenenum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatchSPVPRpcBattleNumNotify::set_has_scenenum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatchSPVPRpcBattleNumNotify::clear_has_scenenum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatchSPVPRpcBattleNumNotify::clear_scenenum() {
  scenenum_ = 0;
  clear_has_scenenum();
}
inline ::google::protobuf::int32 MatchSPVPRpcBattleNumNotify::scenenum() const {
  return scenenum_;
}
inline void MatchSPVPRpcBattleNumNotify::set_scenenum(::google::protobuf::int32 value) {
  set_has_scenenum();
  scenenum_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MatchSPVPSvrRpc_2eproto__INCLUDED
