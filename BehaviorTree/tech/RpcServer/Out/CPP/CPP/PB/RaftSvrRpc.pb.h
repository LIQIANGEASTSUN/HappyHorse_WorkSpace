// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RaftSvrRpc.proto

#ifndef PROTOBUF_RaftSvrRpc_2eproto__INCLUDED
#define PROTOBUF_RaftSvrRpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RaftSvrRpc_2eproto();
void protobuf_AssignDesc_RaftSvrRpc_2eproto();
void protobuf_ShutdownFile_RaftSvrRpc_2eproto();

class RaftRpcTickNotify;
class RaftRpcVoteNotify;
class RaftRpcSyncLogNotify;

// ===================================================================

class RaftRpcTickNotify : public ::google::protobuf::Message {
 public:
  RaftRpcTickNotify();
  virtual ~RaftRpcTickNotify();

  RaftRpcTickNotify(const RaftRpcTickNotify& from);

  inline RaftRpcTickNotify& operator=(const RaftRpcTickNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaftRpcTickNotify& default_instance();

  void Swap(RaftRpcTickNotify* other);

  // implements Message ----------------------------------------------

  RaftRpcTickNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaftRpcTickNotify& from);
  void MergeFrom(const RaftRpcTickNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Type = 2 [default = -1];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional bytes Addr = 3;
  inline bool has_addr() const;
  inline void clear_addr();
  static const int kAddrFieldNumber = 3;
  inline const ::std::string& addr() const;
  inline void set_addr(const ::std::string& value);
  inline void set_addr(const char* value);
  inline void set_addr(const void* value, size_t size);
  inline ::std::string* mutable_addr();
  inline ::std::string* release_addr();
  inline void set_allocated_addr(::std::string* addr);

  // @@protoc_insertion_point(class_scope:RaftRpcTickNotify)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_addr();
  inline void clear_has_addr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* addr_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_RaftSvrRpc_2eproto();
  friend void protobuf_AssignDesc_RaftSvrRpc_2eproto();
  friend void protobuf_ShutdownFile_RaftSvrRpc_2eproto();

  void InitAsDefaultInstance();
  static RaftRpcTickNotify* default_instance_;
};
// -------------------------------------------------------------------

class RaftRpcVoteNotify : public ::google::protobuf::Message {
 public:
  RaftRpcVoteNotify();
  virtual ~RaftRpcVoteNotify();

  RaftRpcVoteNotify(const RaftRpcVoteNotify& from);

  inline RaftRpcVoteNotify& operator=(const RaftRpcVoteNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaftRpcVoteNotify& default_instance();

  void Swap(RaftRpcVoteNotify* other);

  // implements Message ----------------------------------------------

  RaftRpcVoteNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaftRpcVoteNotify& from);
  void MergeFrom(const RaftRpcVoteNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Type = 1 [default = -1];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RaftRpcVoteNotify)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_RaftSvrRpc_2eproto();
  friend void protobuf_AssignDesc_RaftSvrRpc_2eproto();
  friend void protobuf_ShutdownFile_RaftSvrRpc_2eproto();

  void InitAsDefaultInstance();
  static RaftRpcVoteNotify* default_instance_;
};
// -------------------------------------------------------------------

class RaftRpcSyncLogNotify : public ::google::protobuf::Message {
 public:
  RaftRpcSyncLogNotify();
  virtual ~RaftRpcSyncLogNotify();

  RaftRpcSyncLogNotify(const RaftRpcSyncLogNotify& from);

  inline RaftRpcSyncLogNotify& operator=(const RaftRpcSyncLogNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaftRpcSyncLogNotify& default_instance();

  void Swap(RaftRpcSyncLogNotify* other);

  // implements Message ----------------------------------------------

  RaftRpcSyncLogNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaftRpcSyncLogNotify& from);
  void MergeFrom(const RaftRpcSyncLogNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Type = 1 [default = -1];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional bytes Data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:RaftRpcSyncLogNotify)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* data_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_RaftSvrRpc_2eproto();
  friend void protobuf_AssignDesc_RaftSvrRpc_2eproto();
  friend void protobuf_ShutdownFile_RaftSvrRpc_2eproto();

  void InitAsDefaultInstance();
  static RaftRpcSyncLogNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// RaftRpcTickNotify

// optional sint32 Type = 2 [default = -1];
inline bool RaftRpcTickNotify::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaftRpcTickNotify::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaftRpcTickNotify::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaftRpcTickNotify::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::google::protobuf::int32 RaftRpcTickNotify::type() const {
  return type_;
}
inline void RaftRpcTickNotify::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional bytes Addr = 3;
inline bool RaftRpcTickNotify::has_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RaftRpcTickNotify::set_has_addr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RaftRpcTickNotify::clear_has_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RaftRpcTickNotify::clear_addr() {
  if (addr_ != &::google::protobuf::internal::kEmptyString) {
    addr_->clear();
  }
  clear_has_addr();
}
inline const ::std::string& RaftRpcTickNotify::addr() const {
  return *addr_;
}
inline void RaftRpcTickNotify::set_addr(const ::std::string& value) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  addr_->assign(value);
}
inline void RaftRpcTickNotify::set_addr(const char* value) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  addr_->assign(value);
}
inline void RaftRpcTickNotify::set_addr(const void* value, size_t size) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RaftRpcTickNotify::mutable_addr() {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  return addr_;
}
inline ::std::string* RaftRpcTickNotify::release_addr() {
  clear_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = addr_;
    addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RaftRpcTickNotify::set_allocated_addr(::std::string* addr) {
  if (addr_ != &::google::protobuf::internal::kEmptyString) {
    delete addr_;
  }
  if (addr) {
    set_has_addr();
    addr_ = addr;
  } else {
    clear_has_addr();
    addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RaftRpcVoteNotify

// optional sint32 Type = 1 [default = -1];
inline bool RaftRpcVoteNotify::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaftRpcVoteNotify::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaftRpcVoteNotify::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaftRpcVoteNotify::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::google::protobuf::int32 RaftRpcVoteNotify::type() const {
  return type_;
}
inline void RaftRpcVoteNotify::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// RaftRpcSyncLogNotify

// optional sint32 Type = 1 [default = -1];
inline bool RaftRpcSyncLogNotify::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaftRpcSyncLogNotify::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaftRpcSyncLogNotify::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaftRpcSyncLogNotify::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::google::protobuf::int32 RaftRpcSyncLogNotify::type() const {
  return type_;
}
inline void RaftRpcSyncLogNotify::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional bytes Data = 2;
inline bool RaftRpcSyncLogNotify::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RaftRpcSyncLogNotify::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RaftRpcSyncLogNotify::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RaftRpcSyncLogNotify::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& RaftRpcSyncLogNotify::data() const {
  return *data_;
}
inline void RaftRpcSyncLogNotify::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void RaftRpcSyncLogNotify::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void RaftRpcSyncLogNotify::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RaftRpcSyncLogNotify::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* RaftRpcSyncLogNotify::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RaftRpcSyncLogNotify::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RaftSvrRpc_2eproto__INCLUDED
