// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GateSvrRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GateSvrRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GateRpcSendMsgNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateRpcSendMsgNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateRpcBroadcastMsgNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateRpcBroadcastMsgNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateRpcCloseNodeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateRpcCloseNodeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateRpcRegisterModuleNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateRpcRegisterModuleNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateRpcKickNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateRpcKickNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateRpcOnlineNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateRpcOnlineNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GateSvrRpc_2eproto() {
  protobuf_AddDesc_GateSvrRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GateSvrRpc.proto");
  GOOGLE_CHECK(file != NULL);
  GateRpcSendMsgNotify_descriptor_ = file->message_type(0);
  static const int GateRpcSendMsgNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRpcSendMsgNotify, uidarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRpcSendMsgNotify, msg_),
  };
  GateRpcSendMsgNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GateRpcSendMsgNotify_descriptor_,
      GateRpcSendMsgNotify::default_instance_,
      GateRpcSendMsgNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRpcSendMsgNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRpcSendMsgNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GateRpcSendMsgNotify));
  GateRpcBroadcastMsgNotify_descriptor_ = file->message_type(1);
  static const int GateRpcBroadcastMsgNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRpcBroadcastMsgNotify, msg_),
  };
  GateRpcBroadcastMsgNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GateRpcBroadcastMsgNotify_descriptor_,
      GateRpcBroadcastMsgNotify::default_instance_,
      GateRpcBroadcastMsgNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRpcBroadcastMsgNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRpcBroadcastMsgNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GateRpcBroadcastMsgNotify));
  GateRpcCloseNodeNotify_descriptor_ = file->message_type(2);
  static const int GateRpcCloseNodeNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRpcCloseNodeNotify, uidarr_),
  };
  GateRpcCloseNodeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GateRpcCloseNodeNotify_descriptor_,
      GateRpcCloseNodeNotify::default_instance_,
      GateRpcCloseNodeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRpcCloseNodeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRpcCloseNodeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GateRpcCloseNodeNotify));
  GateRpcRegisterModuleNotify_descriptor_ = file->message_type(3);
  static const int GateRpcRegisterModuleNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRpcRegisterModuleNotify, moduleidarr_),
  };
  GateRpcRegisterModuleNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GateRpcRegisterModuleNotify_descriptor_,
      GateRpcRegisterModuleNotify::default_instance_,
      GateRpcRegisterModuleNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRpcRegisterModuleNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRpcRegisterModuleNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GateRpcRegisterModuleNotify));
  GateRpcKickNotify_descriptor_ = file->message_type(4);
  static const int GateRpcKickNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRpcKickNotify, uid_),
  };
  GateRpcKickNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GateRpcKickNotify_descriptor_,
      GateRpcKickNotify::default_instance_,
      GateRpcKickNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRpcKickNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRpcKickNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GateRpcKickNotify));
  GateRpcOnlineNotify_descriptor_ = file->message_type(5);
  static const int GateRpcOnlineNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRpcOnlineNotify, nodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRpcOnlineNotify, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRpcOnlineNotify, name_),
  };
  GateRpcOnlineNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GateRpcOnlineNotify_descriptor_,
      GateRpcOnlineNotify::default_instance_,
      GateRpcOnlineNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRpcOnlineNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRpcOnlineNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GateRpcOnlineNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GateSvrRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GateRpcSendMsgNotify_descriptor_, &GateRpcSendMsgNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GateRpcBroadcastMsgNotify_descriptor_, &GateRpcBroadcastMsgNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GateRpcCloseNodeNotify_descriptor_, &GateRpcCloseNodeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GateRpcRegisterModuleNotify_descriptor_, &GateRpcRegisterModuleNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GateRpcKickNotify_descriptor_, &GateRpcKickNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GateRpcOnlineNotify_descriptor_, &GateRpcOnlineNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GateSvrRpc_2eproto() {
  delete GateRpcSendMsgNotify::default_instance_;
  delete GateRpcSendMsgNotify_reflection_;
  delete GateRpcBroadcastMsgNotify::default_instance_;
  delete GateRpcBroadcastMsgNotify_reflection_;
  delete GateRpcCloseNodeNotify::default_instance_;
  delete GateRpcCloseNodeNotify_reflection_;
  delete GateRpcRegisterModuleNotify::default_instance_;
  delete GateRpcRegisterModuleNotify_reflection_;
  delete GateRpcKickNotify::default_instance_;
  delete GateRpcKickNotify_reflection_;
  delete GateRpcOnlineNotify::default_instance_;
  delete GateRpcOnlineNotify_reflection_;
}

void protobuf_AddDesc_GateSvrRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020GateSvrRpc.proto\032\022PublicStruct.proto\"3"
    "\n\024GateRpcSendMsgNotify\022\016\n\006UidArr\030\001 \003(\022\022\013"
    "\n\003Msg\030\002 \001(\014\"(\n\031GateRpcBroadcastMsgNotify"
    "\022\013\n\003Msg\030\001 \001(\014\"(\n\026GateRpcCloseNodeNotify\022"
    "\016\n\006UidArr\030\001 \003(\022\"2\n\033GateRpcRegisterModule"
    "Notify\022\023\n\013ModuleIdArr\030\001 \003(\021\"$\n\021GateRpcKi"
    "ckNotify\022\017\n\003Uid\030\001 \001(\022:\002-1\"H\n\023GateRpcOnli"
    "neNotify\022\022\n\006NodeId\030\001 \001(\021:\002-1\022\017\n\003Uid\030\002 \001("
    "\022:\002-1\022\014\n\004Name\030\003 \001(\t", 339);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GateSvrRpc.proto", &protobuf_RegisterTypes);
  GateRpcSendMsgNotify::default_instance_ = new GateRpcSendMsgNotify();
  GateRpcBroadcastMsgNotify::default_instance_ = new GateRpcBroadcastMsgNotify();
  GateRpcCloseNodeNotify::default_instance_ = new GateRpcCloseNodeNotify();
  GateRpcRegisterModuleNotify::default_instance_ = new GateRpcRegisterModuleNotify();
  GateRpcKickNotify::default_instance_ = new GateRpcKickNotify();
  GateRpcOnlineNotify::default_instance_ = new GateRpcOnlineNotify();
  GateRpcSendMsgNotify::default_instance_->InitAsDefaultInstance();
  GateRpcBroadcastMsgNotify::default_instance_->InitAsDefaultInstance();
  GateRpcCloseNodeNotify::default_instance_->InitAsDefaultInstance();
  GateRpcRegisterModuleNotify::default_instance_->InitAsDefaultInstance();
  GateRpcKickNotify::default_instance_->InitAsDefaultInstance();
  GateRpcOnlineNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GateSvrRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GateSvrRpc_2eproto {
  StaticDescriptorInitializer_GateSvrRpc_2eproto() {
    protobuf_AddDesc_GateSvrRpc_2eproto();
  }
} static_descriptor_initializer_GateSvrRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GateRpcSendMsgNotify::kUidArrFieldNumber;
const int GateRpcSendMsgNotify::kMsgFieldNumber;
#endif  // !_MSC_VER

GateRpcSendMsgNotify::GateRpcSendMsgNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GateRpcSendMsgNotify::InitAsDefaultInstance() {
}

GateRpcSendMsgNotify::GateRpcSendMsgNotify(const GateRpcSendMsgNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GateRpcSendMsgNotify::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GateRpcSendMsgNotify::~GateRpcSendMsgNotify() {
  SharedDtor();
}

void GateRpcSendMsgNotify::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void GateRpcSendMsgNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateRpcSendMsgNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateRpcSendMsgNotify_descriptor_;
}

const GateRpcSendMsgNotify& GateRpcSendMsgNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GateSvrRpc_2eproto();
  return *default_instance_;
}

GateRpcSendMsgNotify* GateRpcSendMsgNotify::default_instance_ = NULL;

GateRpcSendMsgNotify* GateRpcSendMsgNotify::New() const {
  return new GateRpcSendMsgNotify;
}

void GateRpcSendMsgNotify::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  uidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GateRpcSendMsgNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated sint64 UidArr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 8, input, this->mutable_uidarr())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_uidarr())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_UidArr;
        if (input->ExpectTag(18)) goto parse_Msg;
        break;
      }

      // optional bytes Msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GateRpcSendMsgNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated sint64 UidArr = 1;
  for (int i = 0; i < this->uidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      1, this->uidarr(i), output);
  }

  // optional bytes Msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GateRpcSendMsgNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated sint64 UidArr = 1;
  for (int i = 0; i < this->uidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64ToArray(1, this->uidarr(i), target);
  }

  // optional bytes Msg = 2;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GateRpcSendMsgNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes Msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

  }
  // repeated sint64 UidArr = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->uidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->uidarr(i));
    }
    total_size += 1 * this->uidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateRpcSendMsgNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GateRpcSendMsgNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GateRpcSendMsgNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateRpcSendMsgNotify::MergeFrom(const GateRpcSendMsgNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  uidarr_.MergeFrom(from.uidarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GateRpcSendMsgNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateRpcSendMsgNotify::CopyFrom(const GateRpcSendMsgNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateRpcSendMsgNotify::IsInitialized() const {

  return true;
}

void GateRpcSendMsgNotify::Swap(GateRpcSendMsgNotify* other) {
  if (other != this) {
    uidarr_.Swap(&other->uidarr_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GateRpcSendMsgNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateRpcSendMsgNotify_descriptor_;
  metadata.reflection = GateRpcSendMsgNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GateRpcBroadcastMsgNotify::kMsgFieldNumber;
#endif  // !_MSC_VER

GateRpcBroadcastMsgNotify::GateRpcBroadcastMsgNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GateRpcBroadcastMsgNotify::InitAsDefaultInstance() {
}

GateRpcBroadcastMsgNotify::GateRpcBroadcastMsgNotify(const GateRpcBroadcastMsgNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GateRpcBroadcastMsgNotify::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GateRpcBroadcastMsgNotify::~GateRpcBroadcastMsgNotify() {
  SharedDtor();
}

void GateRpcBroadcastMsgNotify::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void GateRpcBroadcastMsgNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateRpcBroadcastMsgNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateRpcBroadcastMsgNotify_descriptor_;
}

const GateRpcBroadcastMsgNotify& GateRpcBroadcastMsgNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GateSvrRpc_2eproto();
  return *default_instance_;
}

GateRpcBroadcastMsgNotify* GateRpcBroadcastMsgNotify::default_instance_ = NULL;

GateRpcBroadcastMsgNotify* GateRpcBroadcastMsgNotify::New() const {
  return new GateRpcBroadcastMsgNotify;
}

void GateRpcBroadcastMsgNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GateRpcBroadcastMsgNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes Msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GateRpcBroadcastMsgNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes Msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GateRpcBroadcastMsgNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes Msg = 1;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GateRpcBroadcastMsgNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes Msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateRpcBroadcastMsgNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GateRpcBroadcastMsgNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GateRpcBroadcastMsgNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateRpcBroadcastMsgNotify::MergeFrom(const GateRpcBroadcastMsgNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GateRpcBroadcastMsgNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateRpcBroadcastMsgNotify::CopyFrom(const GateRpcBroadcastMsgNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateRpcBroadcastMsgNotify::IsInitialized() const {

  return true;
}

void GateRpcBroadcastMsgNotify::Swap(GateRpcBroadcastMsgNotify* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GateRpcBroadcastMsgNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateRpcBroadcastMsgNotify_descriptor_;
  metadata.reflection = GateRpcBroadcastMsgNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GateRpcCloseNodeNotify::kUidArrFieldNumber;
#endif  // !_MSC_VER

GateRpcCloseNodeNotify::GateRpcCloseNodeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GateRpcCloseNodeNotify::InitAsDefaultInstance() {
}

GateRpcCloseNodeNotify::GateRpcCloseNodeNotify(const GateRpcCloseNodeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GateRpcCloseNodeNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GateRpcCloseNodeNotify::~GateRpcCloseNodeNotify() {
  SharedDtor();
}

void GateRpcCloseNodeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GateRpcCloseNodeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateRpcCloseNodeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateRpcCloseNodeNotify_descriptor_;
}

const GateRpcCloseNodeNotify& GateRpcCloseNodeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GateSvrRpc_2eproto();
  return *default_instance_;
}

GateRpcCloseNodeNotify* GateRpcCloseNodeNotify::default_instance_ = NULL;

GateRpcCloseNodeNotify* GateRpcCloseNodeNotify::New() const {
  return new GateRpcCloseNodeNotify;
}

void GateRpcCloseNodeNotify::Clear() {
  uidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GateRpcCloseNodeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated sint64 UidArr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 8, input, this->mutable_uidarr())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_uidarr())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_UidArr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GateRpcCloseNodeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated sint64 UidArr = 1;
  for (int i = 0; i < this->uidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      1, this->uidarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GateRpcCloseNodeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated sint64 UidArr = 1;
  for (int i = 0; i < this->uidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64ToArray(1, this->uidarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GateRpcCloseNodeNotify::ByteSize() const {
  int total_size = 0;

  // repeated sint64 UidArr = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->uidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->uidarr(i));
    }
    total_size += 1 * this->uidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateRpcCloseNodeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GateRpcCloseNodeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GateRpcCloseNodeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateRpcCloseNodeNotify::MergeFrom(const GateRpcCloseNodeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  uidarr_.MergeFrom(from.uidarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GateRpcCloseNodeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateRpcCloseNodeNotify::CopyFrom(const GateRpcCloseNodeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateRpcCloseNodeNotify::IsInitialized() const {

  return true;
}

void GateRpcCloseNodeNotify::Swap(GateRpcCloseNodeNotify* other) {
  if (other != this) {
    uidarr_.Swap(&other->uidarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GateRpcCloseNodeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateRpcCloseNodeNotify_descriptor_;
  metadata.reflection = GateRpcCloseNodeNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GateRpcRegisterModuleNotify::kModuleIdArrFieldNumber;
#endif  // !_MSC_VER

GateRpcRegisterModuleNotify::GateRpcRegisterModuleNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GateRpcRegisterModuleNotify::InitAsDefaultInstance() {
}

GateRpcRegisterModuleNotify::GateRpcRegisterModuleNotify(const GateRpcRegisterModuleNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GateRpcRegisterModuleNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GateRpcRegisterModuleNotify::~GateRpcRegisterModuleNotify() {
  SharedDtor();
}

void GateRpcRegisterModuleNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GateRpcRegisterModuleNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateRpcRegisterModuleNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateRpcRegisterModuleNotify_descriptor_;
}

const GateRpcRegisterModuleNotify& GateRpcRegisterModuleNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GateSvrRpc_2eproto();
  return *default_instance_;
}

GateRpcRegisterModuleNotify* GateRpcRegisterModuleNotify::default_instance_ = NULL;

GateRpcRegisterModuleNotify* GateRpcRegisterModuleNotify::New() const {
  return new GateRpcRegisterModuleNotify;
}

void GateRpcRegisterModuleNotify::Clear() {
  moduleidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GateRpcRegisterModuleNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated sint32 ModuleIdArr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ModuleIdArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 8, input, this->mutable_moduleidarr())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_moduleidarr())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_ModuleIdArr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GateRpcRegisterModuleNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated sint32 ModuleIdArr = 1;
  for (int i = 0; i < this->moduleidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      1, this->moduleidarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GateRpcRegisterModuleNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated sint32 ModuleIdArr = 1;
  for (int i = 0; i < this->moduleidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(1, this->moduleidarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GateRpcRegisterModuleNotify::ByteSize() const {
  int total_size = 0;

  // repeated sint32 ModuleIdArr = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->moduleidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->moduleidarr(i));
    }
    total_size += 1 * this->moduleidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateRpcRegisterModuleNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GateRpcRegisterModuleNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GateRpcRegisterModuleNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateRpcRegisterModuleNotify::MergeFrom(const GateRpcRegisterModuleNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  moduleidarr_.MergeFrom(from.moduleidarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GateRpcRegisterModuleNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateRpcRegisterModuleNotify::CopyFrom(const GateRpcRegisterModuleNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateRpcRegisterModuleNotify::IsInitialized() const {

  return true;
}

void GateRpcRegisterModuleNotify::Swap(GateRpcRegisterModuleNotify* other) {
  if (other != this) {
    moduleidarr_.Swap(&other->moduleidarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GateRpcRegisterModuleNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateRpcRegisterModuleNotify_descriptor_;
  metadata.reflection = GateRpcRegisterModuleNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GateRpcKickNotify::kUidFieldNumber;
#endif  // !_MSC_VER

GateRpcKickNotify::GateRpcKickNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GateRpcKickNotify::InitAsDefaultInstance() {
}

GateRpcKickNotify::GateRpcKickNotify(const GateRpcKickNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GateRpcKickNotify::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GateRpcKickNotify::~GateRpcKickNotify() {
  SharedDtor();
}

void GateRpcKickNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GateRpcKickNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateRpcKickNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateRpcKickNotify_descriptor_;
}

const GateRpcKickNotify& GateRpcKickNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GateSvrRpc_2eproto();
  return *default_instance_;
}

GateRpcKickNotify* GateRpcKickNotify::default_instance_ = NULL;

GateRpcKickNotify* GateRpcKickNotify::New() const {
  return new GateRpcKickNotify;
}

void GateRpcKickNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(-1);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GateRpcKickNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 Uid = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GateRpcKickNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint64 Uid = 1 [default = -1];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GateRpcKickNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint64 Uid = 1 [default = -1];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GateRpcKickNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 Uid = 1 [default = -1];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateRpcKickNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GateRpcKickNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GateRpcKickNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateRpcKickNotify::MergeFrom(const GateRpcKickNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GateRpcKickNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateRpcKickNotify::CopyFrom(const GateRpcKickNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateRpcKickNotify::IsInitialized() const {

  return true;
}

void GateRpcKickNotify::Swap(GateRpcKickNotify* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GateRpcKickNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateRpcKickNotify_descriptor_;
  metadata.reflection = GateRpcKickNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GateRpcOnlineNotify::kNodeIdFieldNumber;
const int GateRpcOnlineNotify::kUidFieldNumber;
const int GateRpcOnlineNotify::kNameFieldNumber;
#endif  // !_MSC_VER

GateRpcOnlineNotify::GateRpcOnlineNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GateRpcOnlineNotify::InitAsDefaultInstance() {
}

GateRpcOnlineNotify::GateRpcOnlineNotify(const GateRpcOnlineNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GateRpcOnlineNotify::SharedCtor() {
  _cached_size_ = 0;
  nodeid_ = -1;
  uid_ = GOOGLE_LONGLONG(-1);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GateRpcOnlineNotify::~GateRpcOnlineNotify() {
  SharedDtor();
}

void GateRpcOnlineNotify::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GateRpcOnlineNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateRpcOnlineNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateRpcOnlineNotify_descriptor_;
}

const GateRpcOnlineNotify& GateRpcOnlineNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GateSvrRpc_2eproto();
  return *default_instance_;
}

GateRpcOnlineNotify* GateRpcOnlineNotify::default_instance_ = NULL;

GateRpcOnlineNotify* GateRpcOnlineNotify::New() const {
  return new GateRpcOnlineNotify;
}

void GateRpcOnlineNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nodeid_ = -1;
    uid_ = GOOGLE_LONGLONG(-1);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GateRpcOnlineNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 NodeId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nodeid_)));
          set_has_nodeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Uid;
        break;
      }

      // optional sint64 Uid = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Name;
        break;
      }

      // optional string Name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GateRpcOnlineNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 NodeId = 1 [default = -1];
  if (has_nodeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->nodeid(), output);
  }

  // optional sint64 Uid = 2 [default = -1];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->uid(), output);
  }

  // optional string Name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GateRpcOnlineNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 NodeId = 1 [default = -1];
  if (has_nodeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->nodeid(), target);
  }

  // optional sint64 Uid = 2 [default = -1];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->uid(), target);
  }

  // optional string Name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GateRpcOnlineNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 NodeId = 1 [default = -1];
    if (has_nodeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nodeid());
    }

    // optional sint64 Uid = 2 [default = -1];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->uid());
    }

    // optional string Name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateRpcOnlineNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GateRpcOnlineNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GateRpcOnlineNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateRpcOnlineNotify::MergeFrom(const GateRpcOnlineNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nodeid()) {
      set_nodeid(from.nodeid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GateRpcOnlineNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateRpcOnlineNotify::CopyFrom(const GateRpcOnlineNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateRpcOnlineNotify::IsInitialized() const {

  return true;
}

void GateRpcOnlineNotify::Swap(GateRpcOnlineNotify* other) {
  if (other != this) {
    std::swap(nodeid_, other->nodeid_);
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GateRpcOnlineNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateRpcOnlineNotify_descriptor_;
  metadata.reflection = GateRpcOnlineNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
