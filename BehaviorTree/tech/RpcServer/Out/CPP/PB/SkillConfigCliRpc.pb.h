// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SkillConfigCliRpc.proto

#ifndef PROTOBUF_SkillConfigCliRpc_2eproto__INCLUDED
#define PROTOBUF_SkillConfigCliRpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "PublicStruct.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SkillConfigCliRpc_2eproto();
void protobuf_AssignDesc_SkillConfigCliRpc_2eproto();
void protobuf_ShutdownFile_SkillConfigCliRpc_2eproto();

class SkillConfigRpcsyncNotify;
class SkillConfigSkillPhase;
class SkillConfigSkillInfo;
class SkillConfigSkillEventBase;
class SkillConfigSkillCustomEvent;
class SkillConfigCameraChangeInfo;
class SkillConfigSkillData;
class SkillConfigSkillDamage;
class SkillConfigShotPoint;

// ===================================================================

class SkillConfigRpcsyncNotify : public ::google::protobuf::Message {
 public:
  SkillConfigRpcsyncNotify();
  virtual ~SkillConfigRpcsyncNotify();

  SkillConfigRpcsyncNotify(const SkillConfigRpcsyncNotify& from);

  inline SkillConfigRpcsyncNotify& operator=(const SkillConfigRpcsyncNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillConfigRpcsyncNotify& default_instance();

  void Swap(SkillConfigRpcsyncNotify* other);

  // implements Message ----------------------------------------------

  SkillConfigRpcsyncNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillConfigRpcsyncNotify& from);
  void MergeFrom(const SkillConfigRpcsyncNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SkillConfigRpcsyncNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_SkillConfigCliRpc_2eproto();
  friend void protobuf_AssignDesc_SkillConfigCliRpc_2eproto();
  friend void protobuf_ShutdownFile_SkillConfigCliRpc_2eproto();

  void InitAsDefaultInstance();
  static SkillConfigRpcsyncNotify* default_instance_;
};
// -------------------------------------------------------------------

class SkillConfigSkillPhase : public ::google::protobuf::Message {
 public:
  SkillConfigSkillPhase();
  virtual ~SkillConfigSkillPhase();

  SkillConfigSkillPhase(const SkillConfigSkillPhase& from);

  inline SkillConfigSkillPhase& operator=(const SkillConfigSkillPhase& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillConfigSkillPhase& default_instance();

  void Swap(SkillConfigSkillPhase* other);

  // implements Message ----------------------------------------------

  SkillConfigSkillPhase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillConfigSkillPhase& from);
  void MergeFrom(const SkillConfigSkillPhase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 SkillPhaseType = 1 [default = 0];
  inline bool has_skillphasetype() const;
  inline void clear_skillphasetype();
  static const int kSkillPhaseTypeFieldNumber = 1;
  inline ::google::protobuf::int32 skillphasetype() const;
  inline void set_skillphasetype(::google::protobuf::int32 value);

  // optional sint32 TimeLength = 2 [default = -1];
  inline bool has_timelength() const;
  inline void clear_timelength();
  static const int kTimeLengthFieldNumber = 2;
  inline ::google::protobuf::int32 timelength() const;
  inline void set_timelength(::google::protobuf::int32 value);

  // repeated sint32 EventIdList = 9;
  inline int eventidlist_size() const;
  inline void clear_eventidlist();
  static const int kEventIdListFieldNumber = 9;
  inline ::google::protobuf::int32 eventidlist(int index) const;
  inline void set_eventidlist(int index, ::google::protobuf::int32 value);
  inline void add_eventidlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      eventidlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_eventidlist();

  // optional sint32 LoopTime = 12 [default = -1];
  inline bool has_looptime() const;
  inline void clear_looptime();
  static const int kLoopTimeFieldNumber = 12;
  inline ::google::protobuf::int32 looptime() const;
  inline void set_looptime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SkillConfigSkillPhase)
 private:
  inline void set_has_skillphasetype();
  inline void clear_has_skillphasetype();
  inline void set_has_timelength();
  inline void clear_has_timelength();
  inline void set_has_looptime();
  inline void clear_has_looptime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 skillphasetype_;
  ::google::protobuf::int32 timelength_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > eventidlist_;
  ::google::protobuf::int32 looptime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_SkillConfigCliRpc_2eproto();
  friend void protobuf_AssignDesc_SkillConfigCliRpc_2eproto();
  friend void protobuf_ShutdownFile_SkillConfigCliRpc_2eproto();

  void InitAsDefaultInstance();
  static SkillConfigSkillPhase* default_instance_;
};
// -------------------------------------------------------------------

class SkillConfigSkillInfo : public ::google::protobuf::Message {
 public:
  SkillConfigSkillInfo();
  virtual ~SkillConfigSkillInfo();

  SkillConfigSkillInfo(const SkillConfigSkillInfo& from);

  inline SkillConfigSkillInfo& operator=(const SkillConfigSkillInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillConfigSkillInfo& default_instance();

  void Swap(SkillConfigSkillInfo* other);

  // implements Message ----------------------------------------------

  SkillConfigSkillInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillConfigSkillInfo& from);
  void MergeFrom(const SkillConfigSkillInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Id = 8 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 8;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional sint32 HandleType = 4 [default = 0];
  inline bool has_handletype() const;
  inline void clear_handletype();
  static const int kHandleTypeFieldNumber = 4;
  inline ::google::protobuf::int32 handletype() const;
  inline void set_handletype(::google::protobuf::int32 value);

  // optional sint32 SkillTime = 5 [default = -1];
  inline bool has_skilltime() const;
  inline void clear_skilltime();
  static const int kSkillTimeFieldNumber = 5;
  inline ::google::protobuf::int32 skilltime() const;
  inline void set_skilltime(::google::protobuf::int32 value);

  // optional bool Unbroken = 10 [default = false];
  inline bool has_unbroken() const;
  inline void clear_unbroken();
  static const int kUnbrokenFieldNumber = 10;
  inline bool unbroken() const;
  inline void set_unbroken(bool value);

  // optional sint32 UseTimes = 11 [default = -1];
  inline bool has_usetimes() const;
  inline void clear_usetimes();
  static const int kUseTimesFieldNumber = 11;
  inline ::google::protobuf::int32 usetimes() const;
  inline void set_usetimes(::google::protobuf::int32 value);

  // optional sint32 CrossType = 18 [default = 0];
  inline bool has_crosstype() const;
  inline void clear_crosstype();
  static const int kCrossTypeFieldNumber = 18;
  inline ::google::protobuf::int32 crosstype() const;
  inline void set_crosstype(::google::protobuf::int32 value);

  // optional float AimingArea = 44 [default = 0];
  inline bool has_aimingarea() const;
  inline void clear_aimingarea();
  static const int kAimingAreaFieldNumber = 44;
  inline float aimingarea() const;
  inline void set_aimingarea(float value);

  // optional sint32 AimingMaxCount = 45 [default = -1];
  inline bool has_aimingmaxcount() const;
  inline void clear_aimingmaxcount();
  static const int kAimingMaxCountFieldNumber = 45;
  inline ::google::protobuf::int32 aimingmaxcount() const;
  inline void set_aimingmaxcount(::google::protobuf::int32 value);

  // optional float AreaHorizontal = 31 [default = 0];
  inline bool has_areahorizontal() const;
  inline void clear_areahorizontal();
  static const int kAreaHorizontalFieldNumber = 31;
  inline float areahorizontal() const;
  inline void set_areahorizontal(float value);

  // optional float AreaVertical = 30 [default = 0];
  inline bool has_areavertical() const;
  inline void clear_areavertical();
  static const int kAreaVerticalFieldNumber = 30;
  inline float areavertical() const;
  inline void set_areavertical(float value);

  // optional float JumpAreaHorizontal = 29 [default = 0];
  inline bool has_jumpareahorizontal() const;
  inline void clear_jumpareahorizontal();
  static const int kJumpAreaHorizontalFieldNumber = 29;
  inline float jumpareahorizontal() const;
  inline void set_jumpareahorizontal(float value);

  // optional float JumpAreaVertical = 34 [default = 0];
  inline bool has_jumpareavertical() const;
  inline void clear_jumpareavertical();
  static const int kJumpAreaVerticalFieldNumber = 34;
  inline float jumpareavertical() const;
  inline void set_jumpareavertical(float value);

  // optional float VelocityCorrection = 35 [default = 0];
  inline bool has_velocitycorrection() const;
  inline void clear_velocitycorrection();
  static const int kVelocityCorrectionFieldNumber = 35;
  inline float velocitycorrection() const;
  inline void set_velocitycorrection(float value);

  // optional sint32 RecoveryCD = 36 [default = 0];
  inline bool has_recoverycd() const;
  inline void clear_recoverycd();
  static const int kRecoveryCDFieldNumber = 36;
  inline ::google::protobuf::int32 recoverycd() const;
  inline void set_recoverycd(::google::protobuf::int32 value);

  // optional sint32 FocoTime = 24 [default = 0];
  inline bool has_focotime() const;
  inline void clear_focotime();
  static const int kFocoTimeFieldNumber = 24;
  inline ::google::protobuf::int32 focotime() const;
  inline void set_focotime(::google::protobuf::int32 value);

  // optional sint32 ShootTime = 25 [default = 0];
  inline bool has_shoottime() const;
  inline void clear_shoottime();
  static const int kShootTimeFieldNumber = 25;
  inline ::google::protobuf::int32 shoottime() const;
  inline void set_shoottime(::google::protobuf::int32 value);

  // optional float SkillCD = 37 [default = 0];
  inline bool has_skillcd() const;
  inline void clear_skillcd();
  static const int kSkillCDFieldNumber = 37;
  inline float skillcd() const;
  inline void set_skillcd(float value);

  // optional float ShotInterval = 38 [default = 0];
  inline bool has_shotinterval() const;
  inline void clear_shotinterval();
  static const int kShotIntervalFieldNumber = 38;
  inline float shotinterval() const;
  inline void set_shotinterval(float value);

  // optional sint32 CostType = 39 [default = -1];
  inline bool has_costtype() const;
  inline void clear_costtype();
  static const int kCostTypeFieldNumber = 39;
  inline ::google::protobuf::int32 costtype() const;
  inline void set_costtype(::google::protobuf::int32 value);

  // optional float CostValue = 40 [default = 0];
  inline bool has_costvalue() const;
  inline void clear_costvalue();
  static const int kCostValueFieldNumber = 40;
  inline float costvalue() const;
  inline void set_costvalue(float value);

  // optional float CostStage = 19 [default = 0];
  inline bool has_coststage() const;
  inline void clear_coststage();
  static const int kCostStageFieldNumber = 19;
  inline float coststage() const;
  inline void set_coststage(float value);

  // optional float BulletConfigCost = 20 [default = 0];
  inline bool has_bulletconfigcost() const;
  inline void clear_bulletconfigcost();
  static const int kBulletConfigCostFieldNumber = 20;
  inline float bulletconfigcost() const;
  inline void set_bulletconfigcost(float value);

  // optional float CollectCost = 26 [default = 0];
  inline bool has_collectcost() const;
  inline void clear_collectcost();
  static const int kCollectCostFieldNumber = 26;
  inline float collectcost() const;
  inline void set_collectcost(float value);

  // optional bool IsLockCamera = 22 [default = false];
  inline bool has_islockcamera() const;
  inline void clear_islockcamera();
  static const int kIsLockCameraFieldNumber = 22;
  inline bool islockcamera() const;
  inline void set_islockcamera(bool value);

  // repeated .SkillConfigSkillDamage DamageList = 43;
  inline int damagelist_size() const;
  inline void clear_damagelist();
  static const int kDamageListFieldNumber = 43;
  inline const ::SkillConfigSkillDamage& damagelist(int index) const;
  inline ::SkillConfigSkillDamage* mutable_damagelist(int index);
  inline ::SkillConfigSkillDamage* add_damagelist();
  inline const ::google::protobuf::RepeatedPtrField< ::SkillConfigSkillDamage >&
      damagelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::SkillConfigSkillDamage >*
      mutable_damagelist();

  // optional .SkillConfigCameraChangeInfo CameraData = 16;
  inline bool has_cameradata() const;
  inline void clear_cameradata();
  static const int kCameraDataFieldNumber = 16;
  inline const ::SkillConfigCameraChangeInfo& cameradata() const;
  inline ::SkillConfigCameraChangeInfo* mutable_cameradata();
  inline ::SkillConfigCameraChangeInfo* release_cameradata();
  inline void set_allocated_cameradata(::SkillConfigCameraChangeInfo* cameradata);

  // repeated .SkillConfigSkillPhase SkillPhaseList = 7;
  inline int skillphaselist_size() const;
  inline void clear_skillphaselist();
  static const int kSkillPhaseListFieldNumber = 7;
  inline const ::SkillConfigSkillPhase& skillphaselist(int index) const;
  inline ::SkillConfigSkillPhase* mutable_skillphaselist(int index);
  inline ::SkillConfigSkillPhase* add_skillphaselist();
  inline const ::google::protobuf::RepeatedPtrField< ::SkillConfigSkillPhase >&
      skillphaselist() const;
  inline ::google::protobuf::RepeatedPtrField< ::SkillConfigSkillPhase >*
      mutable_skillphaselist();

  // repeated .SkillConfigSkillCustomEvent CustomEventList = 17;
  inline int customeventlist_size() const;
  inline void clear_customeventlist();
  static const int kCustomEventListFieldNumber = 17;
  inline const ::SkillConfigSkillCustomEvent& customeventlist(int index) const;
  inline ::SkillConfigSkillCustomEvent* mutable_customeventlist(int index);
  inline ::SkillConfigSkillCustomEvent* add_customeventlist();
  inline const ::google::protobuf::RepeatedPtrField< ::SkillConfigSkillCustomEvent >&
      customeventlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::SkillConfigSkillCustomEvent >*
      mutable_customeventlist();

  // optional string IkFile = 32;
  inline bool has_ikfile() const;
  inline void clear_ikfile();
  static const int kIkFileFieldNumber = 32;
  inline const ::std::string& ikfile() const;
  inline void set_ikfile(const ::std::string& value);
  inline void set_ikfile(const char* value);
  inline void set_ikfile(const char* value, size_t size);
  inline ::std::string* mutable_ikfile();
  inline ::std::string* release_ikfile();
  inline void set_allocated_ikfile(::std::string* ikfile);

  // @@protoc_insertion_point(class_scope:SkillConfigSkillInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_handletype();
  inline void clear_has_handletype();
  inline void set_has_skilltime();
  inline void clear_has_skilltime();
  inline void set_has_unbroken();
  inline void clear_has_unbroken();
  inline void set_has_usetimes();
  inline void clear_has_usetimes();
  inline void set_has_crosstype();
  inline void clear_has_crosstype();
  inline void set_has_aimingarea();
  inline void clear_has_aimingarea();
  inline void set_has_aimingmaxcount();
  inline void clear_has_aimingmaxcount();
  inline void set_has_areahorizontal();
  inline void clear_has_areahorizontal();
  inline void set_has_areavertical();
  inline void clear_has_areavertical();
  inline void set_has_jumpareahorizontal();
  inline void clear_has_jumpareahorizontal();
  inline void set_has_jumpareavertical();
  inline void clear_has_jumpareavertical();
  inline void set_has_velocitycorrection();
  inline void clear_has_velocitycorrection();
  inline void set_has_recoverycd();
  inline void clear_has_recoverycd();
  inline void set_has_focotime();
  inline void clear_has_focotime();
  inline void set_has_shoottime();
  inline void clear_has_shoottime();
  inline void set_has_skillcd();
  inline void clear_has_skillcd();
  inline void set_has_shotinterval();
  inline void clear_has_shotinterval();
  inline void set_has_costtype();
  inline void clear_has_costtype();
  inline void set_has_costvalue();
  inline void clear_has_costvalue();
  inline void set_has_coststage();
  inline void clear_has_coststage();
  inline void set_has_bulletconfigcost();
  inline void clear_has_bulletconfigcost();
  inline void set_has_collectcost();
  inline void clear_has_collectcost();
  inline void set_has_islockcamera();
  inline void clear_has_islockcamera();
  inline void set_has_cameradata();
  inline void clear_has_cameradata();
  inline void set_has_ikfile();
  inline void clear_has_ikfile();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 handletype_;
  ::google::protobuf::int32 skilltime_;
  ::google::protobuf::int32 usetimes_;
  ::google::protobuf::int32 crosstype_;
  float aimingarea_;
  ::google::protobuf::int32 aimingmaxcount_;
  float areahorizontal_;
  float areavertical_;
  float jumpareahorizontal_;
  float jumpareavertical_;
  float velocitycorrection_;
  ::google::protobuf::int32 recoverycd_;
  bool unbroken_;
  bool islockcamera_;
  ::google::protobuf::int32 focotime_;
  ::google::protobuf::int32 shoottime_;
  float skillcd_;
  float shotinterval_;
  ::google::protobuf::int32 costtype_;
  float costvalue_;
  float coststage_;
  float bulletconfigcost_;
  ::google::protobuf::RepeatedPtrField< ::SkillConfigSkillDamage > damagelist_;
  ::SkillConfigCameraChangeInfo* cameradata_;
  ::google::protobuf::RepeatedPtrField< ::SkillConfigSkillPhase > skillphaselist_;
  ::google::protobuf::RepeatedPtrField< ::SkillConfigSkillCustomEvent > customeventlist_;
  ::std::string* ikfile_;
  float collectcost_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(29 + 31) / 32];

  friend void  protobuf_AddDesc_SkillConfigCliRpc_2eproto();
  friend void protobuf_AssignDesc_SkillConfigCliRpc_2eproto();
  friend void protobuf_ShutdownFile_SkillConfigCliRpc_2eproto();

  void InitAsDefaultInstance();
  static SkillConfigSkillInfo* default_instance_;
};
// -------------------------------------------------------------------

class SkillConfigSkillEventBase : public ::google::protobuf::Message {
 public:
  SkillConfigSkillEventBase();
  virtual ~SkillConfigSkillEventBase();

  SkillConfigSkillEventBase(const SkillConfigSkillEventBase& from);

  inline SkillConfigSkillEventBase& operator=(const SkillConfigSkillEventBase& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillConfigSkillEventBase& default_instance();

  void Swap(SkillConfigSkillEventBase* other);

  // implements Message ----------------------------------------------

  SkillConfigSkillEventBase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillConfigSkillEventBase& from);
  void MergeFrom(const SkillConfigSkillEventBase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Id = 5 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 5;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional sint32 EventType = 2 [default = 0];
  inline bool has_eventtype() const;
  inline void clear_eventtype();
  static const int kEventTypeFieldNumber = 2;
  inline ::google::protobuf::int32 eventtype() const;
  inline void set_eventtype(::google::protobuf::int32 value);

  // optional sint32 Start = 3 [default = -1];
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 3;
  inline ::google::protobuf::int32 start() const;
  inline void set_start(::google::protobuf::int32 value);

  // optional sint32 EventLength = 4 [default = -1];
  inline bool has_eventlength() const;
  inline void clear_eventlength();
  static const int kEventLengthFieldNumber = 4;
  inline ::google::protobuf::int32 eventlength() const;
  inline void set_eventlength(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SkillConfigSkillEventBase)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_eventtype();
  inline void clear_has_eventtype();
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_eventlength();
  inline void clear_has_eventlength();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 eventtype_;
  ::google::protobuf::int32 start_;
  ::google::protobuf::int32 eventlength_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_SkillConfigCliRpc_2eproto();
  friend void protobuf_AssignDesc_SkillConfigCliRpc_2eproto();
  friend void protobuf_ShutdownFile_SkillConfigCliRpc_2eproto();

  void InitAsDefaultInstance();
  static SkillConfigSkillEventBase* default_instance_;
};
// -------------------------------------------------------------------

class SkillConfigSkillCustomEvent : public ::google::protobuf::Message {
 public:
  SkillConfigSkillCustomEvent();
  virtual ~SkillConfigSkillCustomEvent();

  SkillConfigSkillCustomEvent(const SkillConfigSkillCustomEvent& from);

  inline SkillConfigSkillCustomEvent& operator=(const SkillConfigSkillCustomEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillConfigSkillCustomEvent& default_instance();

  void Swap(SkillConfigSkillCustomEvent* other);

  // implements Message ----------------------------------------------

  SkillConfigSkillCustomEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillConfigSkillCustomEvent& from);
  void MergeFrom(const SkillConfigSkillCustomEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SkillConfigSkillEventBase EventBase = 17;
  inline bool has_eventbase() const;
  inline void clear_eventbase();
  static const int kEventBaseFieldNumber = 17;
  inline const ::SkillConfigSkillEventBase& eventbase() const;
  inline ::SkillConfigSkillEventBase* mutable_eventbase();
  inline ::SkillConfigSkillEventBase* release_eventbase();
  inline void set_allocated_eventbase(::SkillConfigSkillEventBase* eventbase);

  // optional sint32 SkillPhaseType = 32 [default = 0];
  inline bool has_skillphasetype() const;
  inline void clear_skillphasetype();
  static const int kSkillPhaseTypeFieldNumber = 32;
  inline ::google::protobuf::int32 skillphasetype() const;
  inline void set_skillphasetype(::google::protobuf::int32 value);

  // optional string FileName = 6;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFileNameFieldNumber = 6;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // optional sint32 ModelMountPoint = 7 [default = 0];
  inline bool has_modelmountpoint() const;
  inline void clear_modelmountpoint();
  static const int kModelMountPointFieldNumber = 7;
  inline ::google::protobuf::int32 modelmountpoint() const;
  inline void set_modelmountpoint(::google::protobuf::int32 value);

  // optional sint32 WeaponMountPoint = 8 [default = 0];
  inline bool has_weaponmountpoint() const;
  inline void clear_weaponmountpoint();
  static const int kWeaponMountPointFieldNumber = 8;
  inline ::google::protobuf::int32 weaponmountpoint() const;
  inline void set_weaponmountpoint(::google::protobuf::int32 value);

  // optional sint32 EffectMountPoint = 12 [default = 0];
  inline bool has_effectmountpoint() const;
  inline void clear_effectmountpoint();
  static const int kEffectMountPointFieldNumber = 12;
  inline ::google::protobuf::int32 effectmountpoint() const;
  inline void set_effectmountpoint(::google::protobuf::int32 value);

  // optional bool Loop = 9 [default = false];
  inline bool has_loop() const;
  inline void clear_loop();
  static const int kLoopFieldNumber = 9;
  inline bool loop() const;
  inline void set_loop(bool value);

  // optional bool WholeAnimation = 10 [default = false];
  inline bool has_wholeanimation() const;
  inline void clear_wholeanimation();
  static const int kWholeAnimationFieldNumber = 10;
  inline bool wholeanimation() const;
  inline void set_wholeanimation(bool value);

  // optional float OffsetX = 14 [default = 0];
  inline bool has_offsetx() const;
  inline void clear_offsetx();
  static const int kOffsetXFieldNumber = 14;
  inline float offsetx() const;
  inline void set_offsetx(float value);

  // optional float OffsetY = 15 [default = 0];
  inline bool has_offsety() const;
  inline void clear_offsety();
  static const int kOffsetYFieldNumber = 15;
  inline float offsety() const;
  inline void set_offsety(float value);

  // optional float OffsetZ = 16 [default = 0];
  inline bool has_offsetz() const;
  inline void clear_offsetz();
  static const int kOffsetZFieldNumber = 16;
  inline float offsetz() const;
  inline void set_offsetz(float value);

  // optional sint32 Id = 18 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 18;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional sint32 CreateType = 31 [default = 0];
  inline bool has_createtype() const;
  inline void clear_createtype();
  static const int kCreateTypeFieldNumber = 31;
  inline ::google::protobuf::int32 createtype() const;
  inline void set_createtype(::google::protobuf::int32 value);

  // optional sint32 RemoveType = 29 [default = 1];
  inline bool has_removetype() const;
  inline void clear_removetype();
  static const int kRemoveTypeFieldNumber = 29;
  inline ::google::protobuf::int32 removetype() const;
  inline void set_removetype(::google::protobuf::int32 value);

  // optional sint32 RemovePhase = 21 [default = 0];
  inline bool has_removephase() const;
  inline void clear_removephase();
  static const int kRemovePhaseFieldNumber = 21;
  inline ::google::protobuf::int32 removephase() const;
  inline void set_removephase(::google::protobuf::int32 value);

  // optional sint32 RemoveTime = 20 [default = -1];
  inline bool has_removetime() const;
  inline void clear_removetime();
  static const int kRemoveTimeFieldNumber = 20;
  inline ::google::protobuf::int32 removetime() const;
  inline void set_removetime(::google::protobuf::int32 value);

  // optional bool EffectFollow = 34 [default = true];
  inline bool has_effectfollow() const;
  inline void clear_effectfollow();
  static const int kEffectFollowFieldNumber = 34;
  inline bool effectfollow() const;
  inline void set_effectfollow(bool value);

  // optional bool UseMount = 33 [default = false];
  inline bool has_usemount() const;
  inline void clear_usemount();
  static const int kUseMountFieldNumber = 33;
  inline bool usemount() const;
  inline void set_usemount(bool value);

  // optional sint32 HoldType = 23 [default = 0];
  inline bool has_holdtype() const;
  inline void clear_holdtype();
  static const int kHoldTypeFieldNumber = 23;
  inline ::google::protobuf::int32 holdtype() const;
  inline void set_holdtype(::google::protobuf::int32 value);

  // optional sint32 CameraChangeType = 28 [default = 0];
  inline bool has_camerachangetype() const;
  inline void clear_camerachangetype();
  static const int kCameraChangeTypeFieldNumber = 28;
  inline ::google::protobuf::int32 camerachangetype() const;
  inline void set_camerachangetype(::google::protobuf::int32 value);

  // optional float CameraHorcoef = 24 [default = 0.13];
  inline bool has_camerahorcoef() const;
  inline void clear_camerahorcoef();
  static const int kCameraHorcoefFieldNumber = 24;
  inline float camerahorcoef() const;
  inline void set_camerahorcoef(float value);

  // optional float CameraVercoef = 25 [default = 0.13];
  inline bool has_cameravercoef() const;
  inline void clear_cameravercoef();
  static const int kCameraVercoefFieldNumber = 25;
  inline float cameravercoef() const;
  inline void set_cameravercoef(float value);

  // optional float CameraPower = 26 [default = 1.2];
  inline bool has_camerapower() const;
  inline void clear_camerapower();
  static const int kCameraPowerFieldNumber = 26;
  inline float camerapower() const;
  inline void set_camerapower(float value);

  // optional float CameraCont = 27 [default = 0.1];
  inline bool has_cameracont() const;
  inline void clear_cameracont();
  static const int kCameraContFieldNumber = 27;
  inline float cameracont() const;
  inline void set_cameracont(float value);

  // optional bool Audio3D = 38 [default = false];
  inline bool has_audio3d() const;
  inline void clear_audio3d();
  static const int kAudio3DFieldNumber = 38;
  inline bool audio3d() const;
  inline void set_audio3d(bool value);

  // optional sint32 ShotPointAngleMin = 40 [default = -1];
  inline bool has_shotpointanglemin() const;
  inline void clear_shotpointanglemin();
  static const int kShotPointAngleMinFieldNumber = 40;
  inline ::google::protobuf::int32 shotpointanglemin() const;
  inline void set_shotpointanglemin(::google::protobuf::int32 value);

  // repeated .SkillConfigShotPoint ShotPointList = 39;
  inline int shotpointlist_size() const;
  inline void clear_shotpointlist();
  static const int kShotPointListFieldNumber = 39;
  inline const ::SkillConfigShotPoint& shotpointlist(int index) const;
  inline ::SkillConfigShotPoint* mutable_shotpointlist(int index);
  inline ::SkillConfigShotPoint* add_shotpointlist();
  inline const ::google::protobuf::RepeatedPtrField< ::SkillConfigShotPoint >&
      shotpointlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::SkillConfigShotPoint >*
      mutable_shotpointlist();

  // @@protoc_insertion_point(class_scope:SkillConfigSkillCustomEvent)
 private:
  inline void set_has_eventbase();
  inline void clear_has_eventbase();
  inline void set_has_skillphasetype();
  inline void clear_has_skillphasetype();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_modelmountpoint();
  inline void clear_has_modelmountpoint();
  inline void set_has_weaponmountpoint();
  inline void clear_has_weaponmountpoint();
  inline void set_has_effectmountpoint();
  inline void clear_has_effectmountpoint();
  inline void set_has_loop();
  inline void clear_has_loop();
  inline void set_has_wholeanimation();
  inline void clear_has_wholeanimation();
  inline void set_has_offsetx();
  inline void clear_has_offsetx();
  inline void set_has_offsety();
  inline void clear_has_offsety();
  inline void set_has_offsetz();
  inline void clear_has_offsetz();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_createtype();
  inline void clear_has_createtype();
  inline void set_has_removetype();
  inline void clear_has_removetype();
  inline void set_has_removephase();
  inline void clear_has_removephase();
  inline void set_has_removetime();
  inline void clear_has_removetime();
  inline void set_has_effectfollow();
  inline void clear_has_effectfollow();
  inline void set_has_usemount();
  inline void clear_has_usemount();
  inline void set_has_holdtype();
  inline void clear_has_holdtype();
  inline void set_has_camerachangetype();
  inline void clear_has_camerachangetype();
  inline void set_has_camerahorcoef();
  inline void clear_has_camerahorcoef();
  inline void set_has_cameravercoef();
  inline void clear_has_cameravercoef();
  inline void set_has_camerapower();
  inline void clear_has_camerapower();
  inline void set_has_cameracont();
  inline void clear_has_cameracont();
  inline void set_has_audio3d();
  inline void clear_has_audio3d();
  inline void set_has_shotpointanglemin();
  inline void clear_has_shotpointanglemin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SkillConfigSkillEventBase* eventbase_;
  ::std::string* filename_;
  ::google::protobuf::int32 skillphasetype_;
  ::google::protobuf::int32 modelmountpoint_;
  ::google::protobuf::int32 weaponmountpoint_;
  ::google::protobuf::int32 effectmountpoint_;
  float offsetx_;
  float offsety_;
  float offsetz_;
  ::google::protobuf::int32 id_;
  bool loop_;
  bool wholeanimation_;
  bool effectfollow_;
  bool usemount_;
  ::google::protobuf::int32 createtype_;
  ::google::protobuf::int32 removetype_;
  ::google::protobuf::int32 removephase_;
  ::google::protobuf::int32 removetime_;
  ::google::protobuf::int32 holdtype_;
  ::google::protobuf::int32 camerachangetype_;
  float camerahorcoef_;
  float cameravercoef_;
  float camerapower_;
  float cameracont_;
  bool audio3d_;
  ::google::protobuf::RepeatedPtrField< ::SkillConfigShotPoint > shotpointlist_;
  ::google::protobuf::int32 shotpointanglemin_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(27 + 31) / 32];

  friend void  protobuf_AddDesc_SkillConfigCliRpc_2eproto();
  friend void protobuf_AssignDesc_SkillConfigCliRpc_2eproto();
  friend void protobuf_ShutdownFile_SkillConfigCliRpc_2eproto();

  void InitAsDefaultInstance();
  static SkillConfigSkillCustomEvent* default_instance_;
};
// -------------------------------------------------------------------

class SkillConfigCameraChangeInfo : public ::google::protobuf::Message {
 public:
  SkillConfigCameraChangeInfo();
  virtual ~SkillConfigCameraChangeInfo();

  SkillConfigCameraChangeInfo(const SkillConfigCameraChangeInfo& from);

  inline SkillConfigCameraChangeInfo& operator=(const SkillConfigCameraChangeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillConfigCameraChangeInfo& default_instance();

  void Swap(SkillConfigCameraChangeInfo* other);

  // implements Message ----------------------------------------------

  SkillConfigCameraChangeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillConfigCameraChangeInfo& from);
  void MergeFrom(const SkillConfigCameraChangeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool CameraChange = 5 [default = false];
  inline bool has_camerachange() const;
  inline void clear_camerachange();
  static const int kCameraChangeFieldNumber = 5;
  inline bool camerachange() const;
  inline void set_camerachange(bool value);

  // optional sint32 CameraChangeStartTime = 1 [default = -1];
  inline bool has_camerachangestarttime() const;
  inline void clear_camerachangestarttime();
  static const int kCameraChangeStartTimeFieldNumber = 1;
  inline ::google::protobuf::int32 camerachangestarttime() const;
  inline void set_camerachangestarttime(::google::protobuf::int32 value);

  // optional float CameraFieldView = 2 [default = -1];
  inline bool has_camerafieldview() const;
  inline void clear_camerafieldview();
  static const int kCameraFieldViewFieldNumber = 2;
  inline float camerafieldview() const;
  inline void set_camerafieldview(float value);

  // optional sint32 CameraChangeEndTime = 3 [default = -1];
  inline bool has_camerachangeendtime() const;
  inline void clear_camerachangeendtime();
  static const int kCameraChangeEndTimeFieldNumber = 3;
  inline ::google::protobuf::int32 camerachangeendtime() const;
  inline void set_camerachangeendtime(::google::protobuf::int32 value);

  // optional sint32 CameraRecoverTime = 4 [default = -1];
  inline bool has_camerarecovertime() const;
  inline void clear_camerarecovertime();
  static const int kCameraRecoverTimeFieldNumber = 4;
  inline ::google::protobuf::int32 camerarecovertime() const;
  inline void set_camerarecovertime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SkillConfigCameraChangeInfo)
 private:
  inline void set_has_camerachange();
  inline void clear_has_camerachange();
  inline void set_has_camerachangestarttime();
  inline void clear_has_camerachangestarttime();
  inline void set_has_camerafieldview();
  inline void clear_has_camerafieldview();
  inline void set_has_camerachangeendtime();
  inline void clear_has_camerachangeendtime();
  inline void set_has_camerarecovertime();
  inline void clear_has_camerarecovertime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool camerachange_;
  ::google::protobuf::int32 camerachangestarttime_;
  float camerafieldview_;
  ::google::protobuf::int32 camerachangeendtime_;
  ::google::protobuf::int32 camerarecovertime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_SkillConfigCliRpc_2eproto();
  friend void protobuf_AssignDesc_SkillConfigCliRpc_2eproto();
  friend void protobuf_ShutdownFile_SkillConfigCliRpc_2eproto();

  void InitAsDefaultInstance();
  static SkillConfigCameraChangeInfo* default_instance_;
};
// -------------------------------------------------------------------

class SkillConfigSkillData : public ::google::protobuf::Message {
 public:
  SkillConfigSkillData();
  virtual ~SkillConfigSkillData();

  SkillConfigSkillData(const SkillConfigSkillData& from);

  inline SkillConfigSkillData& operator=(const SkillConfigSkillData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillConfigSkillData& default_instance();

  void Swap(SkillConfigSkillData* other);

  // implements Message ----------------------------------------------

  SkillConfigSkillData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillConfigSkillData& from);
  void MergeFrom(const SkillConfigSkillData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Id = 2 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated .SkillConfigSkillInfo SkillInfoList = 1;
  inline int skillinfolist_size() const;
  inline void clear_skillinfolist();
  static const int kSkillInfoListFieldNumber = 1;
  inline const ::SkillConfigSkillInfo& skillinfolist(int index) const;
  inline ::SkillConfigSkillInfo* mutable_skillinfolist(int index);
  inline ::SkillConfigSkillInfo* add_skillinfolist();
  inline const ::google::protobuf::RepeatedPtrField< ::SkillConfigSkillInfo >&
      skillinfolist() const;
  inline ::google::protobuf::RepeatedPtrField< ::SkillConfigSkillInfo >*
      mutable_skillinfolist();

  // optional string HandleFile = 3;
  inline bool has_handlefile() const;
  inline void clear_handlefile();
  static const int kHandleFileFieldNumber = 3;
  inline const ::std::string& handlefile() const;
  inline void set_handlefile(const ::std::string& value);
  inline void set_handlefile(const char* value);
  inline void set_handlefile(const char* value, size_t size);
  inline ::std::string* mutable_handlefile();
  inline ::std::string* release_handlefile();
  inline void set_allocated_handlefile(::std::string* handlefile);

  // @@protoc_insertion_point(class_scope:SkillConfigSkillData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_handlefile();
  inline void clear_has_handlefile();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SkillConfigSkillInfo > skillinfolist_;
  ::std::string* handlefile_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SkillConfigCliRpc_2eproto();
  friend void protobuf_AssignDesc_SkillConfigCliRpc_2eproto();
  friend void protobuf_ShutdownFile_SkillConfigCliRpc_2eproto();

  void InitAsDefaultInstance();
  static SkillConfigSkillData* default_instance_;
};
// -------------------------------------------------------------------

class SkillConfigSkillDamage : public ::google::protobuf::Message {
 public:
  SkillConfigSkillDamage();
  virtual ~SkillConfigSkillDamage();

  SkillConfigSkillDamage(const SkillConfigSkillDamage& from);

  inline SkillConfigSkillDamage& operator=(const SkillConfigSkillDamage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillConfigSkillDamage& default_instance();

  void Swap(SkillConfigSkillDamage* other);

  // implements Message ----------------------------------------------

  SkillConfigSkillDamage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillConfigSkillDamage& from);
  void MergeFrom(const SkillConfigSkillDamage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 DamageType = 14 [default = 0];
  inline bool has_damagetype() const;
  inline void clear_damagetype();
  static const int kDamageTypeFieldNumber = 14;
  inline ::google::protobuf::int32 damagetype() const;
  inline void set_damagetype(::google::protobuf::int32 value);

  // optional float BaseDamage = 1 [default = 0];
  inline bool has_basedamage() const;
  inline void clear_basedamage();
  static const int kBaseDamageFieldNumber = 1;
  inline float basedamage() const;
  inline void set_basedamage(float value);

  // optional float BaseDamageTime = 2 [default = 0];
  inline bool has_basedamagetime() const;
  inline void clear_basedamagetime();
  static const int kBaseDamageTimeFieldNumber = 2;
  inline float basedamagetime() const;
  inline void set_basedamagetime(float value);

  // optional float DecreaseDamage = 5 [default = 0];
  inline bool has_decreasedamage() const;
  inline void clear_decreasedamage();
  static const int kDecreaseDamageFieldNumber = 5;
  inline float decreasedamage() const;
  inline void set_decreasedamage(float value);

  // optional float DecreaseMinDamage = 3 [default = 0];
  inline bool has_decreasemindamage() const;
  inline void clear_decreasemindamage();
  static const int kDecreaseMinDamageFieldNumber = 3;
  inline float decreasemindamage() const;
  inline void set_decreasemindamage(float value);

  // optional float MaxDamage = 4 [default = 0];
  inline bool has_maxdamage() const;
  inline void clear_maxdamage();
  static const int kMaxDamageFieldNumber = 4;
  inline float maxdamage() const;
  inline void set_maxdamage(float value);

  // optional sint32 MaxHitCount = 6 [default = 0];
  inline bool has_maxhitcount() const;
  inline void clear_maxhitcount();
  static const int kMaxHitCountFieldNumber = 6;
  inline ::google::protobuf::int32 maxhitcount() const;
  inline void set_maxhitcount(::google::protobuf::int32 value);

  // optional float FocoBaseDamage = 15 [default = 0];
  inline bool has_focobasedamage() const;
  inline void clear_focobasedamage();
  static const int kFocoBaseDamageFieldNumber = 15;
  inline float focobasedamage() const;
  inline void set_focobasedamage(float value);

  // optional float FocoMinDamage = 7 [default = 0];
  inline bool has_focomindamage() const;
  inline void clear_focomindamage();
  static const int kFocoMinDamageFieldNumber = 7;
  inline float focomindamage() const;
  inline void set_focomindamage(float value);

  // optional float FocoFullDamage = 8 [default = 0];
  inline bool has_focofulldamage() const;
  inline void clear_focofulldamage();
  static const int kFocoFullDamageFieldNumber = 8;
  inline float focofulldamage() const;
  inline void set_focofulldamage(float value);

  // optional float FocoMaxDamage = 16 [default = 0];
  inline bool has_focomaxdamage() const;
  inline void clear_focomaxdamage();
  static const int kFocoMaxDamageFieldNumber = 16;
  inline float focomaxdamage() const;
  inline void set_focomaxdamage(float value);

  // optional sint32 FocoMaxHitCount = 17 [default = 0];
  inline bool has_focomaxhitcount() const;
  inline void clear_focomaxhitcount();
  static const int kFocoMaxHitCountFieldNumber = 17;
  inline ::google::protobuf::int32 focomaxhitcount() const;
  inline void set_focomaxhitcount(::google::protobuf::int32 value);

  // optional float ExplosionDamage = 9 [default = 0];
  inline bool has_explosiondamage() const;
  inline void clear_explosiondamage();
  static const int kExplosionDamageFieldNumber = 9;
  inline float explosiondamage() const;
  inline void set_explosiondamage(float value);

  // optional float ExplosionMiniDamage = 10 [default = 0];
  inline bool has_explosionminidamage() const;
  inline void clear_explosionminidamage();
  static const int kExplosionMiniDamageFieldNumber = 10;
  inline float explosionminidamage() const;
  inline void set_explosionminidamage(float value);

  // optional bool BFix = 12 [default = false];
  inline bool has_bfix() const;
  inline void clear_bfix();
  static const int kBFixFieldNumber = 12;
  inline bool bfix() const;
  inline void set_bfix(bool value);

  // optional float ExplosionRadius = 11 [default = 0];
  inline bool has_explosionradius() const;
  inline void clear_explosionradius();
  static const int kExplosionRadiusFieldNumber = 11;
  inline float explosionradius() const;
  inline void set_explosionradius(float value);

  // optional float CollisionDamage = 13 [default = 0];
  inline bool has_collisiondamage() const;
  inline void clear_collisiondamage();
  static const int kCollisionDamageFieldNumber = 13;
  inline float collisiondamage() const;
  inline void set_collisiondamage(float value);

  // @@protoc_insertion_point(class_scope:SkillConfigSkillDamage)
 private:
  inline void set_has_damagetype();
  inline void clear_has_damagetype();
  inline void set_has_basedamage();
  inline void clear_has_basedamage();
  inline void set_has_basedamagetime();
  inline void clear_has_basedamagetime();
  inline void set_has_decreasedamage();
  inline void clear_has_decreasedamage();
  inline void set_has_decreasemindamage();
  inline void clear_has_decreasemindamage();
  inline void set_has_maxdamage();
  inline void clear_has_maxdamage();
  inline void set_has_maxhitcount();
  inline void clear_has_maxhitcount();
  inline void set_has_focobasedamage();
  inline void clear_has_focobasedamage();
  inline void set_has_focomindamage();
  inline void clear_has_focomindamage();
  inline void set_has_focofulldamage();
  inline void clear_has_focofulldamage();
  inline void set_has_focomaxdamage();
  inline void clear_has_focomaxdamage();
  inline void set_has_focomaxhitcount();
  inline void clear_has_focomaxhitcount();
  inline void set_has_explosiondamage();
  inline void clear_has_explosiondamage();
  inline void set_has_explosionminidamage();
  inline void clear_has_explosionminidamage();
  inline void set_has_bfix();
  inline void clear_has_bfix();
  inline void set_has_explosionradius();
  inline void clear_has_explosionradius();
  inline void set_has_collisiondamage();
  inline void clear_has_collisiondamage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 damagetype_;
  float basedamage_;
  float basedamagetime_;
  float decreasedamage_;
  float decreasemindamage_;
  float maxdamage_;
  ::google::protobuf::int32 maxhitcount_;
  float focobasedamage_;
  float focomindamage_;
  float focofulldamage_;
  float focomaxdamage_;
  ::google::protobuf::int32 focomaxhitcount_;
  float explosiondamage_;
  float explosionminidamage_;
  bool bfix_;
  float explosionradius_;
  float collisiondamage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_SkillConfigCliRpc_2eproto();
  friend void protobuf_AssignDesc_SkillConfigCliRpc_2eproto();
  friend void protobuf_ShutdownFile_SkillConfigCliRpc_2eproto();

  void InitAsDefaultInstance();
  static SkillConfigSkillDamage* default_instance_;
};
// -------------------------------------------------------------------

class SkillConfigShotPoint : public ::google::protobuf::Message {
 public:
  SkillConfigShotPoint();
  virtual ~SkillConfigShotPoint();

  SkillConfigShotPoint(const SkillConfigShotPoint& from);

  inline SkillConfigShotPoint& operator=(const SkillConfigShotPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillConfigShotPoint& default_instance();

  void Swap(SkillConfigShotPoint* other);

  // implements Message ----------------------------------------------

  SkillConfigShotPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillConfigShotPoint& from);
  void MergeFrom(const SkillConfigShotPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Angle = 1 [default = -1];
  inline bool has_angle() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 1;
  inline ::google::protobuf::int32 angle() const;
  inline void set_angle(::google::protobuf::int32 value);

  // optional .Vector3PB LocalPos = 2;
  inline bool has_localpos() const;
  inline void clear_localpos();
  static const int kLocalPosFieldNumber = 2;
  inline const ::Vector3PB& localpos() const;
  inline ::Vector3PB* mutable_localpos();
  inline ::Vector3PB* release_localpos();
  inline void set_allocated_localpos(::Vector3PB* localpos);

  // @@protoc_insertion_point(class_scope:SkillConfigShotPoint)
 private:
  inline void set_has_angle();
  inline void clear_has_angle();
  inline void set_has_localpos();
  inline void clear_has_localpos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Vector3PB* localpos_;
  ::google::protobuf::int32 angle_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SkillConfigCliRpc_2eproto();
  friend void protobuf_AssignDesc_SkillConfigCliRpc_2eproto();
  friend void protobuf_ShutdownFile_SkillConfigCliRpc_2eproto();

  void InitAsDefaultInstance();
  static SkillConfigShotPoint* default_instance_;
};
// ===================================================================


// ===================================================================

// SkillConfigRpcsyncNotify

// -------------------------------------------------------------------

// SkillConfigSkillPhase

// optional sint32 SkillPhaseType = 1 [default = 0];
inline bool SkillConfigSkillPhase::has_skillphasetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillConfigSkillPhase::set_has_skillphasetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillConfigSkillPhase::clear_has_skillphasetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillConfigSkillPhase::clear_skillphasetype() {
  skillphasetype_ = 0;
  clear_has_skillphasetype();
}
inline ::google::protobuf::int32 SkillConfigSkillPhase::skillphasetype() const {
  return skillphasetype_;
}
inline void SkillConfigSkillPhase::set_skillphasetype(::google::protobuf::int32 value) {
  set_has_skillphasetype();
  skillphasetype_ = value;
}

// optional sint32 TimeLength = 2 [default = -1];
inline bool SkillConfigSkillPhase::has_timelength() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillConfigSkillPhase::set_has_timelength() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillConfigSkillPhase::clear_has_timelength() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillConfigSkillPhase::clear_timelength() {
  timelength_ = -1;
  clear_has_timelength();
}
inline ::google::protobuf::int32 SkillConfigSkillPhase::timelength() const {
  return timelength_;
}
inline void SkillConfigSkillPhase::set_timelength(::google::protobuf::int32 value) {
  set_has_timelength();
  timelength_ = value;
}

// repeated sint32 EventIdList = 9;
inline int SkillConfigSkillPhase::eventidlist_size() const {
  return eventidlist_.size();
}
inline void SkillConfigSkillPhase::clear_eventidlist() {
  eventidlist_.Clear();
}
inline ::google::protobuf::int32 SkillConfigSkillPhase::eventidlist(int index) const {
  return eventidlist_.Get(index);
}
inline void SkillConfigSkillPhase::set_eventidlist(int index, ::google::protobuf::int32 value) {
  eventidlist_.Set(index, value);
}
inline void SkillConfigSkillPhase::add_eventidlist(::google::protobuf::int32 value) {
  eventidlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkillConfigSkillPhase::eventidlist() const {
  return eventidlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkillConfigSkillPhase::mutable_eventidlist() {
  return &eventidlist_;
}

// optional sint32 LoopTime = 12 [default = -1];
inline bool SkillConfigSkillPhase::has_looptime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SkillConfigSkillPhase::set_has_looptime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SkillConfigSkillPhase::clear_has_looptime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SkillConfigSkillPhase::clear_looptime() {
  looptime_ = -1;
  clear_has_looptime();
}
inline ::google::protobuf::int32 SkillConfigSkillPhase::looptime() const {
  return looptime_;
}
inline void SkillConfigSkillPhase::set_looptime(::google::protobuf::int32 value) {
  set_has_looptime();
  looptime_ = value;
}

// -------------------------------------------------------------------

// SkillConfigSkillInfo

// optional sint32 Id = 8 [default = -1];
inline bool SkillConfigSkillInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillConfigSkillInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillConfigSkillInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillConfigSkillInfo::clear_id() {
  id_ = -1;
  clear_has_id();
}
inline ::google::protobuf::int32 SkillConfigSkillInfo::id() const {
  return id_;
}
inline void SkillConfigSkillInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional sint32 HandleType = 4 [default = 0];
inline bool SkillConfigSkillInfo::has_handletype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillConfigSkillInfo::set_has_handletype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillConfigSkillInfo::clear_has_handletype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillConfigSkillInfo::clear_handletype() {
  handletype_ = 0;
  clear_has_handletype();
}
inline ::google::protobuf::int32 SkillConfigSkillInfo::handletype() const {
  return handletype_;
}
inline void SkillConfigSkillInfo::set_handletype(::google::protobuf::int32 value) {
  set_has_handletype();
  handletype_ = value;
}

// optional sint32 SkillTime = 5 [default = -1];
inline bool SkillConfigSkillInfo::has_skilltime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkillConfigSkillInfo::set_has_skilltime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SkillConfigSkillInfo::clear_has_skilltime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SkillConfigSkillInfo::clear_skilltime() {
  skilltime_ = -1;
  clear_has_skilltime();
}
inline ::google::protobuf::int32 SkillConfigSkillInfo::skilltime() const {
  return skilltime_;
}
inline void SkillConfigSkillInfo::set_skilltime(::google::protobuf::int32 value) {
  set_has_skilltime();
  skilltime_ = value;
}

// optional bool Unbroken = 10 [default = false];
inline bool SkillConfigSkillInfo::has_unbroken() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SkillConfigSkillInfo::set_has_unbroken() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SkillConfigSkillInfo::clear_has_unbroken() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SkillConfigSkillInfo::clear_unbroken() {
  unbroken_ = false;
  clear_has_unbroken();
}
inline bool SkillConfigSkillInfo::unbroken() const {
  return unbroken_;
}
inline void SkillConfigSkillInfo::set_unbroken(bool value) {
  set_has_unbroken();
  unbroken_ = value;
}

// optional sint32 UseTimes = 11 [default = -1];
inline bool SkillConfigSkillInfo::has_usetimes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SkillConfigSkillInfo::set_has_usetimes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SkillConfigSkillInfo::clear_has_usetimes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SkillConfigSkillInfo::clear_usetimes() {
  usetimes_ = -1;
  clear_has_usetimes();
}
inline ::google::protobuf::int32 SkillConfigSkillInfo::usetimes() const {
  return usetimes_;
}
inline void SkillConfigSkillInfo::set_usetimes(::google::protobuf::int32 value) {
  set_has_usetimes();
  usetimes_ = value;
}

// optional sint32 CrossType = 18 [default = 0];
inline bool SkillConfigSkillInfo::has_crosstype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SkillConfigSkillInfo::set_has_crosstype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SkillConfigSkillInfo::clear_has_crosstype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SkillConfigSkillInfo::clear_crosstype() {
  crosstype_ = 0;
  clear_has_crosstype();
}
inline ::google::protobuf::int32 SkillConfigSkillInfo::crosstype() const {
  return crosstype_;
}
inline void SkillConfigSkillInfo::set_crosstype(::google::protobuf::int32 value) {
  set_has_crosstype();
  crosstype_ = value;
}

// optional float AimingArea = 44 [default = 0];
inline bool SkillConfigSkillInfo::has_aimingarea() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SkillConfigSkillInfo::set_has_aimingarea() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SkillConfigSkillInfo::clear_has_aimingarea() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SkillConfigSkillInfo::clear_aimingarea() {
  aimingarea_ = 0;
  clear_has_aimingarea();
}
inline float SkillConfigSkillInfo::aimingarea() const {
  return aimingarea_;
}
inline void SkillConfigSkillInfo::set_aimingarea(float value) {
  set_has_aimingarea();
  aimingarea_ = value;
}

// optional sint32 AimingMaxCount = 45 [default = -1];
inline bool SkillConfigSkillInfo::has_aimingmaxcount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SkillConfigSkillInfo::set_has_aimingmaxcount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SkillConfigSkillInfo::clear_has_aimingmaxcount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SkillConfigSkillInfo::clear_aimingmaxcount() {
  aimingmaxcount_ = -1;
  clear_has_aimingmaxcount();
}
inline ::google::protobuf::int32 SkillConfigSkillInfo::aimingmaxcount() const {
  return aimingmaxcount_;
}
inline void SkillConfigSkillInfo::set_aimingmaxcount(::google::protobuf::int32 value) {
  set_has_aimingmaxcount();
  aimingmaxcount_ = value;
}

// optional float AreaHorizontal = 31 [default = 0];
inline bool SkillConfigSkillInfo::has_areahorizontal() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SkillConfigSkillInfo::set_has_areahorizontal() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SkillConfigSkillInfo::clear_has_areahorizontal() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SkillConfigSkillInfo::clear_areahorizontal() {
  areahorizontal_ = 0;
  clear_has_areahorizontal();
}
inline float SkillConfigSkillInfo::areahorizontal() const {
  return areahorizontal_;
}
inline void SkillConfigSkillInfo::set_areahorizontal(float value) {
  set_has_areahorizontal();
  areahorizontal_ = value;
}

// optional float AreaVertical = 30 [default = 0];
inline bool SkillConfigSkillInfo::has_areavertical() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SkillConfigSkillInfo::set_has_areavertical() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SkillConfigSkillInfo::clear_has_areavertical() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SkillConfigSkillInfo::clear_areavertical() {
  areavertical_ = 0;
  clear_has_areavertical();
}
inline float SkillConfigSkillInfo::areavertical() const {
  return areavertical_;
}
inline void SkillConfigSkillInfo::set_areavertical(float value) {
  set_has_areavertical();
  areavertical_ = value;
}

// optional float JumpAreaHorizontal = 29 [default = 0];
inline bool SkillConfigSkillInfo::has_jumpareahorizontal() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SkillConfigSkillInfo::set_has_jumpareahorizontal() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SkillConfigSkillInfo::clear_has_jumpareahorizontal() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SkillConfigSkillInfo::clear_jumpareahorizontal() {
  jumpareahorizontal_ = 0;
  clear_has_jumpareahorizontal();
}
inline float SkillConfigSkillInfo::jumpareahorizontal() const {
  return jumpareahorizontal_;
}
inline void SkillConfigSkillInfo::set_jumpareahorizontal(float value) {
  set_has_jumpareahorizontal();
  jumpareahorizontal_ = value;
}

// optional float JumpAreaVertical = 34 [default = 0];
inline bool SkillConfigSkillInfo::has_jumpareavertical() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SkillConfigSkillInfo::set_has_jumpareavertical() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SkillConfigSkillInfo::clear_has_jumpareavertical() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SkillConfigSkillInfo::clear_jumpareavertical() {
  jumpareavertical_ = 0;
  clear_has_jumpareavertical();
}
inline float SkillConfigSkillInfo::jumpareavertical() const {
  return jumpareavertical_;
}
inline void SkillConfigSkillInfo::set_jumpareavertical(float value) {
  set_has_jumpareavertical();
  jumpareavertical_ = value;
}

// optional float VelocityCorrection = 35 [default = 0];
inline bool SkillConfigSkillInfo::has_velocitycorrection() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SkillConfigSkillInfo::set_has_velocitycorrection() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SkillConfigSkillInfo::clear_has_velocitycorrection() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SkillConfigSkillInfo::clear_velocitycorrection() {
  velocitycorrection_ = 0;
  clear_has_velocitycorrection();
}
inline float SkillConfigSkillInfo::velocitycorrection() const {
  return velocitycorrection_;
}
inline void SkillConfigSkillInfo::set_velocitycorrection(float value) {
  set_has_velocitycorrection();
  velocitycorrection_ = value;
}

// optional sint32 RecoveryCD = 36 [default = 0];
inline bool SkillConfigSkillInfo::has_recoverycd() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SkillConfigSkillInfo::set_has_recoverycd() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SkillConfigSkillInfo::clear_has_recoverycd() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SkillConfigSkillInfo::clear_recoverycd() {
  recoverycd_ = 0;
  clear_has_recoverycd();
}
inline ::google::protobuf::int32 SkillConfigSkillInfo::recoverycd() const {
  return recoverycd_;
}
inline void SkillConfigSkillInfo::set_recoverycd(::google::protobuf::int32 value) {
  set_has_recoverycd();
  recoverycd_ = value;
}

// optional sint32 FocoTime = 24 [default = 0];
inline bool SkillConfigSkillInfo::has_focotime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SkillConfigSkillInfo::set_has_focotime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SkillConfigSkillInfo::clear_has_focotime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SkillConfigSkillInfo::clear_focotime() {
  focotime_ = 0;
  clear_has_focotime();
}
inline ::google::protobuf::int32 SkillConfigSkillInfo::focotime() const {
  return focotime_;
}
inline void SkillConfigSkillInfo::set_focotime(::google::protobuf::int32 value) {
  set_has_focotime();
  focotime_ = value;
}

// optional sint32 ShootTime = 25 [default = 0];
inline bool SkillConfigSkillInfo::has_shoottime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SkillConfigSkillInfo::set_has_shoottime() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SkillConfigSkillInfo::clear_has_shoottime() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SkillConfigSkillInfo::clear_shoottime() {
  shoottime_ = 0;
  clear_has_shoottime();
}
inline ::google::protobuf::int32 SkillConfigSkillInfo::shoottime() const {
  return shoottime_;
}
inline void SkillConfigSkillInfo::set_shoottime(::google::protobuf::int32 value) {
  set_has_shoottime();
  shoottime_ = value;
}

// optional float SkillCD = 37 [default = 0];
inline bool SkillConfigSkillInfo::has_skillcd() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SkillConfigSkillInfo::set_has_skillcd() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SkillConfigSkillInfo::clear_has_skillcd() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SkillConfigSkillInfo::clear_skillcd() {
  skillcd_ = 0;
  clear_has_skillcd();
}
inline float SkillConfigSkillInfo::skillcd() const {
  return skillcd_;
}
inline void SkillConfigSkillInfo::set_skillcd(float value) {
  set_has_skillcd();
  skillcd_ = value;
}

// optional float ShotInterval = 38 [default = 0];
inline bool SkillConfigSkillInfo::has_shotinterval() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SkillConfigSkillInfo::set_has_shotinterval() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SkillConfigSkillInfo::clear_has_shotinterval() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SkillConfigSkillInfo::clear_shotinterval() {
  shotinterval_ = 0;
  clear_has_shotinterval();
}
inline float SkillConfigSkillInfo::shotinterval() const {
  return shotinterval_;
}
inline void SkillConfigSkillInfo::set_shotinterval(float value) {
  set_has_shotinterval();
  shotinterval_ = value;
}

// optional sint32 CostType = 39 [default = -1];
inline bool SkillConfigSkillInfo::has_costtype() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SkillConfigSkillInfo::set_has_costtype() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SkillConfigSkillInfo::clear_has_costtype() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SkillConfigSkillInfo::clear_costtype() {
  costtype_ = -1;
  clear_has_costtype();
}
inline ::google::protobuf::int32 SkillConfigSkillInfo::costtype() const {
  return costtype_;
}
inline void SkillConfigSkillInfo::set_costtype(::google::protobuf::int32 value) {
  set_has_costtype();
  costtype_ = value;
}

// optional float CostValue = 40 [default = 0];
inline bool SkillConfigSkillInfo::has_costvalue() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SkillConfigSkillInfo::set_has_costvalue() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SkillConfigSkillInfo::clear_has_costvalue() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SkillConfigSkillInfo::clear_costvalue() {
  costvalue_ = 0;
  clear_has_costvalue();
}
inline float SkillConfigSkillInfo::costvalue() const {
  return costvalue_;
}
inline void SkillConfigSkillInfo::set_costvalue(float value) {
  set_has_costvalue();
  costvalue_ = value;
}

// optional float CostStage = 19 [default = 0];
inline bool SkillConfigSkillInfo::has_coststage() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SkillConfigSkillInfo::set_has_coststage() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SkillConfigSkillInfo::clear_has_coststage() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SkillConfigSkillInfo::clear_coststage() {
  coststage_ = 0;
  clear_has_coststage();
}
inline float SkillConfigSkillInfo::coststage() const {
  return coststage_;
}
inline void SkillConfigSkillInfo::set_coststage(float value) {
  set_has_coststage();
  coststage_ = value;
}

// optional float BulletConfigCost = 20 [default = 0];
inline bool SkillConfigSkillInfo::has_bulletconfigcost() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SkillConfigSkillInfo::set_has_bulletconfigcost() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SkillConfigSkillInfo::clear_has_bulletconfigcost() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SkillConfigSkillInfo::clear_bulletconfigcost() {
  bulletconfigcost_ = 0;
  clear_has_bulletconfigcost();
}
inline float SkillConfigSkillInfo::bulletconfigcost() const {
  return bulletconfigcost_;
}
inline void SkillConfigSkillInfo::set_bulletconfigcost(float value) {
  set_has_bulletconfigcost();
  bulletconfigcost_ = value;
}

// optional float CollectCost = 26 [default = 0];
inline bool SkillConfigSkillInfo::has_collectcost() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SkillConfigSkillInfo::set_has_collectcost() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SkillConfigSkillInfo::clear_has_collectcost() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SkillConfigSkillInfo::clear_collectcost() {
  collectcost_ = 0;
  clear_has_collectcost();
}
inline float SkillConfigSkillInfo::collectcost() const {
  return collectcost_;
}
inline void SkillConfigSkillInfo::set_collectcost(float value) {
  set_has_collectcost();
  collectcost_ = value;
}

// optional bool IsLockCamera = 22 [default = false];
inline bool SkillConfigSkillInfo::has_islockcamera() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SkillConfigSkillInfo::set_has_islockcamera() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SkillConfigSkillInfo::clear_has_islockcamera() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SkillConfigSkillInfo::clear_islockcamera() {
  islockcamera_ = false;
  clear_has_islockcamera();
}
inline bool SkillConfigSkillInfo::islockcamera() const {
  return islockcamera_;
}
inline void SkillConfigSkillInfo::set_islockcamera(bool value) {
  set_has_islockcamera();
  islockcamera_ = value;
}

// repeated .SkillConfigSkillDamage DamageList = 43;
inline int SkillConfigSkillInfo::damagelist_size() const {
  return damagelist_.size();
}
inline void SkillConfigSkillInfo::clear_damagelist() {
  damagelist_.Clear();
}
inline const ::SkillConfigSkillDamage& SkillConfigSkillInfo::damagelist(int index) const {
  return damagelist_.Get(index);
}
inline ::SkillConfigSkillDamage* SkillConfigSkillInfo::mutable_damagelist(int index) {
  return damagelist_.Mutable(index);
}
inline ::SkillConfigSkillDamage* SkillConfigSkillInfo::add_damagelist() {
  return damagelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SkillConfigSkillDamage >&
SkillConfigSkillInfo::damagelist() const {
  return damagelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::SkillConfigSkillDamage >*
SkillConfigSkillInfo::mutable_damagelist() {
  return &damagelist_;
}

// optional .SkillConfigCameraChangeInfo CameraData = 16;
inline bool SkillConfigSkillInfo::has_cameradata() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SkillConfigSkillInfo::set_has_cameradata() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SkillConfigSkillInfo::clear_has_cameradata() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SkillConfigSkillInfo::clear_cameradata() {
  if (cameradata_ != NULL) cameradata_->::SkillConfigCameraChangeInfo::Clear();
  clear_has_cameradata();
}
inline const ::SkillConfigCameraChangeInfo& SkillConfigSkillInfo::cameradata() const {
  return cameradata_ != NULL ? *cameradata_ : *default_instance_->cameradata_;
}
inline ::SkillConfigCameraChangeInfo* SkillConfigSkillInfo::mutable_cameradata() {
  set_has_cameradata();
  if (cameradata_ == NULL) cameradata_ = new ::SkillConfigCameraChangeInfo;
  return cameradata_;
}
inline ::SkillConfigCameraChangeInfo* SkillConfigSkillInfo::release_cameradata() {
  clear_has_cameradata();
  ::SkillConfigCameraChangeInfo* temp = cameradata_;
  cameradata_ = NULL;
  return temp;
}
inline void SkillConfigSkillInfo::set_allocated_cameradata(::SkillConfigCameraChangeInfo* cameradata) {
  delete cameradata_;
  cameradata_ = cameradata;
  if (cameradata) {
    set_has_cameradata();
  } else {
    clear_has_cameradata();
  }
}

// repeated .SkillConfigSkillPhase SkillPhaseList = 7;
inline int SkillConfigSkillInfo::skillphaselist_size() const {
  return skillphaselist_.size();
}
inline void SkillConfigSkillInfo::clear_skillphaselist() {
  skillphaselist_.Clear();
}
inline const ::SkillConfigSkillPhase& SkillConfigSkillInfo::skillphaselist(int index) const {
  return skillphaselist_.Get(index);
}
inline ::SkillConfigSkillPhase* SkillConfigSkillInfo::mutable_skillphaselist(int index) {
  return skillphaselist_.Mutable(index);
}
inline ::SkillConfigSkillPhase* SkillConfigSkillInfo::add_skillphaselist() {
  return skillphaselist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SkillConfigSkillPhase >&
SkillConfigSkillInfo::skillphaselist() const {
  return skillphaselist_;
}
inline ::google::protobuf::RepeatedPtrField< ::SkillConfigSkillPhase >*
SkillConfigSkillInfo::mutable_skillphaselist() {
  return &skillphaselist_;
}

// repeated .SkillConfigSkillCustomEvent CustomEventList = 17;
inline int SkillConfigSkillInfo::customeventlist_size() const {
  return customeventlist_.size();
}
inline void SkillConfigSkillInfo::clear_customeventlist() {
  customeventlist_.Clear();
}
inline const ::SkillConfigSkillCustomEvent& SkillConfigSkillInfo::customeventlist(int index) const {
  return customeventlist_.Get(index);
}
inline ::SkillConfigSkillCustomEvent* SkillConfigSkillInfo::mutable_customeventlist(int index) {
  return customeventlist_.Mutable(index);
}
inline ::SkillConfigSkillCustomEvent* SkillConfigSkillInfo::add_customeventlist() {
  return customeventlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SkillConfigSkillCustomEvent >&
SkillConfigSkillInfo::customeventlist() const {
  return customeventlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::SkillConfigSkillCustomEvent >*
SkillConfigSkillInfo::mutable_customeventlist() {
  return &customeventlist_;
}

// optional string IkFile = 32;
inline bool SkillConfigSkillInfo::has_ikfile() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SkillConfigSkillInfo::set_has_ikfile() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SkillConfigSkillInfo::clear_has_ikfile() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SkillConfigSkillInfo::clear_ikfile() {
  if (ikfile_ != &::google::protobuf::internal::kEmptyString) {
    ikfile_->clear();
  }
  clear_has_ikfile();
}
inline const ::std::string& SkillConfigSkillInfo::ikfile() const {
  return *ikfile_;
}
inline void SkillConfigSkillInfo::set_ikfile(const ::std::string& value) {
  set_has_ikfile();
  if (ikfile_ == &::google::protobuf::internal::kEmptyString) {
    ikfile_ = new ::std::string;
  }
  ikfile_->assign(value);
}
inline void SkillConfigSkillInfo::set_ikfile(const char* value) {
  set_has_ikfile();
  if (ikfile_ == &::google::protobuf::internal::kEmptyString) {
    ikfile_ = new ::std::string;
  }
  ikfile_->assign(value);
}
inline void SkillConfigSkillInfo::set_ikfile(const char* value, size_t size) {
  set_has_ikfile();
  if (ikfile_ == &::google::protobuf::internal::kEmptyString) {
    ikfile_ = new ::std::string;
  }
  ikfile_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SkillConfigSkillInfo::mutable_ikfile() {
  set_has_ikfile();
  if (ikfile_ == &::google::protobuf::internal::kEmptyString) {
    ikfile_ = new ::std::string;
  }
  return ikfile_;
}
inline ::std::string* SkillConfigSkillInfo::release_ikfile() {
  clear_has_ikfile();
  if (ikfile_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ikfile_;
    ikfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SkillConfigSkillInfo::set_allocated_ikfile(::std::string* ikfile) {
  if (ikfile_ != &::google::protobuf::internal::kEmptyString) {
    delete ikfile_;
  }
  if (ikfile) {
    set_has_ikfile();
    ikfile_ = ikfile;
  } else {
    clear_has_ikfile();
    ikfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SkillConfigSkillEventBase

// optional sint32 Id = 5 [default = -1];
inline bool SkillConfigSkillEventBase::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillConfigSkillEventBase::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillConfigSkillEventBase::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillConfigSkillEventBase::clear_id() {
  id_ = -1;
  clear_has_id();
}
inline ::google::protobuf::int32 SkillConfigSkillEventBase::id() const {
  return id_;
}
inline void SkillConfigSkillEventBase::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional sint32 EventType = 2 [default = 0];
inline bool SkillConfigSkillEventBase::has_eventtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillConfigSkillEventBase::set_has_eventtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillConfigSkillEventBase::clear_has_eventtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillConfigSkillEventBase::clear_eventtype() {
  eventtype_ = 0;
  clear_has_eventtype();
}
inline ::google::protobuf::int32 SkillConfigSkillEventBase::eventtype() const {
  return eventtype_;
}
inline void SkillConfigSkillEventBase::set_eventtype(::google::protobuf::int32 value) {
  set_has_eventtype();
  eventtype_ = value;
}

// optional sint32 Start = 3 [default = -1];
inline bool SkillConfigSkillEventBase::has_start() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkillConfigSkillEventBase::set_has_start() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SkillConfigSkillEventBase::clear_has_start() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SkillConfigSkillEventBase::clear_start() {
  start_ = -1;
  clear_has_start();
}
inline ::google::protobuf::int32 SkillConfigSkillEventBase::start() const {
  return start_;
}
inline void SkillConfigSkillEventBase::set_start(::google::protobuf::int32 value) {
  set_has_start();
  start_ = value;
}

// optional sint32 EventLength = 4 [default = -1];
inline bool SkillConfigSkillEventBase::has_eventlength() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SkillConfigSkillEventBase::set_has_eventlength() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SkillConfigSkillEventBase::clear_has_eventlength() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SkillConfigSkillEventBase::clear_eventlength() {
  eventlength_ = -1;
  clear_has_eventlength();
}
inline ::google::protobuf::int32 SkillConfigSkillEventBase::eventlength() const {
  return eventlength_;
}
inline void SkillConfigSkillEventBase::set_eventlength(::google::protobuf::int32 value) {
  set_has_eventlength();
  eventlength_ = value;
}

// -------------------------------------------------------------------

// SkillConfigSkillCustomEvent

// optional .SkillConfigSkillEventBase EventBase = 17;
inline bool SkillConfigSkillCustomEvent::has_eventbase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillConfigSkillCustomEvent::set_has_eventbase() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillConfigSkillCustomEvent::clear_has_eventbase() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillConfigSkillCustomEvent::clear_eventbase() {
  if (eventbase_ != NULL) eventbase_->::SkillConfigSkillEventBase::Clear();
  clear_has_eventbase();
}
inline const ::SkillConfigSkillEventBase& SkillConfigSkillCustomEvent::eventbase() const {
  return eventbase_ != NULL ? *eventbase_ : *default_instance_->eventbase_;
}
inline ::SkillConfigSkillEventBase* SkillConfigSkillCustomEvent::mutable_eventbase() {
  set_has_eventbase();
  if (eventbase_ == NULL) eventbase_ = new ::SkillConfigSkillEventBase;
  return eventbase_;
}
inline ::SkillConfigSkillEventBase* SkillConfigSkillCustomEvent::release_eventbase() {
  clear_has_eventbase();
  ::SkillConfigSkillEventBase* temp = eventbase_;
  eventbase_ = NULL;
  return temp;
}
inline void SkillConfigSkillCustomEvent::set_allocated_eventbase(::SkillConfigSkillEventBase* eventbase) {
  delete eventbase_;
  eventbase_ = eventbase;
  if (eventbase) {
    set_has_eventbase();
  } else {
    clear_has_eventbase();
  }
}

// optional sint32 SkillPhaseType = 32 [default = 0];
inline bool SkillConfigSkillCustomEvent::has_skillphasetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillConfigSkillCustomEvent::set_has_skillphasetype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillConfigSkillCustomEvent::clear_has_skillphasetype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillConfigSkillCustomEvent::clear_skillphasetype() {
  skillphasetype_ = 0;
  clear_has_skillphasetype();
}
inline ::google::protobuf::int32 SkillConfigSkillCustomEvent::skillphasetype() const {
  return skillphasetype_;
}
inline void SkillConfigSkillCustomEvent::set_skillphasetype(::google::protobuf::int32 value) {
  set_has_skillphasetype();
  skillphasetype_ = value;
}

// optional string FileName = 6;
inline bool SkillConfigSkillCustomEvent::has_filename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkillConfigSkillCustomEvent::set_has_filename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SkillConfigSkillCustomEvent::clear_has_filename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SkillConfigSkillCustomEvent::clear_filename() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& SkillConfigSkillCustomEvent::filename() const {
  return *filename_;
}
inline void SkillConfigSkillCustomEvent::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void SkillConfigSkillCustomEvent::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void SkillConfigSkillCustomEvent::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SkillConfigSkillCustomEvent::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  return filename_;
}
inline ::std::string* SkillConfigSkillCustomEvent::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SkillConfigSkillCustomEvent::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional sint32 ModelMountPoint = 7 [default = 0];
inline bool SkillConfigSkillCustomEvent::has_modelmountpoint() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SkillConfigSkillCustomEvent::set_has_modelmountpoint() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SkillConfigSkillCustomEvent::clear_has_modelmountpoint() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SkillConfigSkillCustomEvent::clear_modelmountpoint() {
  modelmountpoint_ = 0;
  clear_has_modelmountpoint();
}
inline ::google::protobuf::int32 SkillConfigSkillCustomEvent::modelmountpoint() const {
  return modelmountpoint_;
}
inline void SkillConfigSkillCustomEvent::set_modelmountpoint(::google::protobuf::int32 value) {
  set_has_modelmountpoint();
  modelmountpoint_ = value;
}

// optional sint32 WeaponMountPoint = 8 [default = 0];
inline bool SkillConfigSkillCustomEvent::has_weaponmountpoint() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SkillConfigSkillCustomEvent::set_has_weaponmountpoint() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SkillConfigSkillCustomEvent::clear_has_weaponmountpoint() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SkillConfigSkillCustomEvent::clear_weaponmountpoint() {
  weaponmountpoint_ = 0;
  clear_has_weaponmountpoint();
}
inline ::google::protobuf::int32 SkillConfigSkillCustomEvent::weaponmountpoint() const {
  return weaponmountpoint_;
}
inline void SkillConfigSkillCustomEvent::set_weaponmountpoint(::google::protobuf::int32 value) {
  set_has_weaponmountpoint();
  weaponmountpoint_ = value;
}

// optional sint32 EffectMountPoint = 12 [default = 0];
inline bool SkillConfigSkillCustomEvent::has_effectmountpoint() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SkillConfigSkillCustomEvent::set_has_effectmountpoint() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SkillConfigSkillCustomEvent::clear_has_effectmountpoint() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SkillConfigSkillCustomEvent::clear_effectmountpoint() {
  effectmountpoint_ = 0;
  clear_has_effectmountpoint();
}
inline ::google::protobuf::int32 SkillConfigSkillCustomEvent::effectmountpoint() const {
  return effectmountpoint_;
}
inline void SkillConfigSkillCustomEvent::set_effectmountpoint(::google::protobuf::int32 value) {
  set_has_effectmountpoint();
  effectmountpoint_ = value;
}

// optional bool Loop = 9 [default = false];
inline bool SkillConfigSkillCustomEvent::has_loop() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SkillConfigSkillCustomEvent::set_has_loop() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SkillConfigSkillCustomEvent::clear_has_loop() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SkillConfigSkillCustomEvent::clear_loop() {
  loop_ = false;
  clear_has_loop();
}
inline bool SkillConfigSkillCustomEvent::loop() const {
  return loop_;
}
inline void SkillConfigSkillCustomEvent::set_loop(bool value) {
  set_has_loop();
  loop_ = value;
}

// optional bool WholeAnimation = 10 [default = false];
inline bool SkillConfigSkillCustomEvent::has_wholeanimation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SkillConfigSkillCustomEvent::set_has_wholeanimation() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SkillConfigSkillCustomEvent::clear_has_wholeanimation() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SkillConfigSkillCustomEvent::clear_wholeanimation() {
  wholeanimation_ = false;
  clear_has_wholeanimation();
}
inline bool SkillConfigSkillCustomEvent::wholeanimation() const {
  return wholeanimation_;
}
inline void SkillConfigSkillCustomEvent::set_wholeanimation(bool value) {
  set_has_wholeanimation();
  wholeanimation_ = value;
}

// optional float OffsetX = 14 [default = 0];
inline bool SkillConfigSkillCustomEvent::has_offsetx() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SkillConfigSkillCustomEvent::set_has_offsetx() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SkillConfigSkillCustomEvent::clear_has_offsetx() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SkillConfigSkillCustomEvent::clear_offsetx() {
  offsetx_ = 0;
  clear_has_offsetx();
}
inline float SkillConfigSkillCustomEvent::offsetx() const {
  return offsetx_;
}
inline void SkillConfigSkillCustomEvent::set_offsetx(float value) {
  set_has_offsetx();
  offsetx_ = value;
}

// optional float OffsetY = 15 [default = 0];
inline bool SkillConfigSkillCustomEvent::has_offsety() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SkillConfigSkillCustomEvent::set_has_offsety() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SkillConfigSkillCustomEvent::clear_has_offsety() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SkillConfigSkillCustomEvent::clear_offsety() {
  offsety_ = 0;
  clear_has_offsety();
}
inline float SkillConfigSkillCustomEvent::offsety() const {
  return offsety_;
}
inline void SkillConfigSkillCustomEvent::set_offsety(float value) {
  set_has_offsety();
  offsety_ = value;
}

// optional float OffsetZ = 16 [default = 0];
inline bool SkillConfigSkillCustomEvent::has_offsetz() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SkillConfigSkillCustomEvent::set_has_offsetz() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SkillConfigSkillCustomEvent::clear_has_offsetz() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SkillConfigSkillCustomEvent::clear_offsetz() {
  offsetz_ = 0;
  clear_has_offsetz();
}
inline float SkillConfigSkillCustomEvent::offsetz() const {
  return offsetz_;
}
inline void SkillConfigSkillCustomEvent::set_offsetz(float value) {
  set_has_offsetz();
  offsetz_ = value;
}

// optional sint32 Id = 18 [default = -1];
inline bool SkillConfigSkillCustomEvent::has_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SkillConfigSkillCustomEvent::set_has_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SkillConfigSkillCustomEvent::clear_has_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SkillConfigSkillCustomEvent::clear_id() {
  id_ = -1;
  clear_has_id();
}
inline ::google::protobuf::int32 SkillConfigSkillCustomEvent::id() const {
  return id_;
}
inline void SkillConfigSkillCustomEvent::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional sint32 CreateType = 31 [default = 0];
inline bool SkillConfigSkillCustomEvent::has_createtype() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SkillConfigSkillCustomEvent::set_has_createtype() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SkillConfigSkillCustomEvent::clear_has_createtype() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SkillConfigSkillCustomEvent::clear_createtype() {
  createtype_ = 0;
  clear_has_createtype();
}
inline ::google::protobuf::int32 SkillConfigSkillCustomEvent::createtype() const {
  return createtype_;
}
inline void SkillConfigSkillCustomEvent::set_createtype(::google::protobuf::int32 value) {
  set_has_createtype();
  createtype_ = value;
}

// optional sint32 RemoveType = 29 [default = 1];
inline bool SkillConfigSkillCustomEvent::has_removetype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SkillConfigSkillCustomEvent::set_has_removetype() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SkillConfigSkillCustomEvent::clear_has_removetype() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SkillConfigSkillCustomEvent::clear_removetype() {
  removetype_ = 1;
  clear_has_removetype();
}
inline ::google::protobuf::int32 SkillConfigSkillCustomEvent::removetype() const {
  return removetype_;
}
inline void SkillConfigSkillCustomEvent::set_removetype(::google::protobuf::int32 value) {
  set_has_removetype();
  removetype_ = value;
}

// optional sint32 RemovePhase = 21 [default = 0];
inline bool SkillConfigSkillCustomEvent::has_removephase() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SkillConfigSkillCustomEvent::set_has_removephase() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SkillConfigSkillCustomEvent::clear_has_removephase() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SkillConfigSkillCustomEvent::clear_removephase() {
  removephase_ = 0;
  clear_has_removephase();
}
inline ::google::protobuf::int32 SkillConfigSkillCustomEvent::removephase() const {
  return removephase_;
}
inline void SkillConfigSkillCustomEvent::set_removephase(::google::protobuf::int32 value) {
  set_has_removephase();
  removephase_ = value;
}

// optional sint32 RemoveTime = 20 [default = -1];
inline bool SkillConfigSkillCustomEvent::has_removetime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SkillConfigSkillCustomEvent::set_has_removetime() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SkillConfigSkillCustomEvent::clear_has_removetime() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SkillConfigSkillCustomEvent::clear_removetime() {
  removetime_ = -1;
  clear_has_removetime();
}
inline ::google::protobuf::int32 SkillConfigSkillCustomEvent::removetime() const {
  return removetime_;
}
inline void SkillConfigSkillCustomEvent::set_removetime(::google::protobuf::int32 value) {
  set_has_removetime();
  removetime_ = value;
}

// optional bool EffectFollow = 34 [default = true];
inline bool SkillConfigSkillCustomEvent::has_effectfollow() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SkillConfigSkillCustomEvent::set_has_effectfollow() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SkillConfigSkillCustomEvent::clear_has_effectfollow() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SkillConfigSkillCustomEvent::clear_effectfollow() {
  effectfollow_ = true;
  clear_has_effectfollow();
}
inline bool SkillConfigSkillCustomEvent::effectfollow() const {
  return effectfollow_;
}
inline void SkillConfigSkillCustomEvent::set_effectfollow(bool value) {
  set_has_effectfollow();
  effectfollow_ = value;
}

// optional bool UseMount = 33 [default = false];
inline bool SkillConfigSkillCustomEvent::has_usemount() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SkillConfigSkillCustomEvent::set_has_usemount() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SkillConfigSkillCustomEvent::clear_has_usemount() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SkillConfigSkillCustomEvent::clear_usemount() {
  usemount_ = false;
  clear_has_usemount();
}
inline bool SkillConfigSkillCustomEvent::usemount() const {
  return usemount_;
}
inline void SkillConfigSkillCustomEvent::set_usemount(bool value) {
  set_has_usemount();
  usemount_ = value;
}

// optional sint32 HoldType = 23 [default = 0];
inline bool SkillConfigSkillCustomEvent::has_holdtype() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SkillConfigSkillCustomEvent::set_has_holdtype() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SkillConfigSkillCustomEvent::clear_has_holdtype() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SkillConfigSkillCustomEvent::clear_holdtype() {
  holdtype_ = 0;
  clear_has_holdtype();
}
inline ::google::protobuf::int32 SkillConfigSkillCustomEvent::holdtype() const {
  return holdtype_;
}
inline void SkillConfigSkillCustomEvent::set_holdtype(::google::protobuf::int32 value) {
  set_has_holdtype();
  holdtype_ = value;
}

// optional sint32 CameraChangeType = 28 [default = 0];
inline bool SkillConfigSkillCustomEvent::has_camerachangetype() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SkillConfigSkillCustomEvent::set_has_camerachangetype() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SkillConfigSkillCustomEvent::clear_has_camerachangetype() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SkillConfigSkillCustomEvent::clear_camerachangetype() {
  camerachangetype_ = 0;
  clear_has_camerachangetype();
}
inline ::google::protobuf::int32 SkillConfigSkillCustomEvent::camerachangetype() const {
  return camerachangetype_;
}
inline void SkillConfigSkillCustomEvent::set_camerachangetype(::google::protobuf::int32 value) {
  set_has_camerachangetype();
  camerachangetype_ = value;
}

// optional float CameraHorcoef = 24 [default = 0.13];
inline bool SkillConfigSkillCustomEvent::has_camerahorcoef() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SkillConfigSkillCustomEvent::set_has_camerahorcoef() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SkillConfigSkillCustomEvent::clear_has_camerahorcoef() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SkillConfigSkillCustomEvent::clear_camerahorcoef() {
  camerahorcoef_ = 0.13f;
  clear_has_camerahorcoef();
}
inline float SkillConfigSkillCustomEvent::camerahorcoef() const {
  return camerahorcoef_;
}
inline void SkillConfigSkillCustomEvent::set_camerahorcoef(float value) {
  set_has_camerahorcoef();
  camerahorcoef_ = value;
}

// optional float CameraVercoef = 25 [default = 0.13];
inline bool SkillConfigSkillCustomEvent::has_cameravercoef() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SkillConfigSkillCustomEvent::set_has_cameravercoef() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SkillConfigSkillCustomEvent::clear_has_cameravercoef() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SkillConfigSkillCustomEvent::clear_cameravercoef() {
  cameravercoef_ = 0.13f;
  clear_has_cameravercoef();
}
inline float SkillConfigSkillCustomEvent::cameravercoef() const {
  return cameravercoef_;
}
inline void SkillConfigSkillCustomEvent::set_cameravercoef(float value) {
  set_has_cameravercoef();
  cameravercoef_ = value;
}

// optional float CameraPower = 26 [default = 1.2];
inline bool SkillConfigSkillCustomEvent::has_camerapower() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SkillConfigSkillCustomEvent::set_has_camerapower() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SkillConfigSkillCustomEvent::clear_has_camerapower() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SkillConfigSkillCustomEvent::clear_camerapower() {
  camerapower_ = 1.2f;
  clear_has_camerapower();
}
inline float SkillConfigSkillCustomEvent::camerapower() const {
  return camerapower_;
}
inline void SkillConfigSkillCustomEvent::set_camerapower(float value) {
  set_has_camerapower();
  camerapower_ = value;
}

// optional float CameraCont = 27 [default = 0.1];
inline bool SkillConfigSkillCustomEvent::has_cameracont() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SkillConfigSkillCustomEvent::set_has_cameracont() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SkillConfigSkillCustomEvent::clear_has_cameracont() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SkillConfigSkillCustomEvent::clear_cameracont() {
  cameracont_ = 0.1f;
  clear_has_cameracont();
}
inline float SkillConfigSkillCustomEvent::cameracont() const {
  return cameracont_;
}
inline void SkillConfigSkillCustomEvent::set_cameracont(float value) {
  set_has_cameracont();
  cameracont_ = value;
}

// optional bool Audio3D = 38 [default = false];
inline bool SkillConfigSkillCustomEvent::has_audio3d() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SkillConfigSkillCustomEvent::set_has_audio3d() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SkillConfigSkillCustomEvent::clear_has_audio3d() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SkillConfigSkillCustomEvent::clear_audio3d() {
  audio3d_ = false;
  clear_has_audio3d();
}
inline bool SkillConfigSkillCustomEvent::audio3d() const {
  return audio3d_;
}
inline void SkillConfigSkillCustomEvent::set_audio3d(bool value) {
  set_has_audio3d();
  audio3d_ = value;
}

// optional sint32 ShotPointAngleMin = 40 [default = -1];
inline bool SkillConfigSkillCustomEvent::has_shotpointanglemin() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SkillConfigSkillCustomEvent::set_has_shotpointanglemin() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SkillConfigSkillCustomEvent::clear_has_shotpointanglemin() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SkillConfigSkillCustomEvent::clear_shotpointanglemin() {
  shotpointanglemin_ = -1;
  clear_has_shotpointanglemin();
}
inline ::google::protobuf::int32 SkillConfigSkillCustomEvent::shotpointanglemin() const {
  return shotpointanglemin_;
}
inline void SkillConfigSkillCustomEvent::set_shotpointanglemin(::google::protobuf::int32 value) {
  set_has_shotpointanglemin();
  shotpointanglemin_ = value;
}

// repeated .SkillConfigShotPoint ShotPointList = 39;
inline int SkillConfigSkillCustomEvent::shotpointlist_size() const {
  return shotpointlist_.size();
}
inline void SkillConfigSkillCustomEvent::clear_shotpointlist() {
  shotpointlist_.Clear();
}
inline const ::SkillConfigShotPoint& SkillConfigSkillCustomEvent::shotpointlist(int index) const {
  return shotpointlist_.Get(index);
}
inline ::SkillConfigShotPoint* SkillConfigSkillCustomEvent::mutable_shotpointlist(int index) {
  return shotpointlist_.Mutable(index);
}
inline ::SkillConfigShotPoint* SkillConfigSkillCustomEvent::add_shotpointlist() {
  return shotpointlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SkillConfigShotPoint >&
SkillConfigSkillCustomEvent::shotpointlist() const {
  return shotpointlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::SkillConfigShotPoint >*
SkillConfigSkillCustomEvent::mutable_shotpointlist() {
  return &shotpointlist_;
}

// -------------------------------------------------------------------

// SkillConfigCameraChangeInfo

// optional bool CameraChange = 5 [default = false];
inline bool SkillConfigCameraChangeInfo::has_camerachange() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillConfigCameraChangeInfo::set_has_camerachange() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillConfigCameraChangeInfo::clear_has_camerachange() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillConfigCameraChangeInfo::clear_camerachange() {
  camerachange_ = false;
  clear_has_camerachange();
}
inline bool SkillConfigCameraChangeInfo::camerachange() const {
  return camerachange_;
}
inline void SkillConfigCameraChangeInfo::set_camerachange(bool value) {
  set_has_camerachange();
  camerachange_ = value;
}

// optional sint32 CameraChangeStartTime = 1 [default = -1];
inline bool SkillConfigCameraChangeInfo::has_camerachangestarttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillConfigCameraChangeInfo::set_has_camerachangestarttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillConfigCameraChangeInfo::clear_has_camerachangestarttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillConfigCameraChangeInfo::clear_camerachangestarttime() {
  camerachangestarttime_ = -1;
  clear_has_camerachangestarttime();
}
inline ::google::protobuf::int32 SkillConfigCameraChangeInfo::camerachangestarttime() const {
  return camerachangestarttime_;
}
inline void SkillConfigCameraChangeInfo::set_camerachangestarttime(::google::protobuf::int32 value) {
  set_has_camerachangestarttime();
  camerachangestarttime_ = value;
}

// optional float CameraFieldView = 2 [default = -1];
inline bool SkillConfigCameraChangeInfo::has_camerafieldview() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkillConfigCameraChangeInfo::set_has_camerafieldview() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SkillConfigCameraChangeInfo::clear_has_camerafieldview() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SkillConfigCameraChangeInfo::clear_camerafieldview() {
  camerafieldview_ = -1;
  clear_has_camerafieldview();
}
inline float SkillConfigCameraChangeInfo::camerafieldview() const {
  return camerafieldview_;
}
inline void SkillConfigCameraChangeInfo::set_camerafieldview(float value) {
  set_has_camerafieldview();
  camerafieldview_ = value;
}

// optional sint32 CameraChangeEndTime = 3 [default = -1];
inline bool SkillConfigCameraChangeInfo::has_camerachangeendtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SkillConfigCameraChangeInfo::set_has_camerachangeendtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SkillConfigCameraChangeInfo::clear_has_camerachangeendtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SkillConfigCameraChangeInfo::clear_camerachangeendtime() {
  camerachangeendtime_ = -1;
  clear_has_camerachangeendtime();
}
inline ::google::protobuf::int32 SkillConfigCameraChangeInfo::camerachangeendtime() const {
  return camerachangeendtime_;
}
inline void SkillConfigCameraChangeInfo::set_camerachangeendtime(::google::protobuf::int32 value) {
  set_has_camerachangeendtime();
  camerachangeendtime_ = value;
}

// optional sint32 CameraRecoverTime = 4 [default = -1];
inline bool SkillConfigCameraChangeInfo::has_camerarecovertime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SkillConfigCameraChangeInfo::set_has_camerarecovertime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SkillConfigCameraChangeInfo::clear_has_camerarecovertime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SkillConfigCameraChangeInfo::clear_camerarecovertime() {
  camerarecovertime_ = -1;
  clear_has_camerarecovertime();
}
inline ::google::protobuf::int32 SkillConfigCameraChangeInfo::camerarecovertime() const {
  return camerarecovertime_;
}
inline void SkillConfigCameraChangeInfo::set_camerarecovertime(::google::protobuf::int32 value) {
  set_has_camerarecovertime();
  camerarecovertime_ = value;
}

// -------------------------------------------------------------------

// SkillConfigSkillData

// optional sint32 Id = 2 [default = -1];
inline bool SkillConfigSkillData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillConfigSkillData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillConfigSkillData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillConfigSkillData::clear_id() {
  id_ = -1;
  clear_has_id();
}
inline ::google::protobuf::int32 SkillConfigSkillData::id() const {
  return id_;
}
inline void SkillConfigSkillData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// repeated .SkillConfigSkillInfo SkillInfoList = 1;
inline int SkillConfigSkillData::skillinfolist_size() const {
  return skillinfolist_.size();
}
inline void SkillConfigSkillData::clear_skillinfolist() {
  skillinfolist_.Clear();
}
inline const ::SkillConfigSkillInfo& SkillConfigSkillData::skillinfolist(int index) const {
  return skillinfolist_.Get(index);
}
inline ::SkillConfigSkillInfo* SkillConfigSkillData::mutable_skillinfolist(int index) {
  return skillinfolist_.Mutable(index);
}
inline ::SkillConfigSkillInfo* SkillConfigSkillData::add_skillinfolist() {
  return skillinfolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SkillConfigSkillInfo >&
SkillConfigSkillData::skillinfolist() const {
  return skillinfolist_;
}
inline ::google::protobuf::RepeatedPtrField< ::SkillConfigSkillInfo >*
SkillConfigSkillData::mutable_skillinfolist() {
  return &skillinfolist_;
}

// optional string HandleFile = 3;
inline bool SkillConfigSkillData::has_handlefile() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkillConfigSkillData::set_has_handlefile() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SkillConfigSkillData::clear_has_handlefile() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SkillConfigSkillData::clear_handlefile() {
  if (handlefile_ != &::google::protobuf::internal::kEmptyString) {
    handlefile_->clear();
  }
  clear_has_handlefile();
}
inline const ::std::string& SkillConfigSkillData::handlefile() const {
  return *handlefile_;
}
inline void SkillConfigSkillData::set_handlefile(const ::std::string& value) {
  set_has_handlefile();
  if (handlefile_ == &::google::protobuf::internal::kEmptyString) {
    handlefile_ = new ::std::string;
  }
  handlefile_->assign(value);
}
inline void SkillConfigSkillData::set_handlefile(const char* value) {
  set_has_handlefile();
  if (handlefile_ == &::google::protobuf::internal::kEmptyString) {
    handlefile_ = new ::std::string;
  }
  handlefile_->assign(value);
}
inline void SkillConfigSkillData::set_handlefile(const char* value, size_t size) {
  set_has_handlefile();
  if (handlefile_ == &::google::protobuf::internal::kEmptyString) {
    handlefile_ = new ::std::string;
  }
  handlefile_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SkillConfigSkillData::mutable_handlefile() {
  set_has_handlefile();
  if (handlefile_ == &::google::protobuf::internal::kEmptyString) {
    handlefile_ = new ::std::string;
  }
  return handlefile_;
}
inline ::std::string* SkillConfigSkillData::release_handlefile() {
  clear_has_handlefile();
  if (handlefile_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = handlefile_;
    handlefile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SkillConfigSkillData::set_allocated_handlefile(::std::string* handlefile) {
  if (handlefile_ != &::google::protobuf::internal::kEmptyString) {
    delete handlefile_;
  }
  if (handlefile) {
    set_has_handlefile();
    handlefile_ = handlefile;
  } else {
    clear_has_handlefile();
    handlefile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SkillConfigSkillDamage

// optional sint32 DamageType = 14 [default = 0];
inline bool SkillConfigSkillDamage::has_damagetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillConfigSkillDamage::set_has_damagetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillConfigSkillDamage::clear_has_damagetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillConfigSkillDamage::clear_damagetype() {
  damagetype_ = 0;
  clear_has_damagetype();
}
inline ::google::protobuf::int32 SkillConfigSkillDamage::damagetype() const {
  return damagetype_;
}
inline void SkillConfigSkillDamage::set_damagetype(::google::protobuf::int32 value) {
  set_has_damagetype();
  damagetype_ = value;
}

// optional float BaseDamage = 1 [default = 0];
inline bool SkillConfigSkillDamage::has_basedamage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillConfigSkillDamage::set_has_basedamage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillConfigSkillDamage::clear_has_basedamage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillConfigSkillDamage::clear_basedamage() {
  basedamage_ = 0;
  clear_has_basedamage();
}
inline float SkillConfigSkillDamage::basedamage() const {
  return basedamage_;
}
inline void SkillConfigSkillDamage::set_basedamage(float value) {
  set_has_basedamage();
  basedamage_ = value;
}

// optional float BaseDamageTime = 2 [default = 0];
inline bool SkillConfigSkillDamage::has_basedamagetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkillConfigSkillDamage::set_has_basedamagetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SkillConfigSkillDamage::clear_has_basedamagetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SkillConfigSkillDamage::clear_basedamagetime() {
  basedamagetime_ = 0;
  clear_has_basedamagetime();
}
inline float SkillConfigSkillDamage::basedamagetime() const {
  return basedamagetime_;
}
inline void SkillConfigSkillDamage::set_basedamagetime(float value) {
  set_has_basedamagetime();
  basedamagetime_ = value;
}

// optional float DecreaseDamage = 5 [default = 0];
inline bool SkillConfigSkillDamage::has_decreasedamage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SkillConfigSkillDamage::set_has_decreasedamage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SkillConfigSkillDamage::clear_has_decreasedamage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SkillConfigSkillDamage::clear_decreasedamage() {
  decreasedamage_ = 0;
  clear_has_decreasedamage();
}
inline float SkillConfigSkillDamage::decreasedamage() const {
  return decreasedamage_;
}
inline void SkillConfigSkillDamage::set_decreasedamage(float value) {
  set_has_decreasedamage();
  decreasedamage_ = value;
}

// optional float DecreaseMinDamage = 3 [default = 0];
inline bool SkillConfigSkillDamage::has_decreasemindamage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SkillConfigSkillDamage::set_has_decreasemindamage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SkillConfigSkillDamage::clear_has_decreasemindamage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SkillConfigSkillDamage::clear_decreasemindamage() {
  decreasemindamage_ = 0;
  clear_has_decreasemindamage();
}
inline float SkillConfigSkillDamage::decreasemindamage() const {
  return decreasemindamage_;
}
inline void SkillConfigSkillDamage::set_decreasemindamage(float value) {
  set_has_decreasemindamage();
  decreasemindamage_ = value;
}

// optional float MaxDamage = 4 [default = 0];
inline bool SkillConfigSkillDamage::has_maxdamage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SkillConfigSkillDamage::set_has_maxdamage() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SkillConfigSkillDamage::clear_has_maxdamage() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SkillConfigSkillDamage::clear_maxdamage() {
  maxdamage_ = 0;
  clear_has_maxdamage();
}
inline float SkillConfigSkillDamage::maxdamage() const {
  return maxdamage_;
}
inline void SkillConfigSkillDamage::set_maxdamage(float value) {
  set_has_maxdamage();
  maxdamage_ = value;
}

// optional sint32 MaxHitCount = 6 [default = 0];
inline bool SkillConfigSkillDamage::has_maxhitcount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SkillConfigSkillDamage::set_has_maxhitcount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SkillConfigSkillDamage::clear_has_maxhitcount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SkillConfigSkillDamage::clear_maxhitcount() {
  maxhitcount_ = 0;
  clear_has_maxhitcount();
}
inline ::google::protobuf::int32 SkillConfigSkillDamage::maxhitcount() const {
  return maxhitcount_;
}
inline void SkillConfigSkillDamage::set_maxhitcount(::google::protobuf::int32 value) {
  set_has_maxhitcount();
  maxhitcount_ = value;
}

// optional float FocoBaseDamage = 15 [default = 0];
inline bool SkillConfigSkillDamage::has_focobasedamage() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SkillConfigSkillDamage::set_has_focobasedamage() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SkillConfigSkillDamage::clear_has_focobasedamage() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SkillConfigSkillDamage::clear_focobasedamage() {
  focobasedamage_ = 0;
  clear_has_focobasedamage();
}
inline float SkillConfigSkillDamage::focobasedamage() const {
  return focobasedamage_;
}
inline void SkillConfigSkillDamage::set_focobasedamage(float value) {
  set_has_focobasedamage();
  focobasedamage_ = value;
}

// optional float FocoMinDamage = 7 [default = 0];
inline bool SkillConfigSkillDamage::has_focomindamage() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SkillConfigSkillDamage::set_has_focomindamage() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SkillConfigSkillDamage::clear_has_focomindamage() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SkillConfigSkillDamage::clear_focomindamage() {
  focomindamage_ = 0;
  clear_has_focomindamage();
}
inline float SkillConfigSkillDamage::focomindamage() const {
  return focomindamage_;
}
inline void SkillConfigSkillDamage::set_focomindamage(float value) {
  set_has_focomindamage();
  focomindamage_ = value;
}

// optional float FocoFullDamage = 8 [default = 0];
inline bool SkillConfigSkillDamage::has_focofulldamage() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SkillConfigSkillDamage::set_has_focofulldamage() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SkillConfigSkillDamage::clear_has_focofulldamage() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SkillConfigSkillDamage::clear_focofulldamage() {
  focofulldamage_ = 0;
  clear_has_focofulldamage();
}
inline float SkillConfigSkillDamage::focofulldamage() const {
  return focofulldamage_;
}
inline void SkillConfigSkillDamage::set_focofulldamage(float value) {
  set_has_focofulldamage();
  focofulldamage_ = value;
}

// optional float FocoMaxDamage = 16 [default = 0];
inline bool SkillConfigSkillDamage::has_focomaxdamage() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SkillConfigSkillDamage::set_has_focomaxdamage() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SkillConfigSkillDamage::clear_has_focomaxdamage() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SkillConfigSkillDamage::clear_focomaxdamage() {
  focomaxdamage_ = 0;
  clear_has_focomaxdamage();
}
inline float SkillConfigSkillDamage::focomaxdamage() const {
  return focomaxdamage_;
}
inline void SkillConfigSkillDamage::set_focomaxdamage(float value) {
  set_has_focomaxdamage();
  focomaxdamage_ = value;
}

// optional sint32 FocoMaxHitCount = 17 [default = 0];
inline bool SkillConfigSkillDamage::has_focomaxhitcount() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SkillConfigSkillDamage::set_has_focomaxhitcount() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SkillConfigSkillDamage::clear_has_focomaxhitcount() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SkillConfigSkillDamage::clear_focomaxhitcount() {
  focomaxhitcount_ = 0;
  clear_has_focomaxhitcount();
}
inline ::google::protobuf::int32 SkillConfigSkillDamage::focomaxhitcount() const {
  return focomaxhitcount_;
}
inline void SkillConfigSkillDamage::set_focomaxhitcount(::google::protobuf::int32 value) {
  set_has_focomaxhitcount();
  focomaxhitcount_ = value;
}

// optional float ExplosionDamage = 9 [default = 0];
inline bool SkillConfigSkillDamage::has_explosiondamage() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SkillConfigSkillDamage::set_has_explosiondamage() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SkillConfigSkillDamage::clear_has_explosiondamage() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SkillConfigSkillDamage::clear_explosiondamage() {
  explosiondamage_ = 0;
  clear_has_explosiondamage();
}
inline float SkillConfigSkillDamage::explosiondamage() const {
  return explosiondamage_;
}
inline void SkillConfigSkillDamage::set_explosiondamage(float value) {
  set_has_explosiondamage();
  explosiondamage_ = value;
}

// optional float ExplosionMiniDamage = 10 [default = 0];
inline bool SkillConfigSkillDamage::has_explosionminidamage() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SkillConfigSkillDamage::set_has_explosionminidamage() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SkillConfigSkillDamage::clear_has_explosionminidamage() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SkillConfigSkillDamage::clear_explosionminidamage() {
  explosionminidamage_ = 0;
  clear_has_explosionminidamage();
}
inline float SkillConfigSkillDamage::explosionminidamage() const {
  return explosionminidamage_;
}
inline void SkillConfigSkillDamage::set_explosionminidamage(float value) {
  set_has_explosionminidamage();
  explosionminidamage_ = value;
}

// optional bool BFix = 12 [default = false];
inline bool SkillConfigSkillDamage::has_bfix() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SkillConfigSkillDamage::set_has_bfix() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SkillConfigSkillDamage::clear_has_bfix() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SkillConfigSkillDamage::clear_bfix() {
  bfix_ = false;
  clear_has_bfix();
}
inline bool SkillConfigSkillDamage::bfix() const {
  return bfix_;
}
inline void SkillConfigSkillDamage::set_bfix(bool value) {
  set_has_bfix();
  bfix_ = value;
}

// optional float ExplosionRadius = 11 [default = 0];
inline bool SkillConfigSkillDamage::has_explosionradius() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SkillConfigSkillDamage::set_has_explosionradius() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SkillConfigSkillDamage::clear_has_explosionradius() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SkillConfigSkillDamage::clear_explosionradius() {
  explosionradius_ = 0;
  clear_has_explosionradius();
}
inline float SkillConfigSkillDamage::explosionradius() const {
  return explosionradius_;
}
inline void SkillConfigSkillDamage::set_explosionradius(float value) {
  set_has_explosionradius();
  explosionradius_ = value;
}

// optional float CollisionDamage = 13 [default = 0];
inline bool SkillConfigSkillDamage::has_collisiondamage() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SkillConfigSkillDamage::set_has_collisiondamage() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SkillConfigSkillDamage::clear_has_collisiondamage() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SkillConfigSkillDamage::clear_collisiondamage() {
  collisiondamage_ = 0;
  clear_has_collisiondamage();
}
inline float SkillConfigSkillDamage::collisiondamage() const {
  return collisiondamage_;
}
inline void SkillConfigSkillDamage::set_collisiondamage(float value) {
  set_has_collisiondamage();
  collisiondamage_ = value;
}

// -------------------------------------------------------------------

// SkillConfigShotPoint

// optional sint32 Angle = 1 [default = -1];
inline bool SkillConfigShotPoint::has_angle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillConfigShotPoint::set_has_angle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillConfigShotPoint::clear_has_angle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillConfigShotPoint::clear_angle() {
  angle_ = -1;
  clear_has_angle();
}
inline ::google::protobuf::int32 SkillConfigShotPoint::angle() const {
  return angle_;
}
inline void SkillConfigShotPoint::set_angle(::google::protobuf::int32 value) {
  set_has_angle();
  angle_ = value;
}

// optional .Vector3PB LocalPos = 2;
inline bool SkillConfigShotPoint::has_localpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillConfigShotPoint::set_has_localpos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillConfigShotPoint::clear_has_localpos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillConfigShotPoint::clear_localpos() {
  if (localpos_ != NULL) localpos_->::Vector3PB::Clear();
  clear_has_localpos();
}
inline const ::Vector3PB& SkillConfigShotPoint::localpos() const {
  return localpos_ != NULL ? *localpos_ : *default_instance_->localpos_;
}
inline ::Vector3PB* SkillConfigShotPoint::mutable_localpos() {
  set_has_localpos();
  if (localpos_ == NULL) localpos_ = new ::Vector3PB;
  return localpos_;
}
inline ::Vector3PB* SkillConfigShotPoint::release_localpos() {
  clear_has_localpos();
  ::Vector3PB* temp = localpos_;
  localpos_ = NULL;
  return temp;
}
inline void SkillConfigShotPoint::set_allocated_localpos(::Vector3PB* localpos) {
  delete localpos_;
  localpos_ = localpos;
  if (localpos) {
    set_has_localpos();
  } else {
    clear_has_localpos();
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SkillConfigCliRpc_2eproto__INCLUDED
