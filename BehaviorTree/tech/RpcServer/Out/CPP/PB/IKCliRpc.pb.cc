// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IKCliRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IKCliRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* IKRpcsyncNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IKRpcsyncNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* IKJoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IKJoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* IKData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IKData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_IKCliRpc_2eproto() {
  protobuf_AddDesc_IKCliRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "IKCliRpc.proto");
  GOOGLE_CHECK(file != NULL);
  IKRpcsyncNotify_descriptor_ = file->message_type(0);
  static const int IKRpcsyncNotify_offsets_[1] = {
  };
  IKRpcsyncNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IKRpcsyncNotify_descriptor_,
      IKRpcsyncNotify::default_instance_,
      IKRpcsyncNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IKRpcsyncNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IKRpcsyncNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IKRpcsyncNotify));
  IKJoint_descriptor_ = file->message_type(1);
  static const int IKJoint_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IKJoint, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IKJoint, jointtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IKJoint, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IKJoint, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IKJoint, childlist_),
  };
  IKJoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IKJoint_descriptor_,
      IKJoint::default_instance_,
      IKJoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IKJoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IKJoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IKJoint));
  IKData_descriptor_ = file->message_type(2);
  static const int IKData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IKData, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IKData, jointlist_),
  };
  IKData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IKData_descriptor_,
      IKData::default_instance_,
      IKData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IKData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IKData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IKData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_IKCliRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IKRpcsyncNotify_descriptor_, &IKRpcsyncNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IKJoint_descriptor_, &IKJoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IKData_descriptor_, &IKData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_IKCliRpc_2eproto() {
  delete IKRpcsyncNotify::default_instance_;
  delete IKRpcsyncNotify_reflection_;
  delete IKJoint::default_instance_;
  delete IKJoint_reflection_;
  delete IKData::default_instance_;
  delete IKData_reflection_;
}

void protobuf_AddDesc_IKCliRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016IKCliRpc.proto\032\022PublicStruct.proto\"\021\n\017"
    "IKRpcsyncNotify\"e\n\007IKJoint\022\016\n\002Id\030\001 \001(\021:\002"
    "-1\022\024\n\tJointType\030\002 \001(\021:\0010\022\016\n\006Target\030\003 \001(\t"
    "\022\021\n\006Weight\030\004 \001(\002:\0011\022\021\n\tChildList\030\005 \003(\021\"7"
    "\n\006IKData\022\020\n\010FileName\030\001 \001(\t\022\033\n\tJointList\030"
    "\002 \003(\0132\010.IKJoint", 215);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "IKCliRpc.proto", &protobuf_RegisterTypes);
  IKRpcsyncNotify::default_instance_ = new IKRpcsyncNotify();
  IKJoint::default_instance_ = new IKJoint();
  IKData::default_instance_ = new IKData();
  IKRpcsyncNotify::default_instance_->InitAsDefaultInstance();
  IKJoint::default_instance_->InitAsDefaultInstance();
  IKData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_IKCliRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_IKCliRpc_2eproto {
  StaticDescriptorInitializer_IKCliRpc_2eproto() {
    protobuf_AddDesc_IKCliRpc_2eproto();
  }
} static_descriptor_initializer_IKCliRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

IKRpcsyncNotify::IKRpcsyncNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IKRpcsyncNotify::InitAsDefaultInstance() {
}

IKRpcsyncNotify::IKRpcsyncNotify(const IKRpcsyncNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IKRpcsyncNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IKRpcsyncNotify::~IKRpcsyncNotify() {
  SharedDtor();
}

void IKRpcsyncNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IKRpcsyncNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IKRpcsyncNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IKRpcsyncNotify_descriptor_;
}

const IKRpcsyncNotify& IKRpcsyncNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IKCliRpc_2eproto();
  return *default_instance_;
}

IKRpcsyncNotify* IKRpcsyncNotify::default_instance_ = NULL;

IKRpcsyncNotify* IKRpcsyncNotify::New() const {
  return new IKRpcsyncNotify;
}

void IKRpcsyncNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IKRpcsyncNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void IKRpcsyncNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IKRpcsyncNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IKRpcsyncNotify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IKRpcsyncNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IKRpcsyncNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IKRpcsyncNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IKRpcsyncNotify::MergeFrom(const IKRpcsyncNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IKRpcsyncNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IKRpcsyncNotify::CopyFrom(const IKRpcsyncNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IKRpcsyncNotify::IsInitialized() const {

  return true;
}

void IKRpcsyncNotify::Swap(IKRpcsyncNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IKRpcsyncNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IKRpcsyncNotify_descriptor_;
  metadata.reflection = IKRpcsyncNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IKJoint::kIdFieldNumber;
const int IKJoint::kJointTypeFieldNumber;
const int IKJoint::kTargetFieldNumber;
const int IKJoint::kWeightFieldNumber;
const int IKJoint::kChildListFieldNumber;
#endif  // !_MSC_VER

IKJoint::IKJoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IKJoint::InitAsDefaultInstance() {
}

IKJoint::IKJoint(const IKJoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IKJoint::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  jointtype_ = 0;
  target_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  weight_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IKJoint::~IKJoint() {
  SharedDtor();
}

void IKJoint::SharedDtor() {
  if (target_ != &::google::protobuf::internal::kEmptyString) {
    delete target_;
  }
  if (this != default_instance_) {
  }
}

void IKJoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IKJoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IKJoint_descriptor_;
}

const IKJoint& IKJoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IKCliRpc_2eproto();
  return *default_instance_;
}

IKJoint* IKJoint::default_instance_ = NULL;

IKJoint* IKJoint::New() const {
  return new IKJoint;
}

void IKJoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = -1;
    jointtype_ = 0;
    if (has_target()) {
      if (target_ != &::google::protobuf::internal::kEmptyString) {
        target_->clear();
      }
    }
    weight_ = 1;
  }
  childlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IKJoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Id = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_JointType;
        break;
      }

      // optional sint32 JointType = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_JointType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &jointtype_)));
          set_has_jointtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Target;
        break;
      }

      // optional string Target = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->target().data(), this->target().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_Weight;
        break;
      }

      // optional float Weight = 4 [default = 1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ChildList;
        break;
      }

      // repeated sint32 ChildList = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ChildList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 40, input, this->mutable_childlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_childlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ChildList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IKJoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Id = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->id(), output);
  }

  // optional sint32 JointType = 2 [default = 0];
  if (has_jointtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->jointtype(), output);
  }

  // optional string Target = 3;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->target(), output);
  }

  // optional float Weight = 4 [default = 1];
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->weight(), output);
  }

  // repeated sint32 ChildList = 5;
  for (int i = 0; i < this->childlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      5, this->childlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IKJoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Id = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->id(), target);
  }

  // optional sint32 JointType = 2 [default = 0];
  if (has_jointtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->jointtype(), target);
  }

  // optional string Target = 3;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->target(), target);
  }

  // optional float Weight = 4 [default = 1];
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->weight(), target);
  }

  // repeated sint32 ChildList = 5;
  for (int i = 0; i < this->childlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(5, this->childlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IKJoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Id = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->id());
    }

    // optional sint32 JointType = 2 [default = 0];
    if (has_jointtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->jointtype());
    }

    // optional string Target = 3;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target());
    }

    // optional float Weight = 4 [default = 1];
    if (has_weight()) {
      total_size += 1 + 4;
    }

  }
  // repeated sint32 ChildList = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->childlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->childlist(i));
    }
    total_size += 1 * this->childlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IKJoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IKJoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IKJoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IKJoint::MergeFrom(const IKJoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  childlist_.MergeFrom(from.childlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_jointtype()) {
      set_jointtype(from.jointtype());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IKJoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IKJoint::CopyFrom(const IKJoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IKJoint::IsInitialized() const {

  return true;
}

void IKJoint::Swap(IKJoint* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(jointtype_, other->jointtype_);
    std::swap(target_, other->target_);
    std::swap(weight_, other->weight_);
    childlist_.Swap(&other->childlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IKJoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IKJoint_descriptor_;
  metadata.reflection = IKJoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IKData::kFileNameFieldNumber;
const int IKData::kJointListFieldNumber;
#endif  // !_MSC_VER

IKData::IKData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IKData::InitAsDefaultInstance() {
}

IKData::IKData(const IKData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IKData::SharedCtor() {
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IKData::~IKData() {
  SharedDtor();
}

void IKData::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void IKData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IKData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IKData_descriptor_;
}

const IKData& IKData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IKCliRpc_2eproto();
  return *default_instance_;
}

IKData* IKData::default_instance_ = NULL;

IKData* IKData::New() const {
  return new IKData;
}

void IKData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
  }
  jointlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IKData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string FileName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_JointList;
        break;
      }

      // repeated .IKJoint JointList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JointList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jointlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_JointList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IKData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string FileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filename(), output);
  }

  // repeated .IKJoint JointList = 2;
  for (int i = 0; i < this->jointlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->jointlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IKData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string FileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // repeated .IKJoint JointList = 2;
  for (int i = 0; i < this->jointlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->jointlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IKData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string FileName = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

  }
  // repeated .IKJoint JointList = 2;
  total_size += 1 * this->jointlist_size();
  for (int i = 0; i < this->jointlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jointlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IKData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IKData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IKData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IKData::MergeFrom(const IKData& from) {
  GOOGLE_CHECK_NE(&from, this);
  jointlist_.MergeFrom(from.jointlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IKData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IKData::CopyFrom(const IKData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IKData::IsInitialized() const {

  return true;
}

void IKData::Swap(IKData* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    jointlist_.Swap(&other->jointlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IKData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IKData_descriptor_;
  metadata.reflection = IKData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
