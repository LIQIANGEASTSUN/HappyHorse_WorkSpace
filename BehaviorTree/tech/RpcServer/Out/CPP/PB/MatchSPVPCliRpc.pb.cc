// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MatchSPVPCliRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MatchSPVPCliRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MatchSPVPUserMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchSPVPUserMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchSPVPRpcStartMatchAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchSPVPRpcStartMatchAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchSPVPRpcStartMatchReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchSPVPRpcStartMatchReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchSPVPRpcInvitationAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchSPVPRpcInvitationAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchSPVPRpcInvitationReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchSPVPRpcInvitationReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchSPVPRpcMatchBroadcasNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchSPVPRpcMatchBroadcasNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchSPVPRpcAgreeInvitationNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchSPVPRpcAgreeInvitationNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchSPVPRpcStartGameNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchSPVPRpcStartGameNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchSPVPRpcDeleteMatchNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchSPVPRpcDeleteMatchNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchSPVPRpcStartSelectNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchSPVPRpcStartSelectNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchSPVPRpcSelectHeroAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchSPVPRpcSelectHeroAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchSPVPRpcSelectHeroReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchSPVPRpcSelectHeroReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchSPVPRpcGetStatusAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchSPVPRpcGetStatusAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchSPVPRpcGetStatusReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchSPVPRpcGetStatusReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchSPVPRpcChangeStatusNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchSPVPRpcChangeStatusNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchSPVPRpcShotOffAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchSPVPRpcShotOffAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchSPVPRpcShotOffReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchSPVPRpcShotOffReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchSPVPRpcSelectSceneNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchSPVPRpcSelectSceneNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MatchSPVPCliRpc_2eproto() {
  protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MatchSPVPCliRpc.proto");
  GOOGLE_CHECK(file != NULL);
  MatchSPVPUserMessage_descriptor_ = file->message_type(0);
  static const int MatchSPVPUserMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPUserMessage, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPUserMessage, peom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPUserMessage, isselect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPUserMessage, groupid_),
  };
  MatchSPVPUserMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchSPVPUserMessage_descriptor_,
      MatchSPVPUserMessage::default_instance_,
      MatchSPVPUserMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPUserMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPUserMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchSPVPUserMessage));
  MatchSPVPRpcStartMatchAsk_descriptor_ = file->message_type(1);
  static const int MatchSPVPRpcStartMatchAsk_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcStartMatchAsk, ismatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcStartMatchAsk, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcStartMatchAsk, activeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcStartMatchAsk, teamid_),
  };
  MatchSPVPRpcStartMatchAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchSPVPRpcStartMatchAsk_descriptor_,
      MatchSPVPRpcStartMatchAsk::default_instance_,
      MatchSPVPRpcStartMatchAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcStartMatchAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcStartMatchAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchSPVPRpcStartMatchAsk));
  MatchSPVPRpcStartMatchReply_descriptor_ = file->message_type(2);
  static const int MatchSPVPRpcStartMatchReply_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcStartMatchReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcStartMatchReply, ismatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcStartMatchReply, timestart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcStartMatchReply, timeend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcStartMatchReply, timer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcStartMatchReply, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcStartMatchReply, activeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcStartMatchReply, teamid_),
  };
  MatchSPVPRpcStartMatchReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchSPVPRpcStartMatchReply_descriptor_,
      MatchSPVPRpcStartMatchReply::default_instance_,
      MatchSPVPRpcStartMatchReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcStartMatchReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcStartMatchReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchSPVPRpcStartMatchReply));
  MatchSPVPRpcInvitationAsk_descriptor_ = file->message_type(3);
  static const int MatchSPVPRpcInvitationAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcInvitationAsk, uid_),
  };
  MatchSPVPRpcInvitationAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchSPVPRpcInvitationAsk_descriptor_,
      MatchSPVPRpcInvitationAsk::default_instance_,
      MatchSPVPRpcInvitationAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcInvitationAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcInvitationAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchSPVPRpcInvitationAsk));
  MatchSPVPRpcInvitationReply_descriptor_ = file->message_type(4);
  static const int MatchSPVPRpcInvitationReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcInvitationReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcInvitationReply, uid_),
  };
  MatchSPVPRpcInvitationReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchSPVPRpcInvitationReply_descriptor_,
      MatchSPVPRpcInvitationReply::default_instance_,
      MatchSPVPRpcInvitationReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcInvitationReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcInvitationReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchSPVPRpcInvitationReply));
  MatchSPVPRpcMatchBroadcasNotify_descriptor_ = file->message_type(5);
  static const int MatchSPVPRpcMatchBroadcasNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcMatchBroadcasNotify, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcMatchBroadcasNotify, timestart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcMatchBroadcasNotify, timeend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcMatchBroadcasNotify, timer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcMatchBroadcasNotify, umess_),
  };
  MatchSPVPRpcMatchBroadcasNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchSPVPRpcMatchBroadcasNotify_descriptor_,
      MatchSPVPRpcMatchBroadcasNotify::default_instance_,
      MatchSPVPRpcMatchBroadcasNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcMatchBroadcasNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcMatchBroadcasNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchSPVPRpcMatchBroadcasNotify));
  MatchSPVPRpcAgreeInvitationNotify_descriptor_ = file->message_type(6);
  static const int MatchSPVPRpcAgreeInvitationNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcAgreeInvitationNotify, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcAgreeInvitationNotify, isagree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcAgreeInvitationNotify, type_),
  };
  MatchSPVPRpcAgreeInvitationNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchSPVPRpcAgreeInvitationNotify_descriptor_,
      MatchSPVPRpcAgreeInvitationNotify::default_instance_,
      MatchSPVPRpcAgreeInvitationNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcAgreeInvitationNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcAgreeInvitationNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchSPVPRpcAgreeInvitationNotify));
  MatchSPVPRpcStartGameNotify_descriptor_ = file->message_type(7);
  static const int MatchSPVPRpcStartGameNotify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcStartGameNotify, loadid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcStartGameNotify, umess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcStartGameNotify, umessother_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcStartGameNotify, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcStartGameNotify, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcStartGameNotify, key_),
  };
  MatchSPVPRpcStartGameNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchSPVPRpcStartGameNotify_descriptor_,
      MatchSPVPRpcStartGameNotify::default_instance_,
      MatchSPVPRpcStartGameNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcStartGameNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcStartGameNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchSPVPRpcStartGameNotify));
  MatchSPVPRpcDeleteMatchNotify_descriptor_ = file->message_type(8);
  static const int MatchSPVPRpcDeleteMatchNotify_offsets_[1] = {
  };
  MatchSPVPRpcDeleteMatchNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchSPVPRpcDeleteMatchNotify_descriptor_,
      MatchSPVPRpcDeleteMatchNotify::default_instance_,
      MatchSPVPRpcDeleteMatchNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcDeleteMatchNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcDeleteMatchNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchSPVPRpcDeleteMatchNotify));
  MatchSPVPRpcStartSelectNotify_descriptor_ = file->message_type(9);
  static const int MatchSPVPRpcStartSelectNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcStartSelectNotify, timestart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcStartSelectNotify, timeend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcStartSelectNotify, umess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcStartSelectNotify, otherumess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcStartSelectNotify, timer_),
  };
  MatchSPVPRpcStartSelectNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchSPVPRpcStartSelectNotify_descriptor_,
      MatchSPVPRpcStartSelectNotify::default_instance_,
      MatchSPVPRpcStartSelectNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcStartSelectNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcStartSelectNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchSPVPRpcStartSelectNotify));
  MatchSPVPRpcSelectHeroAsk_descriptor_ = file->message_type(10);
  static const int MatchSPVPRpcSelectHeroAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcSelectHeroAsk, heroid_),
  };
  MatchSPVPRpcSelectHeroAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchSPVPRpcSelectHeroAsk_descriptor_,
      MatchSPVPRpcSelectHeroAsk::default_instance_,
      MatchSPVPRpcSelectHeroAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcSelectHeroAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcSelectHeroAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchSPVPRpcSelectHeroAsk));
  MatchSPVPRpcSelectHeroReply_descriptor_ = file->message_type(11);
  static const int MatchSPVPRpcSelectHeroReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcSelectHeroReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcSelectHeroReply, heroid_),
  };
  MatchSPVPRpcSelectHeroReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchSPVPRpcSelectHeroReply_descriptor_,
      MatchSPVPRpcSelectHeroReply::default_instance_,
      MatchSPVPRpcSelectHeroReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcSelectHeroReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcSelectHeroReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchSPVPRpcSelectHeroReply));
  MatchSPVPRpcGetStatusAsk_descriptor_ = file->message_type(12);
  static const int MatchSPVPRpcGetStatusAsk_offsets_[1] = {
  };
  MatchSPVPRpcGetStatusAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchSPVPRpcGetStatusAsk_descriptor_,
      MatchSPVPRpcGetStatusAsk::default_instance_,
      MatchSPVPRpcGetStatusAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcGetStatusAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcGetStatusAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchSPVPRpcGetStatusAsk));
  MatchSPVPRpcGetStatusReply_descriptor_ = file->message_type(13);
  static const int MatchSPVPRpcGetStatusReply_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcGetStatusReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcGetStatusReply, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcGetStatusReply, timestart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcGetStatusReply, timeend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcGetStatusReply, timer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcGetStatusReply, umess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcGetStatusReply, umessother_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcGetStatusReply, key_),
  };
  MatchSPVPRpcGetStatusReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchSPVPRpcGetStatusReply_descriptor_,
      MatchSPVPRpcGetStatusReply::default_instance_,
      MatchSPVPRpcGetStatusReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcGetStatusReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcGetStatusReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchSPVPRpcGetStatusReply));
  MatchSPVPRpcChangeStatusNotify_descriptor_ = file->message_type(14);
  static const int MatchSPVPRpcChangeStatusNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcChangeStatusNotify, umess_),
  };
  MatchSPVPRpcChangeStatusNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchSPVPRpcChangeStatusNotify_descriptor_,
      MatchSPVPRpcChangeStatusNotify::default_instance_,
      MatchSPVPRpcChangeStatusNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcChangeStatusNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcChangeStatusNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchSPVPRpcChangeStatusNotify));
  MatchSPVPRpcShotOffAsk_descriptor_ = file->message_type(15);
  static const int MatchSPVPRpcShotOffAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcShotOffAsk, uid_),
  };
  MatchSPVPRpcShotOffAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchSPVPRpcShotOffAsk_descriptor_,
      MatchSPVPRpcShotOffAsk::default_instance_,
      MatchSPVPRpcShotOffAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcShotOffAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcShotOffAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchSPVPRpcShotOffAsk));
  MatchSPVPRpcShotOffReply_descriptor_ = file->message_type(16);
  static const int MatchSPVPRpcShotOffReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcShotOffReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcShotOffReply, uid_),
  };
  MatchSPVPRpcShotOffReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchSPVPRpcShotOffReply_descriptor_,
      MatchSPVPRpcShotOffReply::default_instance_,
      MatchSPVPRpcShotOffReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcShotOffReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcShotOffReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchSPVPRpcShotOffReply));
  MatchSPVPRpcSelectSceneNotify_descriptor_ = file->message_type(17);
  static const int MatchSPVPRpcSelectSceneNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcSelectSceneNotify, sceneid_),
  };
  MatchSPVPRpcSelectSceneNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchSPVPRpcSelectSceneNotify_descriptor_,
      MatchSPVPRpcSelectSceneNotify::default_instance_,
      MatchSPVPRpcSelectSceneNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcSelectSceneNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSPVPRpcSelectSceneNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchSPVPRpcSelectSceneNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MatchSPVPCliRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchSPVPUserMessage_descriptor_, &MatchSPVPUserMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchSPVPRpcStartMatchAsk_descriptor_, &MatchSPVPRpcStartMatchAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchSPVPRpcStartMatchReply_descriptor_, &MatchSPVPRpcStartMatchReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchSPVPRpcInvitationAsk_descriptor_, &MatchSPVPRpcInvitationAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchSPVPRpcInvitationReply_descriptor_, &MatchSPVPRpcInvitationReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchSPVPRpcMatchBroadcasNotify_descriptor_, &MatchSPVPRpcMatchBroadcasNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchSPVPRpcAgreeInvitationNotify_descriptor_, &MatchSPVPRpcAgreeInvitationNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchSPVPRpcStartGameNotify_descriptor_, &MatchSPVPRpcStartGameNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchSPVPRpcDeleteMatchNotify_descriptor_, &MatchSPVPRpcDeleteMatchNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchSPVPRpcStartSelectNotify_descriptor_, &MatchSPVPRpcStartSelectNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchSPVPRpcSelectHeroAsk_descriptor_, &MatchSPVPRpcSelectHeroAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchSPVPRpcSelectHeroReply_descriptor_, &MatchSPVPRpcSelectHeroReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchSPVPRpcGetStatusAsk_descriptor_, &MatchSPVPRpcGetStatusAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchSPVPRpcGetStatusReply_descriptor_, &MatchSPVPRpcGetStatusReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchSPVPRpcChangeStatusNotify_descriptor_, &MatchSPVPRpcChangeStatusNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchSPVPRpcShotOffAsk_descriptor_, &MatchSPVPRpcShotOffAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchSPVPRpcShotOffReply_descriptor_, &MatchSPVPRpcShotOffReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchSPVPRpcSelectSceneNotify_descriptor_, &MatchSPVPRpcSelectSceneNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MatchSPVPCliRpc_2eproto() {
  delete MatchSPVPUserMessage::default_instance_;
  delete MatchSPVPUserMessage_reflection_;
  delete MatchSPVPRpcStartMatchAsk::default_instance_;
  delete MatchSPVPRpcStartMatchAsk_reflection_;
  delete MatchSPVPRpcStartMatchReply::default_instance_;
  delete MatchSPVPRpcStartMatchReply_reflection_;
  delete MatchSPVPRpcInvitationAsk::default_instance_;
  delete MatchSPVPRpcInvitationAsk_reflection_;
  delete MatchSPVPRpcInvitationReply::default_instance_;
  delete MatchSPVPRpcInvitationReply_reflection_;
  delete MatchSPVPRpcMatchBroadcasNotify::default_instance_;
  delete MatchSPVPRpcMatchBroadcasNotify_reflection_;
  delete MatchSPVPRpcAgreeInvitationNotify::default_instance_;
  delete MatchSPVPRpcAgreeInvitationNotify_reflection_;
  delete MatchSPVPRpcStartGameNotify::default_instance_;
  delete MatchSPVPRpcStartGameNotify_reflection_;
  delete MatchSPVPRpcDeleteMatchNotify::default_instance_;
  delete MatchSPVPRpcDeleteMatchNotify_reflection_;
  delete MatchSPVPRpcStartSelectNotify::default_instance_;
  delete MatchSPVPRpcStartSelectNotify_reflection_;
  delete MatchSPVPRpcSelectHeroAsk::default_instance_;
  delete MatchSPVPRpcSelectHeroAsk_reflection_;
  delete MatchSPVPRpcSelectHeroReply::default_instance_;
  delete MatchSPVPRpcSelectHeroReply_reflection_;
  delete MatchSPVPRpcGetStatusAsk::default_instance_;
  delete MatchSPVPRpcGetStatusAsk_reflection_;
  delete MatchSPVPRpcGetStatusReply::default_instance_;
  delete MatchSPVPRpcGetStatusReply_reflection_;
  delete MatchSPVPRpcChangeStatusNotify::default_instance_;
  delete MatchSPVPRpcChangeStatusNotify_reflection_;
  delete MatchSPVPRpcShotOffAsk::default_instance_;
  delete MatchSPVPRpcShotOffAsk_reflection_;
  delete MatchSPVPRpcShotOffReply::default_instance_;
  delete MatchSPVPRpcShotOffReply_reflection_;
  delete MatchSPVPRpcSelectSceneNotify::default_instance_;
  delete MatchSPVPRpcSelectSceneNotify_reflection_;
}

void protobuf_AddDesc_MatchSPVPCliRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025MatchSPVPCliRpc.proto\032\022PublicStruct.pr"
    "oto\"l\n\024MatchSPVPUserMessage\022\021\n\006HeroID\030\006 "
    "\001(\021:\0010\022\030\n\004PeoM\030\010 \001(\0132\n.SmallUser\022\023\n\010IsSe"
    "lect\030\t \001(\021:\0010\022\022\n\007GroupID\030\n \001(\021:\0010\"l\n\031Mat"
    "chSPVPRpcStartMatchAsk\022\022\n\007IsMatch\030\001 \001(\021:"
    "\0011\022\022\n\007SceneID\030\002 \001(\021:\0011\022\023\n\010ActiveID\030\003 \001(\021"
    ":\0010\022\022\n\006TeamID\030\004 \001(\022:\002-1\"\304\001\n\033MatchSPVPRpc"
    "StartMatchReply\022\025\n\006Result\030\001 \001(\021:\005-9999\022\022"
    "\n\007IsMatch\030\002 \001(\021:\0011\022\025\n\tTimeStart\030\003 \001(\021:\002-"
    "1\022\023\n\007TimeEnd\030\004 \001(\021:\002-1\022\021\n\005Timer\030\005 \001(\021:\002-"
    "1\022\022\n\007SceneID\030\006 \001(\021:\0011\022\023\n\010ActiveID\030\007 \001(\021:"
    "\0010\022\022\n\006TeamID\030\010 \001(\022:\002-1\",\n\031MatchSPVPRpcIn"
    "vitationAsk\022\017\n\003Uid\030\001 \001(\022:\002-1\"E\n\033MatchSPV"
    "PRpcInvitationReply\022\025\n\006Result\030\001 \001(\021:\005-99"
    "99\022\017\n\003Uid\030\002 \001(\022:\002-1\"\227\001\n\037MatchSPVPRpcMatc"
    "hBroadcasNotify\022\017\n\004Type\030\001 \001(\021:\0011\022\025\n\tTime"
    "Start\030\002 \001(\021:\002-1\022\023\n\007TimeEnd\030\003 \001(\021:\002-1\022\021\n\005"
    "Timer\030\004 \001(\021:\002-1\022$\n\005UMess\030\005 \003(\0132\025.MatchSP"
    "VPUserMessage\"Y\n!MatchSPVPRpcAgreeInvita"
    "tionNotify\022\017\n\003Uid\030\001 \001(\022:\002-1\022\022\n\007IsAgree\030\002"
    " \001(\021:\0010\022\017\n\004Type\030\003 \001(\021:\0010\"\255\001\n\033MatchSPVPRp"
    "cStartGameNotify\022\022\n\006LoadID\030\001 \001(\022:\002-1\022$\n\005"
    "UMess\030\002 \003(\0132\025.MatchSPVPUserMessage\022)\n\nUM"
    "essOther\030\003 \003(\0132\025.MatchSPVPUserMessage\022\n\n"
    "\002IP\030\004 \001(\t\022\020\n\004Port\030\005 \001(\021:\002-1\022\013\n\003Key\030\006 \001(\t"
    "\"\037\n\035MatchSPVPRpcDeleteMatchNotify\"\257\001\n\035Ma"
    "tchSPVPRpcStartSelectNotify\022\025\n\tTimeStart"
    "\030\001 \001(\021:\002-1\022\023\n\007TimeEnd\030\002 \001(\021:\002-1\022$\n\005UMess"
    "\030\003 \003(\0132\025.MatchSPVPUserMessage\022)\n\nOtherUM"
    "ess\030\004 \003(\0132\025.MatchSPVPUserMessage\022\021\n\005Time"
    "r\030\005 \001(\021:\002-1\"/\n\031MatchSPVPRpcSelectHeroAsk"
    "\022\022\n\006HeroID\030\001 \001(\021:\002-1\"H\n\033MatchSPVPRpcSele"
    "ctHeroReply\022\025\n\006Result\030\001 \001(\021:\005-9999\022\022\n\006He"
    "roID\030\002 \001(\021:\002-1\"\032\n\030MatchSPVPRpcGetStatusA"
    "sk\"\342\001\n\032MatchSPVPRpcGetStatusReply\022\025\n\006Res"
    "ult\030\001 \001(\021:\005-9999\022\020\n\004Type\030\002 \001(\021:\002-1\022\025\n\tTi"
    "meStart\030\005 \001(\021:\002-1\022\023\n\007TimeEnd\030\006 \001(\021:\002-1\022\021"
    "\n\005Timer\030\007 \001(\021:\002-1\022$\n\005UMess\030\010 \003(\0132\025.Match"
    "SPVPUserMessage\022)\n\nUMessOther\030\t \003(\0132\025.Ma"
    "tchSPVPUserMessage\022\013\n\003Key\030\n \001(\t\"F\n\036Match"
    "SPVPRpcChangeStatusNotify\022$\n\005UMess\030\001 \001(\013"
    "2\025.MatchSPVPUserMessage\")\n\026MatchSPVPRpcS"
    "hotOffAsk\022\017\n\003Uid\030\001 \001(\022:\002-1\"B\n\030MatchSPVPR"
    "pcShotOffReply\022\025\n\006Result\030\001 \001(\021:\005-9999\022\017\n"
    "\003Uid\030\002 \001(\022:\002-1\"3\n\035MatchSPVPRpcSelectScen"
    "eNotify\022\022\n\007SceneID\030\001 \001(\021:\0011", 1827);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MatchSPVPCliRpc.proto", &protobuf_RegisterTypes);
  MatchSPVPUserMessage::default_instance_ = new MatchSPVPUserMessage();
  MatchSPVPRpcStartMatchAsk::default_instance_ = new MatchSPVPRpcStartMatchAsk();
  MatchSPVPRpcStartMatchReply::default_instance_ = new MatchSPVPRpcStartMatchReply();
  MatchSPVPRpcInvitationAsk::default_instance_ = new MatchSPVPRpcInvitationAsk();
  MatchSPVPRpcInvitationReply::default_instance_ = new MatchSPVPRpcInvitationReply();
  MatchSPVPRpcMatchBroadcasNotify::default_instance_ = new MatchSPVPRpcMatchBroadcasNotify();
  MatchSPVPRpcAgreeInvitationNotify::default_instance_ = new MatchSPVPRpcAgreeInvitationNotify();
  MatchSPVPRpcStartGameNotify::default_instance_ = new MatchSPVPRpcStartGameNotify();
  MatchSPVPRpcDeleteMatchNotify::default_instance_ = new MatchSPVPRpcDeleteMatchNotify();
  MatchSPVPRpcStartSelectNotify::default_instance_ = new MatchSPVPRpcStartSelectNotify();
  MatchSPVPRpcSelectHeroAsk::default_instance_ = new MatchSPVPRpcSelectHeroAsk();
  MatchSPVPRpcSelectHeroReply::default_instance_ = new MatchSPVPRpcSelectHeroReply();
  MatchSPVPRpcGetStatusAsk::default_instance_ = new MatchSPVPRpcGetStatusAsk();
  MatchSPVPRpcGetStatusReply::default_instance_ = new MatchSPVPRpcGetStatusReply();
  MatchSPVPRpcChangeStatusNotify::default_instance_ = new MatchSPVPRpcChangeStatusNotify();
  MatchSPVPRpcShotOffAsk::default_instance_ = new MatchSPVPRpcShotOffAsk();
  MatchSPVPRpcShotOffReply::default_instance_ = new MatchSPVPRpcShotOffReply();
  MatchSPVPRpcSelectSceneNotify::default_instance_ = new MatchSPVPRpcSelectSceneNotify();
  MatchSPVPUserMessage::default_instance_->InitAsDefaultInstance();
  MatchSPVPRpcStartMatchAsk::default_instance_->InitAsDefaultInstance();
  MatchSPVPRpcStartMatchReply::default_instance_->InitAsDefaultInstance();
  MatchSPVPRpcInvitationAsk::default_instance_->InitAsDefaultInstance();
  MatchSPVPRpcInvitationReply::default_instance_->InitAsDefaultInstance();
  MatchSPVPRpcMatchBroadcasNotify::default_instance_->InitAsDefaultInstance();
  MatchSPVPRpcAgreeInvitationNotify::default_instance_->InitAsDefaultInstance();
  MatchSPVPRpcStartGameNotify::default_instance_->InitAsDefaultInstance();
  MatchSPVPRpcDeleteMatchNotify::default_instance_->InitAsDefaultInstance();
  MatchSPVPRpcStartSelectNotify::default_instance_->InitAsDefaultInstance();
  MatchSPVPRpcSelectHeroAsk::default_instance_->InitAsDefaultInstance();
  MatchSPVPRpcSelectHeroReply::default_instance_->InitAsDefaultInstance();
  MatchSPVPRpcGetStatusAsk::default_instance_->InitAsDefaultInstance();
  MatchSPVPRpcGetStatusReply::default_instance_->InitAsDefaultInstance();
  MatchSPVPRpcChangeStatusNotify::default_instance_->InitAsDefaultInstance();
  MatchSPVPRpcShotOffAsk::default_instance_->InitAsDefaultInstance();
  MatchSPVPRpcShotOffReply::default_instance_->InitAsDefaultInstance();
  MatchSPVPRpcSelectSceneNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MatchSPVPCliRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MatchSPVPCliRpc_2eproto {
  StaticDescriptorInitializer_MatchSPVPCliRpc_2eproto() {
    protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
  }
} static_descriptor_initializer_MatchSPVPCliRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MatchSPVPUserMessage::kHeroIDFieldNumber;
const int MatchSPVPUserMessage::kPeoMFieldNumber;
const int MatchSPVPUserMessage::kIsSelectFieldNumber;
const int MatchSPVPUserMessage::kGroupIDFieldNumber;
#endif  // !_MSC_VER

MatchSPVPUserMessage::MatchSPVPUserMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchSPVPUserMessage::InitAsDefaultInstance() {
  peom_ = const_cast< ::SmallUser*>(&::SmallUser::default_instance());
}

MatchSPVPUserMessage::MatchSPVPUserMessage(const MatchSPVPUserMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchSPVPUserMessage::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0;
  peom_ = NULL;
  isselect_ = 0;
  groupid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchSPVPUserMessage::~MatchSPVPUserMessage() {
  SharedDtor();
}

void MatchSPVPUserMessage::SharedDtor() {
  if (this != default_instance_) {
    delete peom_;
  }
}

void MatchSPVPUserMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchSPVPUserMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchSPVPUserMessage_descriptor_;
}

const MatchSPVPUserMessage& MatchSPVPUserMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
  return *default_instance_;
}

MatchSPVPUserMessage* MatchSPVPUserMessage::default_instance_ = NULL;

MatchSPVPUserMessage* MatchSPVPUserMessage::New() const {
  return new MatchSPVPUserMessage;
}

void MatchSPVPUserMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0;
    if (has_peom()) {
      if (peom_ != NULL) peom_->::SmallUser::Clear();
    }
    isselect_ = 0;
    groupid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchSPVPUserMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 HeroID = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_PeoM;
        break;
      }

      // optional .SmallUser PeoM = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PeoM:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peom()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_IsSelect;
        break;
      }

      // optional sint32 IsSelect = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsSelect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &isselect_)));
          set_has_isselect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_GroupID;
        break;
      }

      // optional sint32 GroupID = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchSPVPUserMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 HeroID = 6 [default = 0];
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->heroid(), output);
  }

  // optional .SmallUser PeoM = 8;
  if (has_peom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->peom(), output);
  }

  // optional sint32 IsSelect = 9 [default = 0];
  if (has_isselect()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(9, this->isselect(), output);
  }

  // optional sint32 GroupID = 10 [default = 0];
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchSPVPUserMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 HeroID = 6 [default = 0];
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->heroid(), target);
  }

  // optional .SmallUser PeoM = 8;
  if (has_peom()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->peom(), target);
  }

  // optional sint32 IsSelect = 9 [default = 0];
  if (has_isselect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(9, this->isselect(), target);
  }

  // optional sint32 GroupID = 10 [default = 0];
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchSPVPUserMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 HeroID = 6 [default = 0];
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->heroid());
    }

    // optional .SmallUser PeoM = 8;
    if (has_peom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peom());
    }

    // optional sint32 IsSelect = 9 [default = 0];
    if (has_isselect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->isselect());
    }

    // optional sint32 GroupID = 10 [default = 0];
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchSPVPUserMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchSPVPUserMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchSPVPUserMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchSPVPUserMessage::MergeFrom(const MatchSPVPUserMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_peom()) {
      mutable_peom()->::SmallUser::MergeFrom(from.peom());
    }
    if (from.has_isselect()) {
      set_isselect(from.isselect());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchSPVPUserMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchSPVPUserMessage::CopyFrom(const MatchSPVPUserMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchSPVPUserMessage::IsInitialized() const {

  return true;
}

void MatchSPVPUserMessage::Swap(MatchSPVPUserMessage* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(peom_, other->peom_);
    std::swap(isselect_, other->isselect_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchSPVPUserMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchSPVPUserMessage_descriptor_;
  metadata.reflection = MatchSPVPUserMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchSPVPRpcStartMatchAsk::kIsMatchFieldNumber;
const int MatchSPVPRpcStartMatchAsk::kSceneIDFieldNumber;
const int MatchSPVPRpcStartMatchAsk::kActiveIDFieldNumber;
const int MatchSPVPRpcStartMatchAsk::kTeamIDFieldNumber;
#endif  // !_MSC_VER

MatchSPVPRpcStartMatchAsk::MatchSPVPRpcStartMatchAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchSPVPRpcStartMatchAsk::InitAsDefaultInstance() {
}

MatchSPVPRpcStartMatchAsk::MatchSPVPRpcStartMatchAsk(const MatchSPVPRpcStartMatchAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchSPVPRpcStartMatchAsk::SharedCtor() {
  _cached_size_ = 0;
  ismatch_ = 1;
  sceneid_ = 1;
  activeid_ = 0;
  teamid_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchSPVPRpcStartMatchAsk::~MatchSPVPRpcStartMatchAsk() {
  SharedDtor();
}

void MatchSPVPRpcStartMatchAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchSPVPRpcStartMatchAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchSPVPRpcStartMatchAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchSPVPRpcStartMatchAsk_descriptor_;
}

const MatchSPVPRpcStartMatchAsk& MatchSPVPRpcStartMatchAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
  return *default_instance_;
}

MatchSPVPRpcStartMatchAsk* MatchSPVPRpcStartMatchAsk::default_instance_ = NULL;

MatchSPVPRpcStartMatchAsk* MatchSPVPRpcStartMatchAsk::New() const {
  return new MatchSPVPRpcStartMatchAsk;
}

void MatchSPVPRpcStartMatchAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ismatch_ = 1;
    sceneid_ = 1;
    activeid_ = 0;
    teamid_ = GOOGLE_LONGLONG(-1);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchSPVPRpcStartMatchAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 IsMatch = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &ismatch_)));
          set_has_ismatch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SceneID;
        break;
      }

      // optional sint32 SceneID = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SceneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ActiveID;
        break;
      }

      // optional sint32 ActiveID = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ActiveID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &activeid_)));
          set_has_activeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_TeamID;
        break;
      }

      // optional sint64 TeamID = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TeamID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchSPVPRpcStartMatchAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 IsMatch = 1 [default = 1];
  if (has_ismatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->ismatch(), output);
  }

  // optional sint32 SceneID = 2 [default = 1];
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->sceneid(), output);
  }

  // optional sint32 ActiveID = 3 [default = 0];
  if (has_activeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->activeid(), output);
  }

  // optional sint64 TeamID = 4 [default = -1];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchSPVPRpcStartMatchAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 IsMatch = 1 [default = 1];
  if (has_ismatch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->ismatch(), target);
  }

  // optional sint32 SceneID = 2 [default = 1];
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->sceneid(), target);
  }

  // optional sint32 ActiveID = 3 [default = 0];
  if (has_activeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->activeid(), target);
  }

  // optional sint64 TeamID = 4 [default = -1];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchSPVPRpcStartMatchAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 IsMatch = 1 [default = 1];
    if (has_ismatch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->ismatch());
    }

    // optional sint32 SceneID = 2 [default = 1];
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->sceneid());
    }

    // optional sint32 ActiveID = 3 [default = 0];
    if (has_activeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->activeid());
    }

    // optional sint64 TeamID = 4 [default = -1];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchSPVPRpcStartMatchAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchSPVPRpcStartMatchAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchSPVPRpcStartMatchAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchSPVPRpcStartMatchAsk::MergeFrom(const MatchSPVPRpcStartMatchAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ismatch()) {
      set_ismatch(from.ismatch());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_activeid()) {
      set_activeid(from.activeid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchSPVPRpcStartMatchAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchSPVPRpcStartMatchAsk::CopyFrom(const MatchSPVPRpcStartMatchAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchSPVPRpcStartMatchAsk::IsInitialized() const {

  return true;
}

void MatchSPVPRpcStartMatchAsk::Swap(MatchSPVPRpcStartMatchAsk* other) {
  if (other != this) {
    std::swap(ismatch_, other->ismatch_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(activeid_, other->activeid_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchSPVPRpcStartMatchAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchSPVPRpcStartMatchAsk_descriptor_;
  metadata.reflection = MatchSPVPRpcStartMatchAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchSPVPRpcStartMatchReply::kResultFieldNumber;
const int MatchSPVPRpcStartMatchReply::kIsMatchFieldNumber;
const int MatchSPVPRpcStartMatchReply::kTimeStartFieldNumber;
const int MatchSPVPRpcStartMatchReply::kTimeEndFieldNumber;
const int MatchSPVPRpcStartMatchReply::kTimerFieldNumber;
const int MatchSPVPRpcStartMatchReply::kSceneIDFieldNumber;
const int MatchSPVPRpcStartMatchReply::kActiveIDFieldNumber;
const int MatchSPVPRpcStartMatchReply::kTeamIDFieldNumber;
#endif  // !_MSC_VER

MatchSPVPRpcStartMatchReply::MatchSPVPRpcStartMatchReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchSPVPRpcStartMatchReply::InitAsDefaultInstance() {
}

MatchSPVPRpcStartMatchReply::MatchSPVPRpcStartMatchReply(const MatchSPVPRpcStartMatchReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchSPVPRpcStartMatchReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ismatch_ = 1;
  timestart_ = -1;
  timeend_ = -1;
  timer_ = -1;
  sceneid_ = 1;
  activeid_ = 0;
  teamid_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchSPVPRpcStartMatchReply::~MatchSPVPRpcStartMatchReply() {
  SharedDtor();
}

void MatchSPVPRpcStartMatchReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchSPVPRpcStartMatchReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchSPVPRpcStartMatchReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchSPVPRpcStartMatchReply_descriptor_;
}

const MatchSPVPRpcStartMatchReply& MatchSPVPRpcStartMatchReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
  return *default_instance_;
}

MatchSPVPRpcStartMatchReply* MatchSPVPRpcStartMatchReply::default_instance_ = NULL;

MatchSPVPRpcStartMatchReply* MatchSPVPRpcStartMatchReply::New() const {
  return new MatchSPVPRpcStartMatchReply;
}

void MatchSPVPRpcStartMatchReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    ismatch_ = 1;
    timestart_ = -1;
    timeend_ = -1;
    timer_ = -1;
    sceneid_ = 1;
    activeid_ = 0;
    teamid_ = GOOGLE_LONGLONG(-1);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchSPVPRpcStartMatchReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_IsMatch;
        break;
      }

      // optional sint32 IsMatch = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsMatch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &ismatch_)));
          set_has_ismatch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TimeStart;
        break;
      }

      // optional sint32 TimeStart = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeStart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &timestart_)));
          set_has_timestart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_TimeEnd;
        break;
      }

      // optional sint32 TimeEnd = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &timeend_)));
          set_has_timeend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Timer;
        break;
      }

      // optional sint32 Timer = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Timer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &timer_)));
          set_has_timer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_SceneID;
        break;
      }

      // optional sint32 SceneID = 6 [default = 1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SceneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ActiveID;
        break;
      }

      // optional sint32 ActiveID = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ActiveID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &activeid_)));
          set_has_activeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_TeamID;
        break;
      }

      // optional sint64 TeamID = 8 [default = -1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TeamID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchSPVPRpcStartMatchReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint32 IsMatch = 2 [default = 1];
  if (has_ismatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->ismatch(), output);
  }

  // optional sint32 TimeStart = 3 [default = -1];
  if (has_timestart()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->timestart(), output);
  }

  // optional sint32 TimeEnd = 4 [default = -1];
  if (has_timeend()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->timeend(), output);
  }

  // optional sint32 Timer = 5 [default = -1];
  if (has_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->timer(), output);
  }

  // optional sint32 SceneID = 6 [default = 1];
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->sceneid(), output);
  }

  // optional sint32 ActiveID = 7 [default = 0];
  if (has_activeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->activeid(), output);
  }

  // optional sint64 TeamID = 8 [default = -1];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(8, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchSPVPRpcStartMatchReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint32 IsMatch = 2 [default = 1];
  if (has_ismatch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->ismatch(), target);
  }

  // optional sint32 TimeStart = 3 [default = -1];
  if (has_timestart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->timestart(), target);
  }

  // optional sint32 TimeEnd = 4 [default = -1];
  if (has_timeend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->timeend(), target);
  }

  // optional sint32 Timer = 5 [default = -1];
  if (has_timer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->timer(), target);
  }

  // optional sint32 SceneID = 6 [default = 1];
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->sceneid(), target);
  }

  // optional sint32 ActiveID = 7 [default = 0];
  if (has_activeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->activeid(), target);
  }

  // optional sint64 TeamID = 8 [default = -1];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(8, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchSPVPRpcStartMatchReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 IsMatch = 2 [default = 1];
    if (has_ismatch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->ismatch());
    }

    // optional sint32 TimeStart = 3 [default = -1];
    if (has_timestart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->timestart());
    }

    // optional sint32 TimeEnd = 4 [default = -1];
    if (has_timeend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->timeend());
    }

    // optional sint32 Timer = 5 [default = -1];
    if (has_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->timer());
    }

    // optional sint32 SceneID = 6 [default = 1];
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->sceneid());
    }

    // optional sint32 ActiveID = 7 [default = 0];
    if (has_activeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->activeid());
    }

    // optional sint64 TeamID = 8 [default = -1];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchSPVPRpcStartMatchReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchSPVPRpcStartMatchReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchSPVPRpcStartMatchReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchSPVPRpcStartMatchReply::MergeFrom(const MatchSPVPRpcStartMatchReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_ismatch()) {
      set_ismatch(from.ismatch());
    }
    if (from.has_timestart()) {
      set_timestart(from.timestart());
    }
    if (from.has_timeend()) {
      set_timeend(from.timeend());
    }
    if (from.has_timer()) {
      set_timer(from.timer());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_activeid()) {
      set_activeid(from.activeid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchSPVPRpcStartMatchReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchSPVPRpcStartMatchReply::CopyFrom(const MatchSPVPRpcStartMatchReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchSPVPRpcStartMatchReply::IsInitialized() const {

  return true;
}

void MatchSPVPRpcStartMatchReply::Swap(MatchSPVPRpcStartMatchReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(ismatch_, other->ismatch_);
    std::swap(timestart_, other->timestart_);
    std::swap(timeend_, other->timeend_);
    std::swap(timer_, other->timer_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(activeid_, other->activeid_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchSPVPRpcStartMatchReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchSPVPRpcStartMatchReply_descriptor_;
  metadata.reflection = MatchSPVPRpcStartMatchReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchSPVPRpcInvitationAsk::kUidFieldNumber;
#endif  // !_MSC_VER

MatchSPVPRpcInvitationAsk::MatchSPVPRpcInvitationAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchSPVPRpcInvitationAsk::InitAsDefaultInstance() {
}

MatchSPVPRpcInvitationAsk::MatchSPVPRpcInvitationAsk(const MatchSPVPRpcInvitationAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchSPVPRpcInvitationAsk::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchSPVPRpcInvitationAsk::~MatchSPVPRpcInvitationAsk() {
  SharedDtor();
}

void MatchSPVPRpcInvitationAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchSPVPRpcInvitationAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchSPVPRpcInvitationAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchSPVPRpcInvitationAsk_descriptor_;
}

const MatchSPVPRpcInvitationAsk& MatchSPVPRpcInvitationAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
  return *default_instance_;
}

MatchSPVPRpcInvitationAsk* MatchSPVPRpcInvitationAsk::default_instance_ = NULL;

MatchSPVPRpcInvitationAsk* MatchSPVPRpcInvitationAsk::New() const {
  return new MatchSPVPRpcInvitationAsk;
}

void MatchSPVPRpcInvitationAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(-1);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchSPVPRpcInvitationAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 Uid = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchSPVPRpcInvitationAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint64 Uid = 1 [default = -1];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchSPVPRpcInvitationAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint64 Uid = 1 [default = -1];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchSPVPRpcInvitationAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 Uid = 1 [default = -1];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchSPVPRpcInvitationAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchSPVPRpcInvitationAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchSPVPRpcInvitationAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchSPVPRpcInvitationAsk::MergeFrom(const MatchSPVPRpcInvitationAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchSPVPRpcInvitationAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchSPVPRpcInvitationAsk::CopyFrom(const MatchSPVPRpcInvitationAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchSPVPRpcInvitationAsk::IsInitialized() const {

  return true;
}

void MatchSPVPRpcInvitationAsk::Swap(MatchSPVPRpcInvitationAsk* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchSPVPRpcInvitationAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchSPVPRpcInvitationAsk_descriptor_;
  metadata.reflection = MatchSPVPRpcInvitationAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchSPVPRpcInvitationReply::kResultFieldNumber;
const int MatchSPVPRpcInvitationReply::kUidFieldNumber;
#endif  // !_MSC_VER

MatchSPVPRpcInvitationReply::MatchSPVPRpcInvitationReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchSPVPRpcInvitationReply::InitAsDefaultInstance() {
}

MatchSPVPRpcInvitationReply::MatchSPVPRpcInvitationReply(const MatchSPVPRpcInvitationReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchSPVPRpcInvitationReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  uid_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchSPVPRpcInvitationReply::~MatchSPVPRpcInvitationReply() {
  SharedDtor();
}

void MatchSPVPRpcInvitationReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchSPVPRpcInvitationReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchSPVPRpcInvitationReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchSPVPRpcInvitationReply_descriptor_;
}

const MatchSPVPRpcInvitationReply& MatchSPVPRpcInvitationReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
  return *default_instance_;
}

MatchSPVPRpcInvitationReply* MatchSPVPRpcInvitationReply::default_instance_ = NULL;

MatchSPVPRpcInvitationReply* MatchSPVPRpcInvitationReply::New() const {
  return new MatchSPVPRpcInvitationReply;
}

void MatchSPVPRpcInvitationReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    uid_ = GOOGLE_LONGLONG(-1);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchSPVPRpcInvitationReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Uid;
        break;
      }

      // optional sint64 Uid = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchSPVPRpcInvitationReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint64 Uid = 2 [default = -1];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchSPVPRpcInvitationReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint64 Uid = 2 [default = -1];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchSPVPRpcInvitationReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint64 Uid = 2 [default = -1];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchSPVPRpcInvitationReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchSPVPRpcInvitationReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchSPVPRpcInvitationReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchSPVPRpcInvitationReply::MergeFrom(const MatchSPVPRpcInvitationReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchSPVPRpcInvitationReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchSPVPRpcInvitationReply::CopyFrom(const MatchSPVPRpcInvitationReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchSPVPRpcInvitationReply::IsInitialized() const {

  return true;
}

void MatchSPVPRpcInvitationReply::Swap(MatchSPVPRpcInvitationReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchSPVPRpcInvitationReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchSPVPRpcInvitationReply_descriptor_;
  metadata.reflection = MatchSPVPRpcInvitationReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchSPVPRpcMatchBroadcasNotify::kTypeFieldNumber;
const int MatchSPVPRpcMatchBroadcasNotify::kTimeStartFieldNumber;
const int MatchSPVPRpcMatchBroadcasNotify::kTimeEndFieldNumber;
const int MatchSPVPRpcMatchBroadcasNotify::kTimerFieldNumber;
const int MatchSPVPRpcMatchBroadcasNotify::kUMessFieldNumber;
#endif  // !_MSC_VER

MatchSPVPRpcMatchBroadcasNotify::MatchSPVPRpcMatchBroadcasNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchSPVPRpcMatchBroadcasNotify::InitAsDefaultInstance() {
}

MatchSPVPRpcMatchBroadcasNotify::MatchSPVPRpcMatchBroadcasNotify(const MatchSPVPRpcMatchBroadcasNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchSPVPRpcMatchBroadcasNotify::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  timestart_ = -1;
  timeend_ = -1;
  timer_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchSPVPRpcMatchBroadcasNotify::~MatchSPVPRpcMatchBroadcasNotify() {
  SharedDtor();
}

void MatchSPVPRpcMatchBroadcasNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchSPVPRpcMatchBroadcasNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchSPVPRpcMatchBroadcasNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchSPVPRpcMatchBroadcasNotify_descriptor_;
}

const MatchSPVPRpcMatchBroadcasNotify& MatchSPVPRpcMatchBroadcasNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
  return *default_instance_;
}

MatchSPVPRpcMatchBroadcasNotify* MatchSPVPRpcMatchBroadcasNotify::default_instance_ = NULL;

MatchSPVPRpcMatchBroadcasNotify* MatchSPVPRpcMatchBroadcasNotify::New() const {
  return new MatchSPVPRpcMatchBroadcasNotify;
}

void MatchSPVPRpcMatchBroadcasNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    timestart_ = -1;
    timeend_ = -1;
    timer_ = -1;
  }
  umess_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchSPVPRpcMatchBroadcasNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Type = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TimeStart;
        break;
      }

      // optional sint32 TimeStart = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeStart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &timestart_)));
          set_has_timestart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TimeEnd;
        break;
      }

      // optional sint32 TimeEnd = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &timeend_)));
          set_has_timeend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Timer;
        break;
      }

      // optional sint32 Timer = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Timer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &timer_)));
          set_has_timer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_UMess;
        break;
      }

      // repeated .MatchSPVPUserMessage UMess = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UMess:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_umess()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_UMess;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchSPVPRpcMatchBroadcasNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Type = 1 [default = 1];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->type(), output);
  }

  // optional sint32 TimeStart = 2 [default = -1];
  if (has_timestart()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->timestart(), output);
  }

  // optional sint32 TimeEnd = 3 [default = -1];
  if (has_timeend()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->timeend(), output);
  }

  // optional sint32 Timer = 4 [default = -1];
  if (has_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->timer(), output);
  }

  // repeated .MatchSPVPUserMessage UMess = 5;
  for (int i = 0; i < this->umess_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->umess(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchSPVPRpcMatchBroadcasNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Type = 1 [default = 1];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->type(), target);
  }

  // optional sint32 TimeStart = 2 [default = -1];
  if (has_timestart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->timestart(), target);
  }

  // optional sint32 TimeEnd = 3 [default = -1];
  if (has_timeend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->timeend(), target);
  }

  // optional sint32 Timer = 4 [default = -1];
  if (has_timer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->timer(), target);
  }

  // repeated .MatchSPVPUserMessage UMess = 5;
  for (int i = 0; i < this->umess_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->umess(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchSPVPRpcMatchBroadcasNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Type = 1 [default = 1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

    // optional sint32 TimeStart = 2 [default = -1];
    if (has_timestart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->timestart());
    }

    // optional sint32 TimeEnd = 3 [default = -1];
    if (has_timeend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->timeend());
    }

    // optional sint32 Timer = 4 [default = -1];
    if (has_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->timer());
    }

  }
  // repeated .MatchSPVPUserMessage UMess = 5;
  total_size += 1 * this->umess_size();
  for (int i = 0; i < this->umess_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->umess(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchSPVPRpcMatchBroadcasNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchSPVPRpcMatchBroadcasNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchSPVPRpcMatchBroadcasNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchSPVPRpcMatchBroadcasNotify::MergeFrom(const MatchSPVPRpcMatchBroadcasNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  umess_.MergeFrom(from.umess_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_timestart()) {
      set_timestart(from.timestart());
    }
    if (from.has_timeend()) {
      set_timeend(from.timeend());
    }
    if (from.has_timer()) {
      set_timer(from.timer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchSPVPRpcMatchBroadcasNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchSPVPRpcMatchBroadcasNotify::CopyFrom(const MatchSPVPRpcMatchBroadcasNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchSPVPRpcMatchBroadcasNotify::IsInitialized() const {

  return true;
}

void MatchSPVPRpcMatchBroadcasNotify::Swap(MatchSPVPRpcMatchBroadcasNotify* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(timestart_, other->timestart_);
    std::swap(timeend_, other->timeend_);
    std::swap(timer_, other->timer_);
    umess_.Swap(&other->umess_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchSPVPRpcMatchBroadcasNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchSPVPRpcMatchBroadcasNotify_descriptor_;
  metadata.reflection = MatchSPVPRpcMatchBroadcasNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchSPVPRpcAgreeInvitationNotify::kUidFieldNumber;
const int MatchSPVPRpcAgreeInvitationNotify::kIsAgreeFieldNumber;
const int MatchSPVPRpcAgreeInvitationNotify::kTypeFieldNumber;
#endif  // !_MSC_VER

MatchSPVPRpcAgreeInvitationNotify::MatchSPVPRpcAgreeInvitationNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchSPVPRpcAgreeInvitationNotify::InitAsDefaultInstance() {
}

MatchSPVPRpcAgreeInvitationNotify::MatchSPVPRpcAgreeInvitationNotify(const MatchSPVPRpcAgreeInvitationNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchSPVPRpcAgreeInvitationNotify::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(-1);
  isagree_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchSPVPRpcAgreeInvitationNotify::~MatchSPVPRpcAgreeInvitationNotify() {
  SharedDtor();
}

void MatchSPVPRpcAgreeInvitationNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchSPVPRpcAgreeInvitationNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchSPVPRpcAgreeInvitationNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchSPVPRpcAgreeInvitationNotify_descriptor_;
}

const MatchSPVPRpcAgreeInvitationNotify& MatchSPVPRpcAgreeInvitationNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
  return *default_instance_;
}

MatchSPVPRpcAgreeInvitationNotify* MatchSPVPRpcAgreeInvitationNotify::default_instance_ = NULL;

MatchSPVPRpcAgreeInvitationNotify* MatchSPVPRpcAgreeInvitationNotify::New() const {
  return new MatchSPVPRpcAgreeInvitationNotify;
}

void MatchSPVPRpcAgreeInvitationNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(-1);
    isagree_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchSPVPRpcAgreeInvitationNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 Uid = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_IsAgree;
        break;
      }

      // optional sint32 IsAgree = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsAgree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &isagree_)));
          set_has_isagree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Type;
        break;
      }

      // optional sint32 Type = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchSPVPRpcAgreeInvitationNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint64 Uid = 1 [default = -1];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->uid(), output);
  }

  // optional sint32 IsAgree = 2 [default = 0];
  if (has_isagree()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->isagree(), output);
  }

  // optional sint32 Type = 3 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchSPVPRpcAgreeInvitationNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint64 Uid = 1 [default = -1];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->uid(), target);
  }

  // optional sint32 IsAgree = 2 [default = 0];
  if (has_isagree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->isagree(), target);
  }

  // optional sint32 Type = 3 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchSPVPRpcAgreeInvitationNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 Uid = 1 [default = -1];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->uid());
    }

    // optional sint32 IsAgree = 2 [default = 0];
    if (has_isagree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->isagree());
    }

    // optional sint32 Type = 3 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchSPVPRpcAgreeInvitationNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchSPVPRpcAgreeInvitationNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchSPVPRpcAgreeInvitationNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchSPVPRpcAgreeInvitationNotify::MergeFrom(const MatchSPVPRpcAgreeInvitationNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_isagree()) {
      set_isagree(from.isagree());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchSPVPRpcAgreeInvitationNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchSPVPRpcAgreeInvitationNotify::CopyFrom(const MatchSPVPRpcAgreeInvitationNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchSPVPRpcAgreeInvitationNotify::IsInitialized() const {

  return true;
}

void MatchSPVPRpcAgreeInvitationNotify::Swap(MatchSPVPRpcAgreeInvitationNotify* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(isagree_, other->isagree_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchSPVPRpcAgreeInvitationNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchSPVPRpcAgreeInvitationNotify_descriptor_;
  metadata.reflection = MatchSPVPRpcAgreeInvitationNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchSPVPRpcStartGameNotify::kLoadIDFieldNumber;
const int MatchSPVPRpcStartGameNotify::kUMessFieldNumber;
const int MatchSPVPRpcStartGameNotify::kUMessOtherFieldNumber;
const int MatchSPVPRpcStartGameNotify::kIPFieldNumber;
const int MatchSPVPRpcStartGameNotify::kPortFieldNumber;
const int MatchSPVPRpcStartGameNotify::kKeyFieldNumber;
#endif  // !_MSC_VER

MatchSPVPRpcStartGameNotify::MatchSPVPRpcStartGameNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchSPVPRpcStartGameNotify::InitAsDefaultInstance() {
}

MatchSPVPRpcStartGameNotify::MatchSPVPRpcStartGameNotify(const MatchSPVPRpcStartGameNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchSPVPRpcStartGameNotify::SharedCtor() {
  _cached_size_ = 0;
  loadid_ = GOOGLE_LONGLONG(-1);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = -1;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchSPVPRpcStartGameNotify::~MatchSPVPRpcStartGameNotify() {
  SharedDtor();
}

void MatchSPVPRpcStartGameNotify::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void MatchSPVPRpcStartGameNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchSPVPRpcStartGameNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchSPVPRpcStartGameNotify_descriptor_;
}

const MatchSPVPRpcStartGameNotify& MatchSPVPRpcStartGameNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
  return *default_instance_;
}

MatchSPVPRpcStartGameNotify* MatchSPVPRpcStartGameNotify::default_instance_ = NULL;

MatchSPVPRpcStartGameNotify* MatchSPVPRpcStartGameNotify::New() const {
  return new MatchSPVPRpcStartGameNotify;
}

void MatchSPVPRpcStartGameNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    loadid_ = GOOGLE_LONGLONG(-1);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = -1;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
  }
  umess_.Clear();
  umessother_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchSPVPRpcStartGameNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 LoadID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &loadid_)));
          set_has_loadid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_UMess;
        break;
      }

      // repeated .MatchSPVPUserMessage UMess = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UMess:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_umess()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_UMess;
        if (input->ExpectTag(26)) goto parse_UMessOther;
        break;
      }

      // repeated .MatchSPVPUserMessage UMessOther = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UMessOther:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_umessother()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_UMessOther;
        if (input->ExpectTag(34)) goto parse_IP;
        break;
      }

      // optional string IP = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Port;
        break;
      }

      // optional sint32 Port = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Key;
        break;
      }

      // optional string Key = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchSPVPRpcStartGameNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint64 LoadID = 1 [default = -1];
  if (has_loadid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->loadid(), output);
  }

  // repeated .MatchSPVPUserMessage UMess = 2;
  for (int i = 0; i < this->umess_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->umess(i), output);
  }

  // repeated .MatchSPVPUserMessage UMessOther = 3;
  for (int i = 0; i < this->umessother_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->umessother(i), output);
  }

  // optional string IP = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ip(), output);
  }

  // optional sint32 Port = 5 [default = -1];
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->port(), output);
  }

  // optional string Key = 6;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchSPVPRpcStartGameNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint64 LoadID = 1 [default = -1];
  if (has_loadid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->loadid(), target);
  }

  // repeated .MatchSPVPUserMessage UMess = 2;
  for (int i = 0; i < this->umess_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->umess(i), target);
  }

  // repeated .MatchSPVPUserMessage UMessOther = 3;
  for (int i = 0; i < this->umessother_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->umessother(i), target);
  }

  // optional string IP = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }

  // optional sint32 Port = 5 [default = -1];
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->port(), target);
  }

  // optional string Key = 6;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchSPVPRpcStartGameNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 LoadID = 1 [default = -1];
    if (has_loadid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->loadid());
    }

    // optional string IP = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional sint32 Port = 5 [default = -1];
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->port());
    }

    // optional string Key = 6;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  // repeated .MatchSPVPUserMessage UMess = 2;
  total_size += 1 * this->umess_size();
  for (int i = 0; i < this->umess_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->umess(i));
  }

  // repeated .MatchSPVPUserMessage UMessOther = 3;
  total_size += 1 * this->umessother_size();
  for (int i = 0; i < this->umessother_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->umessother(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchSPVPRpcStartGameNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchSPVPRpcStartGameNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchSPVPRpcStartGameNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchSPVPRpcStartGameNotify::MergeFrom(const MatchSPVPRpcStartGameNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  umess_.MergeFrom(from.umess_);
  umessother_.MergeFrom(from.umessother_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loadid()) {
      set_loadid(from.loadid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchSPVPRpcStartGameNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchSPVPRpcStartGameNotify::CopyFrom(const MatchSPVPRpcStartGameNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchSPVPRpcStartGameNotify::IsInitialized() const {

  return true;
}

void MatchSPVPRpcStartGameNotify::Swap(MatchSPVPRpcStartGameNotify* other) {
  if (other != this) {
    std::swap(loadid_, other->loadid_);
    umess_.Swap(&other->umess_);
    umessother_.Swap(&other->umessother_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchSPVPRpcStartGameNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchSPVPRpcStartGameNotify_descriptor_;
  metadata.reflection = MatchSPVPRpcStartGameNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MatchSPVPRpcDeleteMatchNotify::MatchSPVPRpcDeleteMatchNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchSPVPRpcDeleteMatchNotify::InitAsDefaultInstance() {
}

MatchSPVPRpcDeleteMatchNotify::MatchSPVPRpcDeleteMatchNotify(const MatchSPVPRpcDeleteMatchNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchSPVPRpcDeleteMatchNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchSPVPRpcDeleteMatchNotify::~MatchSPVPRpcDeleteMatchNotify() {
  SharedDtor();
}

void MatchSPVPRpcDeleteMatchNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchSPVPRpcDeleteMatchNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchSPVPRpcDeleteMatchNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchSPVPRpcDeleteMatchNotify_descriptor_;
}

const MatchSPVPRpcDeleteMatchNotify& MatchSPVPRpcDeleteMatchNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
  return *default_instance_;
}

MatchSPVPRpcDeleteMatchNotify* MatchSPVPRpcDeleteMatchNotify::default_instance_ = NULL;

MatchSPVPRpcDeleteMatchNotify* MatchSPVPRpcDeleteMatchNotify::New() const {
  return new MatchSPVPRpcDeleteMatchNotify;
}

void MatchSPVPRpcDeleteMatchNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchSPVPRpcDeleteMatchNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MatchSPVPRpcDeleteMatchNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchSPVPRpcDeleteMatchNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchSPVPRpcDeleteMatchNotify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchSPVPRpcDeleteMatchNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchSPVPRpcDeleteMatchNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchSPVPRpcDeleteMatchNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchSPVPRpcDeleteMatchNotify::MergeFrom(const MatchSPVPRpcDeleteMatchNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchSPVPRpcDeleteMatchNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchSPVPRpcDeleteMatchNotify::CopyFrom(const MatchSPVPRpcDeleteMatchNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchSPVPRpcDeleteMatchNotify::IsInitialized() const {

  return true;
}

void MatchSPVPRpcDeleteMatchNotify::Swap(MatchSPVPRpcDeleteMatchNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchSPVPRpcDeleteMatchNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchSPVPRpcDeleteMatchNotify_descriptor_;
  metadata.reflection = MatchSPVPRpcDeleteMatchNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchSPVPRpcStartSelectNotify::kTimeStartFieldNumber;
const int MatchSPVPRpcStartSelectNotify::kTimeEndFieldNumber;
const int MatchSPVPRpcStartSelectNotify::kUMessFieldNumber;
const int MatchSPVPRpcStartSelectNotify::kOtherUMessFieldNumber;
const int MatchSPVPRpcStartSelectNotify::kTimerFieldNumber;
#endif  // !_MSC_VER

MatchSPVPRpcStartSelectNotify::MatchSPVPRpcStartSelectNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchSPVPRpcStartSelectNotify::InitAsDefaultInstance() {
}

MatchSPVPRpcStartSelectNotify::MatchSPVPRpcStartSelectNotify(const MatchSPVPRpcStartSelectNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchSPVPRpcStartSelectNotify::SharedCtor() {
  _cached_size_ = 0;
  timestart_ = -1;
  timeend_ = -1;
  timer_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchSPVPRpcStartSelectNotify::~MatchSPVPRpcStartSelectNotify() {
  SharedDtor();
}

void MatchSPVPRpcStartSelectNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchSPVPRpcStartSelectNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchSPVPRpcStartSelectNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchSPVPRpcStartSelectNotify_descriptor_;
}

const MatchSPVPRpcStartSelectNotify& MatchSPVPRpcStartSelectNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
  return *default_instance_;
}

MatchSPVPRpcStartSelectNotify* MatchSPVPRpcStartSelectNotify::default_instance_ = NULL;

MatchSPVPRpcStartSelectNotify* MatchSPVPRpcStartSelectNotify::New() const {
  return new MatchSPVPRpcStartSelectNotify;
}

void MatchSPVPRpcStartSelectNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestart_ = -1;
    timeend_ = -1;
    timer_ = -1;
  }
  umess_.Clear();
  otherumess_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchSPVPRpcStartSelectNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 TimeStart = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &timestart_)));
          set_has_timestart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TimeEnd;
        break;
      }

      // optional sint32 TimeEnd = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &timeend_)));
          set_has_timeend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_UMess;
        break;
      }

      // repeated .MatchSPVPUserMessage UMess = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UMess:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_umess()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_UMess;
        if (input->ExpectTag(34)) goto parse_OtherUMess;
        break;
      }

      // repeated .MatchSPVPUserMessage OtherUMess = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OtherUMess:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_otherumess()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_OtherUMess;
        if (input->ExpectTag(40)) goto parse_Timer;
        break;
      }

      // optional sint32 Timer = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Timer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &timer_)));
          set_has_timer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchSPVPRpcStartSelectNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 TimeStart = 1 [default = -1];
  if (has_timestart()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->timestart(), output);
  }

  // optional sint32 TimeEnd = 2 [default = -1];
  if (has_timeend()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->timeend(), output);
  }

  // repeated .MatchSPVPUserMessage UMess = 3;
  for (int i = 0; i < this->umess_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->umess(i), output);
  }

  // repeated .MatchSPVPUserMessage OtherUMess = 4;
  for (int i = 0; i < this->otherumess_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->otherumess(i), output);
  }

  // optional sint32 Timer = 5 [default = -1];
  if (has_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->timer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchSPVPRpcStartSelectNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 TimeStart = 1 [default = -1];
  if (has_timestart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->timestart(), target);
  }

  // optional sint32 TimeEnd = 2 [default = -1];
  if (has_timeend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->timeend(), target);
  }

  // repeated .MatchSPVPUserMessage UMess = 3;
  for (int i = 0; i < this->umess_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->umess(i), target);
  }

  // repeated .MatchSPVPUserMessage OtherUMess = 4;
  for (int i = 0; i < this->otherumess_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->otherumess(i), target);
  }

  // optional sint32 Timer = 5 [default = -1];
  if (has_timer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->timer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchSPVPRpcStartSelectNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 TimeStart = 1 [default = -1];
    if (has_timestart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->timestart());
    }

    // optional sint32 TimeEnd = 2 [default = -1];
    if (has_timeend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->timeend());
    }

    // optional sint32 Timer = 5 [default = -1];
    if (has_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->timer());
    }

  }
  // repeated .MatchSPVPUserMessage UMess = 3;
  total_size += 1 * this->umess_size();
  for (int i = 0; i < this->umess_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->umess(i));
  }

  // repeated .MatchSPVPUserMessage OtherUMess = 4;
  total_size += 1 * this->otherumess_size();
  for (int i = 0; i < this->otherumess_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->otherumess(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchSPVPRpcStartSelectNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchSPVPRpcStartSelectNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchSPVPRpcStartSelectNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchSPVPRpcStartSelectNotify::MergeFrom(const MatchSPVPRpcStartSelectNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  umess_.MergeFrom(from.umess_);
  otherumess_.MergeFrom(from.otherumess_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestart()) {
      set_timestart(from.timestart());
    }
    if (from.has_timeend()) {
      set_timeend(from.timeend());
    }
    if (from.has_timer()) {
      set_timer(from.timer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchSPVPRpcStartSelectNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchSPVPRpcStartSelectNotify::CopyFrom(const MatchSPVPRpcStartSelectNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchSPVPRpcStartSelectNotify::IsInitialized() const {

  return true;
}

void MatchSPVPRpcStartSelectNotify::Swap(MatchSPVPRpcStartSelectNotify* other) {
  if (other != this) {
    std::swap(timestart_, other->timestart_);
    std::swap(timeend_, other->timeend_);
    umess_.Swap(&other->umess_);
    otherumess_.Swap(&other->otherumess_);
    std::swap(timer_, other->timer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchSPVPRpcStartSelectNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchSPVPRpcStartSelectNotify_descriptor_;
  metadata.reflection = MatchSPVPRpcStartSelectNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchSPVPRpcSelectHeroAsk::kHeroIDFieldNumber;
#endif  // !_MSC_VER

MatchSPVPRpcSelectHeroAsk::MatchSPVPRpcSelectHeroAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchSPVPRpcSelectHeroAsk::InitAsDefaultInstance() {
}

MatchSPVPRpcSelectHeroAsk::MatchSPVPRpcSelectHeroAsk(const MatchSPVPRpcSelectHeroAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchSPVPRpcSelectHeroAsk::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchSPVPRpcSelectHeroAsk::~MatchSPVPRpcSelectHeroAsk() {
  SharedDtor();
}

void MatchSPVPRpcSelectHeroAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchSPVPRpcSelectHeroAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchSPVPRpcSelectHeroAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchSPVPRpcSelectHeroAsk_descriptor_;
}

const MatchSPVPRpcSelectHeroAsk& MatchSPVPRpcSelectHeroAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
  return *default_instance_;
}

MatchSPVPRpcSelectHeroAsk* MatchSPVPRpcSelectHeroAsk::default_instance_ = NULL;

MatchSPVPRpcSelectHeroAsk* MatchSPVPRpcSelectHeroAsk::New() const {
  return new MatchSPVPRpcSelectHeroAsk;
}

void MatchSPVPRpcSelectHeroAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchSPVPRpcSelectHeroAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 HeroID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchSPVPRpcSelectHeroAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 HeroID = 1 [default = -1];
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchSPVPRpcSelectHeroAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 HeroID = 1 [default = -1];
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchSPVPRpcSelectHeroAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 HeroID = 1 [default = -1];
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchSPVPRpcSelectHeroAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchSPVPRpcSelectHeroAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchSPVPRpcSelectHeroAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchSPVPRpcSelectHeroAsk::MergeFrom(const MatchSPVPRpcSelectHeroAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchSPVPRpcSelectHeroAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchSPVPRpcSelectHeroAsk::CopyFrom(const MatchSPVPRpcSelectHeroAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchSPVPRpcSelectHeroAsk::IsInitialized() const {

  return true;
}

void MatchSPVPRpcSelectHeroAsk::Swap(MatchSPVPRpcSelectHeroAsk* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchSPVPRpcSelectHeroAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchSPVPRpcSelectHeroAsk_descriptor_;
  metadata.reflection = MatchSPVPRpcSelectHeroAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchSPVPRpcSelectHeroReply::kResultFieldNumber;
const int MatchSPVPRpcSelectHeroReply::kHeroIDFieldNumber;
#endif  // !_MSC_VER

MatchSPVPRpcSelectHeroReply::MatchSPVPRpcSelectHeroReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchSPVPRpcSelectHeroReply::InitAsDefaultInstance() {
}

MatchSPVPRpcSelectHeroReply::MatchSPVPRpcSelectHeroReply(const MatchSPVPRpcSelectHeroReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchSPVPRpcSelectHeroReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  heroid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchSPVPRpcSelectHeroReply::~MatchSPVPRpcSelectHeroReply() {
  SharedDtor();
}

void MatchSPVPRpcSelectHeroReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchSPVPRpcSelectHeroReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchSPVPRpcSelectHeroReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchSPVPRpcSelectHeroReply_descriptor_;
}

const MatchSPVPRpcSelectHeroReply& MatchSPVPRpcSelectHeroReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
  return *default_instance_;
}

MatchSPVPRpcSelectHeroReply* MatchSPVPRpcSelectHeroReply::default_instance_ = NULL;

MatchSPVPRpcSelectHeroReply* MatchSPVPRpcSelectHeroReply::New() const {
  return new MatchSPVPRpcSelectHeroReply;
}

void MatchSPVPRpcSelectHeroReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    heroid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchSPVPRpcSelectHeroReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HeroID;
        break;
      }

      // optional sint32 HeroID = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HeroID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchSPVPRpcSelectHeroReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint32 HeroID = 2 [default = -1];
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchSPVPRpcSelectHeroReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint32 HeroID = 2 [default = -1];
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchSPVPRpcSelectHeroReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 HeroID = 2 [default = -1];
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchSPVPRpcSelectHeroReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchSPVPRpcSelectHeroReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchSPVPRpcSelectHeroReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchSPVPRpcSelectHeroReply::MergeFrom(const MatchSPVPRpcSelectHeroReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchSPVPRpcSelectHeroReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchSPVPRpcSelectHeroReply::CopyFrom(const MatchSPVPRpcSelectHeroReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchSPVPRpcSelectHeroReply::IsInitialized() const {

  return true;
}

void MatchSPVPRpcSelectHeroReply::Swap(MatchSPVPRpcSelectHeroReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchSPVPRpcSelectHeroReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchSPVPRpcSelectHeroReply_descriptor_;
  metadata.reflection = MatchSPVPRpcSelectHeroReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MatchSPVPRpcGetStatusAsk::MatchSPVPRpcGetStatusAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchSPVPRpcGetStatusAsk::InitAsDefaultInstance() {
}

MatchSPVPRpcGetStatusAsk::MatchSPVPRpcGetStatusAsk(const MatchSPVPRpcGetStatusAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchSPVPRpcGetStatusAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchSPVPRpcGetStatusAsk::~MatchSPVPRpcGetStatusAsk() {
  SharedDtor();
}

void MatchSPVPRpcGetStatusAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchSPVPRpcGetStatusAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchSPVPRpcGetStatusAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchSPVPRpcGetStatusAsk_descriptor_;
}

const MatchSPVPRpcGetStatusAsk& MatchSPVPRpcGetStatusAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
  return *default_instance_;
}

MatchSPVPRpcGetStatusAsk* MatchSPVPRpcGetStatusAsk::default_instance_ = NULL;

MatchSPVPRpcGetStatusAsk* MatchSPVPRpcGetStatusAsk::New() const {
  return new MatchSPVPRpcGetStatusAsk;
}

void MatchSPVPRpcGetStatusAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchSPVPRpcGetStatusAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MatchSPVPRpcGetStatusAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchSPVPRpcGetStatusAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchSPVPRpcGetStatusAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchSPVPRpcGetStatusAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchSPVPRpcGetStatusAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchSPVPRpcGetStatusAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchSPVPRpcGetStatusAsk::MergeFrom(const MatchSPVPRpcGetStatusAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchSPVPRpcGetStatusAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchSPVPRpcGetStatusAsk::CopyFrom(const MatchSPVPRpcGetStatusAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchSPVPRpcGetStatusAsk::IsInitialized() const {

  return true;
}

void MatchSPVPRpcGetStatusAsk::Swap(MatchSPVPRpcGetStatusAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchSPVPRpcGetStatusAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchSPVPRpcGetStatusAsk_descriptor_;
  metadata.reflection = MatchSPVPRpcGetStatusAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchSPVPRpcGetStatusReply::kResultFieldNumber;
const int MatchSPVPRpcGetStatusReply::kTypeFieldNumber;
const int MatchSPVPRpcGetStatusReply::kTimeStartFieldNumber;
const int MatchSPVPRpcGetStatusReply::kTimeEndFieldNumber;
const int MatchSPVPRpcGetStatusReply::kTimerFieldNumber;
const int MatchSPVPRpcGetStatusReply::kUMessFieldNumber;
const int MatchSPVPRpcGetStatusReply::kUMessOtherFieldNumber;
const int MatchSPVPRpcGetStatusReply::kKeyFieldNumber;
#endif  // !_MSC_VER

MatchSPVPRpcGetStatusReply::MatchSPVPRpcGetStatusReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchSPVPRpcGetStatusReply::InitAsDefaultInstance() {
}

MatchSPVPRpcGetStatusReply::MatchSPVPRpcGetStatusReply(const MatchSPVPRpcGetStatusReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchSPVPRpcGetStatusReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  type_ = -1;
  timestart_ = -1;
  timeend_ = -1;
  timer_ = -1;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchSPVPRpcGetStatusReply::~MatchSPVPRpcGetStatusReply() {
  SharedDtor();
}

void MatchSPVPRpcGetStatusReply::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void MatchSPVPRpcGetStatusReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchSPVPRpcGetStatusReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchSPVPRpcGetStatusReply_descriptor_;
}

const MatchSPVPRpcGetStatusReply& MatchSPVPRpcGetStatusReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
  return *default_instance_;
}

MatchSPVPRpcGetStatusReply* MatchSPVPRpcGetStatusReply::default_instance_ = NULL;

MatchSPVPRpcGetStatusReply* MatchSPVPRpcGetStatusReply::New() const {
  return new MatchSPVPRpcGetStatusReply;
}

void MatchSPVPRpcGetStatusReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    type_ = -1;
    timestart_ = -1;
    timeend_ = -1;
    timer_ = -1;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
  }
  umess_.Clear();
  umessother_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchSPVPRpcGetStatusReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // optional sint32 Type = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_TimeStart;
        break;
      }

      // optional sint32 TimeStart = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeStart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &timestart_)));
          set_has_timestart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_TimeEnd;
        break;
      }

      // optional sint32 TimeEnd = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &timeend_)));
          set_has_timeend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Timer;
        break;
      }

      // optional sint32 Timer = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Timer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &timer_)));
          set_has_timer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_UMess;
        break;
      }

      // repeated .MatchSPVPUserMessage UMess = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UMess:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_umess()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_UMess;
        if (input->ExpectTag(74)) goto parse_UMessOther;
        break;
      }

      // repeated .MatchSPVPUserMessage UMessOther = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UMessOther:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_umessother()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_UMessOther;
        if (input->ExpectTag(82)) goto parse_Key;
        break;
      }

      // optional string Key = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchSPVPRpcGetStatusReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint32 Type = 2 [default = -1];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->type(), output);
  }

  // optional sint32 TimeStart = 5 [default = -1];
  if (has_timestart()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->timestart(), output);
  }

  // optional sint32 TimeEnd = 6 [default = -1];
  if (has_timeend()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->timeend(), output);
  }

  // optional sint32 Timer = 7 [default = -1];
  if (has_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->timer(), output);
  }

  // repeated .MatchSPVPUserMessage UMess = 8;
  for (int i = 0; i < this->umess_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->umess(i), output);
  }

  // repeated .MatchSPVPUserMessage UMessOther = 9;
  for (int i = 0; i < this->umessother_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->umessother(i), output);
  }

  // optional string Key = 10;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchSPVPRpcGetStatusReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint32 Type = 2 [default = -1];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->type(), target);
  }

  // optional sint32 TimeStart = 5 [default = -1];
  if (has_timestart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->timestart(), target);
  }

  // optional sint32 TimeEnd = 6 [default = -1];
  if (has_timeend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->timeend(), target);
  }

  // optional sint32 Timer = 7 [default = -1];
  if (has_timer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->timer(), target);
  }

  // repeated .MatchSPVPUserMessage UMess = 8;
  for (int i = 0; i < this->umess_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->umess(i), target);
  }

  // repeated .MatchSPVPUserMessage UMessOther = 9;
  for (int i = 0; i < this->umessother_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->umessother(i), target);
  }

  // optional string Key = 10;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchSPVPRpcGetStatusReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 Type = 2 [default = -1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

    // optional sint32 TimeStart = 5 [default = -1];
    if (has_timestart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->timestart());
    }

    // optional sint32 TimeEnd = 6 [default = -1];
    if (has_timeend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->timeend());
    }

    // optional sint32 Timer = 7 [default = -1];
    if (has_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->timer());
    }

    // optional string Key = 10;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  // repeated .MatchSPVPUserMessage UMess = 8;
  total_size += 1 * this->umess_size();
  for (int i = 0; i < this->umess_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->umess(i));
  }

  // repeated .MatchSPVPUserMessage UMessOther = 9;
  total_size += 1 * this->umessother_size();
  for (int i = 0; i < this->umessother_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->umessother(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchSPVPRpcGetStatusReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchSPVPRpcGetStatusReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchSPVPRpcGetStatusReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchSPVPRpcGetStatusReply::MergeFrom(const MatchSPVPRpcGetStatusReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  umess_.MergeFrom(from.umess_);
  umessother_.MergeFrom(from.umessother_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_timestart()) {
      set_timestart(from.timestart());
    }
    if (from.has_timeend()) {
      set_timeend(from.timeend());
    }
    if (from.has_timer()) {
      set_timer(from.timer());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchSPVPRpcGetStatusReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchSPVPRpcGetStatusReply::CopyFrom(const MatchSPVPRpcGetStatusReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchSPVPRpcGetStatusReply::IsInitialized() const {

  return true;
}

void MatchSPVPRpcGetStatusReply::Swap(MatchSPVPRpcGetStatusReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(type_, other->type_);
    std::swap(timestart_, other->timestart_);
    std::swap(timeend_, other->timeend_);
    std::swap(timer_, other->timer_);
    umess_.Swap(&other->umess_);
    umessother_.Swap(&other->umessother_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchSPVPRpcGetStatusReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchSPVPRpcGetStatusReply_descriptor_;
  metadata.reflection = MatchSPVPRpcGetStatusReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchSPVPRpcChangeStatusNotify::kUMessFieldNumber;
#endif  // !_MSC_VER

MatchSPVPRpcChangeStatusNotify::MatchSPVPRpcChangeStatusNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchSPVPRpcChangeStatusNotify::InitAsDefaultInstance() {
  umess_ = const_cast< ::MatchSPVPUserMessage*>(&::MatchSPVPUserMessage::default_instance());
}

MatchSPVPRpcChangeStatusNotify::MatchSPVPRpcChangeStatusNotify(const MatchSPVPRpcChangeStatusNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchSPVPRpcChangeStatusNotify::SharedCtor() {
  _cached_size_ = 0;
  umess_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchSPVPRpcChangeStatusNotify::~MatchSPVPRpcChangeStatusNotify() {
  SharedDtor();
}

void MatchSPVPRpcChangeStatusNotify::SharedDtor() {
  if (this != default_instance_) {
    delete umess_;
  }
}

void MatchSPVPRpcChangeStatusNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchSPVPRpcChangeStatusNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchSPVPRpcChangeStatusNotify_descriptor_;
}

const MatchSPVPRpcChangeStatusNotify& MatchSPVPRpcChangeStatusNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
  return *default_instance_;
}

MatchSPVPRpcChangeStatusNotify* MatchSPVPRpcChangeStatusNotify::default_instance_ = NULL;

MatchSPVPRpcChangeStatusNotify* MatchSPVPRpcChangeStatusNotify::New() const {
  return new MatchSPVPRpcChangeStatusNotify;
}

void MatchSPVPRpcChangeStatusNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_umess()) {
      if (umess_ != NULL) umess_->::MatchSPVPUserMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchSPVPRpcChangeStatusNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MatchSPVPUserMessage UMess = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_umess()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchSPVPRpcChangeStatusNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MatchSPVPUserMessage UMess = 1;
  if (has_umess()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->umess(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchSPVPRpcChangeStatusNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MatchSPVPUserMessage UMess = 1;
  if (has_umess()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->umess(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchSPVPRpcChangeStatusNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MatchSPVPUserMessage UMess = 1;
    if (has_umess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->umess());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchSPVPRpcChangeStatusNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchSPVPRpcChangeStatusNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchSPVPRpcChangeStatusNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchSPVPRpcChangeStatusNotify::MergeFrom(const MatchSPVPRpcChangeStatusNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_umess()) {
      mutable_umess()->::MatchSPVPUserMessage::MergeFrom(from.umess());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchSPVPRpcChangeStatusNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchSPVPRpcChangeStatusNotify::CopyFrom(const MatchSPVPRpcChangeStatusNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchSPVPRpcChangeStatusNotify::IsInitialized() const {

  return true;
}

void MatchSPVPRpcChangeStatusNotify::Swap(MatchSPVPRpcChangeStatusNotify* other) {
  if (other != this) {
    std::swap(umess_, other->umess_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchSPVPRpcChangeStatusNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchSPVPRpcChangeStatusNotify_descriptor_;
  metadata.reflection = MatchSPVPRpcChangeStatusNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchSPVPRpcShotOffAsk::kUidFieldNumber;
#endif  // !_MSC_VER

MatchSPVPRpcShotOffAsk::MatchSPVPRpcShotOffAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchSPVPRpcShotOffAsk::InitAsDefaultInstance() {
}

MatchSPVPRpcShotOffAsk::MatchSPVPRpcShotOffAsk(const MatchSPVPRpcShotOffAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchSPVPRpcShotOffAsk::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchSPVPRpcShotOffAsk::~MatchSPVPRpcShotOffAsk() {
  SharedDtor();
}

void MatchSPVPRpcShotOffAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchSPVPRpcShotOffAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchSPVPRpcShotOffAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchSPVPRpcShotOffAsk_descriptor_;
}

const MatchSPVPRpcShotOffAsk& MatchSPVPRpcShotOffAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
  return *default_instance_;
}

MatchSPVPRpcShotOffAsk* MatchSPVPRpcShotOffAsk::default_instance_ = NULL;

MatchSPVPRpcShotOffAsk* MatchSPVPRpcShotOffAsk::New() const {
  return new MatchSPVPRpcShotOffAsk;
}

void MatchSPVPRpcShotOffAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(-1);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchSPVPRpcShotOffAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 Uid = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchSPVPRpcShotOffAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint64 Uid = 1 [default = -1];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchSPVPRpcShotOffAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint64 Uid = 1 [default = -1];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchSPVPRpcShotOffAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 Uid = 1 [default = -1];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchSPVPRpcShotOffAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchSPVPRpcShotOffAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchSPVPRpcShotOffAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchSPVPRpcShotOffAsk::MergeFrom(const MatchSPVPRpcShotOffAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchSPVPRpcShotOffAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchSPVPRpcShotOffAsk::CopyFrom(const MatchSPVPRpcShotOffAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchSPVPRpcShotOffAsk::IsInitialized() const {

  return true;
}

void MatchSPVPRpcShotOffAsk::Swap(MatchSPVPRpcShotOffAsk* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchSPVPRpcShotOffAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchSPVPRpcShotOffAsk_descriptor_;
  metadata.reflection = MatchSPVPRpcShotOffAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchSPVPRpcShotOffReply::kResultFieldNumber;
const int MatchSPVPRpcShotOffReply::kUidFieldNumber;
#endif  // !_MSC_VER

MatchSPVPRpcShotOffReply::MatchSPVPRpcShotOffReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchSPVPRpcShotOffReply::InitAsDefaultInstance() {
}

MatchSPVPRpcShotOffReply::MatchSPVPRpcShotOffReply(const MatchSPVPRpcShotOffReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchSPVPRpcShotOffReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  uid_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchSPVPRpcShotOffReply::~MatchSPVPRpcShotOffReply() {
  SharedDtor();
}

void MatchSPVPRpcShotOffReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchSPVPRpcShotOffReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchSPVPRpcShotOffReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchSPVPRpcShotOffReply_descriptor_;
}

const MatchSPVPRpcShotOffReply& MatchSPVPRpcShotOffReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
  return *default_instance_;
}

MatchSPVPRpcShotOffReply* MatchSPVPRpcShotOffReply::default_instance_ = NULL;

MatchSPVPRpcShotOffReply* MatchSPVPRpcShotOffReply::New() const {
  return new MatchSPVPRpcShotOffReply;
}

void MatchSPVPRpcShotOffReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    uid_ = GOOGLE_LONGLONG(-1);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchSPVPRpcShotOffReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Uid;
        break;
      }

      // optional sint64 Uid = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchSPVPRpcShotOffReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint64 Uid = 2 [default = -1];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchSPVPRpcShotOffReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint64 Uid = 2 [default = -1];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchSPVPRpcShotOffReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint64 Uid = 2 [default = -1];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchSPVPRpcShotOffReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchSPVPRpcShotOffReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchSPVPRpcShotOffReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchSPVPRpcShotOffReply::MergeFrom(const MatchSPVPRpcShotOffReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchSPVPRpcShotOffReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchSPVPRpcShotOffReply::CopyFrom(const MatchSPVPRpcShotOffReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchSPVPRpcShotOffReply::IsInitialized() const {

  return true;
}

void MatchSPVPRpcShotOffReply::Swap(MatchSPVPRpcShotOffReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchSPVPRpcShotOffReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchSPVPRpcShotOffReply_descriptor_;
  metadata.reflection = MatchSPVPRpcShotOffReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchSPVPRpcSelectSceneNotify::kSceneIDFieldNumber;
#endif  // !_MSC_VER

MatchSPVPRpcSelectSceneNotify::MatchSPVPRpcSelectSceneNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchSPVPRpcSelectSceneNotify::InitAsDefaultInstance() {
}

MatchSPVPRpcSelectSceneNotify::MatchSPVPRpcSelectSceneNotify(const MatchSPVPRpcSelectSceneNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchSPVPRpcSelectSceneNotify::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchSPVPRpcSelectSceneNotify::~MatchSPVPRpcSelectSceneNotify() {
  SharedDtor();
}

void MatchSPVPRpcSelectSceneNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchSPVPRpcSelectSceneNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchSPVPRpcSelectSceneNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchSPVPRpcSelectSceneNotify_descriptor_;
}

const MatchSPVPRpcSelectSceneNotify& MatchSPVPRpcSelectSceneNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MatchSPVPCliRpc_2eproto();
  return *default_instance_;
}

MatchSPVPRpcSelectSceneNotify* MatchSPVPRpcSelectSceneNotify::default_instance_ = NULL;

MatchSPVPRpcSelectSceneNotify* MatchSPVPRpcSelectSceneNotify::New() const {
  return new MatchSPVPRpcSelectSceneNotify;
}

void MatchSPVPRpcSelectSceneNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchSPVPRpcSelectSceneNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 SceneID = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchSPVPRpcSelectSceneNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 SceneID = 1 [default = 1];
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchSPVPRpcSelectSceneNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 SceneID = 1 [default = 1];
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchSPVPRpcSelectSceneNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 SceneID = 1 [default = 1];
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchSPVPRpcSelectSceneNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchSPVPRpcSelectSceneNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchSPVPRpcSelectSceneNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchSPVPRpcSelectSceneNotify::MergeFrom(const MatchSPVPRpcSelectSceneNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchSPVPRpcSelectSceneNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchSPVPRpcSelectSceneNotify::CopyFrom(const MatchSPVPRpcSelectSceneNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchSPVPRpcSelectSceneNotify::IsInitialized() const {

  return true;
}

void MatchSPVPRpcSelectSceneNotify::Swap(MatchSPVPRpcSelectSceneNotify* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchSPVPRpcSelectSceneNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchSPVPRpcSelectSceneNotify_descriptor_;
  metadata.reflection = MatchSPVPRpcSelectSceneNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
