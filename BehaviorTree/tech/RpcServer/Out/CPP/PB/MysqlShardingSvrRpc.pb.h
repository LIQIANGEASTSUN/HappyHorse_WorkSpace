// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MysqlShardingSvrRpc.proto

#ifndef PROTOBUF_MysqlShardingSvrRpc_2eproto__INCLUDED
#define PROTOBUF_MysqlShardingSvrRpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "PublicStruct.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MysqlShardingSvrRpc_2eproto();
void protobuf_AssignDesc_MysqlShardingSvrRpc_2eproto();
void protobuf_ShutdownFile_MysqlShardingSvrRpc_2eproto();

class MysqlShardingRpcGetTableInfoAsk;
class MysqlShardingRpcGetTableInfoReply;
class MysqlShardingRpcExecuteAsk;
class MysqlShardingRpcExecuteReply;
class MysqlShardingRpcTransactionAsk;
class MysqlShardingRpcTransactionReply;
class MysqlShardingRecordLine;
class MysqlShardingTableInfo;

// ===================================================================

class MysqlShardingRpcGetTableInfoAsk : public ::google::protobuf::Message {
 public:
  MysqlShardingRpcGetTableInfoAsk();
  virtual ~MysqlShardingRpcGetTableInfoAsk();

  MysqlShardingRpcGetTableInfoAsk(const MysqlShardingRpcGetTableInfoAsk& from);

  inline MysqlShardingRpcGetTableInfoAsk& operator=(const MysqlShardingRpcGetTableInfoAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MysqlShardingRpcGetTableInfoAsk& default_instance();

  void Swap(MysqlShardingRpcGetTableInfoAsk* other);

  // implements Message ----------------------------------------------

  MysqlShardingRpcGetTableInfoAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MysqlShardingRpcGetTableInfoAsk& from);
  void MergeFrom(const MysqlShardingRpcGetTableInfoAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:MysqlShardingRpcGetTableInfoAsk)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_MysqlShardingSvrRpc_2eproto();
  friend void protobuf_AssignDesc_MysqlShardingSvrRpc_2eproto();
  friend void protobuf_ShutdownFile_MysqlShardingSvrRpc_2eproto();

  void InitAsDefaultInstance();
  static MysqlShardingRpcGetTableInfoAsk* default_instance_;
};
// -------------------------------------------------------------------

class MysqlShardingRpcGetTableInfoReply : public ::google::protobuf::Message {
 public:
  MysqlShardingRpcGetTableInfoReply();
  virtual ~MysqlShardingRpcGetTableInfoReply();

  MysqlShardingRpcGetTableInfoReply(const MysqlShardingRpcGetTableInfoReply& from);

  inline MysqlShardingRpcGetTableInfoReply& operator=(const MysqlShardingRpcGetTableInfoReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MysqlShardingRpcGetTableInfoReply& default_instance();

  void Swap(MysqlShardingRpcGetTableInfoReply* other);

  // implements Message ----------------------------------------------

  MysqlShardingRpcGetTableInfoReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MysqlShardingRpcGetTableInfoReply& from);
  void MergeFrom(const MysqlShardingRpcGetTableInfoReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .MysqlShardingTableInfo TableArr = 2;
  inline int tablearr_size() const;
  inline void clear_tablearr();
  static const int kTableArrFieldNumber = 2;
  inline const ::MysqlShardingTableInfo& tablearr(int index) const;
  inline ::MysqlShardingTableInfo* mutable_tablearr(int index);
  inline ::MysqlShardingTableInfo* add_tablearr();
  inline const ::google::protobuf::RepeatedPtrField< ::MysqlShardingTableInfo >&
      tablearr() const;
  inline ::google::protobuf::RepeatedPtrField< ::MysqlShardingTableInfo >*
      mutable_tablearr();

  // @@protoc_insertion_point(class_scope:MysqlShardingRpcGetTableInfoReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MysqlShardingTableInfo > tablearr_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_MysqlShardingSvrRpc_2eproto();
  friend void protobuf_AssignDesc_MysqlShardingSvrRpc_2eproto();
  friend void protobuf_ShutdownFile_MysqlShardingSvrRpc_2eproto();

  void InitAsDefaultInstance();
  static MysqlShardingRpcGetTableInfoReply* default_instance_;
};
// -------------------------------------------------------------------

class MysqlShardingRpcExecuteAsk : public ::google::protobuf::Message {
 public:
  MysqlShardingRpcExecuteAsk();
  virtual ~MysqlShardingRpcExecuteAsk();

  MysqlShardingRpcExecuteAsk(const MysqlShardingRpcExecuteAsk& from);

  inline MysqlShardingRpcExecuteAsk& operator=(const MysqlShardingRpcExecuteAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MysqlShardingRpcExecuteAsk& default_instance();

  void Swap(MysqlShardingRpcExecuteAsk* other);

  // implements Message ----------------------------------------------

  MysqlShardingRpcExecuteAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MysqlShardingRpcExecuteAsk& from);
  void MergeFrom(const MysqlShardingRpcExecuteAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Sql = 1;
  inline bool has_sql() const;
  inline void clear_sql();
  static const int kSqlFieldNumber = 1;
  inline const ::std::string& sql() const;
  inline void set_sql(const ::std::string& value);
  inline void set_sql(const char* value);
  inline void set_sql(const char* value, size_t size);
  inline ::std::string* mutable_sql();
  inline ::std::string* release_sql();
  inline void set_allocated_sql(::std::string* sql);

  // @@protoc_insertion_point(class_scope:MysqlShardingRpcExecuteAsk)
 private:
  inline void set_has_sql();
  inline void clear_has_sql();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* sql_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_MysqlShardingSvrRpc_2eproto();
  friend void protobuf_AssignDesc_MysqlShardingSvrRpc_2eproto();
  friend void protobuf_ShutdownFile_MysqlShardingSvrRpc_2eproto();

  void InitAsDefaultInstance();
  static MysqlShardingRpcExecuteAsk* default_instance_;
};
// -------------------------------------------------------------------

class MysqlShardingRpcExecuteReply : public ::google::protobuf::Message {
 public:
  MysqlShardingRpcExecuteReply();
  virtual ~MysqlShardingRpcExecuteReply();

  MysqlShardingRpcExecuteReply(const MysqlShardingRpcExecuteReply& from);

  inline MysqlShardingRpcExecuteReply& operator=(const MysqlShardingRpcExecuteReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MysqlShardingRpcExecuteReply& default_instance();

  void Swap(MysqlShardingRpcExecuteReply* other);

  // implements Message ----------------------------------------------

  MysqlShardingRpcExecuteReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MysqlShardingRpcExecuteReply& from);
  void MergeFrom(const MysqlShardingRpcExecuteReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated string Fields = 3;
  inline int fields_size() const;
  inline void clear_fields();
  static const int kFieldsFieldNumber = 3;
  inline const ::std::string& fields(int index) const;
  inline ::std::string* mutable_fields(int index);
  inline void set_fields(int index, const ::std::string& value);
  inline void set_fields(int index, const char* value);
  inline void set_fields(int index, const char* value, size_t size);
  inline ::std::string* add_fields();
  inline void add_fields(const ::std::string& value);
  inline void add_fields(const char* value);
  inline void add_fields(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& fields() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_fields();

  // repeated .MysqlShardingRecordLine Records = 4;
  inline int records_size() const;
  inline void clear_records();
  static const int kRecordsFieldNumber = 4;
  inline const ::MysqlShardingRecordLine& records(int index) const;
  inline ::MysqlShardingRecordLine* mutable_records(int index);
  inline ::MysqlShardingRecordLine* add_records();
  inline const ::google::protobuf::RepeatedPtrField< ::MysqlShardingRecordLine >&
      records() const;
  inline ::google::protobuf::RepeatedPtrField< ::MysqlShardingRecordLine >*
      mutable_records();

  // optional string ErrorString = 5;
  inline bool has_errorstring() const;
  inline void clear_errorstring();
  static const int kErrorStringFieldNumber = 5;
  inline const ::std::string& errorstring() const;
  inline void set_errorstring(const ::std::string& value);
  inline void set_errorstring(const char* value);
  inline void set_errorstring(const char* value, size_t size);
  inline ::std::string* mutable_errorstring();
  inline ::std::string* release_errorstring();
  inline void set_allocated_errorstring(::std::string* errorstring);

  // optional sint64 InsertId = 6 [default = 0];
  inline bool has_insertid() const;
  inline void clear_insertid();
  static const int kInsertIdFieldNumber = 6;
  inline ::google::protobuf::int64 insertid() const;
  inline void set_insertid(::google::protobuf::int64 value);

  // optional sint32 NrAffects = 7 [default = 0];
  inline bool has_nraffects() const;
  inline void clear_nraffects();
  static const int kNrAffectsFieldNumber = 7;
  inline ::google::protobuf::int32 nraffects() const;
  inline void set_nraffects(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MysqlShardingRpcExecuteReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_errorstring();
  inline void clear_has_errorstring();
  inline void set_has_insertid();
  inline void clear_has_insertid();
  inline void set_has_nraffects();
  inline void clear_has_nraffects();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> fields_;
  ::google::protobuf::RepeatedPtrField< ::MysqlShardingRecordLine > records_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 nraffects_;
  ::std::string* errorstring_;
  ::google::protobuf::int64 insertid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_MysqlShardingSvrRpc_2eproto();
  friend void protobuf_AssignDesc_MysqlShardingSvrRpc_2eproto();
  friend void protobuf_ShutdownFile_MysqlShardingSvrRpc_2eproto();

  void InitAsDefaultInstance();
  static MysqlShardingRpcExecuteReply* default_instance_;
};
// -------------------------------------------------------------------

class MysqlShardingRpcTransactionAsk : public ::google::protobuf::Message {
 public:
  MysqlShardingRpcTransactionAsk();
  virtual ~MysqlShardingRpcTransactionAsk();

  MysqlShardingRpcTransactionAsk(const MysqlShardingRpcTransactionAsk& from);

  inline MysqlShardingRpcTransactionAsk& operator=(const MysqlShardingRpcTransactionAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MysqlShardingRpcTransactionAsk& default_instance();

  void Swap(MysqlShardingRpcTransactionAsk* other);

  // implements Message ----------------------------------------------

  MysqlShardingRpcTransactionAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MysqlShardingRpcTransactionAsk& from);
  void MergeFrom(const MysqlShardingRpcTransactionAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string SqlArr = 1;
  inline int sqlarr_size() const;
  inline void clear_sqlarr();
  static const int kSqlArrFieldNumber = 1;
  inline const ::std::string& sqlarr(int index) const;
  inline ::std::string* mutable_sqlarr(int index);
  inline void set_sqlarr(int index, const ::std::string& value);
  inline void set_sqlarr(int index, const char* value);
  inline void set_sqlarr(int index, const char* value, size_t size);
  inline ::std::string* add_sqlarr();
  inline void add_sqlarr(const ::std::string& value);
  inline void add_sqlarr(const char* value);
  inline void add_sqlarr(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& sqlarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_sqlarr();

  // @@protoc_insertion_point(class_scope:MysqlShardingRpcTransactionAsk)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> sqlarr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_MysqlShardingSvrRpc_2eproto();
  friend void protobuf_AssignDesc_MysqlShardingSvrRpc_2eproto();
  friend void protobuf_ShutdownFile_MysqlShardingSvrRpc_2eproto();

  void InitAsDefaultInstance();
  static MysqlShardingRpcTransactionAsk* default_instance_;
};
// -------------------------------------------------------------------

class MysqlShardingRpcTransactionReply : public ::google::protobuf::Message {
 public:
  MysqlShardingRpcTransactionReply();
  virtual ~MysqlShardingRpcTransactionReply();

  MysqlShardingRpcTransactionReply(const MysqlShardingRpcTransactionReply& from);

  inline MysqlShardingRpcTransactionReply& operator=(const MysqlShardingRpcTransactionReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MysqlShardingRpcTransactionReply& default_instance();

  void Swap(MysqlShardingRpcTransactionReply* other);

  // implements Message ----------------------------------------------

  MysqlShardingRpcTransactionReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MysqlShardingRpcTransactionReply& from);
  void MergeFrom(const MysqlShardingRpcTransactionReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated string Fields = 3;
  inline int fields_size() const;
  inline void clear_fields();
  static const int kFieldsFieldNumber = 3;
  inline const ::std::string& fields(int index) const;
  inline ::std::string* mutable_fields(int index);
  inline void set_fields(int index, const ::std::string& value);
  inline void set_fields(int index, const char* value);
  inline void set_fields(int index, const char* value, size_t size);
  inline ::std::string* add_fields();
  inline void add_fields(const ::std::string& value);
  inline void add_fields(const char* value);
  inline void add_fields(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& fields() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_fields();

  // repeated .MysqlShardingRecordLine Records = 4;
  inline int records_size() const;
  inline void clear_records();
  static const int kRecordsFieldNumber = 4;
  inline const ::MysqlShardingRecordLine& records(int index) const;
  inline ::MysqlShardingRecordLine* mutable_records(int index);
  inline ::MysqlShardingRecordLine* add_records();
  inline const ::google::protobuf::RepeatedPtrField< ::MysqlShardingRecordLine >&
      records() const;
  inline ::google::protobuf::RepeatedPtrField< ::MysqlShardingRecordLine >*
      mutable_records();

  // optional string ErrorString = 5;
  inline bool has_errorstring() const;
  inline void clear_errorstring();
  static const int kErrorStringFieldNumber = 5;
  inline const ::std::string& errorstring() const;
  inline void set_errorstring(const ::std::string& value);
  inline void set_errorstring(const char* value);
  inline void set_errorstring(const char* value, size_t size);
  inline ::std::string* mutable_errorstring();
  inline ::std::string* release_errorstring();
  inline void set_allocated_errorstring(::std::string* errorstring);

  // optional sint64 InsertId = 6 [default = 0];
  inline bool has_insertid() const;
  inline void clear_insertid();
  static const int kInsertIdFieldNumber = 6;
  inline ::google::protobuf::int64 insertid() const;
  inline void set_insertid(::google::protobuf::int64 value);

  // optional sint32 NrAffects = 7 [default = 0];
  inline bool has_nraffects() const;
  inline void clear_nraffects();
  static const int kNrAffectsFieldNumber = 7;
  inline ::google::protobuf::int32 nraffects() const;
  inline void set_nraffects(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MysqlShardingRpcTransactionReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_errorstring();
  inline void clear_has_errorstring();
  inline void set_has_insertid();
  inline void clear_has_insertid();
  inline void set_has_nraffects();
  inline void clear_has_nraffects();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> fields_;
  ::google::protobuf::RepeatedPtrField< ::MysqlShardingRecordLine > records_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 nraffects_;
  ::std::string* errorstring_;
  ::google::protobuf::int64 insertid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_MysqlShardingSvrRpc_2eproto();
  friend void protobuf_AssignDesc_MysqlShardingSvrRpc_2eproto();
  friend void protobuf_ShutdownFile_MysqlShardingSvrRpc_2eproto();

  void InitAsDefaultInstance();
  static MysqlShardingRpcTransactionReply* default_instance_;
};
// -------------------------------------------------------------------

class MysqlShardingRecordLine : public ::google::protobuf::Message {
 public:
  MysqlShardingRecordLine();
  virtual ~MysqlShardingRecordLine();

  MysqlShardingRecordLine(const MysqlShardingRecordLine& from);

  inline MysqlShardingRecordLine& operator=(const MysqlShardingRecordLine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MysqlShardingRecordLine& default_instance();

  void Swap(MysqlShardingRecordLine* other);

  // implements Message ----------------------------------------------

  MysqlShardingRecordLine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MysqlShardingRecordLine& from);
  void MergeFrom(const MysqlShardingRecordLine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string Values = 1;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 1;
  inline const ::std::string& values(int index) const;
  inline ::std::string* mutable_values(int index);
  inline void set_values(int index, const ::std::string& value);
  inline void set_values(int index, const char* value);
  inline void set_values(int index, const char* value, size_t size);
  inline ::std::string* add_values();
  inline void add_values(const ::std::string& value);
  inline void add_values(const char* value);
  inline void add_values(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& values() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_values();

  // @@protoc_insertion_point(class_scope:MysqlShardingRecordLine)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> values_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_MysqlShardingSvrRpc_2eproto();
  friend void protobuf_AssignDesc_MysqlShardingSvrRpc_2eproto();
  friend void protobuf_ShutdownFile_MysqlShardingSvrRpc_2eproto();

  void InitAsDefaultInstance();
  static MysqlShardingRecordLine* default_instance_;
};
// -------------------------------------------------------------------

class MysqlShardingTableInfo : public ::google::protobuf::Message {
 public:
  MysqlShardingTableInfo();
  virtual ~MysqlShardingTableInfo();

  MysqlShardingTableInfo(const MysqlShardingTableInfo& from);

  inline MysqlShardingTableInfo& operator=(const MysqlShardingTableInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MysqlShardingTableInfo& default_instance();

  void Swap(MysqlShardingTableInfo* other);

  // implements Message ----------------------------------------------

  MysqlShardingTableInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MysqlShardingTableInfo& from);
  void MergeFrom(const MysqlShardingTableInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string PartField = 2;
  inline bool has_partfield() const;
  inline void clear_partfield();
  static const int kPartFieldFieldNumber = 2;
  inline const ::std::string& partfield() const;
  inline void set_partfield(const ::std::string& value);
  inline void set_partfield(const char* value);
  inline void set_partfield(const char* value, size_t size);
  inline ::std::string* mutable_partfield();
  inline ::std::string* release_partfield();
  inline void set_allocated_partfield(::std::string* partfield);

  // @@protoc_insertion_point(class_scope:MysqlShardingTableInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_partfield();
  inline void clear_has_partfield();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* partfield_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_MysqlShardingSvrRpc_2eproto();
  friend void protobuf_AssignDesc_MysqlShardingSvrRpc_2eproto();
  friend void protobuf_ShutdownFile_MysqlShardingSvrRpc_2eproto();

  void InitAsDefaultInstance();
  static MysqlShardingTableInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// MysqlShardingRpcGetTableInfoAsk

// optional string Name = 1;
inline bool MysqlShardingRpcGetTableInfoAsk::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MysqlShardingRpcGetTableInfoAsk::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MysqlShardingRpcGetTableInfoAsk::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MysqlShardingRpcGetTableInfoAsk::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MysqlShardingRpcGetTableInfoAsk::name() const {
  return *name_;
}
inline void MysqlShardingRpcGetTableInfoAsk::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MysqlShardingRpcGetTableInfoAsk::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MysqlShardingRpcGetTableInfoAsk::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MysqlShardingRpcGetTableInfoAsk::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MysqlShardingRpcGetTableInfoAsk::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MysqlShardingRpcGetTableInfoAsk::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MysqlShardingRpcGetTableInfoReply

// optional sint32 Result = 1 [default = -9999];
inline bool MysqlShardingRpcGetTableInfoReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MysqlShardingRpcGetTableInfoReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MysqlShardingRpcGetTableInfoReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MysqlShardingRpcGetTableInfoReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 MysqlShardingRpcGetTableInfoReply::result() const {
  return result_;
}
inline void MysqlShardingRpcGetTableInfoReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .MysqlShardingTableInfo TableArr = 2;
inline int MysqlShardingRpcGetTableInfoReply::tablearr_size() const {
  return tablearr_.size();
}
inline void MysqlShardingRpcGetTableInfoReply::clear_tablearr() {
  tablearr_.Clear();
}
inline const ::MysqlShardingTableInfo& MysqlShardingRpcGetTableInfoReply::tablearr(int index) const {
  return tablearr_.Get(index);
}
inline ::MysqlShardingTableInfo* MysqlShardingRpcGetTableInfoReply::mutable_tablearr(int index) {
  return tablearr_.Mutable(index);
}
inline ::MysqlShardingTableInfo* MysqlShardingRpcGetTableInfoReply::add_tablearr() {
  return tablearr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MysqlShardingTableInfo >&
MysqlShardingRpcGetTableInfoReply::tablearr() const {
  return tablearr_;
}
inline ::google::protobuf::RepeatedPtrField< ::MysqlShardingTableInfo >*
MysqlShardingRpcGetTableInfoReply::mutable_tablearr() {
  return &tablearr_;
}

// -------------------------------------------------------------------

// MysqlShardingRpcExecuteAsk

// optional string Sql = 1;
inline bool MysqlShardingRpcExecuteAsk::has_sql() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MysqlShardingRpcExecuteAsk::set_has_sql() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MysqlShardingRpcExecuteAsk::clear_has_sql() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MysqlShardingRpcExecuteAsk::clear_sql() {
  if (sql_ != &::google::protobuf::internal::kEmptyString) {
    sql_->clear();
  }
  clear_has_sql();
}
inline const ::std::string& MysqlShardingRpcExecuteAsk::sql() const {
  return *sql_;
}
inline void MysqlShardingRpcExecuteAsk::set_sql(const ::std::string& value) {
  set_has_sql();
  if (sql_ == &::google::protobuf::internal::kEmptyString) {
    sql_ = new ::std::string;
  }
  sql_->assign(value);
}
inline void MysqlShardingRpcExecuteAsk::set_sql(const char* value) {
  set_has_sql();
  if (sql_ == &::google::protobuf::internal::kEmptyString) {
    sql_ = new ::std::string;
  }
  sql_->assign(value);
}
inline void MysqlShardingRpcExecuteAsk::set_sql(const char* value, size_t size) {
  set_has_sql();
  if (sql_ == &::google::protobuf::internal::kEmptyString) {
    sql_ = new ::std::string;
  }
  sql_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MysqlShardingRpcExecuteAsk::mutable_sql() {
  set_has_sql();
  if (sql_ == &::google::protobuf::internal::kEmptyString) {
    sql_ = new ::std::string;
  }
  return sql_;
}
inline ::std::string* MysqlShardingRpcExecuteAsk::release_sql() {
  clear_has_sql();
  if (sql_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sql_;
    sql_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MysqlShardingRpcExecuteAsk::set_allocated_sql(::std::string* sql) {
  if (sql_ != &::google::protobuf::internal::kEmptyString) {
    delete sql_;
  }
  if (sql) {
    set_has_sql();
    sql_ = sql;
  } else {
    clear_has_sql();
    sql_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MysqlShardingRpcExecuteReply

// optional sint32 Result = 1 [default = -9999];
inline bool MysqlShardingRpcExecuteReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MysqlShardingRpcExecuteReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MysqlShardingRpcExecuteReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MysqlShardingRpcExecuteReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 MysqlShardingRpcExecuteReply::result() const {
  return result_;
}
inline void MysqlShardingRpcExecuteReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated string Fields = 3;
inline int MysqlShardingRpcExecuteReply::fields_size() const {
  return fields_.size();
}
inline void MysqlShardingRpcExecuteReply::clear_fields() {
  fields_.Clear();
}
inline const ::std::string& MysqlShardingRpcExecuteReply::fields(int index) const {
  return fields_.Get(index);
}
inline ::std::string* MysqlShardingRpcExecuteReply::mutable_fields(int index) {
  return fields_.Mutable(index);
}
inline void MysqlShardingRpcExecuteReply::set_fields(int index, const ::std::string& value) {
  fields_.Mutable(index)->assign(value);
}
inline void MysqlShardingRpcExecuteReply::set_fields(int index, const char* value) {
  fields_.Mutable(index)->assign(value);
}
inline void MysqlShardingRpcExecuteReply::set_fields(int index, const char* value, size_t size) {
  fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MysqlShardingRpcExecuteReply::add_fields() {
  return fields_.Add();
}
inline void MysqlShardingRpcExecuteReply::add_fields(const ::std::string& value) {
  fields_.Add()->assign(value);
}
inline void MysqlShardingRpcExecuteReply::add_fields(const char* value) {
  fields_.Add()->assign(value);
}
inline void MysqlShardingRpcExecuteReply::add_fields(const char* value, size_t size) {
  fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MysqlShardingRpcExecuteReply::fields() const {
  return fields_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MysqlShardingRpcExecuteReply::mutable_fields() {
  return &fields_;
}

// repeated .MysqlShardingRecordLine Records = 4;
inline int MysqlShardingRpcExecuteReply::records_size() const {
  return records_.size();
}
inline void MysqlShardingRpcExecuteReply::clear_records() {
  records_.Clear();
}
inline const ::MysqlShardingRecordLine& MysqlShardingRpcExecuteReply::records(int index) const {
  return records_.Get(index);
}
inline ::MysqlShardingRecordLine* MysqlShardingRpcExecuteReply::mutable_records(int index) {
  return records_.Mutable(index);
}
inline ::MysqlShardingRecordLine* MysqlShardingRpcExecuteReply::add_records() {
  return records_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MysqlShardingRecordLine >&
MysqlShardingRpcExecuteReply::records() const {
  return records_;
}
inline ::google::protobuf::RepeatedPtrField< ::MysqlShardingRecordLine >*
MysqlShardingRpcExecuteReply::mutable_records() {
  return &records_;
}

// optional string ErrorString = 5;
inline bool MysqlShardingRpcExecuteReply::has_errorstring() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MysqlShardingRpcExecuteReply::set_has_errorstring() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MysqlShardingRpcExecuteReply::clear_has_errorstring() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MysqlShardingRpcExecuteReply::clear_errorstring() {
  if (errorstring_ != &::google::protobuf::internal::kEmptyString) {
    errorstring_->clear();
  }
  clear_has_errorstring();
}
inline const ::std::string& MysqlShardingRpcExecuteReply::errorstring() const {
  return *errorstring_;
}
inline void MysqlShardingRpcExecuteReply::set_errorstring(const ::std::string& value) {
  set_has_errorstring();
  if (errorstring_ == &::google::protobuf::internal::kEmptyString) {
    errorstring_ = new ::std::string;
  }
  errorstring_->assign(value);
}
inline void MysqlShardingRpcExecuteReply::set_errorstring(const char* value) {
  set_has_errorstring();
  if (errorstring_ == &::google::protobuf::internal::kEmptyString) {
    errorstring_ = new ::std::string;
  }
  errorstring_->assign(value);
}
inline void MysqlShardingRpcExecuteReply::set_errorstring(const char* value, size_t size) {
  set_has_errorstring();
  if (errorstring_ == &::google::protobuf::internal::kEmptyString) {
    errorstring_ = new ::std::string;
  }
  errorstring_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MysqlShardingRpcExecuteReply::mutable_errorstring() {
  set_has_errorstring();
  if (errorstring_ == &::google::protobuf::internal::kEmptyString) {
    errorstring_ = new ::std::string;
  }
  return errorstring_;
}
inline ::std::string* MysqlShardingRpcExecuteReply::release_errorstring() {
  clear_has_errorstring();
  if (errorstring_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = errorstring_;
    errorstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MysqlShardingRpcExecuteReply::set_allocated_errorstring(::std::string* errorstring) {
  if (errorstring_ != &::google::protobuf::internal::kEmptyString) {
    delete errorstring_;
  }
  if (errorstring) {
    set_has_errorstring();
    errorstring_ = errorstring;
  } else {
    clear_has_errorstring();
    errorstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional sint64 InsertId = 6 [default = 0];
inline bool MysqlShardingRpcExecuteReply::has_insertid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MysqlShardingRpcExecuteReply::set_has_insertid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MysqlShardingRpcExecuteReply::clear_has_insertid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MysqlShardingRpcExecuteReply::clear_insertid() {
  insertid_ = GOOGLE_LONGLONG(0);
  clear_has_insertid();
}
inline ::google::protobuf::int64 MysqlShardingRpcExecuteReply::insertid() const {
  return insertid_;
}
inline void MysqlShardingRpcExecuteReply::set_insertid(::google::protobuf::int64 value) {
  set_has_insertid();
  insertid_ = value;
}

// optional sint32 NrAffects = 7 [default = 0];
inline bool MysqlShardingRpcExecuteReply::has_nraffects() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MysqlShardingRpcExecuteReply::set_has_nraffects() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MysqlShardingRpcExecuteReply::clear_has_nraffects() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MysqlShardingRpcExecuteReply::clear_nraffects() {
  nraffects_ = 0;
  clear_has_nraffects();
}
inline ::google::protobuf::int32 MysqlShardingRpcExecuteReply::nraffects() const {
  return nraffects_;
}
inline void MysqlShardingRpcExecuteReply::set_nraffects(::google::protobuf::int32 value) {
  set_has_nraffects();
  nraffects_ = value;
}

// -------------------------------------------------------------------

// MysqlShardingRpcTransactionAsk

// repeated string SqlArr = 1;
inline int MysqlShardingRpcTransactionAsk::sqlarr_size() const {
  return sqlarr_.size();
}
inline void MysqlShardingRpcTransactionAsk::clear_sqlarr() {
  sqlarr_.Clear();
}
inline const ::std::string& MysqlShardingRpcTransactionAsk::sqlarr(int index) const {
  return sqlarr_.Get(index);
}
inline ::std::string* MysqlShardingRpcTransactionAsk::mutable_sqlarr(int index) {
  return sqlarr_.Mutable(index);
}
inline void MysqlShardingRpcTransactionAsk::set_sqlarr(int index, const ::std::string& value) {
  sqlarr_.Mutable(index)->assign(value);
}
inline void MysqlShardingRpcTransactionAsk::set_sqlarr(int index, const char* value) {
  sqlarr_.Mutable(index)->assign(value);
}
inline void MysqlShardingRpcTransactionAsk::set_sqlarr(int index, const char* value, size_t size) {
  sqlarr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MysqlShardingRpcTransactionAsk::add_sqlarr() {
  return sqlarr_.Add();
}
inline void MysqlShardingRpcTransactionAsk::add_sqlarr(const ::std::string& value) {
  sqlarr_.Add()->assign(value);
}
inline void MysqlShardingRpcTransactionAsk::add_sqlarr(const char* value) {
  sqlarr_.Add()->assign(value);
}
inline void MysqlShardingRpcTransactionAsk::add_sqlarr(const char* value, size_t size) {
  sqlarr_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MysqlShardingRpcTransactionAsk::sqlarr() const {
  return sqlarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MysqlShardingRpcTransactionAsk::mutable_sqlarr() {
  return &sqlarr_;
}

// -------------------------------------------------------------------

// MysqlShardingRpcTransactionReply

// optional sint32 Result = 1 [default = -9999];
inline bool MysqlShardingRpcTransactionReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MysqlShardingRpcTransactionReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MysqlShardingRpcTransactionReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MysqlShardingRpcTransactionReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 MysqlShardingRpcTransactionReply::result() const {
  return result_;
}
inline void MysqlShardingRpcTransactionReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated string Fields = 3;
inline int MysqlShardingRpcTransactionReply::fields_size() const {
  return fields_.size();
}
inline void MysqlShardingRpcTransactionReply::clear_fields() {
  fields_.Clear();
}
inline const ::std::string& MysqlShardingRpcTransactionReply::fields(int index) const {
  return fields_.Get(index);
}
inline ::std::string* MysqlShardingRpcTransactionReply::mutable_fields(int index) {
  return fields_.Mutable(index);
}
inline void MysqlShardingRpcTransactionReply::set_fields(int index, const ::std::string& value) {
  fields_.Mutable(index)->assign(value);
}
inline void MysqlShardingRpcTransactionReply::set_fields(int index, const char* value) {
  fields_.Mutable(index)->assign(value);
}
inline void MysqlShardingRpcTransactionReply::set_fields(int index, const char* value, size_t size) {
  fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MysqlShardingRpcTransactionReply::add_fields() {
  return fields_.Add();
}
inline void MysqlShardingRpcTransactionReply::add_fields(const ::std::string& value) {
  fields_.Add()->assign(value);
}
inline void MysqlShardingRpcTransactionReply::add_fields(const char* value) {
  fields_.Add()->assign(value);
}
inline void MysqlShardingRpcTransactionReply::add_fields(const char* value, size_t size) {
  fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MysqlShardingRpcTransactionReply::fields() const {
  return fields_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MysqlShardingRpcTransactionReply::mutable_fields() {
  return &fields_;
}

// repeated .MysqlShardingRecordLine Records = 4;
inline int MysqlShardingRpcTransactionReply::records_size() const {
  return records_.size();
}
inline void MysqlShardingRpcTransactionReply::clear_records() {
  records_.Clear();
}
inline const ::MysqlShardingRecordLine& MysqlShardingRpcTransactionReply::records(int index) const {
  return records_.Get(index);
}
inline ::MysqlShardingRecordLine* MysqlShardingRpcTransactionReply::mutable_records(int index) {
  return records_.Mutable(index);
}
inline ::MysqlShardingRecordLine* MysqlShardingRpcTransactionReply::add_records() {
  return records_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MysqlShardingRecordLine >&
MysqlShardingRpcTransactionReply::records() const {
  return records_;
}
inline ::google::protobuf::RepeatedPtrField< ::MysqlShardingRecordLine >*
MysqlShardingRpcTransactionReply::mutable_records() {
  return &records_;
}

// optional string ErrorString = 5;
inline bool MysqlShardingRpcTransactionReply::has_errorstring() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MysqlShardingRpcTransactionReply::set_has_errorstring() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MysqlShardingRpcTransactionReply::clear_has_errorstring() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MysqlShardingRpcTransactionReply::clear_errorstring() {
  if (errorstring_ != &::google::protobuf::internal::kEmptyString) {
    errorstring_->clear();
  }
  clear_has_errorstring();
}
inline const ::std::string& MysqlShardingRpcTransactionReply::errorstring() const {
  return *errorstring_;
}
inline void MysqlShardingRpcTransactionReply::set_errorstring(const ::std::string& value) {
  set_has_errorstring();
  if (errorstring_ == &::google::protobuf::internal::kEmptyString) {
    errorstring_ = new ::std::string;
  }
  errorstring_->assign(value);
}
inline void MysqlShardingRpcTransactionReply::set_errorstring(const char* value) {
  set_has_errorstring();
  if (errorstring_ == &::google::protobuf::internal::kEmptyString) {
    errorstring_ = new ::std::string;
  }
  errorstring_->assign(value);
}
inline void MysqlShardingRpcTransactionReply::set_errorstring(const char* value, size_t size) {
  set_has_errorstring();
  if (errorstring_ == &::google::protobuf::internal::kEmptyString) {
    errorstring_ = new ::std::string;
  }
  errorstring_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MysqlShardingRpcTransactionReply::mutable_errorstring() {
  set_has_errorstring();
  if (errorstring_ == &::google::protobuf::internal::kEmptyString) {
    errorstring_ = new ::std::string;
  }
  return errorstring_;
}
inline ::std::string* MysqlShardingRpcTransactionReply::release_errorstring() {
  clear_has_errorstring();
  if (errorstring_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = errorstring_;
    errorstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MysqlShardingRpcTransactionReply::set_allocated_errorstring(::std::string* errorstring) {
  if (errorstring_ != &::google::protobuf::internal::kEmptyString) {
    delete errorstring_;
  }
  if (errorstring) {
    set_has_errorstring();
    errorstring_ = errorstring;
  } else {
    clear_has_errorstring();
    errorstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional sint64 InsertId = 6 [default = 0];
inline bool MysqlShardingRpcTransactionReply::has_insertid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MysqlShardingRpcTransactionReply::set_has_insertid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MysqlShardingRpcTransactionReply::clear_has_insertid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MysqlShardingRpcTransactionReply::clear_insertid() {
  insertid_ = GOOGLE_LONGLONG(0);
  clear_has_insertid();
}
inline ::google::protobuf::int64 MysqlShardingRpcTransactionReply::insertid() const {
  return insertid_;
}
inline void MysqlShardingRpcTransactionReply::set_insertid(::google::protobuf::int64 value) {
  set_has_insertid();
  insertid_ = value;
}

// optional sint32 NrAffects = 7 [default = 0];
inline bool MysqlShardingRpcTransactionReply::has_nraffects() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MysqlShardingRpcTransactionReply::set_has_nraffects() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MysqlShardingRpcTransactionReply::clear_has_nraffects() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MysqlShardingRpcTransactionReply::clear_nraffects() {
  nraffects_ = 0;
  clear_has_nraffects();
}
inline ::google::protobuf::int32 MysqlShardingRpcTransactionReply::nraffects() const {
  return nraffects_;
}
inline void MysqlShardingRpcTransactionReply::set_nraffects(::google::protobuf::int32 value) {
  set_has_nraffects();
  nraffects_ = value;
}

// -------------------------------------------------------------------

// MysqlShardingRecordLine

// repeated string Values = 1;
inline int MysqlShardingRecordLine::values_size() const {
  return values_.size();
}
inline void MysqlShardingRecordLine::clear_values() {
  values_.Clear();
}
inline const ::std::string& MysqlShardingRecordLine::values(int index) const {
  return values_.Get(index);
}
inline ::std::string* MysqlShardingRecordLine::mutable_values(int index) {
  return values_.Mutable(index);
}
inline void MysqlShardingRecordLine::set_values(int index, const ::std::string& value) {
  values_.Mutable(index)->assign(value);
}
inline void MysqlShardingRecordLine::set_values(int index, const char* value) {
  values_.Mutable(index)->assign(value);
}
inline void MysqlShardingRecordLine::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MysqlShardingRecordLine::add_values() {
  return values_.Add();
}
inline void MysqlShardingRecordLine::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
}
inline void MysqlShardingRecordLine::add_values(const char* value) {
  values_.Add()->assign(value);
}
inline void MysqlShardingRecordLine::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MysqlShardingRecordLine::values() const {
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MysqlShardingRecordLine::mutable_values() {
  return &values_;
}

// -------------------------------------------------------------------

// MysqlShardingTableInfo

// optional string Name = 1;
inline bool MysqlShardingTableInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MysqlShardingTableInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MysqlShardingTableInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MysqlShardingTableInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MysqlShardingTableInfo::name() const {
  return *name_;
}
inline void MysqlShardingTableInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MysqlShardingTableInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MysqlShardingTableInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MysqlShardingTableInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MysqlShardingTableInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MysqlShardingTableInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string PartField = 2;
inline bool MysqlShardingTableInfo::has_partfield() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MysqlShardingTableInfo::set_has_partfield() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MysqlShardingTableInfo::clear_has_partfield() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MysqlShardingTableInfo::clear_partfield() {
  if (partfield_ != &::google::protobuf::internal::kEmptyString) {
    partfield_->clear();
  }
  clear_has_partfield();
}
inline const ::std::string& MysqlShardingTableInfo::partfield() const {
  return *partfield_;
}
inline void MysqlShardingTableInfo::set_partfield(const ::std::string& value) {
  set_has_partfield();
  if (partfield_ == &::google::protobuf::internal::kEmptyString) {
    partfield_ = new ::std::string;
  }
  partfield_->assign(value);
}
inline void MysqlShardingTableInfo::set_partfield(const char* value) {
  set_has_partfield();
  if (partfield_ == &::google::protobuf::internal::kEmptyString) {
    partfield_ = new ::std::string;
  }
  partfield_->assign(value);
}
inline void MysqlShardingTableInfo::set_partfield(const char* value, size_t size) {
  set_has_partfield();
  if (partfield_ == &::google::protobuf::internal::kEmptyString) {
    partfield_ = new ::std::string;
  }
  partfield_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MysqlShardingTableInfo::mutable_partfield() {
  set_has_partfield();
  if (partfield_ == &::google::protobuf::internal::kEmptyString) {
    partfield_ = new ::std::string;
  }
  return partfield_;
}
inline ::std::string* MysqlShardingTableInfo::release_partfield() {
  clear_has_partfield();
  if (partfield_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = partfield_;
    partfield_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MysqlShardingTableInfo::set_allocated_partfield(::std::string* partfield) {
  if (partfield_ != &::google::protobuf::internal::kEmptyString) {
    delete partfield_;
  }
  if (partfield) {
    set_has_partfield();
    partfield_ = partfield;
  } else {
    clear_has_partfield();
    partfield_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MysqlShardingSvrRpc_2eproto__INCLUDED
