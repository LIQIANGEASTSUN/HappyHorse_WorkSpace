// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LogSvrRpc.proto

#ifndef PROTOBUF_LogSvrRpc_2eproto__INCLUDED
#define PROTOBUF_LogSvrRpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "PublicStruct.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_LogSvrRpc_2eproto();
void protobuf_AssignDesc_LogSvrRpc_2eproto();
void protobuf_ShutdownFile_LogSvrRpc_2eproto();

class LogRpcSaveNotify;

// ===================================================================

class LogRpcSaveNotify : public ::google::protobuf::Message {
 public:
  LogRpcSaveNotify();
  virtual ~LogRpcSaveNotify();

  LogRpcSaveNotify(const LogRpcSaveNotify& from);

  inline LogRpcSaveNotify& operator=(const LogRpcSaveNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogRpcSaveNotify& default_instance();

  void Swap(LogRpcSaveNotify* other);

  // implements Message ----------------------------------------------

  LogRpcSaveNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogRpcSaveNotify& from);
  void MergeFrom(const LogRpcSaveNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional sint64 LogId = 2 [default = -1];
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogIdFieldNumber = 2;
  inline ::google::protobuf::int64 logid() const;
  inline void set_logid(::google::protobuf::int64 value);

  // optional sint32 LogSeq = 3 [default = -1];
  inline bool has_logseq() const;
  inline void clear_logseq();
  static const int kLogSeqFieldNumber = 3;
  inline ::google::protobuf::int32 logseq() const;
  inline void set_logseq(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LogRpcSaveNotify)
 private:
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_logid();
  inline void clear_has_logid();
  inline void set_has_logseq();
  inline void clear_has_logseq();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* content_;
  ::google::protobuf::int64 logid_;
  ::google::protobuf::int32 logseq_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_LogSvrRpc_2eproto();
  friend void protobuf_AssignDesc_LogSvrRpc_2eproto();
  friend void protobuf_ShutdownFile_LogSvrRpc_2eproto();

  void InitAsDefaultInstance();
  static LogRpcSaveNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// LogRpcSaveNotify

// optional string Content = 1;
inline bool LogRpcSaveNotify::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogRpcSaveNotify::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogRpcSaveNotify::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogRpcSaveNotify::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& LogRpcSaveNotify::content() const {
  return *content_;
}
inline void LogRpcSaveNotify::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void LogRpcSaveNotify::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void LogRpcSaveNotify::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogRpcSaveNotify::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* LogRpcSaveNotify::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogRpcSaveNotify::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional sint64 LogId = 2 [default = -1];
inline bool LogRpcSaveNotify::has_logid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogRpcSaveNotify::set_has_logid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogRpcSaveNotify::clear_has_logid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogRpcSaveNotify::clear_logid() {
  logid_ = GOOGLE_LONGLONG(-1);
  clear_has_logid();
}
inline ::google::protobuf::int64 LogRpcSaveNotify::logid() const {
  return logid_;
}
inline void LogRpcSaveNotify::set_logid(::google::protobuf::int64 value) {
  set_has_logid();
  logid_ = value;
}

// optional sint32 LogSeq = 3 [default = -1];
inline bool LogRpcSaveNotify::has_logseq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogRpcSaveNotify::set_has_logseq() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogRpcSaveNotify::clear_has_logseq() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogRpcSaveNotify::clear_logseq() {
  logseq_ = -1;
  clear_has_logseq();
}
inline ::google::protobuf::int32 LogRpcSaveNotify::logseq() const {
  return logseq_;
}
inline void LogRpcSaveNotify::set_logseq(::google::protobuf::int32 value) {
  set_has_logseq();
  logseq_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LogSvrRpc_2eproto__INCLUDED
