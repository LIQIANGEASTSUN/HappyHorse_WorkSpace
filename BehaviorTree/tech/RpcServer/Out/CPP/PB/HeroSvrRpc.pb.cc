// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HeroSvrRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "HeroSvrRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* HeroRpcCheckHeroIDAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroRpcCheckHeroIDAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroRpcCheckHeroIDReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroRpcCheckHeroIDReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_HeroSvrRpc_2eproto() {
  protobuf_AddDesc_HeroSvrRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "HeroSvrRpc.proto");
  GOOGLE_CHECK(file != NULL);
  HeroRpcCheckHeroIDAsk_descriptor_ = file->message_type(0);
  static const int HeroRpcCheckHeroIDAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroRpcCheckHeroIDAsk, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroRpcCheckHeroIDAsk, uid_),
  };
  HeroRpcCheckHeroIDAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroRpcCheckHeroIDAsk_descriptor_,
      HeroRpcCheckHeroIDAsk::default_instance_,
      HeroRpcCheckHeroIDAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroRpcCheckHeroIDAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroRpcCheckHeroIDAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroRpcCheckHeroIDAsk));
  HeroRpcCheckHeroIDReply_descriptor_ = file->message_type(1);
  static const int HeroRpcCheckHeroIDReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroRpcCheckHeroIDReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroRpcCheckHeroIDReply, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroRpcCheckHeroIDReply, uid_),
  };
  HeroRpcCheckHeroIDReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroRpcCheckHeroIDReply_descriptor_,
      HeroRpcCheckHeroIDReply::default_instance_,
      HeroRpcCheckHeroIDReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroRpcCheckHeroIDReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroRpcCheckHeroIDReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroRpcCheckHeroIDReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_HeroSvrRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroRpcCheckHeroIDAsk_descriptor_, &HeroRpcCheckHeroIDAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroRpcCheckHeroIDReply_descriptor_, &HeroRpcCheckHeroIDReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_HeroSvrRpc_2eproto() {
  delete HeroRpcCheckHeroIDAsk::default_instance_;
  delete HeroRpcCheckHeroIDAsk_reflection_;
  delete HeroRpcCheckHeroIDReply::default_instance_;
  delete HeroRpcCheckHeroIDReply_reflection_;
}

void protobuf_AddDesc_HeroSvrRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020HeroSvrRpc.proto\032\022PublicStruct.proto\"<"
    "\n\025HeroRpcCheckHeroIDAsk\022\022\n\006HeroID\030\001 \001(\021:"
    "\002-1\022\017\n\003Uid\030\002 \001(\022:\002-1\"U\n\027HeroRpcCheckHero"
    "IDReply\022\025\n\006Result\030\001 \001(\021:\005-9999\022\022\n\006HeroID"
    "\030\002 \001(\021:\002-1\022\017\n\003Uid\030\003 \001(\022:\002-1", 187);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "HeroSvrRpc.proto", &protobuf_RegisterTypes);
  HeroRpcCheckHeroIDAsk::default_instance_ = new HeroRpcCheckHeroIDAsk();
  HeroRpcCheckHeroIDReply::default_instance_ = new HeroRpcCheckHeroIDReply();
  HeroRpcCheckHeroIDAsk::default_instance_->InitAsDefaultInstance();
  HeroRpcCheckHeroIDReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_HeroSvrRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_HeroSvrRpc_2eproto {
  StaticDescriptorInitializer_HeroSvrRpc_2eproto() {
    protobuf_AddDesc_HeroSvrRpc_2eproto();
  }
} static_descriptor_initializer_HeroSvrRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int HeroRpcCheckHeroIDAsk::kHeroIDFieldNumber;
const int HeroRpcCheckHeroIDAsk::kUidFieldNumber;
#endif  // !_MSC_VER

HeroRpcCheckHeroIDAsk::HeroRpcCheckHeroIDAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroRpcCheckHeroIDAsk::InitAsDefaultInstance() {
}

HeroRpcCheckHeroIDAsk::HeroRpcCheckHeroIDAsk(const HeroRpcCheckHeroIDAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroRpcCheckHeroIDAsk::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = -1;
  uid_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroRpcCheckHeroIDAsk::~HeroRpcCheckHeroIDAsk() {
  SharedDtor();
}

void HeroRpcCheckHeroIDAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroRpcCheckHeroIDAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroRpcCheckHeroIDAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroRpcCheckHeroIDAsk_descriptor_;
}

const HeroRpcCheckHeroIDAsk& HeroRpcCheckHeroIDAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HeroSvrRpc_2eproto();
  return *default_instance_;
}

HeroRpcCheckHeroIDAsk* HeroRpcCheckHeroIDAsk::default_instance_ = NULL;

HeroRpcCheckHeroIDAsk* HeroRpcCheckHeroIDAsk::New() const {
  return new HeroRpcCheckHeroIDAsk;
}

void HeroRpcCheckHeroIDAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = -1;
    uid_ = GOOGLE_LONGLONG(-1);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroRpcCheckHeroIDAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 HeroID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Uid;
        break;
      }

      // optional sint64 Uid = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroRpcCheckHeroIDAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 HeroID = 1 [default = -1];
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->heroid(), output);
  }

  // optional sint64 Uid = 2 [default = -1];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroRpcCheckHeroIDAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 HeroID = 1 [default = -1];
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->heroid(), target);
  }

  // optional sint64 Uid = 2 [default = -1];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroRpcCheckHeroIDAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 HeroID = 1 [default = -1];
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->heroid());
    }

    // optional sint64 Uid = 2 [default = -1];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroRpcCheckHeroIDAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroRpcCheckHeroIDAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroRpcCheckHeroIDAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroRpcCheckHeroIDAsk::MergeFrom(const HeroRpcCheckHeroIDAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroRpcCheckHeroIDAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroRpcCheckHeroIDAsk::CopyFrom(const HeroRpcCheckHeroIDAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroRpcCheckHeroIDAsk::IsInitialized() const {

  return true;
}

void HeroRpcCheckHeroIDAsk::Swap(HeroRpcCheckHeroIDAsk* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroRpcCheckHeroIDAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroRpcCheckHeroIDAsk_descriptor_;
  metadata.reflection = HeroRpcCheckHeroIDAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroRpcCheckHeroIDReply::kResultFieldNumber;
const int HeroRpcCheckHeroIDReply::kHeroIDFieldNumber;
const int HeroRpcCheckHeroIDReply::kUidFieldNumber;
#endif  // !_MSC_VER

HeroRpcCheckHeroIDReply::HeroRpcCheckHeroIDReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroRpcCheckHeroIDReply::InitAsDefaultInstance() {
}

HeroRpcCheckHeroIDReply::HeroRpcCheckHeroIDReply(const HeroRpcCheckHeroIDReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroRpcCheckHeroIDReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  heroid_ = -1;
  uid_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroRpcCheckHeroIDReply::~HeroRpcCheckHeroIDReply() {
  SharedDtor();
}

void HeroRpcCheckHeroIDReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroRpcCheckHeroIDReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroRpcCheckHeroIDReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroRpcCheckHeroIDReply_descriptor_;
}

const HeroRpcCheckHeroIDReply& HeroRpcCheckHeroIDReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HeroSvrRpc_2eproto();
  return *default_instance_;
}

HeroRpcCheckHeroIDReply* HeroRpcCheckHeroIDReply::default_instance_ = NULL;

HeroRpcCheckHeroIDReply* HeroRpcCheckHeroIDReply::New() const {
  return new HeroRpcCheckHeroIDReply;
}

void HeroRpcCheckHeroIDReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    heroid_ = -1;
    uid_ = GOOGLE_LONGLONG(-1);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroRpcCheckHeroIDReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HeroID;
        break;
      }

      // optional sint32 HeroID = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HeroID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Uid;
        break;
      }

      // optional sint64 Uid = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroRpcCheckHeroIDReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint32 HeroID = 2 [default = -1];
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->heroid(), output);
  }

  // optional sint64 Uid = 3 [default = -1];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroRpcCheckHeroIDReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint32 HeroID = 2 [default = -1];
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->heroid(), target);
  }

  // optional sint64 Uid = 3 [default = -1];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroRpcCheckHeroIDReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 HeroID = 2 [default = -1];
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->heroid());
    }

    // optional sint64 Uid = 3 [default = -1];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroRpcCheckHeroIDReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroRpcCheckHeroIDReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroRpcCheckHeroIDReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroRpcCheckHeroIDReply::MergeFrom(const HeroRpcCheckHeroIDReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroRpcCheckHeroIDReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroRpcCheckHeroIDReply::CopyFrom(const HeroRpcCheckHeroIDReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroRpcCheckHeroIDReply::IsInitialized() const {

  return true;
}

void HeroRpcCheckHeroIDReply::Swap(HeroRpcCheckHeroIDReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(heroid_, other->heroid_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroRpcCheckHeroIDReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroRpcCheckHeroIDReply_descriptor_;
  metadata.reflection = HeroRpcCheckHeroIDReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
