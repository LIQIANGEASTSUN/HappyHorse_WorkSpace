local base = require "MainCity.Interaction.InteractionLogic.BaseInteractionLogic"
---@class ExploitInteraction : BaseInteractionLogic
local ExploitInteraction = class(base, "ExploitInteraction")

local UserInputType = UserInputType
local UserInput = UserInput
local Input = CS.UnityEngine.Input

function ExploitInteraction:ctor()
    self.longPressAgent = nil
end

function ExploitInteraction:Update()
    UserInput.Clear()
    self.inputMgr:Update()
    -- AppServices.GuideArrowManager:Update()
    if Input.GetKeyDown(CS.UnityEngine.KeyCode.L) then --@DEL
        local func = include("Configs.GuideTest") --@DEL
        Runtime.InvokeCbk(func) --@DEL
    end --@DEL
end
function ExploitInteraction:OnGUI()
    if not self:GetActive() then
        return
    end
    if self.inputMgr and self.inputMgr.OnGUI then
        self.inputMgr:OnGUI()
    end
end

function ExploitInteraction:RegisterListeners()
    self:RegisterClickListener()
    -- self:RegisterLongPressListener()

    self.inputMgr:Awake()
end

---@param input CustomInput
local function GetHit(input)
    local hitCount = input:GetHitCount()
    for index = 1, hitCount do
        local hitInfo = input:GetHitInfo(index - 1)
        if hitInfo and hitInfo.transform and Runtime.CSValid(hitInfo.transform) then
            local pickObject = hitInfo.transform:GetComponent(typeof(CS.PickObject))
            if Runtime.CSValid(pickObject) then
                return hitInfo
            end
        end
    end
    return input.hit
end

local Time = Time
local doubleClickThreshold = 0.2
function ExploitInteraction:ProcessDoubleClick(input)
    if self.preClick then
        local deltaTime = Time.realtimeSinceStartup - self.preClick[2]
        -- console.error(deltaTime)
        local hit = GetHit(input)
        if not hit.transform then
            return
        end
        if deltaTime < doubleClickThreshold and hit.collider == self.preClick[1].hit.collider then
            self:OnDoubleClick(input)
            -- console.error("ProcessDoubleClick")
            self.preClick = {input, Time.realtimeSinceStartup}
        else
            self.preClick = {input, Time.realtimeSinceStartup}
        end
    else
        self.preClick = {input, Time.realtimeSinceStartup}
    end
end

---@param input CustomInput
function ExploitInteraction:OnLongPress(input)
    if App.mapGuideManager:IsLongPressDisabled() then
        return
    end
    if self.longPressAgent then
        return
    end
    local hit = GetHit(input)
    if not hit.transform then
        return
    end
    SceneServices.BindingTip:HideAll()
    -- SceneServices.PathTip:ClearAllTips()
    ---显示障碍物详情气泡
    if Runtime.CSValid(hit.collider) then
        local hitName = hit.collider.name
        local agent = App.scene.objectManager:GetAgent(hitName)
        self.longPressAgent = agent
        if agent then
            agent:SetHighlight(true)
            local agentState = agent:GetState()
            if agentState == CleanState.clearing or agentState == CleanState.prepare then
                agent:ShowAgentDetail()
            end
        end
    end
end

function ExploitInteraction:OnCancelPress()
    -- MapBubbleManager:CloseBubblesByType(BubbleType.Agent_Detail)
    if self.longPressAgent then
        local agent = self.longPressAgent
        self.longPressAgent = nil
        agent:SetHighlight(false)
    end
end

function ExploitInteraction:OnDoubleClick(input)
    local mainHitName = input.hit.collider.name
    if not mainHitName then
        return
    end
    if App.mapGuideManager:IsDoubleClickDisabled(mainHitName) then
        return
    end
    ---@type NormalAgent
    local agent = App.scene.objectManager:GetAgent(mainHitName)
    if not agent then
        return
    end

    AppServices.EventDispatcher:dispatchEvent(GlobalEvents.DoubleClickCollider, agent)
end

local clickState = {
    others = 0,
    ground = 1,
    agent = 2,
    character = 3
}

local onClickHandler = {
    [clickState.ground] = function(pos)
        UserInput.setPosition(pos)
        if App.mapGuideManager:HasRunningGuide() and not App.mapGuideManager:IsWeakStep() then
            return
        end
        console.lh("click Ground") --@DEL
        UserInput.onTrigger(UserInputType.clickGround)
        -- local player = AppServices.Task:GetInteractivePlayer()
        -- local function movePlayer(character, callback)
        --     if character:IsBusy() then
        --         console.lh(tostring(player.name) .. " is busy") --@DEL
        --         return Runtime.InvokeCbk(callback, false)
        --     end
        --     if character.moving then
        --         return Runtime.InvokeCbk(callback, false)
        --     end
        --     character:StartMove(
        --         nil,
        --         function(canMove)
        --             Runtime.InvokeCbk(callback, canMove)
        --         end
        --     )
        -- end
        -- if not AppServices.Task:IsSwitchPlayers() then
        --     movePlayer(player)
        -- else
        --     movePlayer(
        --         player,
        --         function(result)
        --             if not result then
        --                 player = AppServices.Task:GetInteractivePlayer()
        --                 movePlayer(player)
        --             end
        --         end
        --     )
        -- end
    end,
    [clickState.agent] = function(data)
        local agent = data.agent
        local input = data.input
        local mainHitName = data.mainHitName
        if not agent:IsCleaning() then
            if App.mapGuideManager:IsAgentClickDisabled(mainHitName) then
                return
            end
            local locked = agent:IsLocked()
            if locked then
                local tip = agent:GetLockTip()
                if tip then
                    -- UITool.ShowContentTipAni(tip, agent:GetAnchorPosition())
                    AppServices.UITextTip:Show(tip)
                end
                return
            end
            local castList = {mainHitName}
            local castCount = input:GetHitCount()
            for i = 1, castCount, 1 do
                local hit = input:GetHitInfo(i - 1)
                local hitName = hit.collider.name
                table.insertIfNotExist(castList, hitName)
            end
            UserInput.setCastList(castList)
            UserInput.onTrigger(UserInputType.clickObstacle)
        end
    end,
    [clickState.character] = function(character)
        character:OnClick()
    end
}

function ExploitInteraction:OnClick(input)
    SceneServices.BindingTip:HideAll()
    SceneServices.PathTip:ClearAllTips()
    -- AppServices.FarmManager:HideCropInfo()
    --AppServices.MagicalCreatures:CloseAllDetailBubble()
    self:ProcessDoubleClick(input)
    local hit = GetHit(input)
    if not hit.transform then
        return
    end

    local function getHitState()
        local pos = input.worldPosition
        local mainHitName = hit.collider.name
        local mapMgr = App.scene.mapManager
        local grid_x, grid_z = mapMgr:ToLocal(pos)
        local isPassable = mapMgr:IsPassable(grid_x, grid_z)
        local gridState = mapMgr:GetState(grid_x, grid_z)
        if input:IsHitGround() then
            --地面点击特效
            AppServices.ClickEffectTool:Show(isPassable, pos)
            if isPassable and gridState == CleanState.cleared then
                return clickState.ground, pos
            end
        end

        local agent = App.scene.objectManager:GetAgent(mainHitName)
        if agent then
            return clickState.agent, {agent = agent, input = input, mainHitName = mainHitName}
        end
        -- local character = CharacterManager.Instance():Find(mainHitName)
        -- if character then
        --     return clickState.character, character
        -- end
        return clickState.others
    end

    local state, param = getHitState()
    if state == clickState.others then
    else
        local handler = onClickHandler[state]
        if handler then
            return Runtime.InvokeCbk(handler, param)
        end
    end

    if App.mapGuideManager:IsClickDragonDisabled() then
        return
    end

    AppServices.EventDispatcher:dispatchEvent(GlobalEvents.ClickNothing)
    return
end
--------------------------------------------测试画线--------------------------------------------
function ExploitInteraction:DrawGizmos()
end
----------------------------------------------销毁----------------------------------------------
function ExploitInteraction:Destroy()
    self.inputMgr:Destroy()
    self.inputMgr = nil
    UserInput.Clear()
end

return ExploitInteraction
