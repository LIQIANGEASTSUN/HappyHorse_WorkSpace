

AttributeInfo.AttributeTypes = setmetatable(
    {
        _register = {
            [AttributeInfo.Type.Shield] = "AttributeShield",
        }
    },
    {
        __index = function(t, k)
            local alias = t._register[k]
            if not alias then
                alias = "AttributeBase"
            end
            local path = "Cleaner.Fight.Attribute.Entity."..alias
            local v = require(path)
            rawset(t, k, v)
            return v
        end
    }
)

AttributeInfo.Expressions = setmetatable(
    {
        _register = {
            [AttributeInfo.ExpressionType.Plus] = "AttributeExpressionPlus",
            [AttributeInfo.ExpressionType.Sub] = "AttributeExpressionSub",
            [AttributeInfo.ExpressionType.Multiply] = "AttributeExpressionMultiply",
            [AttributeInfo.ExpressionType.Divide] = "AttributeExpressionDivide",
        }
    },
    {
        __index = function(t, k)
            local alias = t._register[k]
            local path = "Cleaner.Fight.Attribute.Expression."..alias
            local v = require(path)
            rawset(t, k, v)
            return v
        end
    }
)


ConfigLoad.GetNodePath = function(name)
    local path = BehaviorTreeInfo.NodeConfigs[name]
    if not path then
        path = BTCustomConfig.NodeConfigs[name]
    end

    return path
end

ConfigLoad.NodeConfigs = setmetatable(
    { },
    {
        __index = function(t, k)
            local path = ConfigLoad.GetNodePath(k)
            local v = require(path)
            rawset(t, k, v)
            return v
        end
    }
)