---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2020/3/26 17:44
---
-- local Mail = require "Game.System.Mail.Mail"
---@class MailItem
local item = class(nil, "MailItem")

function item:ctor(templateGo)
    self.gifts = {}
    self.gameObject = GameObject.Instantiate(templateGo)
    -- if not Runtime.CSValid(self.gameObject) then
    -- 	local go = BResource.InstantiateFromAssetName("Prefab/UI/Mail/MailMainPanel/mail_list_item.prefab")
    -- 	if Runtime.CSValid(go) then
    -- 		self.gameObject = go
    -- 	end
    -- end
    self:InitComponent()
    self.gameObject:SetActive(true)
end

---@param mail Mail
function item:SetData(mail)
    console.assert(mail)
    ---@type Mail
    self.data = mail
    self:BindEvent()
    self:FillInfo()
end

function item:InitComponent()
    self.bg = find_component(self.gameObject, "bg")
    self.txt_title = find_component(self.gameObject, "txt_title", Text)
    self.txt_time_remain = find_component(self.gameObject, "txt_time_remain", Text)
    self.txt_time_start = find_component(self.gameObject, "txt_time_start", Text)
    self.tran_reward_list = find_component(self.gameObject, "reward_list", Transform)

    self.img_gray = find_component(self.gameObject, "img_gray")
    self.itemPrefab = find_component(self.gameObject, "mail_item_reward_item", Transform)
    self.open = find_component(self.gameObject, "open")
    self.close = find_component(self.gameObject, "close")
    self.received = find_component(self.gameObject, "received")
end

function item:BindEvent()
    local showDetail = function()
        if self.data:OutOfTime() then
            local id = self.data.id
            ErrorHandler.ShowErrorMessage(
                Runtime.Translate("ui_mail_out_of_date"),
                function()
                    AppServices.MailManager:RemoveSingleMail(id)
                end
            )
            return
        end
        PanelManager.showPanel(GlobalPanelEnum.MailDetailPanel, {data = self.data})
        self:SetReadState(true)

        if not self.data:GetReadState() then
            --set state
            AppServices.MailManager:RequestReadMail(
                self.data.id,
                function()
                    self:SetReadState(true)
                end
            )
        end
    end

    Util.UGUI_AddButtonListener(
        self.bg,
        function()
            showDetail()
        end
    )

    -- Util.UGUI_AddButtonListener(self.img_gray, function()
    -- 	showDetail()
    -- end)
end
function item:SetReadState(read)
    if Runtime.CSValid(self.img_gray) then
        self.img_gray:SetActive(read)
    end
    self.open:SetActive(read)
    self.close:SetActive(not read)
end

function item:FillInfo()
    self.txt_title.text = AppServices.MailManager:Localize(self.data.title)
    self.txt_time_remain.text = self.data:GetReaminTime_str()
    self.txt_time_start.text = self.data:GetStartTime_str()

    self:ClearGifts()

    if #self.data.rewards <= 0 or not self.data.hasGift then
        self.tran_reward_list.gameObject:SetActive(false)
    else
        local maxCount = 6
        local count = 0
        for i, v in ipairs(self.data.rewards) do
            if count == maxCount then
                break
            end
            local go = GameObject.Instantiate(self.itemPrefab.gameObject)
            go.transform:SetParent(self.tran_reward_list, false)

            local icon = find_component(go, "img_icon", Image)
            local rawImage = find_component(go, "rawImg_icon", RawImage)
            local itemId = v.ItemId
            if ItemId.IsDragon(itemId) then
                icon:SetActive(false)
                rawImage:SetActive(true)
                local spriteName = AppServices.Meta:GetItemIcon(itemId)
                AppServices.ItemIcons:SetDragonIcon(rawImage, spriteName)
            else
                icon:SetActive(true)
                rawImage:SetActive(false)
                icon.sprite = AppServices.ItemIcons:GetSprite(v.ItemId)
            end
            -- icon.transform.localScale = Vector3.one
            find_component(go, "txt_num", Text).text = v.Amount
            go:SetActive(true)
            table.insert(self.gifts, go)
            count = count + 1
        end
        self.tran_reward_list.gameObject:SetActive(true)
    end

    -- self.received:SetActive(#self.data.rewards > 0 and not self.data.hasGift)

    self:SetReadState(self.data:GetReadState())
end

function item:FlyRewards()
    if not self.data.hasGift then
        return
    end
    local count = #self.data.rewards
    if count == 0 then
        return
    end
    for index = 1, count do
        self.data.rewards[index].position = self.gifts[index].transform.position
    end
    local time = 0.5
    AppServices.RewardAnimation.FlyReward(self.data.rewards, nil, 0, 0, time, false, 1, Ease.InCirc)
end

function item:ClearGifts()
    if self.gifts and #self.gifts > 0 then
        self.tran_reward_list:ClearAllChildren()
    end
    self.gifts = {}
end

function item:Dispose()
    if Runtime.CSValid(self.gameObject) then
        self.gameObject:SetActive(false)
    end
    self.data = nil
end
return item
