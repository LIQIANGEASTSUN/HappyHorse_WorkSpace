---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2018/8/7 18:17
---
---@class LoadJob
LoadJob = class(nil, "LoadJob")

function LoadJob.Create(name)
    local schedule = LoadJob.new(name)
    return schedule
end

function LoadJob:ctor(name)
    self.name = name
    self.count = 0
    self.finishCount = 0
    self.callbackList = {}
end
function LoadJob:AddJob(callback)
    self.count = self.count + 1
    table.insert(self.callbackList, callback)
end

function LoadJob:DoJob()
    local function DoOneFinished(name)
        self.finishCount = self.finishCount + 1
        SceneLog:Add(self.name,tostring(name),true)
        if self.count == self.finishCount then
            self:DoFinish()
        end
        console.lj(self.name.." job compelete"..name)
    end
    if #self.callbackList == 0 then
        self:DoFinish()
        return
    end

    for index, callback in ipairs(self.callbackList) do
        SceneLog:Add(self.name,tostring(index),false)
        local result = Runtime.InvokeCbk(callback,function ()
            return DoOneFinished(index)
        end)
        if not result then
            console.error("job计数器执行出现错误，name:"..self.name.." index:"..index)
            return DoOneFinished(index)
        end
    end
end

function LoadJob:AppendFinish(callback)
    self.finishCallback = callback
end
function LoadJob:DoFinish()
    local tempCall = self.finishCallback
    LoadCount:Clear(self.name)
    WaitExtension.InvokeDelay(tempCall)
    --Runtime.InvokeCbk(tempCall)
end

function LoadJob:Destroy()
    self.count = 0
    self.finishCount = 0
    self.callbackList = {}
end
----
LoadCount ={
    jobs = {}
}

function LoadCount:GetJob(name)
   if self.jobs[name] then
        return self.jobs[name]
   end

   local newJob = LoadJob.new(name)
   self.jobs[name] = newJob
   return newJob
end

function LoadCount:Clear(name)
    if not name then
        self.jobs = {}
    elseif name and self.jobs[name] then
        self.jobs[name] = nil
    end

end

SceneLog = {}
function SceneLog:Add(className,loadName,state)
    if RuntimeContext.VERSION_DISTRIBUTE then
        return
    end

    if not self.SceneLoadCounter then
        local mapp = CS.BetaGame.MainApplication
        self.SceneLoadCounter = mapp.s_goEngineRoot:GetComponent(typeof(CS.XEngine.FPSCounter))
        self.logMap = {}
    end

    if not self.logMap[className] then
        self.logMap[className] = {}
    end
    self.logMap[className][loadName] = state

    --显示log
    do
        local contentList = {}
        for calssName, info in pairs(self.logMap) do
            for loadName, value in pairs(info) do
                if not value then
                    table.insert(contentList, calssName.."加载："..tostring(loadName).." 状态:进行中")
                end
            end
        end

        self.SceneLoadCounter:SetContents(contentList)
    end
end

function SceneLog:CancelAll()
    if RuntimeContext.VERSION_DISTRIBUTE then
        return
    end
    self.logMap = {}
    if self.SceneLoadCounter then
        self.SceneLoadCounter:SetContents({})
    end
end