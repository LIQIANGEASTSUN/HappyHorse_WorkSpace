---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2018/8/9 21:27
---
---@class AutoBuildLogic
local AutoBuildLogic = class(nil, "AutoBuildLogic")

function AutoBuildLogic:ctor(map)
    ---@type MapManager
    self.map = map
end

--- 初始化一个建筑, 自动计算是否存在可摆放空间
--- 如果存在就将位置信息写入建筑并返回true, 否则只返回false
--- 合理性:
---     1.此建筑需要在地图上不与其他建筑重叠
---     2.建筑位置不可超出地图范围
---@param data AgentData
---@return boolean true:找到一个可以摆放的位置  false:没有摆放空间
function AutoBuildLogic:FindWith(data)
    -- local areaSize = data.meta.size_x * data.meta.size_z

    local ts = CS.System.DateTime.Now --@DEL
    --尝试遍历所有区域
    for _, region in pairs(self.map.regionManager.regions) do
        if region:IsLinked() then
            if self:PackingAlgorithm(data, region.bounds.xMin, region.bounds.zMin, region.bounds.xMax, region.bounds.zMax) then
                console.hjs(nil, "PackingAlgorithm => find a place in scene:", region.id)
                return true
            end
        end
    end
    console.hjs(nil, "FindWith => find no place! Cost:", (CS.System.DateTime.Now - ts).TotalMilliseconds, "ms") --@DEL
end

---@param data AgentData
function AutoBuildLogic:PackingAlgorithm(data, xMin, zMin, xMax, zMax)
    local size_x, size_z = data:GetSize()
    for z = zMin, zMax - size_z + 1 do
        for x = xMin, xMax - size_x + 1 do
            --bprint('*********Check in area:', x, ' ', z, ' ', data.size_x, ' ', data.size_z, '*********') --@DEL
            local ret, arg1 = self:BuildTest(x, z, size_x, size_z)
            --bprint('************Check end:', ret, '************') --@DEL
            if ret then
                data:SetFlip(arg1)
                data:SetMin(x, z)
                --bprint('================================= Found At:', x, ' ', z, '=================================') --@DEL
                return true
            else
                x = arg1
            end
        end
    end
    --console.hjs(nil, '================================= Not Find =================================')
end

---传入一个指定位置和大小的范围
---返回这个范围测试结果,返回结果代表意思如下:
---true,flip (放置测试成功, 是否需要旋转放置)
---false,x,z (放置测试失败, 障碍物位置(x, z)[可根据障碍物位置决定下次判断需要跳过的点])
function AutoBuildLogic:BuildTest(xMin, zMin, xSize, zSize)
    local function ValidTest(xm, zm, xs, zs)
        --bprint('\t check part', xm, ' ', zm, ' ', xs, ' ', zs) --@DEL
        for x = xm, xm + xs - 1 do
            for z = zm, zm + zs - 1 do
                local buildable = self.map:CanBuildOnGrid(x, z)

                if not buildable then
                    return false, x, z
                end
            end
        end
        return true
    end

    local sMin = math.min(xSize, zSize)
    local ret, x, z = ValidTest(xMin, zMin, sMin, sMin)
    if not ret then
        return false, x, z
    end

    ---下面的逻辑千万不要临时起意变更
    if xSize > zSize then
        --bprint('\t x > z') --@DEL
        ret, x, z = ValidTest(xMin + sMin, zMin, xSize - sMin, sMin)
        if ret then
            return true, false
        end
        if ValidTest(xMin, zMin + sMin, sMin, xSize - sMin) then
            return true, true
        end
        return false, x, z
    elseif zSize > xSize then
        --bprint('\t x < z') --@DEL
        ret, x, z = ValidTest(xMin, zMin + sMin, sMin, zSize - sMin)
        if ret then
            return true, false
        end
        if ValidTest(xMin + sMin, zMin, zSize - sMin, sMin) then
            return true, true
        end
        return false, x, z
    else
        --bprint('\t x == z') --@DEL
        return true, false
    end
end

function AutoBuildLogic:Draw()
end

return AutoBuildLogic
