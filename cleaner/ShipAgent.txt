---@type FsmStateMachine
local FsmStateMachine = require "Fsm.StateMachine.FsmStateMachine"
local ShipStateInfo = require "Fsm.Ship.ShipStateInfo"

---@type NormalAgent
local NormalAgent = require("MainCity.Agent.NormalAgent")
---@class ShipAgent:NormalAgent Ì½Ë÷´¬
local ShipAgent = class(NormalAgent, "ShipAgent")
local UE = CS.UnityEngine
local BoxCollider = typeof(UE.BoxCollider)

-- Ì½Ë÷´¬ Agent
function ShipAgent:ctor(id, data)
    ---@type ShipAgentData
    self.data = data
    self.fsmStateMachine = nil
end

function ShipAgent:InitRender(callback)
    NormalAgent.InitRender(self, callback)
    self.render:AddInstantiateListener(
        function(result)
            self:RenderInstantiateCallBack(result)
        end
    )
end

function ShipAgent:RenderInstantiateCallBack(result)
    if not result then
        return
    end

    self:CreateState()
    self:RegiseterListeners()
end

function ShipAgent:CreateState()
    local states = {
        ShipStateInfo.ShipStateType.Homeland,
        -- ShipStateInfo.ShipStateType.Move_To_Island,
        -- ShipStateInfo.ShipStateType.Move_To_Homeland,
        ShipStateInfo.ShipStateType.Island
    }

    for _, v in pairs(states) do
        local path = ShipStateInfo.States[v]
        self:AddState(path)
    end

    local state, currentIslandId = self.data:GetShipState()
    local data = { islandId = currentIslandId }
    self:ChangeState(state, data)
end

function ShipAgent:AddState(path)
    if not self.fsmStateMachine then
        -- ´´½¨×´Ì¬»ú
        self.fsmStateMachine = FsmStateMachine.new()
            -- ×´Ì¬ÇÐ»»»Øµ÷
        self.fsmStateMachine:SetChangeStateEvent(function(newState, transitionData)
            self:ChangeStateCallBack(newState, transitionData)
        end)
    end

    local state = include(path)
    local boatState = state.new(self)
    self.fsmStateMachine:Add(boatState)
end

function ShipAgent:ChangeState(toStateType, transitionData)
    self.fsmStateMachine:ChangeState(toStateType, transitionData)
end

function ShipAgent:ChangeStateCallBack(newState, transitionData)
    local islandId = 0
    if transitionData and transitionData.islandId then
        islandId = transitionData.islandId
    end
    self.data:SetShipState(newState, islandId)
end

function ShipAgent:RegiseterListeners()
    local gameObject = self:GetGameObject()
    local colliders = gameObject:GetComponent(BoxCollider)
    colliders.isTrigger = true
    local detector = gameObject:GetOrAddComponent(typeof(CS.ColliderDetector))
    detector:SetTriggerListener(
        function(collider)
            self:TriggerEnter(collider.gameObject)
        end
    )
end

function ShipAgent:GetCurrentState()
    local currentState = self.fsmStateMachine:GetCurrentState()
    local state, _ = self.data:GetShipState()
    if currentState:GetStateType() ~= state then
        currentState = self.fsmStateMachine:ChangeState(state, nil)
    end
    return currentState
end

-- ´¦Àíµã»÷
function ShipAgent:ProcessClick()
    local currentState = self:GetCurrentState()
    currentState:ProcessClick()
end

function ShipAgent:TriggerEnter(gameObject)
    if gameObject.name == "Player" then
        local currentState = self:GetCurrentState()
        currentState:TriggerPlayer()
    end
end

function ShipAgent:GetWorldPosition()
    return NormalAgent.GetWorldPosition(self)
end

function ShipAgent:GetHomelandPortPos()
    return self.data:GetHomelandPortPos()
end

function ShipAgent:GetIslandData(islandId)
    local islandGroup = self.data:GetIslandGroup()
    return islandGroup[islandId]
end

return ShipAgent