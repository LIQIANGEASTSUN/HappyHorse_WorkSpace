// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PropertySvrRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PropertySvrRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PropertyRpcAddExpAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropertyRpcAddExpAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PropertyRpcAddExpReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropertyRpcAddExpReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PropertySvrRpc_2eproto() {
  protobuf_AddDesc_PropertySvrRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PropertySvrRpc.proto");
  GOOGLE_CHECK(file != NULL);
  PropertyRpcAddExpAsk_descriptor_ = file->message_type(0);
  static const int PropertyRpcAddExpAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyRpcAddExpAsk, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyRpcAddExpAsk, exp_),
  };
  PropertyRpcAddExpAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PropertyRpcAddExpAsk_descriptor_,
      PropertyRpcAddExpAsk::default_instance_,
      PropertyRpcAddExpAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyRpcAddExpAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyRpcAddExpAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PropertyRpcAddExpAsk));
  PropertyRpcAddExpReply_descriptor_ = file->message_type(1);
  static const int PropertyRpcAddExpReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyRpcAddExpReply, result_),
  };
  PropertyRpcAddExpReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PropertyRpcAddExpReply_descriptor_,
      PropertyRpcAddExpReply::default_instance_,
      PropertyRpcAddExpReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyRpcAddExpReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyRpcAddExpReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PropertyRpcAddExpReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PropertySvrRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PropertyRpcAddExpAsk_descriptor_, &PropertyRpcAddExpAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PropertyRpcAddExpReply_descriptor_, &PropertyRpcAddExpReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PropertySvrRpc_2eproto() {
  delete PropertyRpcAddExpAsk::default_instance_;
  delete PropertyRpcAddExpAsk_reflection_;
  delete PropertyRpcAddExpReply::default_instance_;
  delete PropertyRpcAddExpReply_reflection_;
}

void protobuf_AddDesc_PropertySvrRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024PropertySvrRpc.proto\032\022PublicStruct.pro"
    "to\"7\n\024PropertyRpcAddExpAsk\022\017\n\003Uid\030\001 \001(\022:"
    "\002-1\022\016\n\003Exp\030\002 \001(\021:\0010\"/\n\026PropertyRpcAddExp"
    "Reply\022\025\n\006Result\030\001 \001(\021:\005-9999", 148);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PropertySvrRpc.proto", &protobuf_RegisterTypes);
  PropertyRpcAddExpAsk::default_instance_ = new PropertyRpcAddExpAsk();
  PropertyRpcAddExpReply::default_instance_ = new PropertyRpcAddExpReply();
  PropertyRpcAddExpAsk::default_instance_->InitAsDefaultInstance();
  PropertyRpcAddExpReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PropertySvrRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PropertySvrRpc_2eproto {
  StaticDescriptorInitializer_PropertySvrRpc_2eproto() {
    protobuf_AddDesc_PropertySvrRpc_2eproto();
  }
} static_descriptor_initializer_PropertySvrRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PropertyRpcAddExpAsk::kUidFieldNumber;
const int PropertyRpcAddExpAsk::kExpFieldNumber;
#endif  // !_MSC_VER

PropertyRpcAddExpAsk::PropertyRpcAddExpAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PropertyRpcAddExpAsk::InitAsDefaultInstance() {
}

PropertyRpcAddExpAsk::PropertyRpcAddExpAsk(const PropertyRpcAddExpAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PropertyRpcAddExpAsk::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(-1);
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropertyRpcAddExpAsk::~PropertyRpcAddExpAsk() {
  SharedDtor();
}

void PropertyRpcAddExpAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PropertyRpcAddExpAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyRpcAddExpAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropertyRpcAddExpAsk_descriptor_;
}

const PropertyRpcAddExpAsk& PropertyRpcAddExpAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PropertySvrRpc_2eproto();
  return *default_instance_;
}

PropertyRpcAddExpAsk* PropertyRpcAddExpAsk::default_instance_ = NULL;

PropertyRpcAddExpAsk* PropertyRpcAddExpAsk::New() const {
  return new PropertyRpcAddExpAsk;
}

void PropertyRpcAddExpAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(-1);
    exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PropertyRpcAddExpAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 Uid = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Exp;
        break;
      }

      // optional sint32 Exp = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PropertyRpcAddExpAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint64 Uid = 1 [default = -1];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->uid(), output);
  }

  // optional sint32 Exp = 2 [default = 0];
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PropertyRpcAddExpAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint64 Uid = 1 [default = -1];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->uid(), target);
  }

  // optional sint32 Exp = 2 [default = 0];
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PropertyRpcAddExpAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 Uid = 1 [default = -1];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->uid());
    }

    // optional sint32 Exp = 2 [default = 0];
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyRpcAddExpAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PropertyRpcAddExpAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PropertyRpcAddExpAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PropertyRpcAddExpAsk::MergeFrom(const PropertyRpcAddExpAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PropertyRpcAddExpAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyRpcAddExpAsk::CopyFrom(const PropertyRpcAddExpAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyRpcAddExpAsk::IsInitialized() const {

  return true;
}

void PropertyRpcAddExpAsk::Swap(PropertyRpcAddExpAsk* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PropertyRpcAddExpAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropertyRpcAddExpAsk_descriptor_;
  metadata.reflection = PropertyRpcAddExpAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PropertyRpcAddExpReply::kResultFieldNumber;
#endif  // !_MSC_VER

PropertyRpcAddExpReply::PropertyRpcAddExpReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PropertyRpcAddExpReply::InitAsDefaultInstance() {
}

PropertyRpcAddExpReply::PropertyRpcAddExpReply(const PropertyRpcAddExpReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PropertyRpcAddExpReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropertyRpcAddExpReply::~PropertyRpcAddExpReply() {
  SharedDtor();
}

void PropertyRpcAddExpReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PropertyRpcAddExpReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyRpcAddExpReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropertyRpcAddExpReply_descriptor_;
}

const PropertyRpcAddExpReply& PropertyRpcAddExpReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PropertySvrRpc_2eproto();
  return *default_instance_;
}

PropertyRpcAddExpReply* PropertyRpcAddExpReply::default_instance_ = NULL;

PropertyRpcAddExpReply* PropertyRpcAddExpReply::New() const {
  return new PropertyRpcAddExpReply;
}

void PropertyRpcAddExpReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PropertyRpcAddExpReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PropertyRpcAddExpReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PropertyRpcAddExpReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PropertyRpcAddExpReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyRpcAddExpReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PropertyRpcAddExpReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PropertyRpcAddExpReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PropertyRpcAddExpReply::MergeFrom(const PropertyRpcAddExpReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PropertyRpcAddExpReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyRpcAddExpReply::CopyFrom(const PropertyRpcAddExpReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyRpcAddExpReply::IsInitialized() const {

  return true;
}

void PropertyRpcAddExpReply::Swap(PropertyRpcAddExpReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PropertyRpcAddExpReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropertyRpcAddExpReply_descriptor_;
  metadata.reflection = PropertyRpcAddExpReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
