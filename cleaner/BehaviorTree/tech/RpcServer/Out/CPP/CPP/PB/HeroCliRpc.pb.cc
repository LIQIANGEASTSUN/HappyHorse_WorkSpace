// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HeroCliRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "HeroCliRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* HeroRpcSyncAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroRpcSyncAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroRpcSyncReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroRpcSyncReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroRpcActiveAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroRpcActiveAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroRpcActiveReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroRpcActiveReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_HeroCliRpc_2eproto() {
  protobuf_AddDesc_HeroCliRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "HeroCliRpc.proto");
  GOOGLE_CHECK(file != NULL);
  HeroRpcSyncAsk_descriptor_ = file->message_type(0);
  static const int HeroRpcSyncAsk_offsets_[1] = {
  };
  HeroRpcSyncAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroRpcSyncAsk_descriptor_,
      HeroRpcSyncAsk::default_instance_,
      HeroRpcSyncAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroRpcSyncAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroRpcSyncAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroRpcSyncAsk));
  HeroRpcSyncReply_descriptor_ = file->message_type(1);
  static const int HeroRpcSyncReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroRpcSyncReply, result_),
  };
  HeroRpcSyncReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroRpcSyncReply_descriptor_,
      HeroRpcSyncReply::default_instance_,
      HeroRpcSyncReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroRpcSyncReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroRpcSyncReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroRpcSyncReply));
  HeroRpcActiveAsk_descriptor_ = file->message_type(2);
  static const int HeroRpcActiveAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroRpcActiveAsk, heroid_),
  };
  HeroRpcActiveAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroRpcActiveAsk_descriptor_,
      HeroRpcActiveAsk::default_instance_,
      HeroRpcActiveAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroRpcActiveAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroRpcActiveAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroRpcActiveAsk));
  HeroRpcActiveReply_descriptor_ = file->message_type(3);
  static const int HeroRpcActiveReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroRpcActiveReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroRpcActiveReply, heroid_),
  };
  HeroRpcActiveReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroRpcActiveReply_descriptor_,
      HeroRpcActiveReply::default_instance_,
      HeroRpcActiveReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroRpcActiveReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroRpcActiveReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroRpcActiveReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_HeroCliRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroRpcSyncAsk_descriptor_, &HeroRpcSyncAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroRpcSyncReply_descriptor_, &HeroRpcSyncReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroRpcActiveAsk_descriptor_, &HeroRpcActiveAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroRpcActiveReply_descriptor_, &HeroRpcActiveReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_HeroCliRpc_2eproto() {
  delete HeroRpcSyncAsk::default_instance_;
  delete HeroRpcSyncAsk_reflection_;
  delete HeroRpcSyncReply::default_instance_;
  delete HeroRpcSyncReply_reflection_;
  delete HeroRpcActiveAsk::default_instance_;
  delete HeroRpcActiveAsk_reflection_;
  delete HeroRpcActiveReply::default_instance_;
  delete HeroRpcActiveReply_reflection_;
}

void protobuf_AddDesc_HeroCliRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020HeroCliRpc.proto\032\022PublicStruct.proto\"\020"
    "\n\016HeroRpcSyncAsk\")\n\020HeroRpcSyncReply\022\025\n\006"
    "Result\030\001 \001(\021:\005-9999\"&\n\020HeroRpcActiveAsk\022"
    "\022\n\006HeroID\030\001 \001(\021:\002-1\"\?\n\022HeroRpcActiveRepl"
    "y\022\025\n\006Result\030\001 \001(\021:\005-9999\022\022\n\006HeroID\030\002 \001(\021"
    ":\002-1", 204);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "HeroCliRpc.proto", &protobuf_RegisterTypes);
  HeroRpcSyncAsk::default_instance_ = new HeroRpcSyncAsk();
  HeroRpcSyncReply::default_instance_ = new HeroRpcSyncReply();
  HeroRpcActiveAsk::default_instance_ = new HeroRpcActiveAsk();
  HeroRpcActiveReply::default_instance_ = new HeroRpcActiveReply();
  HeroRpcSyncAsk::default_instance_->InitAsDefaultInstance();
  HeroRpcSyncReply::default_instance_->InitAsDefaultInstance();
  HeroRpcActiveAsk::default_instance_->InitAsDefaultInstance();
  HeroRpcActiveReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_HeroCliRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_HeroCliRpc_2eproto {
  StaticDescriptorInitializer_HeroCliRpc_2eproto() {
    protobuf_AddDesc_HeroCliRpc_2eproto();
  }
} static_descriptor_initializer_HeroCliRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

HeroRpcSyncAsk::HeroRpcSyncAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroRpcSyncAsk::InitAsDefaultInstance() {
}

HeroRpcSyncAsk::HeroRpcSyncAsk(const HeroRpcSyncAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroRpcSyncAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroRpcSyncAsk::~HeroRpcSyncAsk() {
  SharedDtor();
}

void HeroRpcSyncAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroRpcSyncAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroRpcSyncAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroRpcSyncAsk_descriptor_;
}

const HeroRpcSyncAsk& HeroRpcSyncAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HeroCliRpc_2eproto();
  return *default_instance_;
}

HeroRpcSyncAsk* HeroRpcSyncAsk::default_instance_ = NULL;

HeroRpcSyncAsk* HeroRpcSyncAsk::New() const {
  return new HeroRpcSyncAsk;
}

void HeroRpcSyncAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroRpcSyncAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void HeroRpcSyncAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroRpcSyncAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroRpcSyncAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroRpcSyncAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroRpcSyncAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroRpcSyncAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroRpcSyncAsk::MergeFrom(const HeroRpcSyncAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroRpcSyncAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroRpcSyncAsk::CopyFrom(const HeroRpcSyncAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroRpcSyncAsk::IsInitialized() const {

  return true;
}

void HeroRpcSyncAsk::Swap(HeroRpcSyncAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroRpcSyncAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroRpcSyncAsk_descriptor_;
  metadata.reflection = HeroRpcSyncAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroRpcSyncReply::kResultFieldNumber;
#endif  // !_MSC_VER

HeroRpcSyncReply::HeroRpcSyncReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroRpcSyncReply::InitAsDefaultInstance() {
}

HeroRpcSyncReply::HeroRpcSyncReply(const HeroRpcSyncReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroRpcSyncReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroRpcSyncReply::~HeroRpcSyncReply() {
  SharedDtor();
}

void HeroRpcSyncReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroRpcSyncReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroRpcSyncReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroRpcSyncReply_descriptor_;
}

const HeroRpcSyncReply& HeroRpcSyncReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HeroCliRpc_2eproto();
  return *default_instance_;
}

HeroRpcSyncReply* HeroRpcSyncReply::default_instance_ = NULL;

HeroRpcSyncReply* HeroRpcSyncReply::New() const {
  return new HeroRpcSyncReply;
}

void HeroRpcSyncReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroRpcSyncReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroRpcSyncReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroRpcSyncReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroRpcSyncReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroRpcSyncReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroRpcSyncReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroRpcSyncReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroRpcSyncReply::MergeFrom(const HeroRpcSyncReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroRpcSyncReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroRpcSyncReply::CopyFrom(const HeroRpcSyncReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroRpcSyncReply::IsInitialized() const {

  return true;
}

void HeroRpcSyncReply::Swap(HeroRpcSyncReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroRpcSyncReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroRpcSyncReply_descriptor_;
  metadata.reflection = HeroRpcSyncReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroRpcActiveAsk::kHeroIDFieldNumber;
#endif  // !_MSC_VER

HeroRpcActiveAsk::HeroRpcActiveAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroRpcActiveAsk::InitAsDefaultInstance() {
}

HeroRpcActiveAsk::HeroRpcActiveAsk(const HeroRpcActiveAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroRpcActiveAsk::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroRpcActiveAsk::~HeroRpcActiveAsk() {
  SharedDtor();
}

void HeroRpcActiveAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroRpcActiveAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroRpcActiveAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroRpcActiveAsk_descriptor_;
}

const HeroRpcActiveAsk& HeroRpcActiveAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HeroCliRpc_2eproto();
  return *default_instance_;
}

HeroRpcActiveAsk* HeroRpcActiveAsk::default_instance_ = NULL;

HeroRpcActiveAsk* HeroRpcActiveAsk::New() const {
  return new HeroRpcActiveAsk;
}

void HeroRpcActiveAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroRpcActiveAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 HeroID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroRpcActiveAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 HeroID = 1 [default = -1];
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroRpcActiveAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 HeroID = 1 [default = -1];
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroRpcActiveAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 HeroID = 1 [default = -1];
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroRpcActiveAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroRpcActiveAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroRpcActiveAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroRpcActiveAsk::MergeFrom(const HeroRpcActiveAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroRpcActiveAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroRpcActiveAsk::CopyFrom(const HeroRpcActiveAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroRpcActiveAsk::IsInitialized() const {

  return true;
}

void HeroRpcActiveAsk::Swap(HeroRpcActiveAsk* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroRpcActiveAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroRpcActiveAsk_descriptor_;
  metadata.reflection = HeroRpcActiveAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroRpcActiveReply::kResultFieldNumber;
const int HeroRpcActiveReply::kHeroIDFieldNumber;
#endif  // !_MSC_VER

HeroRpcActiveReply::HeroRpcActiveReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroRpcActiveReply::InitAsDefaultInstance() {
}

HeroRpcActiveReply::HeroRpcActiveReply(const HeroRpcActiveReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroRpcActiveReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  heroid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroRpcActiveReply::~HeroRpcActiveReply() {
  SharedDtor();
}

void HeroRpcActiveReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroRpcActiveReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroRpcActiveReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroRpcActiveReply_descriptor_;
}

const HeroRpcActiveReply& HeroRpcActiveReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HeroCliRpc_2eproto();
  return *default_instance_;
}

HeroRpcActiveReply* HeroRpcActiveReply::default_instance_ = NULL;

HeroRpcActiveReply* HeroRpcActiveReply::New() const {
  return new HeroRpcActiveReply;
}

void HeroRpcActiveReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    heroid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroRpcActiveReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HeroID;
        break;
      }

      // optional sint32 HeroID = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HeroID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroRpcActiveReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint32 HeroID = 2 [default = -1];
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroRpcActiveReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint32 HeroID = 2 [default = -1];
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroRpcActiveReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 HeroID = 2 [default = -1];
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroRpcActiveReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroRpcActiveReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroRpcActiveReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroRpcActiveReply::MergeFrom(const HeroRpcActiveReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroRpcActiveReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroRpcActiveReply::CopyFrom(const HeroRpcActiveReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroRpcActiveReply::IsInitialized() const {

  return true;
}

void HeroRpcActiveReply::Swap(HeroRpcActiveReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroRpcActiveReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroRpcActiveReply_descriptor_;
  metadata.reflection = HeroRpcActiveReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
