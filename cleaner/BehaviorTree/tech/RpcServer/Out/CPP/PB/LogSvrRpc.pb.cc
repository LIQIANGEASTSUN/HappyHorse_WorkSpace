// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LogSvrRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LogSvrRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* LogRpcSaveNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogRpcSaveNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_LogSvrRpc_2eproto() {
  protobuf_AddDesc_LogSvrRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "LogSvrRpc.proto");
  GOOGLE_CHECK(file != NULL);
  LogRpcSaveNotify_descriptor_ = file->message_type(0);
  static const int LogRpcSaveNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRpcSaveNotify, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRpcSaveNotify, logid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRpcSaveNotify, logseq_),
  };
  LogRpcSaveNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogRpcSaveNotify_descriptor_,
      LogRpcSaveNotify::default_instance_,
      LogRpcSaveNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRpcSaveNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRpcSaveNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogRpcSaveNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_LogSvrRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogRpcSaveNotify_descriptor_, &LogRpcSaveNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_LogSvrRpc_2eproto() {
  delete LogRpcSaveNotify::default_instance_;
  delete LogRpcSaveNotify_reflection_;
}

void protobuf_AddDesc_LogSvrRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017LogSvrRpc.proto\032\022PublicStruct.proto\"J\n"
    "\020LogRpcSaveNotify\022\017\n\007Content\030\001 \001(\t\022\021\n\005Lo"
    "gId\030\002 \001(\022:\002-1\022\022\n\006LogSeq\030\003 \001(\021:\002-1", 113);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LogSvrRpc.proto", &protobuf_RegisterTypes);
  LogRpcSaveNotify::default_instance_ = new LogRpcSaveNotify();
  LogRpcSaveNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LogSvrRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LogSvrRpc_2eproto {
  StaticDescriptorInitializer_LogSvrRpc_2eproto() {
    protobuf_AddDesc_LogSvrRpc_2eproto();
  }
} static_descriptor_initializer_LogSvrRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LogRpcSaveNotify::kContentFieldNumber;
const int LogRpcSaveNotify::kLogIdFieldNumber;
const int LogRpcSaveNotify::kLogSeqFieldNumber;
#endif  // !_MSC_VER

LogRpcSaveNotify::LogRpcSaveNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogRpcSaveNotify::InitAsDefaultInstance() {
}

LogRpcSaveNotify::LogRpcSaveNotify(const LogRpcSaveNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogRpcSaveNotify::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logid_ = GOOGLE_LONGLONG(-1);
  logseq_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogRpcSaveNotify::~LogRpcSaveNotify() {
  SharedDtor();
}

void LogRpcSaveNotify::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void LogRpcSaveNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogRpcSaveNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogRpcSaveNotify_descriptor_;
}

const LogRpcSaveNotify& LogRpcSaveNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogSvrRpc_2eproto();
  return *default_instance_;
}

LogRpcSaveNotify* LogRpcSaveNotify::default_instance_ = NULL;

LogRpcSaveNotify* LogRpcSaveNotify::New() const {
  return new LogRpcSaveNotify;
}

void LogRpcSaveNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    logid_ = GOOGLE_LONGLONG(-1);
    logseq_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogRpcSaveNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_LogId;
        break;
      }

      // optional sint64 LogId = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LogId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &logid_)));
          set_has_logid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_LogSeq;
        break;
      }

      // optional sint32 LogSeq = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LogSeq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &logseq_)));
          set_has_logseq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogRpcSaveNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->content(), output);
  }

  // optional sint64 LogId = 2 [default = -1];
  if (has_logid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->logid(), output);
  }

  // optional sint32 LogSeq = 3 [default = -1];
  if (has_logseq()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->logseq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogRpcSaveNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  // optional sint64 LogId = 2 [default = -1];
  if (has_logid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->logid(), target);
  }

  // optional sint32 LogSeq = 3 [default = -1];
  if (has_logseq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->logseq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogRpcSaveNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional sint64 LogId = 2 [default = -1];
    if (has_logid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->logid());
    }

    // optional sint32 LogSeq = 3 [default = -1];
    if (has_logseq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->logseq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogRpcSaveNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogRpcSaveNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogRpcSaveNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogRpcSaveNotify::MergeFrom(const LogRpcSaveNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
    if (from.has_logseq()) {
      set_logseq(from.logseq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogRpcSaveNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogRpcSaveNotify::CopyFrom(const LogRpcSaveNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRpcSaveNotify::IsInitialized() const {

  return true;
}

void LogRpcSaveNotify::Swap(LogRpcSaveNotify* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(logid_, other->logid_);
    std::swap(logseq_, other->logseq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogRpcSaveNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogRpcSaveNotify_descriptor_;
  metadata.reflection = LogRpcSaveNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
