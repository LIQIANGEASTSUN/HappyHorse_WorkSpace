// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TrajectoryCliRpc.proto

#ifndef PROTOBUF_TrajectoryCliRpc_2eproto__INCLUDED
#define PROTOBUF_TrajectoryCliRpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "PublicStruct.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TrajectoryCliRpc_2eproto();
void protobuf_AssignDesc_TrajectoryCliRpc_2eproto();
void protobuf_ShutdownFile_TrajectoryCliRpc_2eproto();

class TrajectoryTrajectory;
class TrajectoryBulletGroup;
class TrajectoryBullet;
class TrajectoryBulletTrajectory;
class TrajectoryRpcSyncNotify;
class TrajectoryBulletChild;

// ===================================================================

class TrajectoryTrajectory : public ::google::protobuf::Message {
 public:
  TrajectoryTrajectory();
  virtual ~TrajectoryTrajectory();

  TrajectoryTrajectory(const TrajectoryTrajectory& from);

  inline TrajectoryTrajectory& operator=(const TrajectoryTrajectory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrajectoryTrajectory& default_instance();

  void Swap(TrajectoryTrajectory* other);

  // implements Message ----------------------------------------------

  TrajectoryTrajectory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrajectoryTrajectory& from);
  void MergeFrom(const TrajectoryTrajectory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Id = 1 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional sint32 TrajectoryType = 26 [default = 1];
  inline bool has_trajectorytype() const;
  inline void clear_trajectorytype();
  static const int kTrajectoryTypeFieldNumber = 26;
  inline ::google::protobuf::int32 trajectorytype() const;
  inline void set_trajectorytype(::google::protobuf::int32 value);

  // optional sint32 TrackType = 22 [default = 0];
  inline bool has_tracktype() const;
  inline void clear_tracktype();
  static const int kTrackTypeFieldNumber = 22;
  inline ::google::protobuf::int32 tracktype() const;
  inline void set_tracktype(::google::protobuf::int32 value);

  // optional sint32 RayCount = 3 [default = -1];
  inline bool has_raycount() const;
  inline void clear_raycount();
  static const int kRayCountFieldNumber = 3;
  inline ::google::protobuf::int32 raycount() const;
  inline void set_raycount(::google::protobuf::int32 value);

  // optional sint32 CircleCount = 5 [default = -1];
  inline bool has_circlecount() const;
  inline void clear_circlecount();
  static const int kCircleCountFieldNumber = 5;
  inline ::google::protobuf::int32 circlecount() const;
  inline void set_circlecount(::google::protobuf::int32 value);

  // repeated sint32 CircleBulletCountList = 6;
  inline int circlebulletcountlist_size() const;
  inline void clear_circlebulletcountlist();
  static const int kCircleBulletCountListFieldNumber = 6;
  inline ::google::protobuf::int32 circlebulletcountlist(int index) const;
  inline void set_circlebulletcountlist(int index, ::google::protobuf::int32 value);
  inline void add_circlebulletcountlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      circlebulletcountlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_circlebulletcountlist();

  // repeated float CircleAngleList = 7;
  inline int circleanglelist_size() const;
  inline void clear_circleanglelist();
  static const int kCircleAngleListFieldNumber = 7;
  inline float circleanglelist(int index) const;
  inline void set_circleanglelist(int index, float value);
  inline void add_circleanglelist(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      circleanglelist() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_circleanglelist();

  // repeated float CircleNookList = 21;
  inline int circlenooklist_size() const;
  inline void clear_circlenooklist();
  static const int kCircleNookListFieldNumber = 21;
  inline float circlenooklist(int index) const;
  inline void set_circlenooklist(int index, float value);
  inline void add_circlenooklist(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      circlenooklist() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_circlenooklist();

  // optional float ForwardDistance = 8 [default = -1];
  inline bool has_forwarddistance() const;
  inline void clear_forwarddistance();
  static const int kForwardDistanceFieldNumber = 8;
  inline float forwarddistance() const;
  inline void set_forwarddistance(float value);

  // optional float CheckHeight = 27 [default = -1];
  inline bool has_checkheight() const;
  inline void clear_checkheight();
  static const int kCheckHeightFieldNumber = 27;
  inline float checkheight() const;
  inline void set_checkheight(float value);

  // optional float Random = 9 [default = -1];
  inline bool has_random() const;
  inline void clear_random();
  static const int kRandomFieldNumber = 9;
  inline float random() const;
  inline void set_random(float value);

  // optional float HorizontalOffsetAngle = 10 [default = -1];
  inline bool has_horizontaloffsetangle() const;
  inline void clear_horizontaloffsetangle();
  static const int kHorizontalOffsetAngleFieldNumber = 10;
  inline float horizontaloffsetangle() const;
  inline void set_horizontaloffsetangle(float value);

  // optional bool SpaceWorld = 23 [default = false];
  inline bool has_spaceworld() const;
  inline void clear_spaceworld();
  static const int kSpaceWorldFieldNumber = 23;
  inline bool spaceworld() const;
  inline void set_spaceworld(bool value);

  // optional float VerticalOffsetAngle = 11 [default = -1];
  inline bool has_verticaloffsetangle() const;
  inline void clear_verticaloffsetangle();
  static const int kVerticalOffsetAngleFieldNumber = 11;
  inline float verticaloffsetangle() const;
  inline void set_verticaloffsetangle(float value);

  // optional float TriggerAngleOfMovingOffset = 29 [default = -1];
  inline bool has_triggerangleofmovingoffset() const;
  inline void clear_triggerangleofmovingoffset();
  static const int kTriggerAngleOfMovingOffsetFieldNumber = 29;
  inline float triggerangleofmovingoffset() const;
  inline void set_triggerangleofmovingoffset(float value);

  // optional float MovingOffsetAngle = 30 [default = -1];
  inline bool has_movingoffsetangle() const;
  inline void clear_movingoffsetangle();
  static const int kMovingOffsetAngleFieldNumber = 30;
  inline float movingoffsetangle() const;
  inline void set_movingoffsetangle(float value);

  // optional float ScatteringRadius = 25 [default = 0];
  inline bool has_scatteringradius() const;
  inline void clear_scatteringradius();
  static const int kScatteringRadiusFieldNumber = 25;
  inline float scatteringradius() const;
  inline void set_scatteringradius(float value);

  // optional float Expand = 14 [default = 1];
  inline bool has_expand() const;
  inline void clear_expand();
  static const int kExpandFieldNumber = 14;
  inline float expand() const;
  inline void set_expand(float value);

  // optional bool ScatteringSync = 24 [default = true];
  inline bool has_scatteringsync() const;
  inline void clear_scatteringsync();
  static const int kScatteringSyncFieldNumber = 24;
  inline bool scatteringsync() const;
  inline void set_scatteringsync(bool value);

  // optional float ScatterBaseHorizontalOffset = 31 [default = -1];
  inline bool has_scatterbasehorizontaloffset() const;
  inline void clear_scatterbasehorizontaloffset();
  static const int kScatterBaseHorizontalOffsetFieldNumber = 31;
  inline float scatterbasehorizontaloffset() const;
  inline void set_scatterbasehorizontaloffset(float value);

  // optional float ScatterBaseVerticalOffset = 33 [default = -1];
  inline bool has_scatterbaseverticaloffset() const;
  inline void clear_scatterbaseverticaloffset();
  static const int kScatterBaseVerticalOffsetFieldNumber = 33;
  inline float scatterbaseverticaloffset() const;
  inline void set_scatterbaseverticaloffset(float value);

  // optional float ScatterHorizontalOffsetOnGround = 34 [default = -1];
  inline bool has_scatterhorizontaloffsetonground() const;
  inline void clear_scatterhorizontaloffsetonground();
  static const int kScatterHorizontalOffsetOnGroundFieldNumber = 34;
  inline float scatterhorizontaloffsetonground() const;
  inline void set_scatterhorizontaloffsetonground(float value);

  // optional float ScatterVerticalOffsetOnGround = 35 [default = -1];
  inline bool has_scatterverticaloffsetonground() const;
  inline void clear_scatterverticaloffsetonground();
  static const int kScatterVerticalOffsetOnGroundFieldNumber = 35;
  inline float scatterverticaloffsetonground() const;
  inline void set_scatterverticaloffsetonground(float value);

  // optional float ScatterHorizontalOffsetOnAir = 36 [default = -1];
  inline bool has_scatterhorizontaloffsetonair() const;
  inline void clear_scatterhorizontaloffsetonair();
  static const int kScatterHorizontalOffsetOnAirFieldNumber = 36;
  inline float scatterhorizontaloffsetonair() const;
  inline void set_scatterhorizontaloffsetonair(float value);

  // optional float ScatterVerticalOffsetOnAir = 37 [default = -1];
  inline bool has_scatterverticaloffsetonair() const;
  inline void clear_scatterverticaloffsetonair();
  static const int kScatterVerticalOffsetOnAirFieldNumber = 37;
  inline float scatterverticaloffsetonair() const;
  inline void set_scatterverticaloffsetonair(float value);

  // optional float ScatterBaseOdds = 38 [default = 0];
  inline bool has_scatterbaseodds() const;
  inline void clear_scatterbaseodds();
  static const int kScatterBaseOddsFieldNumber = 38;
  inline float scatterbaseodds() const;
  inline void set_scatterbaseodds(float value);

  // optional float ScatterAdditionalOdds = 39 [default = 0];
  inline bool has_scatteradditionalodds() const;
  inline void clear_scatteradditionalodds();
  static const int kScatterAdditionalOddsFieldNumber = 39;
  inline float scatteradditionalodds() const;
  inline void set_scatteradditionalodds(float value);

  // optional sint32 ScatterNeedBulletCountWhenAddOdds = 40 [default = 0];
  inline bool has_scatterneedbulletcountwhenaddodds() const;
  inline void clear_scatterneedbulletcountwhenaddodds();
  static const int kScatterNeedBulletCountWhenAddOddsFieldNumber = 40;
  inline ::google::protobuf::int32 scatterneedbulletcountwhenaddodds() const;
  inline void set_scatterneedbulletcountwhenaddodds(::google::protobuf::int32 value);

  // optional float ScatterMaxOddsOnGround = 41 [default = 0];
  inline bool has_scattermaxoddsonground() const;
  inline void clear_scattermaxoddsonground();
  static const int kScatterMaxOddsOnGroundFieldNumber = 41;
  inline float scattermaxoddsonground() const;
  inline void set_scattermaxoddsonground(float value);

  // optional float ScatterMaxOddsOnAir = 42 [default = 0];
  inline bool has_scattermaxoddsonair() const;
  inline void clear_scattermaxoddsonair();
  static const int kScatterMaxOddsOnAirFieldNumber = 42;
  inline float scattermaxoddsonair() const;
  inline void set_scattermaxoddsonair(float value);

  // optional float ScatterReduceOddsPerFrame = 43 [default = 0];
  inline bool has_scatterreduceoddsperframe() const;
  inline void clear_scatterreduceoddsperframe();
  static const int kScatterReduceOddsPerFrameFieldNumber = 43;
  inline float scatterreduceoddsperframe() const;
  inline void set_scatterreduceoddsperframe(float value);

  // repeated .TrajectoryBulletGroup BulletGroupList = 18;
  inline int bulletgrouplist_size() const;
  inline void clear_bulletgrouplist();
  static const int kBulletGroupListFieldNumber = 18;
  inline const ::TrajectoryBulletGroup& bulletgrouplist(int index) const;
  inline ::TrajectoryBulletGroup* mutable_bulletgrouplist(int index);
  inline ::TrajectoryBulletGroup* add_bulletgrouplist();
  inline const ::google::protobuf::RepeatedPtrField< ::TrajectoryBulletGroup >&
      bulletgrouplist() const;
  inline ::google::protobuf::RepeatedPtrField< ::TrajectoryBulletGroup >*
      mutable_bulletgrouplist();

  // optional sint32 ParentBulletId = 20 [default = -1];
  inline bool has_parentbulletid() const;
  inline void clear_parentbulletid();
  static const int kParentBulletIdFieldNumber = 20;
  inline ::google::protobuf::int32 parentbulletid() const;
  inline void set_parentbulletid(::google::protobuf::int32 value);

  // repeated sint32 BulletIdList = 28;
  inline int bulletidlist_size() const;
  inline void clear_bulletidlist();
  static const int kBulletIdListFieldNumber = 28;
  inline ::google::protobuf::int32 bulletidlist(int index) const;
  inline void set_bulletidlist(int index, ::google::protobuf::int32 value);
  inline void add_bulletidlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      bulletidlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_bulletidlist();

  // repeated float AreaHorizontalAngleList = 44;
  inline int areahorizontalanglelist_size() const;
  inline void clear_areahorizontalanglelist();
  static const int kAreaHorizontalAngleListFieldNumber = 44;
  inline float areahorizontalanglelist(int index) const;
  inline void set_areahorizontalanglelist(int index, float value);
  inline void add_areahorizontalanglelist(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      areahorizontalanglelist() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_areahorizontalanglelist();

  // repeated float AreaVerticalAngleList = 45;
  inline int areaverticalanglelist_size() const;
  inline void clear_areaverticalanglelist();
  static const int kAreaVerticalAngleListFieldNumber = 45;
  inline float areaverticalanglelist(int index) const;
  inline void set_areaverticalanglelist(int index, float value);
  inline void add_areaverticalanglelist(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      areaverticalanglelist() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_areaverticalanglelist();

  // repeated float AreaOddsList = 46;
  inline int areaoddslist_size() const;
  inline void clear_areaoddslist();
  static const int kAreaOddsListFieldNumber = 46;
  inline float areaoddslist(int index) const;
  inline void set_areaoddslist(int index, float value);
  inline void add_areaoddslist(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      areaoddslist() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_areaoddslist();

  // @@protoc_insertion_point(class_scope:TrajectoryTrajectory)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_trajectorytype();
  inline void clear_has_trajectorytype();
  inline void set_has_tracktype();
  inline void clear_has_tracktype();
  inline void set_has_raycount();
  inline void clear_has_raycount();
  inline void set_has_circlecount();
  inline void clear_has_circlecount();
  inline void set_has_forwarddistance();
  inline void clear_has_forwarddistance();
  inline void set_has_checkheight();
  inline void clear_has_checkheight();
  inline void set_has_random();
  inline void clear_has_random();
  inline void set_has_horizontaloffsetangle();
  inline void clear_has_horizontaloffsetangle();
  inline void set_has_spaceworld();
  inline void clear_has_spaceworld();
  inline void set_has_verticaloffsetangle();
  inline void clear_has_verticaloffsetangle();
  inline void set_has_triggerangleofmovingoffset();
  inline void clear_has_triggerangleofmovingoffset();
  inline void set_has_movingoffsetangle();
  inline void clear_has_movingoffsetangle();
  inline void set_has_scatteringradius();
  inline void clear_has_scatteringradius();
  inline void set_has_expand();
  inline void clear_has_expand();
  inline void set_has_scatteringsync();
  inline void clear_has_scatteringsync();
  inline void set_has_scatterbasehorizontaloffset();
  inline void clear_has_scatterbasehorizontaloffset();
  inline void set_has_scatterbaseverticaloffset();
  inline void clear_has_scatterbaseverticaloffset();
  inline void set_has_scatterhorizontaloffsetonground();
  inline void clear_has_scatterhorizontaloffsetonground();
  inline void set_has_scatterverticaloffsetonground();
  inline void clear_has_scatterverticaloffsetonground();
  inline void set_has_scatterhorizontaloffsetonair();
  inline void clear_has_scatterhorizontaloffsetonair();
  inline void set_has_scatterverticaloffsetonair();
  inline void clear_has_scatterverticaloffsetonair();
  inline void set_has_scatterbaseodds();
  inline void clear_has_scatterbaseodds();
  inline void set_has_scatteradditionalodds();
  inline void clear_has_scatteradditionalodds();
  inline void set_has_scatterneedbulletcountwhenaddodds();
  inline void clear_has_scatterneedbulletcountwhenaddodds();
  inline void set_has_scattermaxoddsonground();
  inline void clear_has_scattermaxoddsonground();
  inline void set_has_scattermaxoddsonair();
  inline void clear_has_scattermaxoddsonair();
  inline void set_has_scatterreduceoddsperframe();
  inline void clear_has_scatterreduceoddsperframe();
  inline void set_has_parentbulletid();
  inline void clear_has_parentbulletid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 trajectorytype_;
  ::google::protobuf::int32 tracktype_;
  ::google::protobuf::int32 raycount_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > circlebulletcountlist_;
  ::google::protobuf::RepeatedField< float > circleanglelist_;
  ::google::protobuf::int32 circlecount_;
  float forwarddistance_;
  ::google::protobuf::RepeatedField< float > circlenooklist_;
  float checkheight_;
  float random_;
  float horizontaloffsetangle_;
  float verticaloffsetangle_;
  float triggerangleofmovingoffset_;
  bool spaceworld_;
  bool scatteringsync_;
  float movingoffsetangle_;
  float scatteringradius_;
  float expand_;
  float scatterbasehorizontaloffset_;
  float scatterbaseverticaloffset_;
  float scatterhorizontaloffsetonground_;
  float scatterverticaloffsetonground_;
  float scatterhorizontaloffsetonair_;
  float scatterverticaloffsetonair_;
  float scatterbaseodds_;
  float scatteradditionalodds_;
  ::google::protobuf::int32 scatterneedbulletcountwhenaddodds_;
  float scattermaxoddsonground_;
  float scattermaxoddsonair_;
  ::google::protobuf::RepeatedPtrField< ::TrajectoryBulletGroup > bulletgrouplist_;
  float scatterreduceoddsperframe_;
  ::google::protobuf::int32 parentbulletid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bulletidlist_;
  ::google::protobuf::RepeatedField< float > areahorizontalanglelist_;
  ::google::protobuf::RepeatedField< float > areaverticalanglelist_;
  ::google::protobuf::RepeatedField< float > areaoddslist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(37 + 31) / 32];

  friend void  protobuf_AddDesc_TrajectoryCliRpc_2eproto();
  friend void protobuf_AssignDesc_TrajectoryCliRpc_2eproto();
  friend void protobuf_ShutdownFile_TrajectoryCliRpc_2eproto();

  void InitAsDefaultInstance();
  static TrajectoryTrajectory* default_instance_;
};
// -------------------------------------------------------------------

class TrajectoryBulletGroup : public ::google::protobuf::Message {
 public:
  TrajectoryBulletGroup();
  virtual ~TrajectoryBulletGroup();

  TrajectoryBulletGroup(const TrajectoryBulletGroup& from);

  inline TrajectoryBulletGroup& operator=(const TrajectoryBulletGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrajectoryBulletGroup& default_instance();

  void Swap(TrajectoryBulletGroup* other);

  // implements Message ----------------------------------------------

  TrajectoryBulletGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrajectoryBulletGroup& from);
  void MergeFrom(const TrajectoryBulletGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 GroupId = 1 [default = -1];
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);

  // optional sint32 BulletShotType = 2 [default = 0];
  inline bool has_bulletshottype() const;
  inline void clear_bulletshottype();
  static const int kBulletShotTypeFieldNumber = 2;
  inline ::google::protobuf::int32 bulletshottype() const;
  inline void set_bulletshottype(::google::protobuf::int32 value);

  // optional sint32 ShotTimeProgression = 3 [default = 0];
  inline bool has_shottimeprogression() const;
  inline void clear_shottimeprogression();
  static const int kShotTimeProgressionFieldNumber = 3;
  inline ::google::protobuf::int32 shottimeprogression() const;
  inline void set_shottimeprogression(::google::protobuf::int32 value);

  // optional float ShotTimeProgressionValue = 4 [default = -1];
  inline bool has_shottimeprogressionvalue() const;
  inline void clear_shottimeprogressionvalue();
  static const int kShotTimeProgressionValueFieldNumber = 4;
  inline float shottimeprogressionvalue() const;
  inline void set_shottimeprogressionvalue(float value);

  // optional sint32 VelocityCorrection = 5 [default = 0];
  inline bool has_velocitycorrection() const;
  inline void clear_velocitycorrection();
  static const int kVelocityCorrectionFieldNumber = 5;
  inline ::google::protobuf::int32 velocitycorrection() const;
  inline void set_velocitycorrection(::google::protobuf::int32 value);

  // optional float VelocityCorrectionValue = 6 [default = -1];
  inline bool has_velocitycorrectionvalue() const;
  inline void clear_velocitycorrectionvalue();
  static const int kVelocityCorrectionValueFieldNumber = 6;
  inline float velocitycorrectionvalue() const;
  inline void set_velocitycorrectionvalue(float value);

  // optional sint32 BulletCount = 7 [default = -1];
  inline bool has_bulletcount() const;
  inline void clear_bulletcount();
  static const int kBulletCountFieldNumber = 7;
  inline ::google::protobuf::int32 bulletcount() const;
  inline void set_bulletcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TrajectoryBulletGroup)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_bulletshottype();
  inline void clear_has_bulletshottype();
  inline void set_has_shottimeprogression();
  inline void clear_has_shottimeprogression();
  inline void set_has_shottimeprogressionvalue();
  inline void clear_has_shottimeprogressionvalue();
  inline void set_has_velocitycorrection();
  inline void clear_has_velocitycorrection();
  inline void set_has_velocitycorrectionvalue();
  inline void clear_has_velocitycorrectionvalue();
  inline void set_has_bulletcount();
  inline void clear_has_bulletcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 groupid_;
  ::google::protobuf::int32 bulletshottype_;
  ::google::protobuf::int32 shottimeprogression_;
  float shottimeprogressionvalue_;
  ::google::protobuf::int32 velocitycorrection_;
  float velocitycorrectionvalue_;
  ::google::protobuf::int32 bulletcount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_TrajectoryCliRpc_2eproto();
  friend void protobuf_AssignDesc_TrajectoryCliRpc_2eproto();
  friend void protobuf_ShutdownFile_TrajectoryCliRpc_2eproto();

  void InitAsDefaultInstance();
  static TrajectoryBulletGroup* default_instance_;
};
// -------------------------------------------------------------------

class TrajectoryBullet : public ::google::protobuf::Message {
 public:
  TrajectoryBullet();
  virtual ~TrajectoryBullet();

  TrajectoryBullet(const TrajectoryBullet& from);

  inline TrajectoryBullet& operator=(const TrajectoryBullet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrajectoryBullet& default_instance();

  void Swap(TrajectoryBullet* other);

  // implements Message ----------------------------------------------

  TrajectoryBullet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrajectoryBullet& from);
  void MergeFrom(const TrajectoryBullet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 SortIndex = 56 [default = -1];
  inline bool has_sortindex() const;
  inline void clear_sortindex();
  static const int kSortIndexFieldNumber = 56;
  inline ::google::protobuf::int32 sortindex() const;
  inline void set_sortindex(::google::protobuf::int32 value);

  // optional sint32 BulletId = 1 [default = -1];
  inline bool has_bulletid() const;
  inline void clear_bulletid();
  static const int kBulletIdFieldNumber = 1;
  inline ::google::protobuf::int32 bulletid() const;
  inline void set_bulletid(::google::protobuf::int32 value);

  // optional sint32 TrajectorId = 90 [default = -1];
  inline bool has_trajectorid() const;
  inline void clear_trajectorid();
  static const int kTrajectorIdFieldNumber = 90;
  inline ::google::protobuf::int32 trajectorid() const;
  inline void set_trajectorid(::google::protobuf::int32 value);

  // optional sint32 GroupId = 2 [default = -1];
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIdFieldNumber = 2;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);

  // optional sint32 TrackType = 64 [default = -1];
  inline bool has_tracktype() const;
  inline void clear_tracktype();
  static const int kTrackTypeFieldNumber = 64;
  inline ::google::protobuf::int32 tracktype() const;
  inline void set_tracktype(::google::protobuf::int32 value);

  // optional sint32 ShotTime = 51 [default = -1];
  inline bool has_shottime() const;
  inline void clear_shottime();
  static const int kShotTimeFieldNumber = 51;
  inline ::google::protobuf::int32 shottime() const;
  inline void set_shottime(::google::protobuf::int32 value);

  // optional float RandomRadius = 10 [default = -1];
  inline bool has_randomradius() const;
  inline void clear_randomradius();
  static const int kRandomRadiusFieldNumber = 10;
  inline float randomradius() const;
  inline void set_randomradius(float value);

  // optional string BulletModelName = 11;
  inline bool has_bulletmodelname() const;
  inline void clear_bulletmodelname();
  static const int kBulletModelNameFieldNumber = 11;
  inline const ::std::string& bulletmodelname() const;
  inline void set_bulletmodelname(const ::std::string& value);
  inline void set_bulletmodelname(const char* value);
  inline void set_bulletmodelname(const char* value, size_t size);
  inline ::std::string* mutable_bulletmodelname();
  inline ::std::string* release_bulletmodelname();
  inline void set_allocated_bulletmodelname(::std::string* bulletmodelname);

  // optional bool IsMucus = 93 [default = false];
  inline bool has_ismucus() const;
  inline void clear_ismucus();
  static const int kIsMucusFieldNumber = 93;
  inline bool ismucus() const;
  inline void set_ismucus(bool value);

  // optional float BulletScaleMin = 71 [default = 1];
  inline bool has_bulletscalemin() const;
  inline void clear_bulletscalemin();
  static const int kBulletScaleMinFieldNumber = 71;
  inline float bulletscalemin() const;
  inline void set_bulletscalemin(float value);

  // optional float BulletScaleMax = 72 [default = 1];
  inline bool has_bulletscalemax() const;
  inline void clear_bulletscalemax();
  static const int kBulletScaleMaxFieldNumber = 72;
  inline float bulletscalemax() const;
  inline void set_bulletscalemax(float value);

  // optional bool VelocityRandom = 12 [default = false];
  inline bool has_velocityrandom() const;
  inline void clear_velocityrandom();
  static const int kVelocityRandomFieldNumber = 12;
  inline bool velocityrandom() const;
  inline void set_velocityrandom(bool value);

  // optional float VelocityMin = 13 [default = -1];
  inline bool has_velocitymin() const;
  inline void clear_velocitymin();
  static const int kVelocityMinFieldNumber = 13;
  inline float velocitymin() const;
  inline void set_velocitymin(float value);

  // optional float VelocityMax = 14 [default = -1];
  inline bool has_velocitymax() const;
  inline void clear_velocitymax();
  static const int kVelocityMaxFieldNumber = 14;
  inline float velocitymax() const;
  inline void set_velocitymax(float value);

  // optional sint32 CrosshairTime = 113 [default = -1];
  inline bool has_crosshairtime() const;
  inline void clear_crosshairtime();
  static const int kCrosshairTimeFieldNumber = 113;
  inline ::google::protobuf::int32 crosshairtime() const;
  inline void set_crosshairtime(::google::protobuf::int32 value);

  // optional float Mass = 15 [default = -1];
  inline bool has_mass() const;
  inline void clear_mass();
  static const int kMassFieldNumber = 15;
  inline float mass() const;
  inline void set_mass(float value);

  // optional sint32 RotateTime = 91 [default = -1];
  inline bool has_rotatetime() const;
  inline void clear_rotatetime();
  static const int kRotateTimeFieldNumber = 91;
  inline ::google::protobuf::int32 rotatetime() const;
  inline void set_rotatetime(::google::protobuf::int32 value);

  // optional sint32 LineMoveTime = 53 [default = -1];
  inline bool has_linemovetime() const;
  inline void clear_linemovetime();
  static const int kLineMoveTimeFieldNumber = 53;
  inline ::google::protobuf::int32 linemovetime() const;
  inline void set_linemovetime(::google::protobuf::int32 value);

  // optional float LineCoefficient1 = 54 [default = -1];
  inline bool has_linecoefficient1() const;
  inline void clear_linecoefficient1();
  static const int kLineCoefficient1FieldNumber = 54;
  inline float linecoefficient1() const;
  inline void set_linecoefficient1(float value);

  // optional float LineCoefficient2 = 55 [default = -1];
  inline bool has_linecoefficient2() const;
  inline void clear_linecoefficient2();
  static const int kLineCoefficient2FieldNumber = 55;
  inline float linecoefficient2() const;
  inline void set_linecoefficient2(float value);

  // optional float VelocityCoefficient = 16 [default = -1];
  inline bool has_velocitycoefficient() const;
  inline void clear_velocitycoefficient();
  static const int kVelocityCoefficientFieldNumber = 16;
  inline float velocitycoefficient() const;
  inline void set_velocitycoefficient(float value);

  // optional sint32 BulletType = 17 [default = 0];
  inline bool has_bullettype() const;
  inline void clear_bullettype();
  static const int kBulletTypeFieldNumber = 17;
  inline ::google::protobuf::int32 bullettype() const;
  inline void set_bullettype(::google::protobuf::int32 value);

  // optional sint32 CollisionSprite = 73 [default = 0];
  inline bool has_collisionsprite() const;
  inline void clear_collisionsprite();
  static const int kCollisionSpriteFieldNumber = 73;
  inline ::google::protobuf::int32 collisionsprite() const;
  inline void set_collisionsprite(::google::protobuf::int32 value);

  // optional sint32 CollisionScene = 75 [default = 0];
  inline bool has_collisionscene() const;
  inline void clear_collisionscene();
  static const int kCollisionSceneFieldNumber = 75;
  inline ::google::protobuf::int32 collisionscene() const;
  inline void set_collisionscene(::google::protobuf::int32 value);

  // optional float RayDamageFirst = 20 [default = -1];
  inline bool has_raydamagefirst() const;
  inline void clear_raydamagefirst();
  static const int kRayDamageFirstFieldNumber = 20;
  inline float raydamagefirst() const;
  inline void set_raydamagefirst(float value);

  // optional sint32 RayTimeCycle = 21 [default = -1];
  inline bool has_raytimecycle() const;
  inline void clear_raytimecycle();
  static const int kRayTimeCycleFieldNumber = 21;
  inline ::google::protobuf::int32 raytimecycle() const;
  inline void set_raytimecycle(::google::protobuf::int32 value);

  // optional float RayDamageRadius = 67 [default = -1];
  inline bool has_raydamageradius() const;
  inline void clear_raydamageradius();
  static const int kRayDamageRadiusFieldNumber = 67;
  inline float raydamageradius() const;
  inline void set_raydamageradius(float value);

  // optional float RayDamageDistance = 98 [default = -1];
  inline bool has_raydamagedistance() const;
  inline void clear_raydamagedistance();
  static const int kRayDamageDistanceFieldNumber = 98;
  inline float raydamagedistance() const;
  inline void set_raydamagedistance(float value);

  // optional sint32 CallNpcId = 22 [default = -1];
  inline bool has_callnpcid() const;
  inline void clear_callnpcid();
  static const int kCallNpcIdFieldNumber = 22;
  inline ::google::protobuf::int32 callnpcid() const;
  inline void set_callnpcid(::google::protobuf::int32 value);

  // optional bool IsCollision = 84 [default = true];
  inline bool has_iscollision() const;
  inline void clear_iscollision();
  static const int kIsCollisionFieldNumber = 84;
  inline bool iscollision() const;
  inline void set_iscollision(bool value);

  // optional float WaterSprinkHeight = 110 [default = -1];
  inline bool has_watersprinkheight() const;
  inline void clear_watersprinkheight();
  static const int kWaterSprinkHeightFieldNumber = 110;
  inline float watersprinkheight() const;
  inline void set_watersprinkheight(float value);

  // optional float WaterSprinkAngle = 111 [default = -1];
  inline bool has_watersprinkangle() const;
  inline void clear_watersprinkangle();
  static const int kWaterSprinkAngleFieldNumber = 111;
  inline float watersprinkangle() const;
  inline void set_watersprinkangle(float value);

  // optional float WaterSprinkAddPercentagePerFrame = 112 [default = -1];
  inline bool has_watersprinkaddpercentageperframe() const;
  inline void clear_watersprinkaddpercentageperframe();
  static const int kWaterSprinkAddPercentagePerFrameFieldNumber = 112;
  inline float watersprinkaddpercentageperframe() const;
  inline void set_watersprinkaddpercentageperframe(float value);

  // optional sint32 LifeTime = 37 [default = -1];
  inline bool has_lifetime() const;
  inline void clear_lifetime();
  static const int kLifeTimeFieldNumber = 37;
  inline ::google::protobuf::int32 lifetime() const;
  inline void set_lifetime(::google::protobuf::int32 value);

  // optional bool TakeDamage = 39 [default = false];
  inline bool has_takedamage() const;
  inline void clear_takedamage();
  static const int kTakeDamageFieldNumber = 39;
  inline bool takedamage() const;
  inline void set_takedamage(bool value);

  // optional sint32 BulletDamageRangeType = 40 [default = 0];
  inline bool has_bulletdamagerangetype() const;
  inline void clear_bulletdamagerangetype();
  static const int kBulletDamageRangeTypeFieldNumber = 40;
  inline ::google::protobuf::int32 bulletdamagerangetype() const;
  inline void set_bulletdamagerangetype(::google::protobuf::int32 value);

  // optional float BulletDamageRangeRadius = 41 [default = -1];
  inline bool has_bulletdamagerangeradius() const;
  inline void clear_bulletdamagerangeradius();
  static const int kBulletDamageRangeRadiusFieldNumber = 41;
  inline float bulletdamagerangeradius() const;
  inline void set_bulletdamagerangeradius(float value);

  // optional float BulletDamageAngle = 42 [default = -1];
  inline bool has_bulletdamageangle() const;
  inline void clear_bulletdamageangle();
  static const int kBulletDamageAngleFieldNumber = 42;
  inline float bulletdamageangle() const;
  inline void set_bulletdamageangle(float value);

  // optional float VerticalLineBegin = 57 [default = -1];
  inline bool has_verticallinebegin() const;
  inline void clear_verticallinebegin();
  static const int kVerticalLineBeginFieldNumber = 57;
  inline float verticallinebegin() const;
  inline void set_verticallinebegin(float value);

  // optional float VerticalLineEnd = 58 [default = -1];
  inline bool has_verticallineend() const;
  inline void clear_verticallineend();
  static const int kVerticalLineEndFieldNumber = 58;
  inline float verticallineend() const;
  inline void set_verticallineend(float value);

  // optional float HammerAxleRadius = 85 [default = -1];
  inline bool has_hammeraxleradius() const;
  inline void clear_hammeraxleradius();
  static const int kHammerAxleRadiusFieldNumber = 85;
  inline float hammeraxleradius() const;
  inline void set_hammeraxleradius(float value);

  // optional float BoundRadius = 86 [default = -1];
  inline bool has_boundradius() const;
  inline void clear_boundradius();
  static const int kBoundRadiusFieldNumber = 86;
  inline float boundradius() const;
  inline void set_boundradius(float value);

  // optional .Vector3PB HammerOffset = 87;
  inline bool has_hammeroffset() const;
  inline void clear_hammeroffset();
  static const int kHammerOffsetFieldNumber = 87;
  inline const ::Vector3PB& hammeroffset() const;
  inline ::Vector3PB* mutable_hammeroffset();
  inline ::Vector3PB* release_hammeroffset();
  inline void set_allocated_hammeroffset(::Vector3PB* hammeroffset);

  // optional float HammerSectorAngle = 88 [default = -1];
  inline bool has_hammersectorangle() const;
  inline void clear_hammersectorangle();
  static const int kHammerSectorAngleFieldNumber = 88;
  inline float hammersectorangle() const;
  inline void set_hammersectorangle(float value);

  // optional float HammerAngleSpeed = 89 [default = -1];
  inline bool has_hammeranglespeed() const;
  inline void clear_hammeranglespeed();
  static const int kHammerAngleSpeedFieldNumber = 89;
  inline float hammeranglespeed() const;
  inline void set_hammeranglespeed(float value);

  // optional float SprayGroundAngle = 99 [default = 1];
  inline bool has_spraygroundangle() const;
  inline void clear_spraygroundangle();
  static const int kSprayGroundAngleFieldNumber = 99;
  inline float spraygroundangle() const;
  inline void set_spraygroundangle(float value);

  // optional sint32 SGGreateShit = 100 [default = 1];
  inline bool has_sggreateshit() const;
  inline void clear_sggreateshit();
  static const int kSGGreateShitFieldNumber = 100;
  inline ::google::protobuf::int32 sggreateshit() const;
  inline void set_sggreateshit(::google::protobuf::int32 value);

  // repeated sint32 SGGreateShitList = 102;
  inline int sggreateshitlist_size() const;
  inline void clear_sggreateshitlist();
  static const int kSGGreateShitListFieldNumber = 102;
  inline ::google::protobuf::int32 sggreateshitlist(int index) const;
  inline void set_sggreateshitlist(int index, ::google::protobuf::int32 value);
  inline void add_sggreateshitlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      sggreateshitlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_sggreateshitlist();

  // optional float SGGreateScaleMin = 104 [default = 1];
  inline bool has_sggreatescalemin() const;
  inline void clear_sggreatescalemin();
  static const int kSGGreateScaleMinFieldNumber = 104;
  inline float sggreatescalemin() const;
  inline void set_sggreatescalemin(float value);

  // optional float SGGreateScaleMax = 105 [default = 1];
  inline bool has_sggreatescalemax() const;
  inline void clear_sggreatescalemax();
  static const int kSGGreateScaleMaxFieldNumber = 105;
  inline float sggreatescalemax() const;
  inline void set_sggreatescalemax(float value);

  // optional string HGGreateEffect = 106;
  inline bool has_hggreateeffect() const;
  inline void clear_hggreateeffect();
  static const int kHGGreateEffectFieldNumber = 106;
  inline const ::std::string& hggreateeffect() const;
  inline void set_hggreateeffect(const ::std::string& value);
  inline void set_hggreateeffect(const char* value);
  inline void set_hggreateeffect(const char* value, size_t size);
  inline ::std::string* mutable_hggreateeffect();
  inline ::std::string* release_hggreateeffect();
  inline void set_allocated_hggreateeffect(::std::string* hggreateeffect);

  // optional sint32 SGLessShit = 101 [default = 1];
  inline bool has_sglessshit() const;
  inline void clear_sglessshit();
  static const int kSGLessShitFieldNumber = 101;
  inline ::google::protobuf::int32 sglessshit() const;
  inline void set_sglessshit(::google::protobuf::int32 value);

  // repeated sint32 SGLessShitList = 103;
  inline int sglessshitlist_size() const;
  inline void clear_sglessshitlist();
  static const int kSGLessShitListFieldNumber = 103;
  inline ::google::protobuf::int32 sglessshitlist(int index) const;
  inline void set_sglessshitlist(int index, ::google::protobuf::int32 value);
  inline void add_sglessshitlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      sglessshitlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_sglessshitlist();

  // optional float SGLessScaleMin = 107 [default = 1];
  inline bool has_sglessscalemin() const;
  inline void clear_sglessscalemin();
  static const int kSGLessScaleMinFieldNumber = 107;
  inline float sglessscalemin() const;
  inline void set_sglessscalemin(float value);

  // optional float SGLessScaleMax = 108 [default = 1];
  inline bool has_sglessscalemax() const;
  inline void clear_sglessscalemax();
  static const int kSGLessScaleMaxFieldNumber = 108;
  inline float sglessscalemax() const;
  inline void set_sglessscalemax(float value);

  // optional string HGLessEffect = 109;
  inline bool has_hglesseffect() const;
  inline void clear_hglesseffect();
  static const int kHGLessEffectFieldNumber = 109;
  inline const ::std::string& hglesseffect() const;
  inline void set_hglesseffect(const ::std::string& value);
  inline void set_hglesseffect(const char* value);
  inline void set_hglesseffect(const char* value, size_t size);
  inline ::std::string* mutable_hglesseffect();
  inline ::std::string* release_hglesseffect();
  inline void set_allocated_hglesseffect(::std::string* hglesseffect);

  // optional sint32 SprayWallShit = 82 [default = 1];
  inline bool has_spraywallshit() const;
  inline void clear_spraywallshit();
  static const int kSprayWallShitFieldNumber = 82;
  inline ::google::protobuf::int32 spraywallshit() const;
  inline void set_spraywallshit(::google::protobuf::int32 value);

  // optional float SprayWallScaleMin = 47 [default = 1];
  inline bool has_spraywallscalemin() const;
  inline void clear_spraywallscalemin();
  static const int kSprayWallScaleMinFieldNumber = 47;
  inline float spraywallscalemin() const;
  inline void set_spraywallscalemin(float value);

  // optional float SprayWallScaleMax = 48 [default = 1];
  inline bool has_spraywallscalemax() const;
  inline void clear_spraywallscalemax();
  static const int kSprayWallScaleMaxFieldNumber = 48;
  inline float spraywallscalemax() const;
  inline void set_spraywallscalemax(float value);

  // optional string HitSprayWallEffect = 94;
  inline bool has_hitspraywalleffect() const;
  inline void clear_hitspraywalleffect();
  static const int kHitSprayWallEffectFieldNumber = 94;
  inline const ::std::string& hitspraywalleffect() const;
  inline void set_hitspraywalleffect(const ::std::string& value);
  inline void set_hitspraywalleffect(const char* value);
  inline void set_hitspraywalleffect(const char* value, size_t size);
  inline ::std::string* mutable_hitspraywalleffect();
  inline ::std::string* release_hitspraywalleffect();
  inline void set_allocated_hitspraywalleffect(::std::string* hitspraywalleffect);

  // optional string HitNotSprayWallEffect = 95;
  inline bool has_hitnotspraywalleffect() const;
  inline void clear_hitnotspraywalleffect();
  static const int kHitNotSprayWallEffectFieldNumber = 95;
  inline const ::std::string& hitnotspraywalleffect() const;
  inline void set_hitnotspraywalleffect(const ::std::string& value);
  inline void set_hitnotspraywalleffect(const char* value);
  inline void set_hitnotspraywalleffect(const char* value, size_t size);
  inline ::std::string* mutable_hitnotspraywalleffect();
  inline ::std::string* release_hitnotspraywalleffect();
  inline void set_allocated_hitnotspraywalleffect(::std::string* hitnotspraywalleffect);

  // optional string HitSpriteEffect = 97;
  inline bool has_hitspriteeffect() const;
  inline void clear_hitspriteeffect();
  static const int kHitSpriteEffectFieldNumber = 97;
  inline const ::std::string& hitspriteeffect() const;
  inline void set_hitspriteeffect(const ::std::string& value);
  inline void set_hitspriteeffect(const char* value);
  inline void set_hitspriteeffect(const char* value, size_t size);
  inline ::std::string* mutable_hitspriteeffect();
  inline ::std::string* release_hitspriteeffect();
  inline void set_allocated_hitspriteeffect(::std::string* hitspriteeffect);

  // optional sint32 CreateChildTime = 68 [default = -1];
  inline bool has_createchildtime() const;
  inline void clear_createchildtime();
  static const int kCreateChildTimeFieldNumber = 68;
  inline ::google::protobuf::int32 createchildtime() const;
  inline void set_createchildtime(::google::protobuf::int32 value);

  // repeated .TrajectoryBulletChild ChildArr = 52;
  inline int childarr_size() const;
  inline void clear_childarr();
  static const int kChildArrFieldNumber = 52;
  inline const ::TrajectoryBulletChild& childarr(int index) const;
  inline ::TrajectoryBulletChild* mutable_childarr(int index);
  inline ::TrajectoryBulletChild* add_childarr();
  inline const ::google::protobuf::RepeatedPtrField< ::TrajectoryBulletChild >&
      childarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::TrajectoryBulletChild >*
      mutable_childarr();

  // optional bool ModelRotate = 59 [default = false];
  inline bool has_modelrotate() const;
  inline void clear_modelrotate();
  static const int kModelRotateFieldNumber = 59;
  inline bool modelrotate() const;
  inline void set_modelrotate(bool value);

  // optional float RotateX = 60 [default = 0];
  inline bool has_rotatex() const;
  inline void clear_rotatex();
  static const int kRotateXFieldNumber = 60;
  inline float rotatex() const;
  inline void set_rotatex(float value);

  // optional float RotateY = 61 [default = 0];
  inline bool has_rotatey() const;
  inline void clear_rotatey();
  static const int kRotateYFieldNumber = 61;
  inline float rotatey() const;
  inline void set_rotatey(float value);

  // optional float RotateZ = 62 [default = 0];
  inline bool has_rotatez() const;
  inline void clear_rotatez();
  static const int kRotateZFieldNumber = 62;
  inline float rotatez() const;
  inline void set_rotatez(float value);

  // optional float RotateSpeed = 63 [default = 0];
  inline bool has_rotatespeed() const;
  inline void clear_rotatespeed();
  static const int kRotateSpeedFieldNumber = 63;
  inline float rotatespeed() const;
  inline void set_rotatespeed(float value);

  // optional bool Clockwise = 83 [default = false];
  inline bool has_clockwise() const;
  inline void clear_clockwise();
  static const int kClockwiseFieldNumber = 83;
  inline bool clockwise() const;
  inline void set_clockwise(bool value);

  // optional bool RotateMoveForward = 66 [default = false];
  inline bool has_rotatemoveforward() const;
  inline void clear_rotatemoveforward();
  static const int kRotateMoveForwardFieldNumber = 66;
  inline bool rotatemoveforward() const;
  inline void set_rotatemoveforward(bool value);

  // optional float HAngle = 69 [default = 0];
  inline bool has_hangle() const;
  inline void clear_hangle();
  static const int kHAngleFieldNumber = 69;
  inline float hangle() const;
  inline void set_hangle(float value);

  // optional float VAngle = 70 [default = 0];
  inline bool has_vangle() const;
  inline void clear_vangle();
  static const int kVAngleFieldNumber = 70;
  inline float vangle() const;
  inline void set_vangle(float value);

  // optional bool GroundBounce = 76 [default = false];
  inline bool has_groundbounce() const;
  inline void clear_groundbounce();
  static const int kGroundBounceFieldNumber = 76;
  inline bool groundbounce() const;
  inline void set_groundbounce(bool value);

  // optional bool WallBounce = 77 [default = false];
  inline bool has_wallbounce() const;
  inline void clear_wallbounce();
  static const int kWallBounceFieldNumber = 77;
  inline bool wallbounce() const;
  inline void set_wallbounce(bool value);

  // optional float DampBounce = 78 [default = -1];
  inline bool has_dampbounce() const;
  inline void clear_dampbounce();
  static const int kDampBounceFieldNumber = 78;
  inline float dampbounce() const;
  inline void set_dampbounce(float value);

  // optional sint32 BounceTimes = 79 [default = -1];
  inline bool has_bouncetimes() const;
  inline void clear_bouncetimes();
  static const int kBounceTimesFieldNumber = 79;
  inline ::google::protobuf::int32 bouncetimes() const;
  inline void set_bouncetimes(::google::protobuf::int32 value);

  // optional float BounceVelocity = 80 [default = -1];
  inline bool has_bouncevelocity() const;
  inline void clear_bouncevelocity();
  static const int kBounceVelocityFieldNumber = 80;
  inline float bouncevelocity() const;
  inline void set_bouncevelocity(float value);

  // @@protoc_insertion_point(class_scope:TrajectoryBullet)
 private:
  inline void set_has_sortindex();
  inline void clear_has_sortindex();
  inline void set_has_bulletid();
  inline void clear_has_bulletid();
  inline void set_has_trajectorid();
  inline void clear_has_trajectorid();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_tracktype();
  inline void clear_has_tracktype();
  inline void set_has_shottime();
  inline void clear_has_shottime();
  inline void set_has_randomradius();
  inline void clear_has_randomradius();
  inline void set_has_bulletmodelname();
  inline void clear_has_bulletmodelname();
  inline void set_has_ismucus();
  inline void clear_has_ismucus();
  inline void set_has_bulletscalemin();
  inline void clear_has_bulletscalemin();
  inline void set_has_bulletscalemax();
  inline void clear_has_bulletscalemax();
  inline void set_has_velocityrandom();
  inline void clear_has_velocityrandom();
  inline void set_has_velocitymin();
  inline void clear_has_velocitymin();
  inline void set_has_velocitymax();
  inline void clear_has_velocitymax();
  inline void set_has_crosshairtime();
  inline void clear_has_crosshairtime();
  inline void set_has_mass();
  inline void clear_has_mass();
  inline void set_has_rotatetime();
  inline void clear_has_rotatetime();
  inline void set_has_linemovetime();
  inline void clear_has_linemovetime();
  inline void set_has_linecoefficient1();
  inline void clear_has_linecoefficient1();
  inline void set_has_linecoefficient2();
  inline void clear_has_linecoefficient2();
  inline void set_has_velocitycoefficient();
  inline void clear_has_velocitycoefficient();
  inline void set_has_bullettype();
  inline void clear_has_bullettype();
  inline void set_has_collisionsprite();
  inline void clear_has_collisionsprite();
  inline void set_has_collisionscene();
  inline void clear_has_collisionscene();
  inline void set_has_raydamagefirst();
  inline void clear_has_raydamagefirst();
  inline void set_has_raytimecycle();
  inline void clear_has_raytimecycle();
  inline void set_has_raydamageradius();
  inline void clear_has_raydamageradius();
  inline void set_has_raydamagedistance();
  inline void clear_has_raydamagedistance();
  inline void set_has_callnpcid();
  inline void clear_has_callnpcid();
  inline void set_has_iscollision();
  inline void clear_has_iscollision();
  inline void set_has_watersprinkheight();
  inline void clear_has_watersprinkheight();
  inline void set_has_watersprinkangle();
  inline void clear_has_watersprinkangle();
  inline void set_has_watersprinkaddpercentageperframe();
  inline void clear_has_watersprinkaddpercentageperframe();
  inline void set_has_lifetime();
  inline void clear_has_lifetime();
  inline void set_has_takedamage();
  inline void clear_has_takedamage();
  inline void set_has_bulletdamagerangetype();
  inline void clear_has_bulletdamagerangetype();
  inline void set_has_bulletdamagerangeradius();
  inline void clear_has_bulletdamagerangeradius();
  inline void set_has_bulletdamageangle();
  inline void clear_has_bulletdamageangle();
  inline void set_has_verticallinebegin();
  inline void clear_has_verticallinebegin();
  inline void set_has_verticallineend();
  inline void clear_has_verticallineend();
  inline void set_has_hammeraxleradius();
  inline void clear_has_hammeraxleradius();
  inline void set_has_boundradius();
  inline void clear_has_boundradius();
  inline void set_has_hammeroffset();
  inline void clear_has_hammeroffset();
  inline void set_has_hammersectorangle();
  inline void clear_has_hammersectorangle();
  inline void set_has_hammeranglespeed();
  inline void clear_has_hammeranglespeed();
  inline void set_has_spraygroundangle();
  inline void clear_has_spraygroundangle();
  inline void set_has_sggreateshit();
  inline void clear_has_sggreateshit();
  inline void set_has_sggreatescalemin();
  inline void clear_has_sggreatescalemin();
  inline void set_has_sggreatescalemax();
  inline void clear_has_sggreatescalemax();
  inline void set_has_hggreateeffect();
  inline void clear_has_hggreateeffect();
  inline void set_has_sglessshit();
  inline void clear_has_sglessshit();
  inline void set_has_sglessscalemin();
  inline void clear_has_sglessscalemin();
  inline void set_has_sglessscalemax();
  inline void clear_has_sglessscalemax();
  inline void set_has_hglesseffect();
  inline void clear_has_hglesseffect();
  inline void set_has_spraywallshit();
  inline void clear_has_spraywallshit();
  inline void set_has_spraywallscalemin();
  inline void clear_has_spraywallscalemin();
  inline void set_has_spraywallscalemax();
  inline void clear_has_spraywallscalemax();
  inline void set_has_hitspraywalleffect();
  inline void clear_has_hitspraywalleffect();
  inline void set_has_hitnotspraywalleffect();
  inline void clear_has_hitnotspraywalleffect();
  inline void set_has_hitspriteeffect();
  inline void clear_has_hitspriteeffect();
  inline void set_has_createchildtime();
  inline void clear_has_createchildtime();
  inline void set_has_modelrotate();
  inline void clear_has_modelrotate();
  inline void set_has_rotatex();
  inline void clear_has_rotatex();
  inline void set_has_rotatey();
  inline void clear_has_rotatey();
  inline void set_has_rotatez();
  inline void clear_has_rotatez();
  inline void set_has_rotatespeed();
  inline void clear_has_rotatespeed();
  inline void set_has_clockwise();
  inline void clear_has_clockwise();
  inline void set_has_rotatemoveforward();
  inline void clear_has_rotatemoveforward();
  inline void set_has_hangle();
  inline void clear_has_hangle();
  inline void set_has_vangle();
  inline void clear_has_vangle();
  inline void set_has_groundbounce();
  inline void clear_has_groundbounce();
  inline void set_has_wallbounce();
  inline void clear_has_wallbounce();
  inline void set_has_dampbounce();
  inline void clear_has_dampbounce();
  inline void set_has_bouncetimes();
  inline void clear_has_bouncetimes();
  inline void set_has_bouncevelocity();
  inline void clear_has_bouncevelocity();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 sortindex_;
  ::google::protobuf::int32 bulletid_;
  ::google::protobuf::int32 trajectorid_;
  ::google::protobuf::int32 groupid_;
  ::google::protobuf::int32 tracktype_;
  ::google::protobuf::int32 shottime_;
  ::std::string* bulletmodelname_;
  float randomradius_;
  float bulletscalemin_;
  float bulletscalemax_;
  float velocitymin_;
  float velocitymax_;
  ::google::protobuf::int32 crosshairtime_;
  float mass_;
  ::google::protobuf::int32 rotatetime_;
  ::google::protobuf::int32 linemovetime_;
  float linecoefficient1_;
  float linecoefficient2_;
  float velocitycoefficient_;
  bool ismucus_;
  bool velocityrandom_;
  bool iscollision_;
  bool takedamage_;
  ::google::protobuf::int32 bullettype_;
  ::google::protobuf::int32 collisionsprite_;
  ::google::protobuf::int32 collisionscene_;
  float raydamagefirst_;
  ::google::protobuf::int32 raytimecycle_;
  float raydamageradius_;
  float raydamagedistance_;
  ::google::protobuf::int32 callnpcid_;
  float watersprinkheight_;
  float watersprinkangle_;
  float watersprinkaddpercentageperframe_;
  ::google::protobuf::int32 lifetime_;
  ::google::protobuf::int32 bulletdamagerangetype_;
  float bulletdamagerangeradius_;
  float bulletdamageangle_;
  float verticallinebegin_;
  float verticallineend_;
  float hammeraxleradius_;
  float boundradius_;
  ::Vector3PB* hammeroffset_;
  float hammersectorangle_;
  float hammeranglespeed_;
  float spraygroundangle_;
  ::google::protobuf::int32 sggreateshit_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > sggreateshitlist_;
  float sggreatescalemin_;
  float sggreatescalemax_;
  ::std::string* hggreateeffect_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > sglessshitlist_;
  ::google::protobuf::int32 sglessshit_;
  float sglessscalemin_;
  ::std::string* hglesseffect_;
  float sglessscalemax_;
  ::google::protobuf::int32 spraywallshit_;
  float spraywallscalemin_;
  float spraywallscalemax_;
  ::std::string* hitspraywalleffect_;
  ::std::string* hitnotspraywalleffect_;
  ::std::string* hitspriteeffect_;
  ::google::protobuf::RepeatedPtrField< ::TrajectoryBulletChild > childarr_;
  ::google::protobuf::int32 createchildtime_;
  float rotatex_;
  float rotatey_;
  float rotatez_;
  float rotatespeed_;
  bool modelrotate_;
  bool clockwise_;
  bool rotatemoveforward_;
  bool groundbounce_;
  float hangle_;
  float vangle_;
  bool wallbounce_;
  float dampbounce_;
  ::google::protobuf::int32 bouncetimes_;
  float bouncevelocity_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(78 + 31) / 32];

  friend void  protobuf_AddDesc_TrajectoryCliRpc_2eproto();
  friend void protobuf_AssignDesc_TrajectoryCliRpc_2eproto();
  friend void protobuf_ShutdownFile_TrajectoryCliRpc_2eproto();

  void InitAsDefaultInstance();
  static TrajectoryBullet* default_instance_;
};
// -------------------------------------------------------------------

class TrajectoryBulletTrajectory : public ::google::protobuf::Message {
 public:
  TrajectoryBulletTrajectory();
  virtual ~TrajectoryBulletTrajectory();

  TrajectoryBulletTrajectory(const TrajectoryBulletTrajectory& from);

  inline TrajectoryBulletTrajectory& operator=(const TrajectoryBulletTrajectory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrajectoryBulletTrajectory& default_instance();

  void Swap(TrajectoryBulletTrajectory* other);

  // implements Message ----------------------------------------------

  TrajectoryBulletTrajectory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrajectoryBulletTrajectory& from);
  void MergeFrom(const TrajectoryBulletTrajectory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 TimeLength = 2 [default = -1];
  inline bool has_timelength() const;
  inline void clear_timelength();
  static const int kTimeLengthFieldNumber = 2;
  inline ::google::protobuf::int32 timelength() const;
  inline void set_timelength(::google::protobuf::int32 value);

  // repeated .TrajectoryTrajectory TrajectoryList = 1;
  inline int trajectorylist_size() const;
  inline void clear_trajectorylist();
  static const int kTrajectoryListFieldNumber = 1;
  inline const ::TrajectoryTrajectory& trajectorylist(int index) const;
  inline ::TrajectoryTrajectory* mutable_trajectorylist(int index);
  inline ::TrajectoryTrajectory* add_trajectorylist();
  inline const ::google::protobuf::RepeatedPtrField< ::TrajectoryTrajectory >&
      trajectorylist() const;
  inline ::google::protobuf::RepeatedPtrField< ::TrajectoryTrajectory >*
      mutable_trajectorylist();

  // optional sint32 Id = 4 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated .TrajectoryBullet BulletList = 5;
  inline int bulletlist_size() const;
  inline void clear_bulletlist();
  static const int kBulletListFieldNumber = 5;
  inline const ::TrajectoryBullet& bulletlist(int index) const;
  inline ::TrajectoryBullet* mutable_bulletlist(int index);
  inline ::TrajectoryBullet* add_bulletlist();
  inline const ::google::protobuf::RepeatedPtrField< ::TrajectoryBullet >&
      bulletlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::TrajectoryBullet >*
      mutable_bulletlist();

  // @@protoc_insertion_point(class_scope:TrajectoryBulletTrajectory)
 private:
  inline void set_has_timelength();
  inline void clear_has_timelength();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::TrajectoryTrajectory > trajectorylist_;
  ::google::protobuf::int32 timelength_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::RepeatedPtrField< ::TrajectoryBullet > bulletlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_TrajectoryCliRpc_2eproto();
  friend void protobuf_AssignDesc_TrajectoryCliRpc_2eproto();
  friend void protobuf_ShutdownFile_TrajectoryCliRpc_2eproto();

  void InitAsDefaultInstance();
  static TrajectoryBulletTrajectory* default_instance_;
};
// -------------------------------------------------------------------

class TrajectoryRpcSyncNotify : public ::google::protobuf::Message {
 public:
  TrajectoryRpcSyncNotify();
  virtual ~TrajectoryRpcSyncNotify();

  TrajectoryRpcSyncNotify(const TrajectoryRpcSyncNotify& from);

  inline TrajectoryRpcSyncNotify& operator=(const TrajectoryRpcSyncNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrajectoryRpcSyncNotify& default_instance();

  void Swap(TrajectoryRpcSyncNotify* other);

  // implements Message ----------------------------------------------

  TrajectoryRpcSyncNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrajectoryRpcSyncNotify& from);
  void MergeFrom(const TrajectoryRpcSyncNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TrajectoryRpcSyncNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_TrajectoryCliRpc_2eproto();
  friend void protobuf_AssignDesc_TrajectoryCliRpc_2eproto();
  friend void protobuf_ShutdownFile_TrajectoryCliRpc_2eproto();

  void InitAsDefaultInstance();
  static TrajectoryRpcSyncNotify* default_instance_;
};
// -------------------------------------------------------------------

class TrajectoryBulletChild : public ::google::protobuf::Message {
 public:
  TrajectoryBulletChild();
  virtual ~TrajectoryBulletChild();

  TrajectoryBulletChild(const TrajectoryBulletChild& from);

  inline TrajectoryBulletChild& operator=(const TrajectoryBulletChild& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrajectoryBulletChild& default_instance();

  void Swap(TrajectoryBulletChild* other);

  // implements Message ----------------------------------------------

  TrajectoryBulletChild* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrajectoryBulletChild& from);
  void MergeFrom(const TrajectoryBulletChild& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Id = 1 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional sint32 ShotTimeType = 2 [default = 0];
  inline bool has_shottimetype() const;
  inline void clear_shottimetype();
  static const int kShotTimeTypeFieldNumber = 2;
  inline ::google::protobuf::int32 shottimetype() const;
  inline void set_shottimetype(::google::protobuf::int32 value);

  // optional bool IsFirst = 3 [default = false];
  inline bool has_isfirst() const;
  inline void clear_isfirst();
  static const int kIsFirstFieldNumber = 3;
  inline bool isfirst() const;
  inline void set_isfirst(bool value);

  // optional sint32 TimeMinInterval = 6 [default = -1];
  inline bool has_timemininterval() const;
  inline void clear_timemininterval();
  static const int kTimeMinIntervalFieldNumber = 6;
  inline ::google::protobuf::int32 timemininterval() const;
  inline void set_timemininterval(::google::protobuf::int32 value);

  // optional sint32 TimeMaxInterval = 5 [default = -1];
  inline bool has_timemaxinterval() const;
  inline void clear_timemaxinterval();
  static const int kTimeMaxIntervalFieldNumber = 5;
  inline ::google::protobuf::int32 timemaxinterval() const;
  inline void set_timemaxinterval(::google::protobuf::int32 value);

  // optional sint32 TimeSeparator = 9 [default = -1];
  inline bool has_timeseparator() const;
  inline void clear_timeseparator();
  static const int kTimeSeparatorFieldNumber = 9;
  inline ::google::protobuf::int32 timeseparator() const;
  inline void set_timeseparator(::google::protobuf::int32 value);

  // optional sint32 TimeGreaterMinInterval = 10 [default = -1];
  inline bool has_timegreatermininterval() const;
  inline void clear_timegreatermininterval();
  static const int kTimeGreaterMinIntervalFieldNumber = 10;
  inline ::google::protobuf::int32 timegreatermininterval() const;
  inline void set_timegreatermininterval(::google::protobuf::int32 value);

  // optional sint32 TimeGreaterMaxInterval = 11 [default = -1];
  inline bool has_timegreatermaxinterval() const;
  inline void clear_timegreatermaxinterval();
  static const int kTimeGreaterMaxIntervalFieldNumber = 11;
  inline ::google::protobuf::int32 timegreatermaxinterval() const;
  inline void set_timegreatermaxinterval(::google::protobuf::int32 value);

  // optional sint32 ChildMaxCount = 8 [default = -1];
  inline bool has_childmaxcount() const;
  inline void clear_childmaxcount();
  static const int kChildMaxCountFieldNumber = 8;
  inline ::google::protobuf::int32 childmaxcount() const;
  inline void set_childmaxcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TrajectoryBulletChild)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_shottimetype();
  inline void clear_has_shottimetype();
  inline void set_has_isfirst();
  inline void clear_has_isfirst();
  inline void set_has_timemininterval();
  inline void clear_has_timemininterval();
  inline void set_has_timemaxinterval();
  inline void clear_has_timemaxinterval();
  inline void set_has_timeseparator();
  inline void clear_has_timeseparator();
  inline void set_has_timegreatermininterval();
  inline void clear_has_timegreatermininterval();
  inline void set_has_timegreatermaxinterval();
  inline void clear_has_timegreatermaxinterval();
  inline void set_has_childmaxcount();
  inline void clear_has_childmaxcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 shottimetype_;
  bool isfirst_;
  ::google::protobuf::int32 timemininterval_;
  ::google::protobuf::int32 timemaxinterval_;
  ::google::protobuf::int32 timeseparator_;
  ::google::protobuf::int32 timegreatermininterval_;
  ::google::protobuf::int32 timegreatermaxinterval_;
  ::google::protobuf::int32 childmaxcount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_TrajectoryCliRpc_2eproto();
  friend void protobuf_AssignDesc_TrajectoryCliRpc_2eproto();
  friend void protobuf_ShutdownFile_TrajectoryCliRpc_2eproto();

  void InitAsDefaultInstance();
  static TrajectoryBulletChild* default_instance_;
};
// ===================================================================


// ===================================================================

// TrajectoryTrajectory

// optional sint32 Id = 1 [default = -1];
inline bool TrajectoryTrajectory::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrajectoryTrajectory::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrajectoryTrajectory::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrajectoryTrajectory::clear_id() {
  id_ = -1;
  clear_has_id();
}
inline ::google::protobuf::int32 TrajectoryTrajectory::id() const {
  return id_;
}
inline void TrajectoryTrajectory::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional sint32 TrajectoryType = 26 [default = 1];
inline bool TrajectoryTrajectory::has_trajectorytype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrajectoryTrajectory::set_has_trajectorytype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrajectoryTrajectory::clear_has_trajectorytype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrajectoryTrajectory::clear_trajectorytype() {
  trajectorytype_ = 1;
  clear_has_trajectorytype();
}
inline ::google::protobuf::int32 TrajectoryTrajectory::trajectorytype() const {
  return trajectorytype_;
}
inline void TrajectoryTrajectory::set_trajectorytype(::google::protobuf::int32 value) {
  set_has_trajectorytype();
  trajectorytype_ = value;
}

// optional sint32 TrackType = 22 [default = 0];
inline bool TrajectoryTrajectory::has_tracktype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrajectoryTrajectory::set_has_tracktype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrajectoryTrajectory::clear_has_tracktype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrajectoryTrajectory::clear_tracktype() {
  tracktype_ = 0;
  clear_has_tracktype();
}
inline ::google::protobuf::int32 TrajectoryTrajectory::tracktype() const {
  return tracktype_;
}
inline void TrajectoryTrajectory::set_tracktype(::google::protobuf::int32 value) {
  set_has_tracktype();
  tracktype_ = value;
}

// optional sint32 RayCount = 3 [default = -1];
inline bool TrajectoryTrajectory::has_raycount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrajectoryTrajectory::set_has_raycount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrajectoryTrajectory::clear_has_raycount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrajectoryTrajectory::clear_raycount() {
  raycount_ = -1;
  clear_has_raycount();
}
inline ::google::protobuf::int32 TrajectoryTrajectory::raycount() const {
  return raycount_;
}
inline void TrajectoryTrajectory::set_raycount(::google::protobuf::int32 value) {
  set_has_raycount();
  raycount_ = value;
}

// optional sint32 CircleCount = 5 [default = -1];
inline bool TrajectoryTrajectory::has_circlecount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrajectoryTrajectory::set_has_circlecount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrajectoryTrajectory::clear_has_circlecount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrajectoryTrajectory::clear_circlecount() {
  circlecount_ = -1;
  clear_has_circlecount();
}
inline ::google::protobuf::int32 TrajectoryTrajectory::circlecount() const {
  return circlecount_;
}
inline void TrajectoryTrajectory::set_circlecount(::google::protobuf::int32 value) {
  set_has_circlecount();
  circlecount_ = value;
}

// repeated sint32 CircleBulletCountList = 6;
inline int TrajectoryTrajectory::circlebulletcountlist_size() const {
  return circlebulletcountlist_.size();
}
inline void TrajectoryTrajectory::clear_circlebulletcountlist() {
  circlebulletcountlist_.Clear();
}
inline ::google::protobuf::int32 TrajectoryTrajectory::circlebulletcountlist(int index) const {
  return circlebulletcountlist_.Get(index);
}
inline void TrajectoryTrajectory::set_circlebulletcountlist(int index, ::google::protobuf::int32 value) {
  circlebulletcountlist_.Set(index, value);
}
inline void TrajectoryTrajectory::add_circlebulletcountlist(::google::protobuf::int32 value) {
  circlebulletcountlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TrajectoryTrajectory::circlebulletcountlist() const {
  return circlebulletcountlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TrajectoryTrajectory::mutable_circlebulletcountlist() {
  return &circlebulletcountlist_;
}

// repeated float CircleAngleList = 7;
inline int TrajectoryTrajectory::circleanglelist_size() const {
  return circleanglelist_.size();
}
inline void TrajectoryTrajectory::clear_circleanglelist() {
  circleanglelist_.Clear();
}
inline float TrajectoryTrajectory::circleanglelist(int index) const {
  return circleanglelist_.Get(index);
}
inline void TrajectoryTrajectory::set_circleanglelist(int index, float value) {
  circleanglelist_.Set(index, value);
}
inline void TrajectoryTrajectory::add_circleanglelist(float value) {
  circleanglelist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
TrajectoryTrajectory::circleanglelist() const {
  return circleanglelist_;
}
inline ::google::protobuf::RepeatedField< float >*
TrajectoryTrajectory::mutable_circleanglelist() {
  return &circleanglelist_;
}

// repeated float CircleNookList = 21;
inline int TrajectoryTrajectory::circlenooklist_size() const {
  return circlenooklist_.size();
}
inline void TrajectoryTrajectory::clear_circlenooklist() {
  circlenooklist_.Clear();
}
inline float TrajectoryTrajectory::circlenooklist(int index) const {
  return circlenooklist_.Get(index);
}
inline void TrajectoryTrajectory::set_circlenooklist(int index, float value) {
  circlenooklist_.Set(index, value);
}
inline void TrajectoryTrajectory::add_circlenooklist(float value) {
  circlenooklist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
TrajectoryTrajectory::circlenooklist() const {
  return circlenooklist_;
}
inline ::google::protobuf::RepeatedField< float >*
TrajectoryTrajectory::mutable_circlenooklist() {
  return &circlenooklist_;
}

// optional float ForwardDistance = 8 [default = -1];
inline bool TrajectoryTrajectory::has_forwarddistance() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TrajectoryTrajectory::set_has_forwarddistance() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TrajectoryTrajectory::clear_has_forwarddistance() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TrajectoryTrajectory::clear_forwarddistance() {
  forwarddistance_ = -1;
  clear_has_forwarddistance();
}
inline float TrajectoryTrajectory::forwarddistance() const {
  return forwarddistance_;
}
inline void TrajectoryTrajectory::set_forwarddistance(float value) {
  set_has_forwarddistance();
  forwarddistance_ = value;
}

// optional float CheckHeight = 27 [default = -1];
inline bool TrajectoryTrajectory::has_checkheight() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TrajectoryTrajectory::set_has_checkheight() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TrajectoryTrajectory::clear_has_checkheight() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TrajectoryTrajectory::clear_checkheight() {
  checkheight_ = -1;
  clear_has_checkheight();
}
inline float TrajectoryTrajectory::checkheight() const {
  return checkheight_;
}
inline void TrajectoryTrajectory::set_checkheight(float value) {
  set_has_checkheight();
  checkheight_ = value;
}

// optional float Random = 9 [default = -1];
inline bool TrajectoryTrajectory::has_random() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TrajectoryTrajectory::set_has_random() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TrajectoryTrajectory::clear_has_random() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TrajectoryTrajectory::clear_random() {
  random_ = -1;
  clear_has_random();
}
inline float TrajectoryTrajectory::random() const {
  return random_;
}
inline void TrajectoryTrajectory::set_random(float value) {
  set_has_random();
  random_ = value;
}

// optional float HorizontalOffsetAngle = 10 [default = -1];
inline bool TrajectoryTrajectory::has_horizontaloffsetangle() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TrajectoryTrajectory::set_has_horizontaloffsetangle() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TrajectoryTrajectory::clear_has_horizontaloffsetangle() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TrajectoryTrajectory::clear_horizontaloffsetangle() {
  horizontaloffsetangle_ = -1;
  clear_has_horizontaloffsetangle();
}
inline float TrajectoryTrajectory::horizontaloffsetangle() const {
  return horizontaloffsetangle_;
}
inline void TrajectoryTrajectory::set_horizontaloffsetangle(float value) {
  set_has_horizontaloffsetangle();
  horizontaloffsetangle_ = value;
}

// optional bool SpaceWorld = 23 [default = false];
inline bool TrajectoryTrajectory::has_spaceworld() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TrajectoryTrajectory::set_has_spaceworld() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TrajectoryTrajectory::clear_has_spaceworld() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TrajectoryTrajectory::clear_spaceworld() {
  spaceworld_ = false;
  clear_has_spaceworld();
}
inline bool TrajectoryTrajectory::spaceworld() const {
  return spaceworld_;
}
inline void TrajectoryTrajectory::set_spaceworld(bool value) {
  set_has_spaceworld();
  spaceworld_ = value;
}

// optional float VerticalOffsetAngle = 11 [default = -1];
inline bool TrajectoryTrajectory::has_verticaloffsetangle() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TrajectoryTrajectory::set_has_verticaloffsetangle() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TrajectoryTrajectory::clear_has_verticaloffsetangle() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TrajectoryTrajectory::clear_verticaloffsetangle() {
  verticaloffsetangle_ = -1;
  clear_has_verticaloffsetangle();
}
inline float TrajectoryTrajectory::verticaloffsetangle() const {
  return verticaloffsetangle_;
}
inline void TrajectoryTrajectory::set_verticaloffsetangle(float value) {
  set_has_verticaloffsetangle();
  verticaloffsetangle_ = value;
}

// optional float TriggerAngleOfMovingOffset = 29 [default = -1];
inline bool TrajectoryTrajectory::has_triggerangleofmovingoffset() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TrajectoryTrajectory::set_has_triggerangleofmovingoffset() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TrajectoryTrajectory::clear_has_triggerangleofmovingoffset() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TrajectoryTrajectory::clear_triggerangleofmovingoffset() {
  triggerangleofmovingoffset_ = -1;
  clear_has_triggerangleofmovingoffset();
}
inline float TrajectoryTrajectory::triggerangleofmovingoffset() const {
  return triggerangleofmovingoffset_;
}
inline void TrajectoryTrajectory::set_triggerangleofmovingoffset(float value) {
  set_has_triggerangleofmovingoffset();
  triggerangleofmovingoffset_ = value;
}

// optional float MovingOffsetAngle = 30 [default = -1];
inline bool TrajectoryTrajectory::has_movingoffsetangle() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TrajectoryTrajectory::set_has_movingoffsetangle() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TrajectoryTrajectory::clear_has_movingoffsetangle() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TrajectoryTrajectory::clear_movingoffsetangle() {
  movingoffsetangle_ = -1;
  clear_has_movingoffsetangle();
}
inline float TrajectoryTrajectory::movingoffsetangle() const {
  return movingoffsetangle_;
}
inline void TrajectoryTrajectory::set_movingoffsetangle(float value) {
  set_has_movingoffsetangle();
  movingoffsetangle_ = value;
}

// optional float ScatteringRadius = 25 [default = 0];
inline bool TrajectoryTrajectory::has_scatteringradius() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TrajectoryTrajectory::set_has_scatteringradius() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TrajectoryTrajectory::clear_has_scatteringradius() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TrajectoryTrajectory::clear_scatteringradius() {
  scatteringradius_ = 0;
  clear_has_scatteringradius();
}
inline float TrajectoryTrajectory::scatteringradius() const {
  return scatteringradius_;
}
inline void TrajectoryTrajectory::set_scatteringradius(float value) {
  set_has_scatteringradius();
  scatteringradius_ = value;
}

// optional float Expand = 14 [default = 1];
inline bool TrajectoryTrajectory::has_expand() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TrajectoryTrajectory::set_has_expand() {
  _has_bits_[0] |= 0x00020000u;
}
inline void TrajectoryTrajectory::clear_has_expand() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void TrajectoryTrajectory::clear_expand() {
  expand_ = 1;
  clear_has_expand();
}
inline float TrajectoryTrajectory::expand() const {
  return expand_;
}
inline void TrajectoryTrajectory::set_expand(float value) {
  set_has_expand();
  expand_ = value;
}

// optional bool ScatteringSync = 24 [default = true];
inline bool TrajectoryTrajectory::has_scatteringsync() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void TrajectoryTrajectory::set_has_scatteringsync() {
  _has_bits_[0] |= 0x00040000u;
}
inline void TrajectoryTrajectory::clear_has_scatteringsync() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void TrajectoryTrajectory::clear_scatteringsync() {
  scatteringsync_ = true;
  clear_has_scatteringsync();
}
inline bool TrajectoryTrajectory::scatteringsync() const {
  return scatteringsync_;
}
inline void TrajectoryTrajectory::set_scatteringsync(bool value) {
  set_has_scatteringsync();
  scatteringsync_ = value;
}

// optional float ScatterBaseHorizontalOffset = 31 [default = -1];
inline bool TrajectoryTrajectory::has_scatterbasehorizontaloffset() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void TrajectoryTrajectory::set_has_scatterbasehorizontaloffset() {
  _has_bits_[0] |= 0x00080000u;
}
inline void TrajectoryTrajectory::clear_has_scatterbasehorizontaloffset() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void TrajectoryTrajectory::clear_scatterbasehorizontaloffset() {
  scatterbasehorizontaloffset_ = -1;
  clear_has_scatterbasehorizontaloffset();
}
inline float TrajectoryTrajectory::scatterbasehorizontaloffset() const {
  return scatterbasehorizontaloffset_;
}
inline void TrajectoryTrajectory::set_scatterbasehorizontaloffset(float value) {
  set_has_scatterbasehorizontaloffset();
  scatterbasehorizontaloffset_ = value;
}

// optional float ScatterBaseVerticalOffset = 33 [default = -1];
inline bool TrajectoryTrajectory::has_scatterbaseverticaloffset() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void TrajectoryTrajectory::set_has_scatterbaseverticaloffset() {
  _has_bits_[0] |= 0x00100000u;
}
inline void TrajectoryTrajectory::clear_has_scatterbaseverticaloffset() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void TrajectoryTrajectory::clear_scatterbaseverticaloffset() {
  scatterbaseverticaloffset_ = -1;
  clear_has_scatterbaseverticaloffset();
}
inline float TrajectoryTrajectory::scatterbaseverticaloffset() const {
  return scatterbaseverticaloffset_;
}
inline void TrajectoryTrajectory::set_scatterbaseverticaloffset(float value) {
  set_has_scatterbaseverticaloffset();
  scatterbaseverticaloffset_ = value;
}

// optional float ScatterHorizontalOffsetOnGround = 34 [default = -1];
inline bool TrajectoryTrajectory::has_scatterhorizontaloffsetonground() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void TrajectoryTrajectory::set_has_scatterhorizontaloffsetonground() {
  _has_bits_[0] |= 0x00200000u;
}
inline void TrajectoryTrajectory::clear_has_scatterhorizontaloffsetonground() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void TrajectoryTrajectory::clear_scatterhorizontaloffsetonground() {
  scatterhorizontaloffsetonground_ = -1;
  clear_has_scatterhorizontaloffsetonground();
}
inline float TrajectoryTrajectory::scatterhorizontaloffsetonground() const {
  return scatterhorizontaloffsetonground_;
}
inline void TrajectoryTrajectory::set_scatterhorizontaloffsetonground(float value) {
  set_has_scatterhorizontaloffsetonground();
  scatterhorizontaloffsetonground_ = value;
}

// optional float ScatterVerticalOffsetOnGround = 35 [default = -1];
inline bool TrajectoryTrajectory::has_scatterverticaloffsetonground() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void TrajectoryTrajectory::set_has_scatterverticaloffsetonground() {
  _has_bits_[0] |= 0x00400000u;
}
inline void TrajectoryTrajectory::clear_has_scatterverticaloffsetonground() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void TrajectoryTrajectory::clear_scatterverticaloffsetonground() {
  scatterverticaloffsetonground_ = -1;
  clear_has_scatterverticaloffsetonground();
}
inline float TrajectoryTrajectory::scatterverticaloffsetonground() const {
  return scatterverticaloffsetonground_;
}
inline void TrajectoryTrajectory::set_scatterverticaloffsetonground(float value) {
  set_has_scatterverticaloffsetonground();
  scatterverticaloffsetonground_ = value;
}

// optional float ScatterHorizontalOffsetOnAir = 36 [default = -1];
inline bool TrajectoryTrajectory::has_scatterhorizontaloffsetonair() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void TrajectoryTrajectory::set_has_scatterhorizontaloffsetonair() {
  _has_bits_[0] |= 0x00800000u;
}
inline void TrajectoryTrajectory::clear_has_scatterhorizontaloffsetonair() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void TrajectoryTrajectory::clear_scatterhorizontaloffsetonair() {
  scatterhorizontaloffsetonair_ = -1;
  clear_has_scatterhorizontaloffsetonair();
}
inline float TrajectoryTrajectory::scatterhorizontaloffsetonair() const {
  return scatterhorizontaloffsetonair_;
}
inline void TrajectoryTrajectory::set_scatterhorizontaloffsetonair(float value) {
  set_has_scatterhorizontaloffsetonair();
  scatterhorizontaloffsetonair_ = value;
}

// optional float ScatterVerticalOffsetOnAir = 37 [default = -1];
inline bool TrajectoryTrajectory::has_scatterverticaloffsetonair() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void TrajectoryTrajectory::set_has_scatterverticaloffsetonair() {
  _has_bits_[0] |= 0x01000000u;
}
inline void TrajectoryTrajectory::clear_has_scatterverticaloffsetonair() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void TrajectoryTrajectory::clear_scatterverticaloffsetonair() {
  scatterverticaloffsetonair_ = -1;
  clear_has_scatterverticaloffsetonair();
}
inline float TrajectoryTrajectory::scatterverticaloffsetonair() const {
  return scatterverticaloffsetonair_;
}
inline void TrajectoryTrajectory::set_scatterverticaloffsetonair(float value) {
  set_has_scatterverticaloffsetonair();
  scatterverticaloffsetonair_ = value;
}

// optional float ScatterBaseOdds = 38 [default = 0];
inline bool TrajectoryTrajectory::has_scatterbaseodds() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void TrajectoryTrajectory::set_has_scatterbaseodds() {
  _has_bits_[0] |= 0x02000000u;
}
inline void TrajectoryTrajectory::clear_has_scatterbaseodds() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void TrajectoryTrajectory::clear_scatterbaseodds() {
  scatterbaseodds_ = 0;
  clear_has_scatterbaseodds();
}
inline float TrajectoryTrajectory::scatterbaseodds() const {
  return scatterbaseodds_;
}
inline void TrajectoryTrajectory::set_scatterbaseodds(float value) {
  set_has_scatterbaseodds();
  scatterbaseodds_ = value;
}

// optional float ScatterAdditionalOdds = 39 [default = 0];
inline bool TrajectoryTrajectory::has_scatteradditionalodds() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void TrajectoryTrajectory::set_has_scatteradditionalodds() {
  _has_bits_[0] |= 0x04000000u;
}
inline void TrajectoryTrajectory::clear_has_scatteradditionalodds() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void TrajectoryTrajectory::clear_scatteradditionalodds() {
  scatteradditionalodds_ = 0;
  clear_has_scatteradditionalodds();
}
inline float TrajectoryTrajectory::scatteradditionalodds() const {
  return scatteradditionalodds_;
}
inline void TrajectoryTrajectory::set_scatteradditionalodds(float value) {
  set_has_scatteradditionalodds();
  scatteradditionalodds_ = value;
}

// optional sint32 ScatterNeedBulletCountWhenAddOdds = 40 [default = 0];
inline bool TrajectoryTrajectory::has_scatterneedbulletcountwhenaddodds() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void TrajectoryTrajectory::set_has_scatterneedbulletcountwhenaddodds() {
  _has_bits_[0] |= 0x08000000u;
}
inline void TrajectoryTrajectory::clear_has_scatterneedbulletcountwhenaddodds() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void TrajectoryTrajectory::clear_scatterneedbulletcountwhenaddodds() {
  scatterneedbulletcountwhenaddodds_ = 0;
  clear_has_scatterneedbulletcountwhenaddodds();
}
inline ::google::protobuf::int32 TrajectoryTrajectory::scatterneedbulletcountwhenaddodds() const {
  return scatterneedbulletcountwhenaddodds_;
}
inline void TrajectoryTrajectory::set_scatterneedbulletcountwhenaddodds(::google::protobuf::int32 value) {
  set_has_scatterneedbulletcountwhenaddodds();
  scatterneedbulletcountwhenaddodds_ = value;
}

// optional float ScatterMaxOddsOnGround = 41 [default = 0];
inline bool TrajectoryTrajectory::has_scattermaxoddsonground() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void TrajectoryTrajectory::set_has_scattermaxoddsonground() {
  _has_bits_[0] |= 0x10000000u;
}
inline void TrajectoryTrajectory::clear_has_scattermaxoddsonground() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void TrajectoryTrajectory::clear_scattermaxoddsonground() {
  scattermaxoddsonground_ = 0;
  clear_has_scattermaxoddsonground();
}
inline float TrajectoryTrajectory::scattermaxoddsonground() const {
  return scattermaxoddsonground_;
}
inline void TrajectoryTrajectory::set_scattermaxoddsonground(float value) {
  set_has_scattermaxoddsonground();
  scattermaxoddsonground_ = value;
}

// optional float ScatterMaxOddsOnAir = 42 [default = 0];
inline bool TrajectoryTrajectory::has_scattermaxoddsonair() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void TrajectoryTrajectory::set_has_scattermaxoddsonair() {
  _has_bits_[0] |= 0x20000000u;
}
inline void TrajectoryTrajectory::clear_has_scattermaxoddsonair() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void TrajectoryTrajectory::clear_scattermaxoddsonair() {
  scattermaxoddsonair_ = 0;
  clear_has_scattermaxoddsonair();
}
inline float TrajectoryTrajectory::scattermaxoddsonair() const {
  return scattermaxoddsonair_;
}
inline void TrajectoryTrajectory::set_scattermaxoddsonair(float value) {
  set_has_scattermaxoddsonair();
  scattermaxoddsonair_ = value;
}

// optional float ScatterReduceOddsPerFrame = 43 [default = 0];
inline bool TrajectoryTrajectory::has_scatterreduceoddsperframe() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void TrajectoryTrajectory::set_has_scatterreduceoddsperframe() {
  _has_bits_[0] |= 0x40000000u;
}
inline void TrajectoryTrajectory::clear_has_scatterreduceoddsperframe() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void TrajectoryTrajectory::clear_scatterreduceoddsperframe() {
  scatterreduceoddsperframe_ = 0;
  clear_has_scatterreduceoddsperframe();
}
inline float TrajectoryTrajectory::scatterreduceoddsperframe() const {
  return scatterreduceoddsperframe_;
}
inline void TrajectoryTrajectory::set_scatterreduceoddsperframe(float value) {
  set_has_scatterreduceoddsperframe();
  scatterreduceoddsperframe_ = value;
}

// repeated .TrajectoryBulletGroup BulletGroupList = 18;
inline int TrajectoryTrajectory::bulletgrouplist_size() const {
  return bulletgrouplist_.size();
}
inline void TrajectoryTrajectory::clear_bulletgrouplist() {
  bulletgrouplist_.Clear();
}
inline const ::TrajectoryBulletGroup& TrajectoryTrajectory::bulletgrouplist(int index) const {
  return bulletgrouplist_.Get(index);
}
inline ::TrajectoryBulletGroup* TrajectoryTrajectory::mutable_bulletgrouplist(int index) {
  return bulletgrouplist_.Mutable(index);
}
inline ::TrajectoryBulletGroup* TrajectoryTrajectory::add_bulletgrouplist() {
  return bulletgrouplist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TrajectoryBulletGroup >&
TrajectoryTrajectory::bulletgrouplist() const {
  return bulletgrouplist_;
}
inline ::google::protobuf::RepeatedPtrField< ::TrajectoryBulletGroup >*
TrajectoryTrajectory::mutable_bulletgrouplist() {
  return &bulletgrouplist_;
}

// optional sint32 ParentBulletId = 20 [default = -1];
inline bool TrajectoryTrajectory::has_parentbulletid() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void TrajectoryTrajectory::set_has_parentbulletid() {
  _has_bits_[1] |= 0x00000001u;
}
inline void TrajectoryTrajectory::clear_has_parentbulletid() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void TrajectoryTrajectory::clear_parentbulletid() {
  parentbulletid_ = -1;
  clear_has_parentbulletid();
}
inline ::google::protobuf::int32 TrajectoryTrajectory::parentbulletid() const {
  return parentbulletid_;
}
inline void TrajectoryTrajectory::set_parentbulletid(::google::protobuf::int32 value) {
  set_has_parentbulletid();
  parentbulletid_ = value;
}

// repeated sint32 BulletIdList = 28;
inline int TrajectoryTrajectory::bulletidlist_size() const {
  return bulletidlist_.size();
}
inline void TrajectoryTrajectory::clear_bulletidlist() {
  bulletidlist_.Clear();
}
inline ::google::protobuf::int32 TrajectoryTrajectory::bulletidlist(int index) const {
  return bulletidlist_.Get(index);
}
inline void TrajectoryTrajectory::set_bulletidlist(int index, ::google::protobuf::int32 value) {
  bulletidlist_.Set(index, value);
}
inline void TrajectoryTrajectory::add_bulletidlist(::google::protobuf::int32 value) {
  bulletidlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TrajectoryTrajectory::bulletidlist() const {
  return bulletidlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TrajectoryTrajectory::mutable_bulletidlist() {
  return &bulletidlist_;
}

// repeated float AreaHorizontalAngleList = 44;
inline int TrajectoryTrajectory::areahorizontalanglelist_size() const {
  return areahorizontalanglelist_.size();
}
inline void TrajectoryTrajectory::clear_areahorizontalanglelist() {
  areahorizontalanglelist_.Clear();
}
inline float TrajectoryTrajectory::areahorizontalanglelist(int index) const {
  return areahorizontalanglelist_.Get(index);
}
inline void TrajectoryTrajectory::set_areahorizontalanglelist(int index, float value) {
  areahorizontalanglelist_.Set(index, value);
}
inline void TrajectoryTrajectory::add_areahorizontalanglelist(float value) {
  areahorizontalanglelist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
TrajectoryTrajectory::areahorizontalanglelist() const {
  return areahorizontalanglelist_;
}
inline ::google::protobuf::RepeatedField< float >*
TrajectoryTrajectory::mutable_areahorizontalanglelist() {
  return &areahorizontalanglelist_;
}

// repeated float AreaVerticalAngleList = 45;
inline int TrajectoryTrajectory::areaverticalanglelist_size() const {
  return areaverticalanglelist_.size();
}
inline void TrajectoryTrajectory::clear_areaverticalanglelist() {
  areaverticalanglelist_.Clear();
}
inline float TrajectoryTrajectory::areaverticalanglelist(int index) const {
  return areaverticalanglelist_.Get(index);
}
inline void TrajectoryTrajectory::set_areaverticalanglelist(int index, float value) {
  areaverticalanglelist_.Set(index, value);
}
inline void TrajectoryTrajectory::add_areaverticalanglelist(float value) {
  areaverticalanglelist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
TrajectoryTrajectory::areaverticalanglelist() const {
  return areaverticalanglelist_;
}
inline ::google::protobuf::RepeatedField< float >*
TrajectoryTrajectory::mutable_areaverticalanglelist() {
  return &areaverticalanglelist_;
}

// repeated float AreaOddsList = 46;
inline int TrajectoryTrajectory::areaoddslist_size() const {
  return areaoddslist_.size();
}
inline void TrajectoryTrajectory::clear_areaoddslist() {
  areaoddslist_.Clear();
}
inline float TrajectoryTrajectory::areaoddslist(int index) const {
  return areaoddslist_.Get(index);
}
inline void TrajectoryTrajectory::set_areaoddslist(int index, float value) {
  areaoddslist_.Set(index, value);
}
inline void TrajectoryTrajectory::add_areaoddslist(float value) {
  areaoddslist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
TrajectoryTrajectory::areaoddslist() const {
  return areaoddslist_;
}
inline ::google::protobuf::RepeatedField< float >*
TrajectoryTrajectory::mutable_areaoddslist() {
  return &areaoddslist_;
}

// -------------------------------------------------------------------

// TrajectoryBulletGroup

// optional sint32 GroupId = 1 [default = -1];
inline bool TrajectoryBulletGroup::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrajectoryBulletGroup::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrajectoryBulletGroup::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrajectoryBulletGroup::clear_groupid() {
  groupid_ = -1;
  clear_has_groupid();
}
inline ::google::protobuf::int32 TrajectoryBulletGroup::groupid() const {
  return groupid_;
}
inline void TrajectoryBulletGroup::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// optional sint32 BulletShotType = 2 [default = 0];
inline bool TrajectoryBulletGroup::has_bulletshottype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrajectoryBulletGroup::set_has_bulletshottype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrajectoryBulletGroup::clear_has_bulletshottype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrajectoryBulletGroup::clear_bulletshottype() {
  bulletshottype_ = 0;
  clear_has_bulletshottype();
}
inline ::google::protobuf::int32 TrajectoryBulletGroup::bulletshottype() const {
  return bulletshottype_;
}
inline void TrajectoryBulletGroup::set_bulletshottype(::google::protobuf::int32 value) {
  set_has_bulletshottype();
  bulletshottype_ = value;
}

// optional sint32 ShotTimeProgression = 3 [default = 0];
inline bool TrajectoryBulletGroup::has_shottimeprogression() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrajectoryBulletGroup::set_has_shottimeprogression() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrajectoryBulletGroup::clear_has_shottimeprogression() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrajectoryBulletGroup::clear_shottimeprogression() {
  shottimeprogression_ = 0;
  clear_has_shottimeprogression();
}
inline ::google::protobuf::int32 TrajectoryBulletGroup::shottimeprogression() const {
  return shottimeprogression_;
}
inline void TrajectoryBulletGroup::set_shottimeprogression(::google::protobuf::int32 value) {
  set_has_shottimeprogression();
  shottimeprogression_ = value;
}

// optional float ShotTimeProgressionValue = 4 [default = -1];
inline bool TrajectoryBulletGroup::has_shottimeprogressionvalue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrajectoryBulletGroup::set_has_shottimeprogressionvalue() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrajectoryBulletGroup::clear_has_shottimeprogressionvalue() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrajectoryBulletGroup::clear_shottimeprogressionvalue() {
  shottimeprogressionvalue_ = -1;
  clear_has_shottimeprogressionvalue();
}
inline float TrajectoryBulletGroup::shottimeprogressionvalue() const {
  return shottimeprogressionvalue_;
}
inline void TrajectoryBulletGroup::set_shottimeprogressionvalue(float value) {
  set_has_shottimeprogressionvalue();
  shottimeprogressionvalue_ = value;
}

// optional sint32 VelocityCorrection = 5 [default = 0];
inline bool TrajectoryBulletGroup::has_velocitycorrection() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrajectoryBulletGroup::set_has_velocitycorrection() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrajectoryBulletGroup::clear_has_velocitycorrection() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrajectoryBulletGroup::clear_velocitycorrection() {
  velocitycorrection_ = 0;
  clear_has_velocitycorrection();
}
inline ::google::protobuf::int32 TrajectoryBulletGroup::velocitycorrection() const {
  return velocitycorrection_;
}
inline void TrajectoryBulletGroup::set_velocitycorrection(::google::protobuf::int32 value) {
  set_has_velocitycorrection();
  velocitycorrection_ = value;
}

// optional float VelocityCorrectionValue = 6 [default = -1];
inline bool TrajectoryBulletGroup::has_velocitycorrectionvalue() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrajectoryBulletGroup::set_has_velocitycorrectionvalue() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TrajectoryBulletGroup::clear_has_velocitycorrectionvalue() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TrajectoryBulletGroup::clear_velocitycorrectionvalue() {
  velocitycorrectionvalue_ = -1;
  clear_has_velocitycorrectionvalue();
}
inline float TrajectoryBulletGroup::velocitycorrectionvalue() const {
  return velocitycorrectionvalue_;
}
inline void TrajectoryBulletGroup::set_velocitycorrectionvalue(float value) {
  set_has_velocitycorrectionvalue();
  velocitycorrectionvalue_ = value;
}

// optional sint32 BulletCount = 7 [default = -1];
inline bool TrajectoryBulletGroup::has_bulletcount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TrajectoryBulletGroup::set_has_bulletcount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TrajectoryBulletGroup::clear_has_bulletcount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TrajectoryBulletGroup::clear_bulletcount() {
  bulletcount_ = -1;
  clear_has_bulletcount();
}
inline ::google::protobuf::int32 TrajectoryBulletGroup::bulletcount() const {
  return bulletcount_;
}
inline void TrajectoryBulletGroup::set_bulletcount(::google::protobuf::int32 value) {
  set_has_bulletcount();
  bulletcount_ = value;
}

// -------------------------------------------------------------------

// TrajectoryBullet

// optional sint32 SortIndex = 56 [default = -1];
inline bool TrajectoryBullet::has_sortindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrajectoryBullet::set_has_sortindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrajectoryBullet::clear_has_sortindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrajectoryBullet::clear_sortindex() {
  sortindex_ = -1;
  clear_has_sortindex();
}
inline ::google::protobuf::int32 TrajectoryBullet::sortindex() const {
  return sortindex_;
}
inline void TrajectoryBullet::set_sortindex(::google::protobuf::int32 value) {
  set_has_sortindex();
  sortindex_ = value;
}

// optional sint32 BulletId = 1 [default = -1];
inline bool TrajectoryBullet::has_bulletid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrajectoryBullet::set_has_bulletid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrajectoryBullet::clear_has_bulletid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrajectoryBullet::clear_bulletid() {
  bulletid_ = -1;
  clear_has_bulletid();
}
inline ::google::protobuf::int32 TrajectoryBullet::bulletid() const {
  return bulletid_;
}
inline void TrajectoryBullet::set_bulletid(::google::protobuf::int32 value) {
  set_has_bulletid();
  bulletid_ = value;
}

// optional sint32 TrajectorId = 90 [default = -1];
inline bool TrajectoryBullet::has_trajectorid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrajectoryBullet::set_has_trajectorid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrajectoryBullet::clear_has_trajectorid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrajectoryBullet::clear_trajectorid() {
  trajectorid_ = -1;
  clear_has_trajectorid();
}
inline ::google::protobuf::int32 TrajectoryBullet::trajectorid() const {
  return trajectorid_;
}
inline void TrajectoryBullet::set_trajectorid(::google::protobuf::int32 value) {
  set_has_trajectorid();
  trajectorid_ = value;
}

// optional sint32 GroupId = 2 [default = -1];
inline bool TrajectoryBullet::has_groupid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrajectoryBullet::set_has_groupid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrajectoryBullet::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrajectoryBullet::clear_groupid() {
  groupid_ = -1;
  clear_has_groupid();
}
inline ::google::protobuf::int32 TrajectoryBullet::groupid() const {
  return groupid_;
}
inline void TrajectoryBullet::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// optional sint32 TrackType = 64 [default = -1];
inline bool TrajectoryBullet::has_tracktype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrajectoryBullet::set_has_tracktype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrajectoryBullet::clear_has_tracktype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrajectoryBullet::clear_tracktype() {
  tracktype_ = -1;
  clear_has_tracktype();
}
inline ::google::protobuf::int32 TrajectoryBullet::tracktype() const {
  return tracktype_;
}
inline void TrajectoryBullet::set_tracktype(::google::protobuf::int32 value) {
  set_has_tracktype();
  tracktype_ = value;
}

// optional sint32 ShotTime = 51 [default = -1];
inline bool TrajectoryBullet::has_shottime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrajectoryBullet::set_has_shottime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TrajectoryBullet::clear_has_shottime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TrajectoryBullet::clear_shottime() {
  shottime_ = -1;
  clear_has_shottime();
}
inline ::google::protobuf::int32 TrajectoryBullet::shottime() const {
  return shottime_;
}
inline void TrajectoryBullet::set_shottime(::google::protobuf::int32 value) {
  set_has_shottime();
  shottime_ = value;
}

// optional float RandomRadius = 10 [default = -1];
inline bool TrajectoryBullet::has_randomradius() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TrajectoryBullet::set_has_randomradius() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TrajectoryBullet::clear_has_randomradius() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TrajectoryBullet::clear_randomradius() {
  randomradius_ = -1;
  clear_has_randomradius();
}
inline float TrajectoryBullet::randomradius() const {
  return randomradius_;
}
inline void TrajectoryBullet::set_randomradius(float value) {
  set_has_randomradius();
  randomradius_ = value;
}

// optional string BulletModelName = 11;
inline bool TrajectoryBullet::has_bulletmodelname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TrajectoryBullet::set_has_bulletmodelname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TrajectoryBullet::clear_has_bulletmodelname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TrajectoryBullet::clear_bulletmodelname() {
  if (bulletmodelname_ != &::google::protobuf::internal::kEmptyString) {
    bulletmodelname_->clear();
  }
  clear_has_bulletmodelname();
}
inline const ::std::string& TrajectoryBullet::bulletmodelname() const {
  return *bulletmodelname_;
}
inline void TrajectoryBullet::set_bulletmodelname(const ::std::string& value) {
  set_has_bulletmodelname();
  if (bulletmodelname_ == &::google::protobuf::internal::kEmptyString) {
    bulletmodelname_ = new ::std::string;
  }
  bulletmodelname_->assign(value);
}
inline void TrajectoryBullet::set_bulletmodelname(const char* value) {
  set_has_bulletmodelname();
  if (bulletmodelname_ == &::google::protobuf::internal::kEmptyString) {
    bulletmodelname_ = new ::std::string;
  }
  bulletmodelname_->assign(value);
}
inline void TrajectoryBullet::set_bulletmodelname(const char* value, size_t size) {
  set_has_bulletmodelname();
  if (bulletmodelname_ == &::google::protobuf::internal::kEmptyString) {
    bulletmodelname_ = new ::std::string;
  }
  bulletmodelname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TrajectoryBullet::mutable_bulletmodelname() {
  set_has_bulletmodelname();
  if (bulletmodelname_ == &::google::protobuf::internal::kEmptyString) {
    bulletmodelname_ = new ::std::string;
  }
  return bulletmodelname_;
}
inline ::std::string* TrajectoryBullet::release_bulletmodelname() {
  clear_has_bulletmodelname();
  if (bulletmodelname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bulletmodelname_;
    bulletmodelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TrajectoryBullet::set_allocated_bulletmodelname(::std::string* bulletmodelname) {
  if (bulletmodelname_ != &::google::protobuf::internal::kEmptyString) {
    delete bulletmodelname_;
  }
  if (bulletmodelname) {
    set_has_bulletmodelname();
    bulletmodelname_ = bulletmodelname;
  } else {
    clear_has_bulletmodelname();
    bulletmodelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool IsMucus = 93 [default = false];
inline bool TrajectoryBullet::has_ismucus() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TrajectoryBullet::set_has_ismucus() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TrajectoryBullet::clear_has_ismucus() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TrajectoryBullet::clear_ismucus() {
  ismucus_ = false;
  clear_has_ismucus();
}
inline bool TrajectoryBullet::ismucus() const {
  return ismucus_;
}
inline void TrajectoryBullet::set_ismucus(bool value) {
  set_has_ismucus();
  ismucus_ = value;
}

// optional float BulletScaleMin = 71 [default = 1];
inline bool TrajectoryBullet::has_bulletscalemin() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TrajectoryBullet::set_has_bulletscalemin() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TrajectoryBullet::clear_has_bulletscalemin() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TrajectoryBullet::clear_bulletscalemin() {
  bulletscalemin_ = 1;
  clear_has_bulletscalemin();
}
inline float TrajectoryBullet::bulletscalemin() const {
  return bulletscalemin_;
}
inline void TrajectoryBullet::set_bulletscalemin(float value) {
  set_has_bulletscalemin();
  bulletscalemin_ = value;
}

// optional float BulletScaleMax = 72 [default = 1];
inline bool TrajectoryBullet::has_bulletscalemax() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TrajectoryBullet::set_has_bulletscalemax() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TrajectoryBullet::clear_has_bulletscalemax() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TrajectoryBullet::clear_bulletscalemax() {
  bulletscalemax_ = 1;
  clear_has_bulletscalemax();
}
inline float TrajectoryBullet::bulletscalemax() const {
  return bulletscalemax_;
}
inline void TrajectoryBullet::set_bulletscalemax(float value) {
  set_has_bulletscalemax();
  bulletscalemax_ = value;
}

// optional bool VelocityRandom = 12 [default = false];
inline bool TrajectoryBullet::has_velocityrandom() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TrajectoryBullet::set_has_velocityrandom() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TrajectoryBullet::clear_has_velocityrandom() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TrajectoryBullet::clear_velocityrandom() {
  velocityrandom_ = false;
  clear_has_velocityrandom();
}
inline bool TrajectoryBullet::velocityrandom() const {
  return velocityrandom_;
}
inline void TrajectoryBullet::set_velocityrandom(bool value) {
  set_has_velocityrandom();
  velocityrandom_ = value;
}

// optional float VelocityMin = 13 [default = -1];
inline bool TrajectoryBullet::has_velocitymin() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TrajectoryBullet::set_has_velocitymin() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TrajectoryBullet::clear_has_velocitymin() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TrajectoryBullet::clear_velocitymin() {
  velocitymin_ = -1;
  clear_has_velocitymin();
}
inline float TrajectoryBullet::velocitymin() const {
  return velocitymin_;
}
inline void TrajectoryBullet::set_velocitymin(float value) {
  set_has_velocitymin();
  velocitymin_ = value;
}

// optional float VelocityMax = 14 [default = -1];
inline bool TrajectoryBullet::has_velocitymax() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TrajectoryBullet::set_has_velocitymax() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TrajectoryBullet::clear_has_velocitymax() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TrajectoryBullet::clear_velocitymax() {
  velocitymax_ = -1;
  clear_has_velocitymax();
}
inline float TrajectoryBullet::velocitymax() const {
  return velocitymax_;
}
inline void TrajectoryBullet::set_velocitymax(float value) {
  set_has_velocitymax();
  velocitymax_ = value;
}

// optional sint32 CrosshairTime = 113 [default = -1];
inline bool TrajectoryBullet::has_crosshairtime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TrajectoryBullet::set_has_crosshairtime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TrajectoryBullet::clear_has_crosshairtime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TrajectoryBullet::clear_crosshairtime() {
  crosshairtime_ = -1;
  clear_has_crosshairtime();
}
inline ::google::protobuf::int32 TrajectoryBullet::crosshairtime() const {
  return crosshairtime_;
}
inline void TrajectoryBullet::set_crosshairtime(::google::protobuf::int32 value) {
  set_has_crosshairtime();
  crosshairtime_ = value;
}

// optional float Mass = 15 [default = -1];
inline bool TrajectoryBullet::has_mass() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TrajectoryBullet::set_has_mass() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TrajectoryBullet::clear_has_mass() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TrajectoryBullet::clear_mass() {
  mass_ = -1;
  clear_has_mass();
}
inline float TrajectoryBullet::mass() const {
  return mass_;
}
inline void TrajectoryBullet::set_mass(float value) {
  set_has_mass();
  mass_ = value;
}

// optional sint32 RotateTime = 91 [default = -1];
inline bool TrajectoryBullet::has_rotatetime() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TrajectoryBullet::set_has_rotatetime() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TrajectoryBullet::clear_has_rotatetime() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TrajectoryBullet::clear_rotatetime() {
  rotatetime_ = -1;
  clear_has_rotatetime();
}
inline ::google::protobuf::int32 TrajectoryBullet::rotatetime() const {
  return rotatetime_;
}
inline void TrajectoryBullet::set_rotatetime(::google::protobuf::int32 value) {
  set_has_rotatetime();
  rotatetime_ = value;
}

// optional sint32 LineMoveTime = 53 [default = -1];
inline bool TrajectoryBullet::has_linemovetime() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TrajectoryBullet::set_has_linemovetime() {
  _has_bits_[0] |= 0x00020000u;
}
inline void TrajectoryBullet::clear_has_linemovetime() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void TrajectoryBullet::clear_linemovetime() {
  linemovetime_ = -1;
  clear_has_linemovetime();
}
inline ::google::protobuf::int32 TrajectoryBullet::linemovetime() const {
  return linemovetime_;
}
inline void TrajectoryBullet::set_linemovetime(::google::protobuf::int32 value) {
  set_has_linemovetime();
  linemovetime_ = value;
}

// optional float LineCoefficient1 = 54 [default = -1];
inline bool TrajectoryBullet::has_linecoefficient1() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void TrajectoryBullet::set_has_linecoefficient1() {
  _has_bits_[0] |= 0x00040000u;
}
inline void TrajectoryBullet::clear_has_linecoefficient1() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void TrajectoryBullet::clear_linecoefficient1() {
  linecoefficient1_ = -1;
  clear_has_linecoefficient1();
}
inline float TrajectoryBullet::linecoefficient1() const {
  return linecoefficient1_;
}
inline void TrajectoryBullet::set_linecoefficient1(float value) {
  set_has_linecoefficient1();
  linecoefficient1_ = value;
}

// optional float LineCoefficient2 = 55 [default = -1];
inline bool TrajectoryBullet::has_linecoefficient2() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void TrajectoryBullet::set_has_linecoefficient2() {
  _has_bits_[0] |= 0x00080000u;
}
inline void TrajectoryBullet::clear_has_linecoefficient2() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void TrajectoryBullet::clear_linecoefficient2() {
  linecoefficient2_ = -1;
  clear_has_linecoefficient2();
}
inline float TrajectoryBullet::linecoefficient2() const {
  return linecoefficient2_;
}
inline void TrajectoryBullet::set_linecoefficient2(float value) {
  set_has_linecoefficient2();
  linecoefficient2_ = value;
}

// optional float VelocityCoefficient = 16 [default = -1];
inline bool TrajectoryBullet::has_velocitycoefficient() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void TrajectoryBullet::set_has_velocitycoefficient() {
  _has_bits_[0] |= 0x00100000u;
}
inline void TrajectoryBullet::clear_has_velocitycoefficient() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void TrajectoryBullet::clear_velocitycoefficient() {
  velocitycoefficient_ = -1;
  clear_has_velocitycoefficient();
}
inline float TrajectoryBullet::velocitycoefficient() const {
  return velocitycoefficient_;
}
inline void TrajectoryBullet::set_velocitycoefficient(float value) {
  set_has_velocitycoefficient();
  velocitycoefficient_ = value;
}

// optional sint32 BulletType = 17 [default = 0];
inline bool TrajectoryBullet::has_bullettype() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void TrajectoryBullet::set_has_bullettype() {
  _has_bits_[0] |= 0x00200000u;
}
inline void TrajectoryBullet::clear_has_bullettype() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void TrajectoryBullet::clear_bullettype() {
  bullettype_ = 0;
  clear_has_bullettype();
}
inline ::google::protobuf::int32 TrajectoryBullet::bullettype() const {
  return bullettype_;
}
inline void TrajectoryBullet::set_bullettype(::google::protobuf::int32 value) {
  set_has_bullettype();
  bullettype_ = value;
}

// optional sint32 CollisionSprite = 73 [default = 0];
inline bool TrajectoryBullet::has_collisionsprite() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void TrajectoryBullet::set_has_collisionsprite() {
  _has_bits_[0] |= 0x00400000u;
}
inline void TrajectoryBullet::clear_has_collisionsprite() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void TrajectoryBullet::clear_collisionsprite() {
  collisionsprite_ = 0;
  clear_has_collisionsprite();
}
inline ::google::protobuf::int32 TrajectoryBullet::collisionsprite() const {
  return collisionsprite_;
}
inline void TrajectoryBullet::set_collisionsprite(::google::protobuf::int32 value) {
  set_has_collisionsprite();
  collisionsprite_ = value;
}

// optional sint32 CollisionScene = 75 [default = 0];
inline bool TrajectoryBullet::has_collisionscene() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void TrajectoryBullet::set_has_collisionscene() {
  _has_bits_[0] |= 0x00800000u;
}
inline void TrajectoryBullet::clear_has_collisionscene() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void TrajectoryBullet::clear_collisionscene() {
  collisionscene_ = 0;
  clear_has_collisionscene();
}
inline ::google::protobuf::int32 TrajectoryBullet::collisionscene() const {
  return collisionscene_;
}
inline void TrajectoryBullet::set_collisionscene(::google::protobuf::int32 value) {
  set_has_collisionscene();
  collisionscene_ = value;
}

// optional float RayDamageFirst = 20 [default = -1];
inline bool TrajectoryBullet::has_raydamagefirst() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void TrajectoryBullet::set_has_raydamagefirst() {
  _has_bits_[0] |= 0x01000000u;
}
inline void TrajectoryBullet::clear_has_raydamagefirst() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void TrajectoryBullet::clear_raydamagefirst() {
  raydamagefirst_ = -1;
  clear_has_raydamagefirst();
}
inline float TrajectoryBullet::raydamagefirst() const {
  return raydamagefirst_;
}
inline void TrajectoryBullet::set_raydamagefirst(float value) {
  set_has_raydamagefirst();
  raydamagefirst_ = value;
}

// optional sint32 RayTimeCycle = 21 [default = -1];
inline bool TrajectoryBullet::has_raytimecycle() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void TrajectoryBullet::set_has_raytimecycle() {
  _has_bits_[0] |= 0x02000000u;
}
inline void TrajectoryBullet::clear_has_raytimecycle() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void TrajectoryBullet::clear_raytimecycle() {
  raytimecycle_ = -1;
  clear_has_raytimecycle();
}
inline ::google::protobuf::int32 TrajectoryBullet::raytimecycle() const {
  return raytimecycle_;
}
inline void TrajectoryBullet::set_raytimecycle(::google::protobuf::int32 value) {
  set_has_raytimecycle();
  raytimecycle_ = value;
}

// optional float RayDamageRadius = 67 [default = -1];
inline bool TrajectoryBullet::has_raydamageradius() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void TrajectoryBullet::set_has_raydamageradius() {
  _has_bits_[0] |= 0x04000000u;
}
inline void TrajectoryBullet::clear_has_raydamageradius() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void TrajectoryBullet::clear_raydamageradius() {
  raydamageradius_ = -1;
  clear_has_raydamageradius();
}
inline float TrajectoryBullet::raydamageradius() const {
  return raydamageradius_;
}
inline void TrajectoryBullet::set_raydamageradius(float value) {
  set_has_raydamageradius();
  raydamageradius_ = value;
}

// optional float RayDamageDistance = 98 [default = -1];
inline bool TrajectoryBullet::has_raydamagedistance() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void TrajectoryBullet::set_has_raydamagedistance() {
  _has_bits_[0] |= 0x08000000u;
}
inline void TrajectoryBullet::clear_has_raydamagedistance() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void TrajectoryBullet::clear_raydamagedistance() {
  raydamagedistance_ = -1;
  clear_has_raydamagedistance();
}
inline float TrajectoryBullet::raydamagedistance() const {
  return raydamagedistance_;
}
inline void TrajectoryBullet::set_raydamagedistance(float value) {
  set_has_raydamagedistance();
  raydamagedistance_ = value;
}

// optional sint32 CallNpcId = 22 [default = -1];
inline bool TrajectoryBullet::has_callnpcid() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void TrajectoryBullet::set_has_callnpcid() {
  _has_bits_[0] |= 0x10000000u;
}
inline void TrajectoryBullet::clear_has_callnpcid() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void TrajectoryBullet::clear_callnpcid() {
  callnpcid_ = -1;
  clear_has_callnpcid();
}
inline ::google::protobuf::int32 TrajectoryBullet::callnpcid() const {
  return callnpcid_;
}
inline void TrajectoryBullet::set_callnpcid(::google::protobuf::int32 value) {
  set_has_callnpcid();
  callnpcid_ = value;
}

// optional bool IsCollision = 84 [default = true];
inline bool TrajectoryBullet::has_iscollision() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void TrajectoryBullet::set_has_iscollision() {
  _has_bits_[0] |= 0x20000000u;
}
inline void TrajectoryBullet::clear_has_iscollision() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void TrajectoryBullet::clear_iscollision() {
  iscollision_ = true;
  clear_has_iscollision();
}
inline bool TrajectoryBullet::iscollision() const {
  return iscollision_;
}
inline void TrajectoryBullet::set_iscollision(bool value) {
  set_has_iscollision();
  iscollision_ = value;
}

// optional float WaterSprinkHeight = 110 [default = -1];
inline bool TrajectoryBullet::has_watersprinkheight() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void TrajectoryBullet::set_has_watersprinkheight() {
  _has_bits_[0] |= 0x40000000u;
}
inline void TrajectoryBullet::clear_has_watersprinkheight() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void TrajectoryBullet::clear_watersprinkheight() {
  watersprinkheight_ = -1;
  clear_has_watersprinkheight();
}
inline float TrajectoryBullet::watersprinkheight() const {
  return watersprinkheight_;
}
inline void TrajectoryBullet::set_watersprinkheight(float value) {
  set_has_watersprinkheight();
  watersprinkheight_ = value;
}

// optional float WaterSprinkAngle = 111 [default = -1];
inline bool TrajectoryBullet::has_watersprinkangle() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void TrajectoryBullet::set_has_watersprinkangle() {
  _has_bits_[0] |= 0x80000000u;
}
inline void TrajectoryBullet::clear_has_watersprinkangle() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void TrajectoryBullet::clear_watersprinkangle() {
  watersprinkangle_ = -1;
  clear_has_watersprinkangle();
}
inline float TrajectoryBullet::watersprinkangle() const {
  return watersprinkangle_;
}
inline void TrajectoryBullet::set_watersprinkangle(float value) {
  set_has_watersprinkangle();
  watersprinkangle_ = value;
}

// optional float WaterSprinkAddPercentagePerFrame = 112 [default = -1];
inline bool TrajectoryBullet::has_watersprinkaddpercentageperframe() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void TrajectoryBullet::set_has_watersprinkaddpercentageperframe() {
  _has_bits_[1] |= 0x00000001u;
}
inline void TrajectoryBullet::clear_has_watersprinkaddpercentageperframe() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void TrajectoryBullet::clear_watersprinkaddpercentageperframe() {
  watersprinkaddpercentageperframe_ = -1;
  clear_has_watersprinkaddpercentageperframe();
}
inline float TrajectoryBullet::watersprinkaddpercentageperframe() const {
  return watersprinkaddpercentageperframe_;
}
inline void TrajectoryBullet::set_watersprinkaddpercentageperframe(float value) {
  set_has_watersprinkaddpercentageperframe();
  watersprinkaddpercentageperframe_ = value;
}

// optional sint32 LifeTime = 37 [default = -1];
inline bool TrajectoryBullet::has_lifetime() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void TrajectoryBullet::set_has_lifetime() {
  _has_bits_[1] |= 0x00000002u;
}
inline void TrajectoryBullet::clear_has_lifetime() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void TrajectoryBullet::clear_lifetime() {
  lifetime_ = -1;
  clear_has_lifetime();
}
inline ::google::protobuf::int32 TrajectoryBullet::lifetime() const {
  return lifetime_;
}
inline void TrajectoryBullet::set_lifetime(::google::protobuf::int32 value) {
  set_has_lifetime();
  lifetime_ = value;
}

// optional bool TakeDamage = 39 [default = false];
inline bool TrajectoryBullet::has_takedamage() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void TrajectoryBullet::set_has_takedamage() {
  _has_bits_[1] |= 0x00000004u;
}
inline void TrajectoryBullet::clear_has_takedamage() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void TrajectoryBullet::clear_takedamage() {
  takedamage_ = false;
  clear_has_takedamage();
}
inline bool TrajectoryBullet::takedamage() const {
  return takedamage_;
}
inline void TrajectoryBullet::set_takedamage(bool value) {
  set_has_takedamage();
  takedamage_ = value;
}

// optional sint32 BulletDamageRangeType = 40 [default = 0];
inline bool TrajectoryBullet::has_bulletdamagerangetype() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void TrajectoryBullet::set_has_bulletdamagerangetype() {
  _has_bits_[1] |= 0x00000008u;
}
inline void TrajectoryBullet::clear_has_bulletdamagerangetype() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void TrajectoryBullet::clear_bulletdamagerangetype() {
  bulletdamagerangetype_ = 0;
  clear_has_bulletdamagerangetype();
}
inline ::google::protobuf::int32 TrajectoryBullet::bulletdamagerangetype() const {
  return bulletdamagerangetype_;
}
inline void TrajectoryBullet::set_bulletdamagerangetype(::google::protobuf::int32 value) {
  set_has_bulletdamagerangetype();
  bulletdamagerangetype_ = value;
}

// optional float BulletDamageRangeRadius = 41 [default = -1];
inline bool TrajectoryBullet::has_bulletdamagerangeradius() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void TrajectoryBullet::set_has_bulletdamagerangeradius() {
  _has_bits_[1] |= 0x00000010u;
}
inline void TrajectoryBullet::clear_has_bulletdamagerangeradius() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void TrajectoryBullet::clear_bulletdamagerangeradius() {
  bulletdamagerangeradius_ = -1;
  clear_has_bulletdamagerangeradius();
}
inline float TrajectoryBullet::bulletdamagerangeradius() const {
  return bulletdamagerangeradius_;
}
inline void TrajectoryBullet::set_bulletdamagerangeradius(float value) {
  set_has_bulletdamagerangeradius();
  bulletdamagerangeradius_ = value;
}

// optional float BulletDamageAngle = 42 [default = -1];
inline bool TrajectoryBullet::has_bulletdamageangle() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void TrajectoryBullet::set_has_bulletdamageangle() {
  _has_bits_[1] |= 0x00000020u;
}
inline void TrajectoryBullet::clear_has_bulletdamageangle() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void TrajectoryBullet::clear_bulletdamageangle() {
  bulletdamageangle_ = -1;
  clear_has_bulletdamageangle();
}
inline float TrajectoryBullet::bulletdamageangle() const {
  return bulletdamageangle_;
}
inline void TrajectoryBullet::set_bulletdamageangle(float value) {
  set_has_bulletdamageangle();
  bulletdamageangle_ = value;
}

// optional float VerticalLineBegin = 57 [default = -1];
inline bool TrajectoryBullet::has_verticallinebegin() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void TrajectoryBullet::set_has_verticallinebegin() {
  _has_bits_[1] |= 0x00000040u;
}
inline void TrajectoryBullet::clear_has_verticallinebegin() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void TrajectoryBullet::clear_verticallinebegin() {
  verticallinebegin_ = -1;
  clear_has_verticallinebegin();
}
inline float TrajectoryBullet::verticallinebegin() const {
  return verticallinebegin_;
}
inline void TrajectoryBullet::set_verticallinebegin(float value) {
  set_has_verticallinebegin();
  verticallinebegin_ = value;
}

// optional float VerticalLineEnd = 58 [default = -1];
inline bool TrajectoryBullet::has_verticallineend() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void TrajectoryBullet::set_has_verticallineend() {
  _has_bits_[1] |= 0x00000080u;
}
inline void TrajectoryBullet::clear_has_verticallineend() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void TrajectoryBullet::clear_verticallineend() {
  verticallineend_ = -1;
  clear_has_verticallineend();
}
inline float TrajectoryBullet::verticallineend() const {
  return verticallineend_;
}
inline void TrajectoryBullet::set_verticallineend(float value) {
  set_has_verticallineend();
  verticallineend_ = value;
}

// optional float HammerAxleRadius = 85 [default = -1];
inline bool TrajectoryBullet::has_hammeraxleradius() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void TrajectoryBullet::set_has_hammeraxleradius() {
  _has_bits_[1] |= 0x00000100u;
}
inline void TrajectoryBullet::clear_has_hammeraxleradius() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void TrajectoryBullet::clear_hammeraxleradius() {
  hammeraxleradius_ = -1;
  clear_has_hammeraxleradius();
}
inline float TrajectoryBullet::hammeraxleradius() const {
  return hammeraxleradius_;
}
inline void TrajectoryBullet::set_hammeraxleradius(float value) {
  set_has_hammeraxleradius();
  hammeraxleradius_ = value;
}

// optional float BoundRadius = 86 [default = -1];
inline bool TrajectoryBullet::has_boundradius() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void TrajectoryBullet::set_has_boundradius() {
  _has_bits_[1] |= 0x00000200u;
}
inline void TrajectoryBullet::clear_has_boundradius() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void TrajectoryBullet::clear_boundradius() {
  boundradius_ = -1;
  clear_has_boundradius();
}
inline float TrajectoryBullet::boundradius() const {
  return boundradius_;
}
inline void TrajectoryBullet::set_boundradius(float value) {
  set_has_boundradius();
  boundradius_ = value;
}

// optional .Vector3PB HammerOffset = 87;
inline bool TrajectoryBullet::has_hammeroffset() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void TrajectoryBullet::set_has_hammeroffset() {
  _has_bits_[1] |= 0x00000400u;
}
inline void TrajectoryBullet::clear_has_hammeroffset() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void TrajectoryBullet::clear_hammeroffset() {
  if (hammeroffset_ != NULL) hammeroffset_->::Vector3PB::Clear();
  clear_has_hammeroffset();
}
inline const ::Vector3PB& TrajectoryBullet::hammeroffset() const {
  return hammeroffset_ != NULL ? *hammeroffset_ : *default_instance_->hammeroffset_;
}
inline ::Vector3PB* TrajectoryBullet::mutable_hammeroffset() {
  set_has_hammeroffset();
  if (hammeroffset_ == NULL) hammeroffset_ = new ::Vector3PB;
  return hammeroffset_;
}
inline ::Vector3PB* TrajectoryBullet::release_hammeroffset() {
  clear_has_hammeroffset();
  ::Vector3PB* temp = hammeroffset_;
  hammeroffset_ = NULL;
  return temp;
}
inline void TrajectoryBullet::set_allocated_hammeroffset(::Vector3PB* hammeroffset) {
  delete hammeroffset_;
  hammeroffset_ = hammeroffset;
  if (hammeroffset) {
    set_has_hammeroffset();
  } else {
    clear_has_hammeroffset();
  }
}

// optional float HammerSectorAngle = 88 [default = -1];
inline bool TrajectoryBullet::has_hammersectorangle() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void TrajectoryBullet::set_has_hammersectorangle() {
  _has_bits_[1] |= 0x00000800u;
}
inline void TrajectoryBullet::clear_has_hammersectorangle() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void TrajectoryBullet::clear_hammersectorangle() {
  hammersectorangle_ = -1;
  clear_has_hammersectorangle();
}
inline float TrajectoryBullet::hammersectorangle() const {
  return hammersectorangle_;
}
inline void TrajectoryBullet::set_hammersectorangle(float value) {
  set_has_hammersectorangle();
  hammersectorangle_ = value;
}

// optional float HammerAngleSpeed = 89 [default = -1];
inline bool TrajectoryBullet::has_hammeranglespeed() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void TrajectoryBullet::set_has_hammeranglespeed() {
  _has_bits_[1] |= 0x00001000u;
}
inline void TrajectoryBullet::clear_has_hammeranglespeed() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void TrajectoryBullet::clear_hammeranglespeed() {
  hammeranglespeed_ = -1;
  clear_has_hammeranglespeed();
}
inline float TrajectoryBullet::hammeranglespeed() const {
  return hammeranglespeed_;
}
inline void TrajectoryBullet::set_hammeranglespeed(float value) {
  set_has_hammeranglespeed();
  hammeranglespeed_ = value;
}

// optional float SprayGroundAngle = 99 [default = 1];
inline bool TrajectoryBullet::has_spraygroundangle() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void TrajectoryBullet::set_has_spraygroundangle() {
  _has_bits_[1] |= 0x00002000u;
}
inline void TrajectoryBullet::clear_has_spraygroundangle() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void TrajectoryBullet::clear_spraygroundangle() {
  spraygroundangle_ = 1;
  clear_has_spraygroundangle();
}
inline float TrajectoryBullet::spraygroundangle() const {
  return spraygroundangle_;
}
inline void TrajectoryBullet::set_spraygroundangle(float value) {
  set_has_spraygroundangle();
  spraygroundangle_ = value;
}

// optional sint32 SGGreateShit = 100 [default = 1];
inline bool TrajectoryBullet::has_sggreateshit() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void TrajectoryBullet::set_has_sggreateshit() {
  _has_bits_[1] |= 0x00004000u;
}
inline void TrajectoryBullet::clear_has_sggreateshit() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void TrajectoryBullet::clear_sggreateshit() {
  sggreateshit_ = 1;
  clear_has_sggreateshit();
}
inline ::google::protobuf::int32 TrajectoryBullet::sggreateshit() const {
  return sggreateshit_;
}
inline void TrajectoryBullet::set_sggreateshit(::google::protobuf::int32 value) {
  set_has_sggreateshit();
  sggreateshit_ = value;
}

// repeated sint32 SGGreateShitList = 102;
inline int TrajectoryBullet::sggreateshitlist_size() const {
  return sggreateshitlist_.size();
}
inline void TrajectoryBullet::clear_sggreateshitlist() {
  sggreateshitlist_.Clear();
}
inline ::google::protobuf::int32 TrajectoryBullet::sggreateshitlist(int index) const {
  return sggreateshitlist_.Get(index);
}
inline void TrajectoryBullet::set_sggreateshitlist(int index, ::google::protobuf::int32 value) {
  sggreateshitlist_.Set(index, value);
}
inline void TrajectoryBullet::add_sggreateshitlist(::google::protobuf::int32 value) {
  sggreateshitlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TrajectoryBullet::sggreateshitlist() const {
  return sggreateshitlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TrajectoryBullet::mutable_sggreateshitlist() {
  return &sggreateshitlist_;
}

// optional float SGGreateScaleMin = 104 [default = 1];
inline bool TrajectoryBullet::has_sggreatescalemin() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void TrajectoryBullet::set_has_sggreatescalemin() {
  _has_bits_[1] |= 0x00010000u;
}
inline void TrajectoryBullet::clear_has_sggreatescalemin() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void TrajectoryBullet::clear_sggreatescalemin() {
  sggreatescalemin_ = 1;
  clear_has_sggreatescalemin();
}
inline float TrajectoryBullet::sggreatescalemin() const {
  return sggreatescalemin_;
}
inline void TrajectoryBullet::set_sggreatescalemin(float value) {
  set_has_sggreatescalemin();
  sggreatescalemin_ = value;
}

// optional float SGGreateScaleMax = 105 [default = 1];
inline bool TrajectoryBullet::has_sggreatescalemax() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void TrajectoryBullet::set_has_sggreatescalemax() {
  _has_bits_[1] |= 0x00020000u;
}
inline void TrajectoryBullet::clear_has_sggreatescalemax() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void TrajectoryBullet::clear_sggreatescalemax() {
  sggreatescalemax_ = 1;
  clear_has_sggreatescalemax();
}
inline float TrajectoryBullet::sggreatescalemax() const {
  return sggreatescalemax_;
}
inline void TrajectoryBullet::set_sggreatescalemax(float value) {
  set_has_sggreatescalemax();
  sggreatescalemax_ = value;
}

// optional string HGGreateEffect = 106;
inline bool TrajectoryBullet::has_hggreateeffect() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void TrajectoryBullet::set_has_hggreateeffect() {
  _has_bits_[1] |= 0x00040000u;
}
inline void TrajectoryBullet::clear_has_hggreateeffect() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void TrajectoryBullet::clear_hggreateeffect() {
  if (hggreateeffect_ != &::google::protobuf::internal::kEmptyString) {
    hggreateeffect_->clear();
  }
  clear_has_hggreateeffect();
}
inline const ::std::string& TrajectoryBullet::hggreateeffect() const {
  return *hggreateeffect_;
}
inline void TrajectoryBullet::set_hggreateeffect(const ::std::string& value) {
  set_has_hggreateeffect();
  if (hggreateeffect_ == &::google::protobuf::internal::kEmptyString) {
    hggreateeffect_ = new ::std::string;
  }
  hggreateeffect_->assign(value);
}
inline void TrajectoryBullet::set_hggreateeffect(const char* value) {
  set_has_hggreateeffect();
  if (hggreateeffect_ == &::google::protobuf::internal::kEmptyString) {
    hggreateeffect_ = new ::std::string;
  }
  hggreateeffect_->assign(value);
}
inline void TrajectoryBullet::set_hggreateeffect(const char* value, size_t size) {
  set_has_hggreateeffect();
  if (hggreateeffect_ == &::google::protobuf::internal::kEmptyString) {
    hggreateeffect_ = new ::std::string;
  }
  hggreateeffect_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TrajectoryBullet::mutable_hggreateeffect() {
  set_has_hggreateeffect();
  if (hggreateeffect_ == &::google::protobuf::internal::kEmptyString) {
    hggreateeffect_ = new ::std::string;
  }
  return hggreateeffect_;
}
inline ::std::string* TrajectoryBullet::release_hggreateeffect() {
  clear_has_hggreateeffect();
  if (hggreateeffect_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hggreateeffect_;
    hggreateeffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TrajectoryBullet::set_allocated_hggreateeffect(::std::string* hggreateeffect) {
  if (hggreateeffect_ != &::google::protobuf::internal::kEmptyString) {
    delete hggreateeffect_;
  }
  if (hggreateeffect) {
    set_has_hggreateeffect();
    hggreateeffect_ = hggreateeffect;
  } else {
    clear_has_hggreateeffect();
    hggreateeffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional sint32 SGLessShit = 101 [default = 1];
inline bool TrajectoryBullet::has_sglessshit() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void TrajectoryBullet::set_has_sglessshit() {
  _has_bits_[1] |= 0x00080000u;
}
inline void TrajectoryBullet::clear_has_sglessshit() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void TrajectoryBullet::clear_sglessshit() {
  sglessshit_ = 1;
  clear_has_sglessshit();
}
inline ::google::protobuf::int32 TrajectoryBullet::sglessshit() const {
  return sglessshit_;
}
inline void TrajectoryBullet::set_sglessshit(::google::protobuf::int32 value) {
  set_has_sglessshit();
  sglessshit_ = value;
}

// repeated sint32 SGLessShitList = 103;
inline int TrajectoryBullet::sglessshitlist_size() const {
  return sglessshitlist_.size();
}
inline void TrajectoryBullet::clear_sglessshitlist() {
  sglessshitlist_.Clear();
}
inline ::google::protobuf::int32 TrajectoryBullet::sglessshitlist(int index) const {
  return sglessshitlist_.Get(index);
}
inline void TrajectoryBullet::set_sglessshitlist(int index, ::google::protobuf::int32 value) {
  sglessshitlist_.Set(index, value);
}
inline void TrajectoryBullet::add_sglessshitlist(::google::protobuf::int32 value) {
  sglessshitlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TrajectoryBullet::sglessshitlist() const {
  return sglessshitlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TrajectoryBullet::mutable_sglessshitlist() {
  return &sglessshitlist_;
}

// optional float SGLessScaleMin = 107 [default = 1];
inline bool TrajectoryBullet::has_sglessscalemin() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void TrajectoryBullet::set_has_sglessscalemin() {
  _has_bits_[1] |= 0x00200000u;
}
inline void TrajectoryBullet::clear_has_sglessscalemin() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void TrajectoryBullet::clear_sglessscalemin() {
  sglessscalemin_ = 1;
  clear_has_sglessscalemin();
}
inline float TrajectoryBullet::sglessscalemin() const {
  return sglessscalemin_;
}
inline void TrajectoryBullet::set_sglessscalemin(float value) {
  set_has_sglessscalemin();
  sglessscalemin_ = value;
}

// optional float SGLessScaleMax = 108 [default = 1];
inline bool TrajectoryBullet::has_sglessscalemax() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void TrajectoryBullet::set_has_sglessscalemax() {
  _has_bits_[1] |= 0x00400000u;
}
inline void TrajectoryBullet::clear_has_sglessscalemax() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void TrajectoryBullet::clear_sglessscalemax() {
  sglessscalemax_ = 1;
  clear_has_sglessscalemax();
}
inline float TrajectoryBullet::sglessscalemax() const {
  return sglessscalemax_;
}
inline void TrajectoryBullet::set_sglessscalemax(float value) {
  set_has_sglessscalemax();
  sglessscalemax_ = value;
}

// optional string HGLessEffect = 109;
inline bool TrajectoryBullet::has_hglesseffect() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void TrajectoryBullet::set_has_hglesseffect() {
  _has_bits_[1] |= 0x00800000u;
}
inline void TrajectoryBullet::clear_has_hglesseffect() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void TrajectoryBullet::clear_hglesseffect() {
  if (hglesseffect_ != &::google::protobuf::internal::kEmptyString) {
    hglesseffect_->clear();
  }
  clear_has_hglesseffect();
}
inline const ::std::string& TrajectoryBullet::hglesseffect() const {
  return *hglesseffect_;
}
inline void TrajectoryBullet::set_hglesseffect(const ::std::string& value) {
  set_has_hglesseffect();
  if (hglesseffect_ == &::google::protobuf::internal::kEmptyString) {
    hglesseffect_ = new ::std::string;
  }
  hglesseffect_->assign(value);
}
inline void TrajectoryBullet::set_hglesseffect(const char* value) {
  set_has_hglesseffect();
  if (hglesseffect_ == &::google::protobuf::internal::kEmptyString) {
    hglesseffect_ = new ::std::string;
  }
  hglesseffect_->assign(value);
}
inline void TrajectoryBullet::set_hglesseffect(const char* value, size_t size) {
  set_has_hglesseffect();
  if (hglesseffect_ == &::google::protobuf::internal::kEmptyString) {
    hglesseffect_ = new ::std::string;
  }
  hglesseffect_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TrajectoryBullet::mutable_hglesseffect() {
  set_has_hglesseffect();
  if (hglesseffect_ == &::google::protobuf::internal::kEmptyString) {
    hglesseffect_ = new ::std::string;
  }
  return hglesseffect_;
}
inline ::std::string* TrajectoryBullet::release_hglesseffect() {
  clear_has_hglesseffect();
  if (hglesseffect_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hglesseffect_;
    hglesseffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TrajectoryBullet::set_allocated_hglesseffect(::std::string* hglesseffect) {
  if (hglesseffect_ != &::google::protobuf::internal::kEmptyString) {
    delete hglesseffect_;
  }
  if (hglesseffect) {
    set_has_hglesseffect();
    hglesseffect_ = hglesseffect;
  } else {
    clear_has_hglesseffect();
    hglesseffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional sint32 SprayWallShit = 82 [default = 1];
inline bool TrajectoryBullet::has_spraywallshit() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void TrajectoryBullet::set_has_spraywallshit() {
  _has_bits_[1] |= 0x01000000u;
}
inline void TrajectoryBullet::clear_has_spraywallshit() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void TrajectoryBullet::clear_spraywallshit() {
  spraywallshit_ = 1;
  clear_has_spraywallshit();
}
inline ::google::protobuf::int32 TrajectoryBullet::spraywallshit() const {
  return spraywallshit_;
}
inline void TrajectoryBullet::set_spraywallshit(::google::protobuf::int32 value) {
  set_has_spraywallshit();
  spraywallshit_ = value;
}

// optional float SprayWallScaleMin = 47 [default = 1];
inline bool TrajectoryBullet::has_spraywallscalemin() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void TrajectoryBullet::set_has_spraywallscalemin() {
  _has_bits_[1] |= 0x02000000u;
}
inline void TrajectoryBullet::clear_has_spraywallscalemin() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void TrajectoryBullet::clear_spraywallscalemin() {
  spraywallscalemin_ = 1;
  clear_has_spraywallscalemin();
}
inline float TrajectoryBullet::spraywallscalemin() const {
  return spraywallscalemin_;
}
inline void TrajectoryBullet::set_spraywallscalemin(float value) {
  set_has_spraywallscalemin();
  spraywallscalemin_ = value;
}

// optional float SprayWallScaleMax = 48 [default = 1];
inline bool TrajectoryBullet::has_spraywallscalemax() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void TrajectoryBullet::set_has_spraywallscalemax() {
  _has_bits_[1] |= 0x04000000u;
}
inline void TrajectoryBullet::clear_has_spraywallscalemax() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void TrajectoryBullet::clear_spraywallscalemax() {
  spraywallscalemax_ = 1;
  clear_has_spraywallscalemax();
}
inline float TrajectoryBullet::spraywallscalemax() const {
  return spraywallscalemax_;
}
inline void TrajectoryBullet::set_spraywallscalemax(float value) {
  set_has_spraywallscalemax();
  spraywallscalemax_ = value;
}

// optional string HitSprayWallEffect = 94;
inline bool TrajectoryBullet::has_hitspraywalleffect() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void TrajectoryBullet::set_has_hitspraywalleffect() {
  _has_bits_[1] |= 0x08000000u;
}
inline void TrajectoryBullet::clear_has_hitspraywalleffect() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void TrajectoryBullet::clear_hitspraywalleffect() {
  if (hitspraywalleffect_ != &::google::protobuf::internal::kEmptyString) {
    hitspraywalleffect_->clear();
  }
  clear_has_hitspraywalleffect();
}
inline const ::std::string& TrajectoryBullet::hitspraywalleffect() const {
  return *hitspraywalleffect_;
}
inline void TrajectoryBullet::set_hitspraywalleffect(const ::std::string& value) {
  set_has_hitspraywalleffect();
  if (hitspraywalleffect_ == &::google::protobuf::internal::kEmptyString) {
    hitspraywalleffect_ = new ::std::string;
  }
  hitspraywalleffect_->assign(value);
}
inline void TrajectoryBullet::set_hitspraywalleffect(const char* value) {
  set_has_hitspraywalleffect();
  if (hitspraywalleffect_ == &::google::protobuf::internal::kEmptyString) {
    hitspraywalleffect_ = new ::std::string;
  }
  hitspraywalleffect_->assign(value);
}
inline void TrajectoryBullet::set_hitspraywalleffect(const char* value, size_t size) {
  set_has_hitspraywalleffect();
  if (hitspraywalleffect_ == &::google::protobuf::internal::kEmptyString) {
    hitspraywalleffect_ = new ::std::string;
  }
  hitspraywalleffect_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TrajectoryBullet::mutable_hitspraywalleffect() {
  set_has_hitspraywalleffect();
  if (hitspraywalleffect_ == &::google::protobuf::internal::kEmptyString) {
    hitspraywalleffect_ = new ::std::string;
  }
  return hitspraywalleffect_;
}
inline ::std::string* TrajectoryBullet::release_hitspraywalleffect() {
  clear_has_hitspraywalleffect();
  if (hitspraywalleffect_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hitspraywalleffect_;
    hitspraywalleffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TrajectoryBullet::set_allocated_hitspraywalleffect(::std::string* hitspraywalleffect) {
  if (hitspraywalleffect_ != &::google::protobuf::internal::kEmptyString) {
    delete hitspraywalleffect_;
  }
  if (hitspraywalleffect) {
    set_has_hitspraywalleffect();
    hitspraywalleffect_ = hitspraywalleffect;
  } else {
    clear_has_hitspraywalleffect();
    hitspraywalleffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string HitNotSprayWallEffect = 95;
inline bool TrajectoryBullet::has_hitnotspraywalleffect() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void TrajectoryBullet::set_has_hitnotspraywalleffect() {
  _has_bits_[1] |= 0x10000000u;
}
inline void TrajectoryBullet::clear_has_hitnotspraywalleffect() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void TrajectoryBullet::clear_hitnotspraywalleffect() {
  if (hitnotspraywalleffect_ != &::google::protobuf::internal::kEmptyString) {
    hitnotspraywalleffect_->clear();
  }
  clear_has_hitnotspraywalleffect();
}
inline const ::std::string& TrajectoryBullet::hitnotspraywalleffect() const {
  return *hitnotspraywalleffect_;
}
inline void TrajectoryBullet::set_hitnotspraywalleffect(const ::std::string& value) {
  set_has_hitnotspraywalleffect();
  if (hitnotspraywalleffect_ == &::google::protobuf::internal::kEmptyString) {
    hitnotspraywalleffect_ = new ::std::string;
  }
  hitnotspraywalleffect_->assign(value);
}
inline void TrajectoryBullet::set_hitnotspraywalleffect(const char* value) {
  set_has_hitnotspraywalleffect();
  if (hitnotspraywalleffect_ == &::google::protobuf::internal::kEmptyString) {
    hitnotspraywalleffect_ = new ::std::string;
  }
  hitnotspraywalleffect_->assign(value);
}
inline void TrajectoryBullet::set_hitnotspraywalleffect(const char* value, size_t size) {
  set_has_hitnotspraywalleffect();
  if (hitnotspraywalleffect_ == &::google::protobuf::internal::kEmptyString) {
    hitnotspraywalleffect_ = new ::std::string;
  }
  hitnotspraywalleffect_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TrajectoryBullet::mutable_hitnotspraywalleffect() {
  set_has_hitnotspraywalleffect();
  if (hitnotspraywalleffect_ == &::google::protobuf::internal::kEmptyString) {
    hitnotspraywalleffect_ = new ::std::string;
  }
  return hitnotspraywalleffect_;
}
inline ::std::string* TrajectoryBullet::release_hitnotspraywalleffect() {
  clear_has_hitnotspraywalleffect();
  if (hitnotspraywalleffect_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hitnotspraywalleffect_;
    hitnotspraywalleffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TrajectoryBullet::set_allocated_hitnotspraywalleffect(::std::string* hitnotspraywalleffect) {
  if (hitnotspraywalleffect_ != &::google::protobuf::internal::kEmptyString) {
    delete hitnotspraywalleffect_;
  }
  if (hitnotspraywalleffect) {
    set_has_hitnotspraywalleffect();
    hitnotspraywalleffect_ = hitnotspraywalleffect;
  } else {
    clear_has_hitnotspraywalleffect();
    hitnotspraywalleffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string HitSpriteEffect = 97;
inline bool TrajectoryBullet::has_hitspriteeffect() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void TrajectoryBullet::set_has_hitspriteeffect() {
  _has_bits_[1] |= 0x20000000u;
}
inline void TrajectoryBullet::clear_has_hitspriteeffect() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void TrajectoryBullet::clear_hitspriteeffect() {
  if (hitspriteeffect_ != &::google::protobuf::internal::kEmptyString) {
    hitspriteeffect_->clear();
  }
  clear_has_hitspriteeffect();
}
inline const ::std::string& TrajectoryBullet::hitspriteeffect() const {
  return *hitspriteeffect_;
}
inline void TrajectoryBullet::set_hitspriteeffect(const ::std::string& value) {
  set_has_hitspriteeffect();
  if (hitspriteeffect_ == &::google::protobuf::internal::kEmptyString) {
    hitspriteeffect_ = new ::std::string;
  }
  hitspriteeffect_->assign(value);
}
inline void TrajectoryBullet::set_hitspriteeffect(const char* value) {
  set_has_hitspriteeffect();
  if (hitspriteeffect_ == &::google::protobuf::internal::kEmptyString) {
    hitspriteeffect_ = new ::std::string;
  }
  hitspriteeffect_->assign(value);
}
inline void TrajectoryBullet::set_hitspriteeffect(const char* value, size_t size) {
  set_has_hitspriteeffect();
  if (hitspriteeffect_ == &::google::protobuf::internal::kEmptyString) {
    hitspriteeffect_ = new ::std::string;
  }
  hitspriteeffect_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TrajectoryBullet::mutable_hitspriteeffect() {
  set_has_hitspriteeffect();
  if (hitspriteeffect_ == &::google::protobuf::internal::kEmptyString) {
    hitspriteeffect_ = new ::std::string;
  }
  return hitspriteeffect_;
}
inline ::std::string* TrajectoryBullet::release_hitspriteeffect() {
  clear_has_hitspriteeffect();
  if (hitspriteeffect_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hitspriteeffect_;
    hitspriteeffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TrajectoryBullet::set_allocated_hitspriteeffect(::std::string* hitspriteeffect) {
  if (hitspriteeffect_ != &::google::protobuf::internal::kEmptyString) {
    delete hitspriteeffect_;
  }
  if (hitspriteeffect) {
    set_has_hitspriteeffect();
    hitspriteeffect_ = hitspriteeffect;
  } else {
    clear_has_hitspriteeffect();
    hitspriteeffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional sint32 CreateChildTime = 68 [default = -1];
inline bool TrajectoryBullet::has_createchildtime() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void TrajectoryBullet::set_has_createchildtime() {
  _has_bits_[1] |= 0x40000000u;
}
inline void TrajectoryBullet::clear_has_createchildtime() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void TrajectoryBullet::clear_createchildtime() {
  createchildtime_ = -1;
  clear_has_createchildtime();
}
inline ::google::protobuf::int32 TrajectoryBullet::createchildtime() const {
  return createchildtime_;
}
inline void TrajectoryBullet::set_createchildtime(::google::protobuf::int32 value) {
  set_has_createchildtime();
  createchildtime_ = value;
}

// repeated .TrajectoryBulletChild ChildArr = 52;
inline int TrajectoryBullet::childarr_size() const {
  return childarr_.size();
}
inline void TrajectoryBullet::clear_childarr() {
  childarr_.Clear();
}
inline const ::TrajectoryBulletChild& TrajectoryBullet::childarr(int index) const {
  return childarr_.Get(index);
}
inline ::TrajectoryBulletChild* TrajectoryBullet::mutable_childarr(int index) {
  return childarr_.Mutable(index);
}
inline ::TrajectoryBulletChild* TrajectoryBullet::add_childarr() {
  return childarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TrajectoryBulletChild >&
TrajectoryBullet::childarr() const {
  return childarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::TrajectoryBulletChild >*
TrajectoryBullet::mutable_childarr() {
  return &childarr_;
}

// optional bool ModelRotate = 59 [default = false];
inline bool TrajectoryBullet::has_modelrotate() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void TrajectoryBullet::set_has_modelrotate() {
  _has_bits_[2] |= 0x00000001u;
}
inline void TrajectoryBullet::clear_has_modelrotate() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void TrajectoryBullet::clear_modelrotate() {
  modelrotate_ = false;
  clear_has_modelrotate();
}
inline bool TrajectoryBullet::modelrotate() const {
  return modelrotate_;
}
inline void TrajectoryBullet::set_modelrotate(bool value) {
  set_has_modelrotate();
  modelrotate_ = value;
}

// optional float RotateX = 60 [default = 0];
inline bool TrajectoryBullet::has_rotatex() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void TrajectoryBullet::set_has_rotatex() {
  _has_bits_[2] |= 0x00000002u;
}
inline void TrajectoryBullet::clear_has_rotatex() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void TrajectoryBullet::clear_rotatex() {
  rotatex_ = 0;
  clear_has_rotatex();
}
inline float TrajectoryBullet::rotatex() const {
  return rotatex_;
}
inline void TrajectoryBullet::set_rotatex(float value) {
  set_has_rotatex();
  rotatex_ = value;
}

// optional float RotateY = 61 [default = 0];
inline bool TrajectoryBullet::has_rotatey() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void TrajectoryBullet::set_has_rotatey() {
  _has_bits_[2] |= 0x00000004u;
}
inline void TrajectoryBullet::clear_has_rotatey() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void TrajectoryBullet::clear_rotatey() {
  rotatey_ = 0;
  clear_has_rotatey();
}
inline float TrajectoryBullet::rotatey() const {
  return rotatey_;
}
inline void TrajectoryBullet::set_rotatey(float value) {
  set_has_rotatey();
  rotatey_ = value;
}

// optional float RotateZ = 62 [default = 0];
inline bool TrajectoryBullet::has_rotatez() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void TrajectoryBullet::set_has_rotatez() {
  _has_bits_[2] |= 0x00000008u;
}
inline void TrajectoryBullet::clear_has_rotatez() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void TrajectoryBullet::clear_rotatez() {
  rotatez_ = 0;
  clear_has_rotatez();
}
inline float TrajectoryBullet::rotatez() const {
  return rotatez_;
}
inline void TrajectoryBullet::set_rotatez(float value) {
  set_has_rotatez();
  rotatez_ = value;
}

// optional float RotateSpeed = 63 [default = 0];
inline bool TrajectoryBullet::has_rotatespeed() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void TrajectoryBullet::set_has_rotatespeed() {
  _has_bits_[2] |= 0x00000010u;
}
inline void TrajectoryBullet::clear_has_rotatespeed() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void TrajectoryBullet::clear_rotatespeed() {
  rotatespeed_ = 0;
  clear_has_rotatespeed();
}
inline float TrajectoryBullet::rotatespeed() const {
  return rotatespeed_;
}
inline void TrajectoryBullet::set_rotatespeed(float value) {
  set_has_rotatespeed();
  rotatespeed_ = value;
}

// optional bool Clockwise = 83 [default = false];
inline bool TrajectoryBullet::has_clockwise() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void TrajectoryBullet::set_has_clockwise() {
  _has_bits_[2] |= 0x00000020u;
}
inline void TrajectoryBullet::clear_has_clockwise() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void TrajectoryBullet::clear_clockwise() {
  clockwise_ = false;
  clear_has_clockwise();
}
inline bool TrajectoryBullet::clockwise() const {
  return clockwise_;
}
inline void TrajectoryBullet::set_clockwise(bool value) {
  set_has_clockwise();
  clockwise_ = value;
}

// optional bool RotateMoveForward = 66 [default = false];
inline bool TrajectoryBullet::has_rotatemoveforward() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void TrajectoryBullet::set_has_rotatemoveforward() {
  _has_bits_[2] |= 0x00000040u;
}
inline void TrajectoryBullet::clear_has_rotatemoveforward() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void TrajectoryBullet::clear_rotatemoveforward() {
  rotatemoveforward_ = false;
  clear_has_rotatemoveforward();
}
inline bool TrajectoryBullet::rotatemoveforward() const {
  return rotatemoveforward_;
}
inline void TrajectoryBullet::set_rotatemoveforward(bool value) {
  set_has_rotatemoveforward();
  rotatemoveforward_ = value;
}

// optional float HAngle = 69 [default = 0];
inline bool TrajectoryBullet::has_hangle() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void TrajectoryBullet::set_has_hangle() {
  _has_bits_[2] |= 0x00000080u;
}
inline void TrajectoryBullet::clear_has_hangle() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void TrajectoryBullet::clear_hangle() {
  hangle_ = 0;
  clear_has_hangle();
}
inline float TrajectoryBullet::hangle() const {
  return hangle_;
}
inline void TrajectoryBullet::set_hangle(float value) {
  set_has_hangle();
  hangle_ = value;
}

// optional float VAngle = 70 [default = 0];
inline bool TrajectoryBullet::has_vangle() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void TrajectoryBullet::set_has_vangle() {
  _has_bits_[2] |= 0x00000100u;
}
inline void TrajectoryBullet::clear_has_vangle() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void TrajectoryBullet::clear_vangle() {
  vangle_ = 0;
  clear_has_vangle();
}
inline float TrajectoryBullet::vangle() const {
  return vangle_;
}
inline void TrajectoryBullet::set_vangle(float value) {
  set_has_vangle();
  vangle_ = value;
}

// optional bool GroundBounce = 76 [default = false];
inline bool TrajectoryBullet::has_groundbounce() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void TrajectoryBullet::set_has_groundbounce() {
  _has_bits_[2] |= 0x00000200u;
}
inline void TrajectoryBullet::clear_has_groundbounce() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void TrajectoryBullet::clear_groundbounce() {
  groundbounce_ = false;
  clear_has_groundbounce();
}
inline bool TrajectoryBullet::groundbounce() const {
  return groundbounce_;
}
inline void TrajectoryBullet::set_groundbounce(bool value) {
  set_has_groundbounce();
  groundbounce_ = value;
}

// optional bool WallBounce = 77 [default = false];
inline bool TrajectoryBullet::has_wallbounce() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
inline void TrajectoryBullet::set_has_wallbounce() {
  _has_bits_[2] |= 0x00000400u;
}
inline void TrajectoryBullet::clear_has_wallbounce() {
  _has_bits_[2] &= ~0x00000400u;
}
inline void TrajectoryBullet::clear_wallbounce() {
  wallbounce_ = false;
  clear_has_wallbounce();
}
inline bool TrajectoryBullet::wallbounce() const {
  return wallbounce_;
}
inline void TrajectoryBullet::set_wallbounce(bool value) {
  set_has_wallbounce();
  wallbounce_ = value;
}

// optional float DampBounce = 78 [default = -1];
inline bool TrajectoryBullet::has_dampbounce() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
inline void TrajectoryBullet::set_has_dampbounce() {
  _has_bits_[2] |= 0x00000800u;
}
inline void TrajectoryBullet::clear_has_dampbounce() {
  _has_bits_[2] &= ~0x00000800u;
}
inline void TrajectoryBullet::clear_dampbounce() {
  dampbounce_ = -1;
  clear_has_dampbounce();
}
inline float TrajectoryBullet::dampbounce() const {
  return dampbounce_;
}
inline void TrajectoryBullet::set_dampbounce(float value) {
  set_has_dampbounce();
  dampbounce_ = value;
}

// optional sint32 BounceTimes = 79 [default = -1];
inline bool TrajectoryBullet::has_bouncetimes() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
inline void TrajectoryBullet::set_has_bouncetimes() {
  _has_bits_[2] |= 0x00001000u;
}
inline void TrajectoryBullet::clear_has_bouncetimes() {
  _has_bits_[2] &= ~0x00001000u;
}
inline void TrajectoryBullet::clear_bouncetimes() {
  bouncetimes_ = -1;
  clear_has_bouncetimes();
}
inline ::google::protobuf::int32 TrajectoryBullet::bouncetimes() const {
  return bouncetimes_;
}
inline void TrajectoryBullet::set_bouncetimes(::google::protobuf::int32 value) {
  set_has_bouncetimes();
  bouncetimes_ = value;
}

// optional float BounceVelocity = 80 [default = -1];
inline bool TrajectoryBullet::has_bouncevelocity() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
inline void TrajectoryBullet::set_has_bouncevelocity() {
  _has_bits_[2] |= 0x00002000u;
}
inline void TrajectoryBullet::clear_has_bouncevelocity() {
  _has_bits_[2] &= ~0x00002000u;
}
inline void TrajectoryBullet::clear_bouncevelocity() {
  bouncevelocity_ = -1;
  clear_has_bouncevelocity();
}
inline float TrajectoryBullet::bouncevelocity() const {
  return bouncevelocity_;
}
inline void TrajectoryBullet::set_bouncevelocity(float value) {
  set_has_bouncevelocity();
  bouncevelocity_ = value;
}

// -------------------------------------------------------------------

// TrajectoryBulletTrajectory

// optional sint32 TimeLength = 2 [default = -1];
inline bool TrajectoryBulletTrajectory::has_timelength() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrajectoryBulletTrajectory::set_has_timelength() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrajectoryBulletTrajectory::clear_has_timelength() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrajectoryBulletTrajectory::clear_timelength() {
  timelength_ = -1;
  clear_has_timelength();
}
inline ::google::protobuf::int32 TrajectoryBulletTrajectory::timelength() const {
  return timelength_;
}
inline void TrajectoryBulletTrajectory::set_timelength(::google::protobuf::int32 value) {
  set_has_timelength();
  timelength_ = value;
}

// repeated .TrajectoryTrajectory TrajectoryList = 1;
inline int TrajectoryBulletTrajectory::trajectorylist_size() const {
  return trajectorylist_.size();
}
inline void TrajectoryBulletTrajectory::clear_trajectorylist() {
  trajectorylist_.Clear();
}
inline const ::TrajectoryTrajectory& TrajectoryBulletTrajectory::trajectorylist(int index) const {
  return trajectorylist_.Get(index);
}
inline ::TrajectoryTrajectory* TrajectoryBulletTrajectory::mutable_trajectorylist(int index) {
  return trajectorylist_.Mutable(index);
}
inline ::TrajectoryTrajectory* TrajectoryBulletTrajectory::add_trajectorylist() {
  return trajectorylist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TrajectoryTrajectory >&
TrajectoryBulletTrajectory::trajectorylist() const {
  return trajectorylist_;
}
inline ::google::protobuf::RepeatedPtrField< ::TrajectoryTrajectory >*
TrajectoryBulletTrajectory::mutable_trajectorylist() {
  return &trajectorylist_;
}

// optional sint32 Id = 4 [default = -1];
inline bool TrajectoryBulletTrajectory::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrajectoryBulletTrajectory::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrajectoryBulletTrajectory::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrajectoryBulletTrajectory::clear_id() {
  id_ = -1;
  clear_has_id();
}
inline ::google::protobuf::int32 TrajectoryBulletTrajectory::id() const {
  return id_;
}
inline void TrajectoryBulletTrajectory::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// repeated .TrajectoryBullet BulletList = 5;
inline int TrajectoryBulletTrajectory::bulletlist_size() const {
  return bulletlist_.size();
}
inline void TrajectoryBulletTrajectory::clear_bulletlist() {
  bulletlist_.Clear();
}
inline const ::TrajectoryBullet& TrajectoryBulletTrajectory::bulletlist(int index) const {
  return bulletlist_.Get(index);
}
inline ::TrajectoryBullet* TrajectoryBulletTrajectory::mutable_bulletlist(int index) {
  return bulletlist_.Mutable(index);
}
inline ::TrajectoryBullet* TrajectoryBulletTrajectory::add_bulletlist() {
  return bulletlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TrajectoryBullet >&
TrajectoryBulletTrajectory::bulletlist() const {
  return bulletlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::TrajectoryBullet >*
TrajectoryBulletTrajectory::mutable_bulletlist() {
  return &bulletlist_;
}

// -------------------------------------------------------------------

// TrajectoryRpcSyncNotify

// -------------------------------------------------------------------

// TrajectoryBulletChild

// optional sint32 Id = 1 [default = -1];
inline bool TrajectoryBulletChild::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrajectoryBulletChild::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrajectoryBulletChild::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrajectoryBulletChild::clear_id() {
  id_ = -1;
  clear_has_id();
}
inline ::google::protobuf::int32 TrajectoryBulletChild::id() const {
  return id_;
}
inline void TrajectoryBulletChild::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional sint32 ShotTimeType = 2 [default = 0];
inline bool TrajectoryBulletChild::has_shottimetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrajectoryBulletChild::set_has_shottimetype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrajectoryBulletChild::clear_has_shottimetype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrajectoryBulletChild::clear_shottimetype() {
  shottimetype_ = 0;
  clear_has_shottimetype();
}
inline ::google::protobuf::int32 TrajectoryBulletChild::shottimetype() const {
  return shottimetype_;
}
inline void TrajectoryBulletChild::set_shottimetype(::google::protobuf::int32 value) {
  set_has_shottimetype();
  shottimetype_ = value;
}

// optional bool IsFirst = 3 [default = false];
inline bool TrajectoryBulletChild::has_isfirst() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrajectoryBulletChild::set_has_isfirst() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrajectoryBulletChild::clear_has_isfirst() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrajectoryBulletChild::clear_isfirst() {
  isfirst_ = false;
  clear_has_isfirst();
}
inline bool TrajectoryBulletChild::isfirst() const {
  return isfirst_;
}
inline void TrajectoryBulletChild::set_isfirst(bool value) {
  set_has_isfirst();
  isfirst_ = value;
}

// optional sint32 TimeMinInterval = 6 [default = -1];
inline bool TrajectoryBulletChild::has_timemininterval() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrajectoryBulletChild::set_has_timemininterval() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrajectoryBulletChild::clear_has_timemininterval() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrajectoryBulletChild::clear_timemininterval() {
  timemininterval_ = -1;
  clear_has_timemininterval();
}
inline ::google::protobuf::int32 TrajectoryBulletChild::timemininterval() const {
  return timemininterval_;
}
inline void TrajectoryBulletChild::set_timemininterval(::google::protobuf::int32 value) {
  set_has_timemininterval();
  timemininterval_ = value;
}

// optional sint32 TimeMaxInterval = 5 [default = -1];
inline bool TrajectoryBulletChild::has_timemaxinterval() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrajectoryBulletChild::set_has_timemaxinterval() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrajectoryBulletChild::clear_has_timemaxinterval() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrajectoryBulletChild::clear_timemaxinterval() {
  timemaxinterval_ = -1;
  clear_has_timemaxinterval();
}
inline ::google::protobuf::int32 TrajectoryBulletChild::timemaxinterval() const {
  return timemaxinterval_;
}
inline void TrajectoryBulletChild::set_timemaxinterval(::google::protobuf::int32 value) {
  set_has_timemaxinterval();
  timemaxinterval_ = value;
}

// optional sint32 TimeSeparator = 9 [default = -1];
inline bool TrajectoryBulletChild::has_timeseparator() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrajectoryBulletChild::set_has_timeseparator() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TrajectoryBulletChild::clear_has_timeseparator() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TrajectoryBulletChild::clear_timeseparator() {
  timeseparator_ = -1;
  clear_has_timeseparator();
}
inline ::google::protobuf::int32 TrajectoryBulletChild::timeseparator() const {
  return timeseparator_;
}
inline void TrajectoryBulletChild::set_timeseparator(::google::protobuf::int32 value) {
  set_has_timeseparator();
  timeseparator_ = value;
}

// optional sint32 TimeGreaterMinInterval = 10 [default = -1];
inline bool TrajectoryBulletChild::has_timegreatermininterval() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TrajectoryBulletChild::set_has_timegreatermininterval() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TrajectoryBulletChild::clear_has_timegreatermininterval() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TrajectoryBulletChild::clear_timegreatermininterval() {
  timegreatermininterval_ = -1;
  clear_has_timegreatermininterval();
}
inline ::google::protobuf::int32 TrajectoryBulletChild::timegreatermininterval() const {
  return timegreatermininterval_;
}
inline void TrajectoryBulletChild::set_timegreatermininterval(::google::protobuf::int32 value) {
  set_has_timegreatermininterval();
  timegreatermininterval_ = value;
}

// optional sint32 TimeGreaterMaxInterval = 11 [default = -1];
inline bool TrajectoryBulletChild::has_timegreatermaxinterval() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TrajectoryBulletChild::set_has_timegreatermaxinterval() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TrajectoryBulletChild::clear_has_timegreatermaxinterval() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TrajectoryBulletChild::clear_timegreatermaxinterval() {
  timegreatermaxinterval_ = -1;
  clear_has_timegreatermaxinterval();
}
inline ::google::protobuf::int32 TrajectoryBulletChild::timegreatermaxinterval() const {
  return timegreatermaxinterval_;
}
inline void TrajectoryBulletChild::set_timegreatermaxinterval(::google::protobuf::int32 value) {
  set_has_timegreatermaxinterval();
  timegreatermaxinterval_ = value;
}

// optional sint32 ChildMaxCount = 8 [default = -1];
inline bool TrajectoryBulletChild::has_childmaxcount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TrajectoryBulletChild::set_has_childmaxcount() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TrajectoryBulletChild::clear_has_childmaxcount() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TrajectoryBulletChild::clear_childmaxcount() {
  childmaxcount_ = -1;
  clear_has_childmaxcount();
}
inline ::google::protobuf::int32 TrajectoryBulletChild::childmaxcount() const {
  return childmaxcount_;
}
inline void TrajectoryBulletChild::set_childmaxcount(::google::protobuf::int32 value) {
  set_has_childmaxcount();
  childmaxcount_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TrajectoryCliRpc_2eproto__INCLUDED
