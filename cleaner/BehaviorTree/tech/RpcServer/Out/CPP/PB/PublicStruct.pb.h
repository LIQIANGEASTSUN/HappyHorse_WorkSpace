// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PublicStruct.proto

#ifndef PROTOBUF_PublicStruct_2eproto__INCLUDED
#define PROTOBUF_PublicStruct_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PublicStruct_2eproto();
void protobuf_AssignDesc_PublicStruct_2eproto();
void protobuf_ShutdownFile_PublicStruct_2eproto();

class Vector3PB;
class SmallUser;
class User;
class Color4PB;
class Vector2IntPB;

// ===================================================================

class Vector3PB : public ::google::protobuf::Message {
 public:
  Vector3PB();
  virtual ~Vector3PB();

  Vector3PB(const Vector3PB& from);

  inline Vector3PB& operator=(const Vector3PB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3PB& default_instance();

  void Swap(Vector3PB* other);

  // implements Message ----------------------------------------------

  Vector3PB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector3PB& from);
  void MergeFrom(const Vector3PB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float X = 1 [default = 0];
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // optional float Y = 2 [default = 0];
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // optional float Z = 3 [default = 0];
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // @@protoc_insertion_point(class_scope:Vector3PB)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float y_;
  float z_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static Vector3PB* default_instance_;
};
// -------------------------------------------------------------------

class SmallUser : public ::google::protobuf::Message {
 public:
  SmallUser();
  virtual ~SmallUser();

  SmallUser(const SmallUser& from);

  inline SmallUser& operator=(const SmallUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SmallUser& default_instance();

  void Swap(SmallUser* other);

  // implements Message ----------------------------------------------

  SmallUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SmallUser& from);
  void MergeFrom(const SmallUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 Uid = 1 [default = 0];
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);

  // optional string NickName = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional sint32 Head = 3 [default = 1];
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 3;
  inline ::google::protobuf::int32 head() const;
  inline void set_head(::google::protobuf::int32 value);

  // optional sint32 Rank = 4 [default = 0];
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 4;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional sint32 Status = 5 [default = 0];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional sint32 Channel = 12 [default = -1];
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 12;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SmallUser)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_channel();
  inline void clear_has_channel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 uid_;
  ::std::string* nickname_;
  ::google::protobuf::int32 head_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 channel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static SmallUser* default_instance_;
};
// -------------------------------------------------------------------

class User : public ::google::protobuf::Message {
 public:
  User();
  virtual ~User();

  User(const User& from);

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const User& default_instance();

  void Swap(User* other);

  // implements Message ----------------------------------------------

  User* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 Uid = 1 [default = 0];
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);

  // optional sint32 Status = 2 [default = 0];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional sint32 Lv = 3 [default = 1];
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 3;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // optional sint32 Exp = 4 [default = 0];
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 4;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // optional string NickName = 5;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 5;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional sint32 Head = 6 [default = 1];
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 6;
  inline ::google::protobuf::int32 head() const;
  inline void set_head(::google::protobuf::int32 value);

  // optional sint32 Gold = 7 [default = 0];
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 7;
  inline ::google::protobuf::int32 gold() const;
  inline void set_gold(::google::protobuf::int32 value);

  // optional sint32 Diamond = 8 [default = 0];
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 8;
  inline ::google::protobuf::int32 diamond() const;
  inline void set_diamond(::google::protobuf::int32 value);

  // optional sint32 Channel = 9 [default = 0];
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 9;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:User)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_diamond();
  inline void clear_has_diamond();
  inline void set_has_channel();
  inline void clear_has_channel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 uid_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 lv_;
  ::std::string* nickname_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 head_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::int32 diamond_;
  ::google::protobuf::int32 channel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static User* default_instance_;
};
// -------------------------------------------------------------------

class Color4PB : public ::google::protobuf::Message {
 public:
  Color4PB();
  virtual ~Color4PB();

  Color4PB(const Color4PB& from);

  inline Color4PB& operator=(const Color4PB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Color4PB& default_instance();

  void Swap(Color4PB* other);

  // implements Message ----------------------------------------------

  Color4PB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Color4PB& from);
  void MergeFrom(const Color4PB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 R = 1 [default = -1];
  inline bool has_r() const;
  inline void clear_r();
  static const int kRFieldNumber = 1;
  inline ::google::protobuf::int32 r() const;
  inline void set_r(::google::protobuf::int32 value);

  // optional sint32 G = 2 [default = -1];
  inline bool has_g() const;
  inline void clear_g();
  static const int kGFieldNumber = 2;
  inline ::google::protobuf::int32 g() const;
  inline void set_g(::google::protobuf::int32 value);

  // optional sint32 B = 3 [default = -1];
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 3;
  inline ::google::protobuf::int32 b() const;
  inline void set_b(::google::protobuf::int32 value);

  // optional sint32 A = 4 [default = -1];
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 4;
  inline ::google::protobuf::int32 a() const;
  inline void set_a(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Color4PB)
 private:
  inline void set_has_r();
  inline void clear_has_r();
  inline void set_has_g();
  inline void clear_has_g();
  inline void set_has_b();
  inline void clear_has_b();
  inline void set_has_a();
  inline void clear_has_a();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 r_;
  ::google::protobuf::int32 g_;
  ::google::protobuf::int32 b_;
  ::google::protobuf::int32 a_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static Color4PB* default_instance_;
};
// -------------------------------------------------------------------

class Vector2IntPB : public ::google::protobuf::Message {
 public:
  Vector2IntPB();
  virtual ~Vector2IntPB();

  Vector2IntPB(const Vector2IntPB& from);

  inline Vector2IntPB& operator=(const Vector2IntPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector2IntPB& default_instance();

  void Swap(Vector2IntPB* other);

  // implements Message ----------------------------------------------

  Vector2IntPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector2IntPB& from);
  void MergeFrom(const Vector2IntPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 X = 1 [default = -1];
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // optional sint32 Y = 2 [default = -1];
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Vector2IntPB)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PublicStruct_2eproto();
  friend void protobuf_AssignDesc_PublicStruct_2eproto();
  friend void protobuf_ShutdownFile_PublicStruct_2eproto();

  void InitAsDefaultInstance();
  static Vector2IntPB* default_instance_;
};
// ===================================================================


// ===================================================================

// Vector3PB

// optional float X = 1 [default = 0];
inline bool Vector3PB::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector3PB::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector3PB::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector3PB::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Vector3PB::x() const {
  return x_;
}
inline void Vector3PB::set_x(float value) {
  set_has_x();
  x_ = value;
}

// optional float Y = 2 [default = 0];
inline bool Vector3PB::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector3PB::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector3PB::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector3PB::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Vector3PB::y() const {
  return y_;
}
inline void Vector3PB::set_y(float value) {
  set_has_y();
  y_ = value;
}

// optional float Z = 3 [default = 0];
inline bool Vector3PB::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vector3PB::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vector3PB::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vector3PB::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Vector3PB::z() const {
  return z_;
}
inline void Vector3PB::set_z(float value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// SmallUser

// optional sint64 Uid = 1 [default = 0];
inline bool SmallUser::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SmallUser::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SmallUser::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SmallUser::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::int64 SmallUser::uid() const {
  return uid_;
}
inline void SmallUser::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// optional string NickName = 2;
inline bool SmallUser::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SmallUser::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SmallUser::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SmallUser::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& SmallUser::nickname() const {
  return *nickname_;
}
inline void SmallUser::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void SmallUser::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void SmallUser::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SmallUser::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* SmallUser::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SmallUser::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional sint32 Head = 3 [default = 1];
inline bool SmallUser::has_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SmallUser::set_has_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SmallUser::clear_has_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SmallUser::clear_head() {
  head_ = 1;
  clear_has_head();
}
inline ::google::protobuf::int32 SmallUser::head() const {
  return head_;
}
inline void SmallUser::set_head(::google::protobuf::int32 value) {
  set_has_head();
  head_ = value;
}

// optional sint32 Rank = 4 [default = 0];
inline bool SmallUser::has_rank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SmallUser::set_has_rank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SmallUser::clear_has_rank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SmallUser::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 SmallUser::rank() const {
  return rank_;
}
inline void SmallUser::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional sint32 Status = 5 [default = 0];
inline bool SmallUser::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SmallUser::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SmallUser::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SmallUser::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 SmallUser::status() const {
  return status_;
}
inline void SmallUser::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional sint32 Channel = 12 [default = -1];
inline bool SmallUser::has_channel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SmallUser::set_has_channel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SmallUser::clear_has_channel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SmallUser::clear_channel() {
  channel_ = -1;
  clear_has_channel();
}
inline ::google::protobuf::int32 SmallUser::channel() const {
  return channel_;
}
inline void SmallUser::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
}

// -------------------------------------------------------------------

// User

// optional sint64 Uid = 1 [default = 0];
inline bool User::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void User::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void User::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void User::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::int64 User::uid() const {
  return uid_;
}
inline void User::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// optional sint32 Status = 2 [default = 0];
inline bool User::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void User::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void User::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void User::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 User::status() const {
  return status_;
}
inline void User::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional sint32 Lv = 3 [default = 1];
inline bool User::has_lv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void User::set_has_lv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void User::clear_has_lv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void User::clear_lv() {
  lv_ = 1;
  clear_has_lv();
}
inline ::google::protobuf::int32 User::lv() const {
  return lv_;
}
inline void User::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// optional sint32 Exp = 4 [default = 0];
inline bool User::has_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void User::set_has_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void User::clear_has_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void User::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 User::exp() const {
  return exp_;
}
inline void User::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional string NickName = 5;
inline bool User::has_nickname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void User::set_has_nickname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void User::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void User::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& User::nickname() const {
  return *nickname_;
}
inline void User::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void User::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void User::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* User::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* User::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void User::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional sint32 Head = 6 [default = 1];
inline bool User::has_head() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void User::set_has_head() {
  _has_bits_[0] |= 0x00000020u;
}
inline void User::clear_has_head() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void User::clear_head() {
  head_ = 1;
  clear_has_head();
}
inline ::google::protobuf::int32 User::head() const {
  return head_;
}
inline void User::set_head(::google::protobuf::int32 value) {
  set_has_head();
  head_ = value;
}

// optional sint32 Gold = 7 [default = 0];
inline bool User::has_gold() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void User::set_has_gold() {
  _has_bits_[0] |= 0x00000040u;
}
inline void User::clear_has_gold() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void User::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 User::gold() const {
  return gold_;
}
inline void User::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
}

// optional sint32 Diamond = 8 [default = 0];
inline bool User::has_diamond() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void User::set_has_diamond() {
  _has_bits_[0] |= 0x00000080u;
}
inline void User::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void User::clear_diamond() {
  diamond_ = 0;
  clear_has_diamond();
}
inline ::google::protobuf::int32 User::diamond() const {
  return diamond_;
}
inline void User::set_diamond(::google::protobuf::int32 value) {
  set_has_diamond();
  diamond_ = value;
}

// optional sint32 Channel = 9 [default = 0];
inline bool User::has_channel() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void User::set_has_channel() {
  _has_bits_[0] |= 0x00000100u;
}
inline void User::clear_has_channel() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void User::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::google::protobuf::int32 User::channel() const {
  return channel_;
}
inline void User::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
}

// -------------------------------------------------------------------

// Color4PB

// optional sint32 R = 1 [default = -1];
inline bool Color4PB::has_r() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Color4PB::set_has_r() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Color4PB::clear_has_r() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Color4PB::clear_r() {
  r_ = -1;
  clear_has_r();
}
inline ::google::protobuf::int32 Color4PB::r() const {
  return r_;
}
inline void Color4PB::set_r(::google::protobuf::int32 value) {
  set_has_r();
  r_ = value;
}

// optional sint32 G = 2 [default = -1];
inline bool Color4PB::has_g() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Color4PB::set_has_g() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Color4PB::clear_has_g() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Color4PB::clear_g() {
  g_ = -1;
  clear_has_g();
}
inline ::google::protobuf::int32 Color4PB::g() const {
  return g_;
}
inline void Color4PB::set_g(::google::protobuf::int32 value) {
  set_has_g();
  g_ = value;
}

// optional sint32 B = 3 [default = -1];
inline bool Color4PB::has_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Color4PB::set_has_b() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Color4PB::clear_has_b() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Color4PB::clear_b() {
  b_ = -1;
  clear_has_b();
}
inline ::google::protobuf::int32 Color4PB::b() const {
  return b_;
}
inline void Color4PB::set_b(::google::protobuf::int32 value) {
  set_has_b();
  b_ = value;
}

// optional sint32 A = 4 [default = -1];
inline bool Color4PB::has_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Color4PB::set_has_a() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Color4PB::clear_has_a() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Color4PB::clear_a() {
  a_ = -1;
  clear_has_a();
}
inline ::google::protobuf::int32 Color4PB::a() const {
  return a_;
}
inline void Color4PB::set_a(::google::protobuf::int32 value) {
  set_has_a();
  a_ = value;
}

// -------------------------------------------------------------------

// Vector2IntPB

// optional sint32 X = 1 [default = -1];
inline bool Vector2IntPB::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector2IntPB::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector2IntPB::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector2IntPB::clear_x() {
  x_ = -1;
  clear_has_x();
}
inline ::google::protobuf::int32 Vector2IntPB::x() const {
  return x_;
}
inline void Vector2IntPB::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// optional sint32 Y = 2 [default = -1];
inline bool Vector2IntPB::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector2IntPB::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector2IntPB::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector2IntPB::clear_y() {
  y_ = -1;
  clear_has_y();
}
inline ::google::protobuf::int32 Vector2IntPB::y() const {
  return y_;
}
inline void Vector2IntPB::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PublicStruct_2eproto__INCLUDED
