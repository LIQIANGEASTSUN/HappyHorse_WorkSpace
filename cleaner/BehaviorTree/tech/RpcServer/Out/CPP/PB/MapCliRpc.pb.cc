// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MapCliRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MapCliRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MapSceneData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapSceneData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapBasePlaymodeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapBasePlaymodeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapTeamData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapTeamData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapSprayData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapSprayData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapPvpData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapPvpData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapPRS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapPRS_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapCameraData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapCameraData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapLiftingConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapLiftingConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapPositionGraph_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapPositionGraph_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MapCliRpc_2eproto() {
  protobuf_AddDesc_MapCliRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MapCliRpc.proto");
  GOOGLE_CHECK(file != NULL);
  MapSceneData_descriptor_ = file->message_type(0);
  static const int MapSceneData_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapSceneData, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapSceneData, scenename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapSceneData, scenefilename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapSceneData, clientscenename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapSceneData, mapsimplify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapSceneData, mapsimplifyrotate1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapSceneData, mapsimplifyrotate2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapSceneData, mapposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapSceneData, mapposy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapSceneData, mappivotx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapSceneData, mappivoty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapSceneData, uiworldratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapSceneData, mapdetailed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapSceneData, mapdetailedrotate1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapSceneData, mapdetailedrotate2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapSceneData, serveruiradio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapSceneData, pvp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapSceneData, sprays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapSceneData, teams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapSceneData, lowmodel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapSceneData, alphaspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapSceneData, transferradius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapSceneData, mapeffectaura_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapSceneData, mapeffecttransfer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapSceneData, mapeffectarrive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapSceneData, pathgraphs_),
  };
  MapSceneData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapSceneData_descriptor_,
      MapSceneData::default_instance_,
      MapSceneData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapSceneData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapSceneData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapSceneData));
  MapBasePlaymodeData_descriptor_ = file->message_type(1);
  static const int MapBasePlaymodeData_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapBasePlaymodeData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapBasePlaymodeData, desc1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapBasePlaymodeData, desc2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapBasePlaymodeData, modename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapBasePlaymodeData, uibg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapBasePlaymodeData, maincameras_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapBasePlaymodeData, slavecameras_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapBasePlaymodeData, liftings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapBasePlaymodeData, characteranim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapBasePlaymodeData, readyfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapBasePlaymodeData, readytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapBasePlaymodeData, controltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapBasePlaymodeData, changepritime_),
  };
  MapBasePlaymodeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapBasePlaymodeData_descriptor_,
      MapBasePlaymodeData::default_instance_,
      MapBasePlaymodeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapBasePlaymodeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapBasePlaymodeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapBasePlaymodeData));
  MapTeamData_descriptor_ = file->message_type(2);
  static const int MapTeamData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapTeamData, guard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapTeamData, pedestal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapTeamData, spawnpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapTeamData, lifting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapTeamData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapTeamData, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapTeamData, pedestalposition_),
  };
  MapTeamData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapTeamData_descriptor_,
      MapTeamData::default_instance_,
      MapTeamData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapTeamData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapTeamData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapTeamData));
  MapSprayData_descriptor_ = file->message_type(3);
  static const int MapSprayData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapSprayData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapSprayData, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapSprayData, dpi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapSprayData, coefficient_),
  };
  MapSprayData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapSprayData_descriptor_,
      MapSprayData::default_instance_,
      MapSprayData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapSprayData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapSprayData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapSprayData));
  MapPvpData_descriptor_ = file->message_type(4);
  static const int MapPvpData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPvpData, basedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPvpData, addhere_),
  };
  MapPvpData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapPvpData_descriptor_,
      MapPvpData::default_instance_,
      MapPvpData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPvpData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPvpData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapPvpData));
  MapPRS_descriptor_ = file->message_type(5);
  static const int MapPRS_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPRS, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPRS, eularrotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPRS, scale_),
  };
  MapPRS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapPRS_descriptor_,
      MapPRS::default_instance_,
      MapPRS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPRS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPRS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapPRS));
  MapCameraData_descriptor_ = file->message_type(6);
  static const int MapCameraData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapCameraData, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapCameraData, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapCameraData, endtime_),
  };
  MapCameraData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapCameraData_descriptor_,
      MapCameraData::default_instance_,
      MapCameraData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapCameraData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapCameraData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapCameraData));
  MapLiftingConfig_descriptor_ = file->message_type(7);
  static const int MapLiftingConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapLiftingConfig, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapLiftingConfig, speed_),
  };
  MapLiftingConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapLiftingConfig_descriptor_,
      MapLiftingConfig::default_instance_,
      MapLiftingConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapLiftingConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapLiftingConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapLiftingConfig));
  MapPositionGraph_descriptor_ = file->message_type(8);
  static const int MapPositionGraph_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPositionGraph, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPositionGraph, vertices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPositionGraph, edges_),
  };
  MapPositionGraph_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapPositionGraph_descriptor_,
      MapPositionGraph::default_instance_,
      MapPositionGraph_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPositionGraph, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPositionGraph, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapPositionGraph));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MapCliRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapSceneData_descriptor_, &MapSceneData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapBasePlaymodeData_descriptor_, &MapBasePlaymodeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapTeamData_descriptor_, &MapTeamData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapSprayData_descriptor_, &MapSprayData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapPvpData_descriptor_, &MapPvpData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapPRS_descriptor_, &MapPRS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapCameraData_descriptor_, &MapCameraData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapLiftingConfig_descriptor_, &MapLiftingConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapPositionGraph_descriptor_, &MapPositionGraph::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MapCliRpc_2eproto() {
  delete MapSceneData::default_instance_;
  delete MapSceneData_reflection_;
  delete MapBasePlaymodeData::default_instance_;
  delete MapBasePlaymodeData_reflection_;
  delete MapTeamData::default_instance_;
  delete MapTeamData_reflection_;
  delete MapSprayData::default_instance_;
  delete MapSprayData_reflection_;
  delete MapPvpData::default_instance_;
  delete MapPvpData_reflection_;
  delete MapPRS::default_instance_;
  delete MapPRS_reflection_;
  delete MapCameraData::default_instance_;
  delete MapCameraData_reflection_;
  delete MapLiftingConfig::default_instance_;
  delete MapLiftingConfig_reflection_;
  delete MapPositionGraph::default_instance_;
  delete MapPositionGraph_reflection_;
}

void protobuf_AddDesc_MapCliRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017MapCliRpc.proto\032\022PublicStruct.proto\"\251\005"
    "\n\014MapSceneData\022\021\n\005MapId\030\001 \001(\021:\002-1\022\021\n\tSce"
    "neName\030\002 \001(\t\022\025\n\rSceneFileName\030\024 \001(\t\022\027\n\017C"
    "lientSceneName\030\023 \001(\t\022\023\n\013MapSimplify\030\003 \001("
    "\t\022\036\n\022MapSimplifyRotate1\030\004 \001(\021:\002-1\022\036\n\022Map"
    "SimplifyRotate2\030\005 \001(\021:\002-1\022\023\n\007MapPosX\030\006 \001"
    "(\002:\002-1\022\023\n\007MapPosY\030\007 \001(\002:\002-1\022\025\n\tMapPivotX"
    "\030\010 \001(\002:\002-1\022\025\n\tMapPivotY\030\t \001(\002:\002-1\022\030\n\014UIW"
    "orldRatio\030\n \001(\002:\002-1\022\023\n\013MapDetailed\030\013 \001(\t"
    "\022\036\n\022MapDetailedRotate1\030\014 \001(\021:\002-1\022\036\n\022MapD"
    "etailedRotate2\030\r \001(\021:\002-1\022\031\n\rServerUIRadi"
    "o\030\016 \001(\002:\002-1\022\030\n\003Pvp\030\017 \001(\0132\013.MapPvpData\022\035\n"
    "\006Sprays\030\020 \003(\0132\r.MapSprayData\022\033\n\005Teams\030\021 "
    "\003(\0132\014.MapTeamData\022\020\n\010LowModel\030\022 \001(\t\022\026\n\nA"
    "lphaSpeed\030\025 \001(\002:\002-1\022\032\n\016TransferRadius\030\026 "
    "\001(\002:\002-1\022\025\n\rMapEffectAura\030\027 \001(\t\022\031\n\021MapEff"
    "ecttransfer\030\030 \001(\t\022\027\n\017MapEffectArrive\030\031 \001"
    "(\t\022%\n\nPathGraphs\030\032 \003(\0132\021.MapPositionGrap"
    "h\"\312\002\n\023MapBasePlaymodeData\022\020\n\004Type\030\005 \001(\021:"
    "\002-1\022\r\n\005Desc1\030\001 \001(\t\022\r\n\005Desc2\030\002 \001(\t\022\020\n\010Mod"
    "eName\030\003 \001(\t\022\014\n\004Uibg\030\004 \001(\t\022#\n\013MainCameras"
    "\030\006 \003(\0132\016.MapCameraData\022$\n\014SlaveCameras\030\007"
    " \003(\0132\016.MapCameraData\022#\n\010Liftings\030\010 \003(\0132\021"
    ".MapLiftingConfig\022\025\n\rCharacterAnim\030\t \001(\t"
    "\022\021\n\tReadyFile\030\n \001(\t\022\025\n\tReadyTime\030\013 \001(\002:\002"
    "-1\022\027\n\013ControlTime\030\014 \001(\002:\002-1\022\031\n\rChangePri"
    "Time\030\r \001(\002:\002-1\"\255\001\n\013MapTeamData\022\r\n\005Guard\030"
    "\001 \001(\t\022\020\n\010Pedestal\030\002 \001(\t\022\034\n\013SpawnPoints\030\003"
    " \003(\0132\007.MapPRS\022\017\n\007Lifting\030\004 \001(\t\022\016\n\002Id\030\005 \001"
    "(\021:\002-1\022\030\n\005Color\030\006 \001(\0132\t.Color4PB\022$\n\020Pede"
    "stalPosition\030\007 \001(\0132\n.Vector3PB\"d\n\014MapSpr"
    "ayData\022\014\n\004Name\030\001 \001(\t\022\034\n\010Position\030\002 \001(\0132\n"
    ".Vector3PB\022\017\n\003Dpi\030\003 \001(\021:\002-1\022\027\n\013Coefficie"
    "nt\030\004 \001(\002:\002-1\"E\n\nMapPvpData\022&\n\010BaseData\030\001"
    " \001(\0132\024.MapBasePlaymodeData\022\017\n\007AddHere\030\002 "
    "\001(\t\"d\n\006MapPRS\022\034\n\010Position\030\001 \001(\0132\n.Vector"
    "3PB\022!\n\rEularRotation\030\002 \001(\0132\n.Vector3PB\022\031"
    "\n\005Scale\030\003 \001(\0132\n.Vector3PB\"I\n\rMapCameraDa"
    "ta\022\014\n\004Path\030\001 \001(\t\022\025\n\tStartTime\030\002 \001(\002:\002-1\022"
    "\023\n\007EndTime\030\003 \001(\002:\002-1\"<\n\020MapLiftingConfig"
    "\022\025\n\tStartTime\030\001 \001(\002:\002-1\022\021\n\005Speed\030\002 \001(\002:\002"
    "-1\"^\n\020MapPositionGraph\022\016\n\002Id\030\001 \001(\021:\002-1\022\034"
    "\n\010Vertices\030\002 \003(\0132\n.Vector3PB\022\034\n\005Edges\030\003 "
    "\003(\0132\r.Vector2IntPB", 1738);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MapCliRpc.proto", &protobuf_RegisterTypes);
  MapSceneData::default_instance_ = new MapSceneData();
  MapBasePlaymodeData::default_instance_ = new MapBasePlaymodeData();
  MapTeamData::default_instance_ = new MapTeamData();
  MapSprayData::default_instance_ = new MapSprayData();
  MapPvpData::default_instance_ = new MapPvpData();
  MapPRS::default_instance_ = new MapPRS();
  MapCameraData::default_instance_ = new MapCameraData();
  MapLiftingConfig::default_instance_ = new MapLiftingConfig();
  MapPositionGraph::default_instance_ = new MapPositionGraph();
  MapSceneData::default_instance_->InitAsDefaultInstance();
  MapBasePlaymodeData::default_instance_->InitAsDefaultInstance();
  MapTeamData::default_instance_->InitAsDefaultInstance();
  MapSprayData::default_instance_->InitAsDefaultInstance();
  MapPvpData::default_instance_->InitAsDefaultInstance();
  MapPRS::default_instance_->InitAsDefaultInstance();
  MapCameraData::default_instance_->InitAsDefaultInstance();
  MapLiftingConfig::default_instance_->InitAsDefaultInstance();
  MapPositionGraph::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MapCliRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MapCliRpc_2eproto {
  StaticDescriptorInitializer_MapCliRpc_2eproto() {
    protobuf_AddDesc_MapCliRpc_2eproto();
  }
} static_descriptor_initializer_MapCliRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MapSceneData::kMapIdFieldNumber;
const int MapSceneData::kSceneNameFieldNumber;
const int MapSceneData::kSceneFileNameFieldNumber;
const int MapSceneData::kClientSceneNameFieldNumber;
const int MapSceneData::kMapSimplifyFieldNumber;
const int MapSceneData::kMapSimplifyRotate1FieldNumber;
const int MapSceneData::kMapSimplifyRotate2FieldNumber;
const int MapSceneData::kMapPosXFieldNumber;
const int MapSceneData::kMapPosYFieldNumber;
const int MapSceneData::kMapPivotXFieldNumber;
const int MapSceneData::kMapPivotYFieldNumber;
const int MapSceneData::kUIWorldRatioFieldNumber;
const int MapSceneData::kMapDetailedFieldNumber;
const int MapSceneData::kMapDetailedRotate1FieldNumber;
const int MapSceneData::kMapDetailedRotate2FieldNumber;
const int MapSceneData::kServerUIRadioFieldNumber;
const int MapSceneData::kPvpFieldNumber;
const int MapSceneData::kSpraysFieldNumber;
const int MapSceneData::kTeamsFieldNumber;
const int MapSceneData::kLowModelFieldNumber;
const int MapSceneData::kAlphaSpeedFieldNumber;
const int MapSceneData::kTransferRadiusFieldNumber;
const int MapSceneData::kMapEffectAuraFieldNumber;
const int MapSceneData::kMapEffecttransferFieldNumber;
const int MapSceneData::kMapEffectArriveFieldNumber;
const int MapSceneData::kPathGraphsFieldNumber;
#endif  // !_MSC_VER

MapSceneData::MapSceneData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapSceneData::InitAsDefaultInstance() {
  pvp_ = const_cast< ::MapPvpData*>(&::MapPvpData::default_instance());
}

MapSceneData::MapSceneData(const MapSceneData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapSceneData::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = -1;
  scenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scenefilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clientscenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mapsimplify_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mapsimplifyrotate1_ = -1;
  mapsimplifyrotate2_ = -1;
  mapposx_ = -1;
  mapposy_ = -1;
  mappivotx_ = -1;
  mappivoty_ = -1;
  uiworldratio_ = -1;
  mapdetailed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mapdetailedrotate1_ = -1;
  mapdetailedrotate2_ = -1;
  serveruiradio_ = -1;
  pvp_ = NULL;
  lowmodel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  alphaspeed_ = -1;
  transferradius_ = -1;
  mapeffectaura_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mapeffecttransfer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mapeffectarrive_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapSceneData::~MapSceneData() {
  SharedDtor();
}

void MapSceneData::SharedDtor() {
  if (scenename_ != &::google::protobuf::internal::kEmptyString) {
    delete scenename_;
  }
  if (scenefilename_ != &::google::protobuf::internal::kEmptyString) {
    delete scenefilename_;
  }
  if (clientscenename_ != &::google::protobuf::internal::kEmptyString) {
    delete clientscenename_;
  }
  if (mapsimplify_ != &::google::protobuf::internal::kEmptyString) {
    delete mapsimplify_;
  }
  if (mapdetailed_ != &::google::protobuf::internal::kEmptyString) {
    delete mapdetailed_;
  }
  if (lowmodel_ != &::google::protobuf::internal::kEmptyString) {
    delete lowmodel_;
  }
  if (mapeffectaura_ != &::google::protobuf::internal::kEmptyString) {
    delete mapeffectaura_;
  }
  if (mapeffecttransfer_ != &::google::protobuf::internal::kEmptyString) {
    delete mapeffecttransfer_;
  }
  if (mapeffectarrive_ != &::google::protobuf::internal::kEmptyString) {
    delete mapeffectarrive_;
  }
  if (this != default_instance_) {
    delete pvp_;
  }
}

void MapSceneData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapSceneData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapSceneData_descriptor_;
}

const MapSceneData& MapSceneData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapCliRpc_2eproto();
  return *default_instance_;
}

MapSceneData* MapSceneData::default_instance_ = NULL;

MapSceneData* MapSceneData::New() const {
  return new MapSceneData;
}

void MapSceneData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = -1;
    if (has_scenename()) {
      if (scenename_ != &::google::protobuf::internal::kEmptyString) {
        scenename_->clear();
      }
    }
    if (has_scenefilename()) {
      if (scenefilename_ != &::google::protobuf::internal::kEmptyString) {
        scenefilename_->clear();
      }
    }
    if (has_clientscenename()) {
      if (clientscenename_ != &::google::protobuf::internal::kEmptyString) {
        clientscenename_->clear();
      }
    }
    if (has_mapsimplify()) {
      if (mapsimplify_ != &::google::protobuf::internal::kEmptyString) {
        mapsimplify_->clear();
      }
    }
    mapsimplifyrotate1_ = -1;
    mapsimplifyrotate2_ = -1;
    mapposx_ = -1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    mapposy_ = -1;
    mappivotx_ = -1;
    mappivoty_ = -1;
    uiworldratio_ = -1;
    if (has_mapdetailed()) {
      if (mapdetailed_ != &::google::protobuf::internal::kEmptyString) {
        mapdetailed_->clear();
      }
    }
    mapdetailedrotate1_ = -1;
    mapdetailedrotate2_ = -1;
    serveruiradio_ = -1;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_pvp()) {
      if (pvp_ != NULL) pvp_->::MapPvpData::Clear();
    }
    if (has_lowmodel()) {
      if (lowmodel_ != &::google::protobuf::internal::kEmptyString) {
        lowmodel_->clear();
      }
    }
    alphaspeed_ = -1;
    transferradius_ = -1;
    if (has_mapeffectaura()) {
      if (mapeffectaura_ != &::google::protobuf::internal::kEmptyString) {
        mapeffectaura_->clear();
      }
    }
    if (has_mapeffecttransfer()) {
      if (mapeffecttransfer_ != &::google::protobuf::internal::kEmptyString) {
        mapeffecttransfer_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_mapeffectarrive()) {
      if (mapeffectarrive_ != &::google::protobuf::internal::kEmptyString) {
        mapeffectarrive_->clear();
      }
    }
  }
  sprays_.Clear();
  teams_.Clear();
  pathgraphs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapSceneData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 MapId = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_SceneName;
        break;
      }

      // optional string SceneName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SceneName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scenename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scenename().data(), this->scenename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_MapSimplify;
        break;
      }

      // optional string MapSimplify = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MapSimplify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapsimplify()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mapsimplify().data(), this->mapsimplify().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_MapSimplifyRotate1;
        break;
      }

      // optional sint32 MapSimplifyRotate1 = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MapSimplifyRotate1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &mapsimplifyrotate1_)));
          set_has_mapsimplifyrotate1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_MapSimplifyRotate2;
        break;
      }

      // optional sint32 MapSimplifyRotate2 = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MapSimplifyRotate2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &mapsimplifyrotate2_)));
          set_has_mapsimplifyrotate2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_MapPosX;
        break;
      }

      // optional float MapPosX = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_MapPosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mapposx_)));
          set_has_mapposx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_MapPosY;
        break;
      }

      // optional float MapPosY = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_MapPosY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mapposy_)));
          set_has_mapposy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_MapPivotX;
        break;
      }

      // optional float MapPivotX = 8 [default = -1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_MapPivotX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mappivotx_)));
          set_has_mappivotx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_MapPivotY;
        break;
      }

      // optional float MapPivotY = 9 [default = -1];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_MapPivotY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mappivoty_)));
          set_has_mappivoty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_UIWorldRatio;
        break;
      }

      // optional float UIWorldRatio = 10 [default = -1];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_UIWorldRatio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &uiworldratio_)));
          set_has_uiworldratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_MapDetailed;
        break;
      }

      // optional string MapDetailed = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MapDetailed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapdetailed()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mapdetailed().data(), this->mapdetailed().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_MapDetailedRotate1;
        break;
      }

      // optional sint32 MapDetailedRotate1 = 12 [default = -1];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MapDetailedRotate1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &mapdetailedrotate1_)));
          set_has_mapdetailedrotate1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_MapDetailedRotate2;
        break;
      }

      // optional sint32 MapDetailedRotate2 = 13 [default = -1];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MapDetailedRotate2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &mapdetailedrotate2_)));
          set_has_mapdetailedrotate2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_ServerUIRadio;
        break;
      }

      // optional float ServerUIRadio = 14 [default = -1];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ServerUIRadio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &serveruiradio_)));
          set_has_serveruiradio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_Pvp;
        break;
      }

      // optional .MapPvpData Pvp = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pvp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_Sprays;
        break;
      }

      // repeated .MapSprayData Sprays = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Sprays:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sprays()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_Sprays;
        if (input->ExpectTag(138)) goto parse_Teams;
        break;
      }

      // repeated .MapTeamData Teams = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Teams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teams()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_Teams;
        if (input->ExpectTag(146)) goto parse_LowModel;
        break;
      }

      // optional string LowModel = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LowModel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lowmodel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lowmodel().data(), this->lowmodel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_ClientSceneName;
        break;
      }

      // optional string ClientSceneName = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ClientSceneName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientscenename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientscenename().data(), this->clientscenename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_SceneFileName;
        break;
      }

      // optional string SceneFileName = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SceneFileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scenefilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scenefilename().data(), this->scenefilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_AlphaSpeed;
        break;
      }

      // optional float AlphaSpeed = 21 [default = -1];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_AlphaSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alphaspeed_)));
          set_has_alphaspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(181)) goto parse_TransferRadius;
        break;
      }

      // optional float TransferRadius = 22 [default = -1];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_TransferRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &transferradius_)));
          set_has_transferradius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_MapEffectAura;
        break;
      }

      // optional string MapEffectAura = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MapEffectAura:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapeffectaura()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mapeffectaura().data(), this->mapeffectaura().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_MapEffecttransfer;
        break;
      }

      // optional string MapEffecttransfer = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MapEffecttransfer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapeffecttransfer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mapeffecttransfer().data(), this->mapeffecttransfer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_MapEffectArrive;
        break;
      }

      // optional string MapEffectArrive = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MapEffectArrive:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapeffectarrive()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mapeffectarrive().data(), this->mapeffectarrive().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_PathGraphs;
        break;
      }

      // repeated .MapPositionGraph PathGraphs = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PathGraphs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pathgraphs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_PathGraphs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapSceneData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 MapId = 1 [default = -1];
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->mapid(), output);
  }

  // optional string SceneName = 2;
  if (has_scenename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scenename().data(), this->scenename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->scenename(), output);
  }

  // optional string MapSimplify = 3;
  if (has_mapsimplify()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mapsimplify().data(), this->mapsimplify().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mapsimplify(), output);
  }

  // optional sint32 MapSimplifyRotate1 = 4 [default = -1];
  if (has_mapsimplifyrotate1()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->mapsimplifyrotate1(), output);
  }

  // optional sint32 MapSimplifyRotate2 = 5 [default = -1];
  if (has_mapsimplifyrotate2()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->mapsimplifyrotate2(), output);
  }

  // optional float MapPosX = 6 [default = -1];
  if (has_mapposx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->mapposx(), output);
  }

  // optional float MapPosY = 7 [default = -1];
  if (has_mapposy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->mapposy(), output);
  }

  // optional float MapPivotX = 8 [default = -1];
  if (has_mappivotx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->mappivotx(), output);
  }

  // optional float MapPivotY = 9 [default = -1];
  if (has_mappivoty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->mappivoty(), output);
  }

  // optional float UIWorldRatio = 10 [default = -1];
  if (has_uiworldratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->uiworldratio(), output);
  }

  // optional string MapDetailed = 11;
  if (has_mapdetailed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mapdetailed().data(), this->mapdetailed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->mapdetailed(), output);
  }

  // optional sint32 MapDetailedRotate1 = 12 [default = -1];
  if (has_mapdetailedrotate1()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(12, this->mapdetailedrotate1(), output);
  }

  // optional sint32 MapDetailedRotate2 = 13 [default = -1];
  if (has_mapdetailedrotate2()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(13, this->mapdetailedrotate2(), output);
  }

  // optional float ServerUIRadio = 14 [default = -1];
  if (has_serveruiradio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->serveruiradio(), output);
  }

  // optional .MapPvpData Pvp = 15;
  if (has_pvp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->pvp(), output);
  }

  // repeated .MapSprayData Sprays = 16;
  for (int i = 0; i < this->sprays_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->sprays(i), output);
  }

  // repeated .MapTeamData Teams = 17;
  for (int i = 0; i < this->teams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->teams(i), output);
  }

  // optional string LowModel = 18;
  if (has_lowmodel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lowmodel().data(), this->lowmodel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->lowmodel(), output);
  }

  // optional string ClientSceneName = 19;
  if (has_clientscenename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientscenename().data(), this->clientscenename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->clientscenename(), output);
  }

  // optional string SceneFileName = 20;
  if (has_scenefilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scenefilename().data(), this->scenefilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->scenefilename(), output);
  }

  // optional float AlphaSpeed = 21 [default = -1];
  if (has_alphaspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->alphaspeed(), output);
  }

  // optional float TransferRadius = 22 [default = -1];
  if (has_transferradius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->transferradius(), output);
  }

  // optional string MapEffectAura = 23;
  if (has_mapeffectaura()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mapeffectaura().data(), this->mapeffectaura().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->mapeffectaura(), output);
  }

  // optional string MapEffecttransfer = 24;
  if (has_mapeffecttransfer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mapeffecttransfer().data(), this->mapeffecttransfer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->mapeffecttransfer(), output);
  }

  // optional string MapEffectArrive = 25;
  if (has_mapeffectarrive()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mapeffectarrive().data(), this->mapeffectarrive().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->mapeffectarrive(), output);
  }

  // repeated .MapPositionGraph PathGraphs = 26;
  for (int i = 0; i < this->pathgraphs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->pathgraphs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapSceneData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 MapId = 1 [default = -1];
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->mapid(), target);
  }

  // optional string SceneName = 2;
  if (has_scenename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scenename().data(), this->scenename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->scenename(), target);
  }

  // optional string MapSimplify = 3;
  if (has_mapsimplify()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mapsimplify().data(), this->mapsimplify().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mapsimplify(), target);
  }

  // optional sint32 MapSimplifyRotate1 = 4 [default = -1];
  if (has_mapsimplifyrotate1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->mapsimplifyrotate1(), target);
  }

  // optional sint32 MapSimplifyRotate2 = 5 [default = -1];
  if (has_mapsimplifyrotate2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->mapsimplifyrotate2(), target);
  }

  // optional float MapPosX = 6 [default = -1];
  if (has_mapposx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->mapposx(), target);
  }

  // optional float MapPosY = 7 [default = -1];
  if (has_mapposy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->mapposy(), target);
  }

  // optional float MapPivotX = 8 [default = -1];
  if (has_mappivotx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->mappivotx(), target);
  }

  // optional float MapPivotY = 9 [default = -1];
  if (has_mappivoty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->mappivoty(), target);
  }

  // optional float UIWorldRatio = 10 [default = -1];
  if (has_uiworldratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->uiworldratio(), target);
  }

  // optional string MapDetailed = 11;
  if (has_mapdetailed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mapdetailed().data(), this->mapdetailed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->mapdetailed(), target);
  }

  // optional sint32 MapDetailedRotate1 = 12 [default = -1];
  if (has_mapdetailedrotate1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(12, this->mapdetailedrotate1(), target);
  }

  // optional sint32 MapDetailedRotate2 = 13 [default = -1];
  if (has_mapdetailedrotate2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(13, this->mapdetailedrotate2(), target);
  }

  // optional float ServerUIRadio = 14 [default = -1];
  if (has_serveruiradio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->serveruiradio(), target);
  }

  // optional .MapPvpData Pvp = 15;
  if (has_pvp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->pvp(), target);
  }

  // repeated .MapSprayData Sprays = 16;
  for (int i = 0; i < this->sprays_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->sprays(i), target);
  }

  // repeated .MapTeamData Teams = 17;
  for (int i = 0; i < this->teams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->teams(i), target);
  }

  // optional string LowModel = 18;
  if (has_lowmodel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lowmodel().data(), this->lowmodel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->lowmodel(), target);
  }

  // optional string ClientSceneName = 19;
  if (has_clientscenename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientscenename().data(), this->clientscenename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->clientscenename(), target);
  }

  // optional string SceneFileName = 20;
  if (has_scenefilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scenefilename().data(), this->scenefilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->scenefilename(), target);
  }

  // optional float AlphaSpeed = 21 [default = -1];
  if (has_alphaspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->alphaspeed(), target);
  }

  // optional float TransferRadius = 22 [default = -1];
  if (has_transferradius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->transferradius(), target);
  }

  // optional string MapEffectAura = 23;
  if (has_mapeffectaura()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mapeffectaura().data(), this->mapeffectaura().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->mapeffectaura(), target);
  }

  // optional string MapEffecttransfer = 24;
  if (has_mapeffecttransfer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mapeffecttransfer().data(), this->mapeffecttransfer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->mapeffecttransfer(), target);
  }

  // optional string MapEffectArrive = 25;
  if (has_mapeffectarrive()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mapeffectarrive().data(), this->mapeffectarrive().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->mapeffectarrive(), target);
  }

  // repeated .MapPositionGraph PathGraphs = 26;
  for (int i = 0; i < this->pathgraphs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->pathgraphs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapSceneData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 MapId = 1 [default = -1];
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->mapid());
    }

    // optional string SceneName = 2;
    if (has_scenename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scenename());
    }

    // optional string SceneFileName = 20;
    if (has_scenefilename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scenefilename());
    }

    // optional string ClientSceneName = 19;
    if (has_clientscenename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientscenename());
    }

    // optional string MapSimplify = 3;
    if (has_mapsimplify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mapsimplify());
    }

    // optional sint32 MapSimplifyRotate1 = 4 [default = -1];
    if (has_mapsimplifyrotate1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->mapsimplifyrotate1());
    }

    // optional sint32 MapSimplifyRotate2 = 5 [default = -1];
    if (has_mapsimplifyrotate2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->mapsimplifyrotate2());
    }

    // optional float MapPosX = 6 [default = -1];
    if (has_mapposx()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float MapPosY = 7 [default = -1];
    if (has_mapposy()) {
      total_size += 1 + 4;
    }

    // optional float MapPivotX = 8 [default = -1];
    if (has_mappivotx()) {
      total_size += 1 + 4;
    }

    // optional float MapPivotY = 9 [default = -1];
    if (has_mappivoty()) {
      total_size += 1 + 4;
    }

    // optional float UIWorldRatio = 10 [default = -1];
    if (has_uiworldratio()) {
      total_size += 1 + 4;
    }

    // optional string MapDetailed = 11;
    if (has_mapdetailed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mapdetailed());
    }

    // optional sint32 MapDetailedRotate1 = 12 [default = -1];
    if (has_mapdetailedrotate1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->mapdetailedrotate1());
    }

    // optional sint32 MapDetailedRotate2 = 13 [default = -1];
    if (has_mapdetailedrotate2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->mapdetailedrotate2());
    }

    // optional float ServerUIRadio = 14 [default = -1];
    if (has_serveruiradio()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .MapPvpData Pvp = 15;
    if (has_pvp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvp());
    }

    // optional string LowModel = 18;
    if (has_lowmodel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lowmodel());
    }

    // optional float AlphaSpeed = 21 [default = -1];
    if (has_alphaspeed()) {
      total_size += 2 + 4;
    }

    // optional float TransferRadius = 22 [default = -1];
    if (has_transferradius()) {
      total_size += 2 + 4;
    }

    // optional string MapEffectAura = 23;
    if (has_mapeffectaura()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mapeffectaura());
    }

    // optional string MapEffecttransfer = 24;
    if (has_mapeffecttransfer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mapeffecttransfer());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string MapEffectArrive = 25;
    if (has_mapeffectarrive()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mapeffectarrive());
    }

  }
  // repeated .MapSprayData Sprays = 16;
  total_size += 2 * this->sprays_size();
  for (int i = 0; i < this->sprays_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sprays(i));
  }

  // repeated .MapTeamData Teams = 17;
  total_size += 2 * this->teams_size();
  for (int i = 0; i < this->teams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teams(i));
  }

  // repeated .MapPositionGraph PathGraphs = 26;
  total_size += 2 * this->pathgraphs_size();
  for (int i = 0; i < this->pathgraphs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pathgraphs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapSceneData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapSceneData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapSceneData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapSceneData::MergeFrom(const MapSceneData& from) {
  GOOGLE_CHECK_NE(&from, this);
  sprays_.MergeFrom(from.sprays_);
  teams_.MergeFrom(from.teams_);
  pathgraphs_.MergeFrom(from.pathgraphs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_scenename()) {
      set_scenename(from.scenename());
    }
    if (from.has_scenefilename()) {
      set_scenefilename(from.scenefilename());
    }
    if (from.has_clientscenename()) {
      set_clientscenename(from.clientscenename());
    }
    if (from.has_mapsimplify()) {
      set_mapsimplify(from.mapsimplify());
    }
    if (from.has_mapsimplifyrotate1()) {
      set_mapsimplifyrotate1(from.mapsimplifyrotate1());
    }
    if (from.has_mapsimplifyrotate2()) {
      set_mapsimplifyrotate2(from.mapsimplifyrotate2());
    }
    if (from.has_mapposx()) {
      set_mapposx(from.mapposx());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mapposy()) {
      set_mapposy(from.mapposy());
    }
    if (from.has_mappivotx()) {
      set_mappivotx(from.mappivotx());
    }
    if (from.has_mappivoty()) {
      set_mappivoty(from.mappivoty());
    }
    if (from.has_uiworldratio()) {
      set_uiworldratio(from.uiworldratio());
    }
    if (from.has_mapdetailed()) {
      set_mapdetailed(from.mapdetailed());
    }
    if (from.has_mapdetailedrotate1()) {
      set_mapdetailedrotate1(from.mapdetailedrotate1());
    }
    if (from.has_mapdetailedrotate2()) {
      set_mapdetailedrotate2(from.mapdetailedrotate2());
    }
    if (from.has_serveruiradio()) {
      set_serveruiradio(from.serveruiradio());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_pvp()) {
      mutable_pvp()->::MapPvpData::MergeFrom(from.pvp());
    }
    if (from.has_lowmodel()) {
      set_lowmodel(from.lowmodel());
    }
    if (from.has_alphaspeed()) {
      set_alphaspeed(from.alphaspeed());
    }
    if (from.has_transferradius()) {
      set_transferradius(from.transferradius());
    }
    if (from.has_mapeffectaura()) {
      set_mapeffectaura(from.mapeffectaura());
    }
    if (from.has_mapeffecttransfer()) {
      set_mapeffecttransfer(from.mapeffecttransfer());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_mapeffectarrive()) {
      set_mapeffectarrive(from.mapeffectarrive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapSceneData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapSceneData::CopyFrom(const MapSceneData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapSceneData::IsInitialized() const {

  return true;
}

void MapSceneData::Swap(MapSceneData* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(scenename_, other->scenename_);
    std::swap(scenefilename_, other->scenefilename_);
    std::swap(clientscenename_, other->clientscenename_);
    std::swap(mapsimplify_, other->mapsimplify_);
    std::swap(mapsimplifyrotate1_, other->mapsimplifyrotate1_);
    std::swap(mapsimplifyrotate2_, other->mapsimplifyrotate2_);
    std::swap(mapposx_, other->mapposx_);
    std::swap(mapposy_, other->mapposy_);
    std::swap(mappivotx_, other->mappivotx_);
    std::swap(mappivoty_, other->mappivoty_);
    std::swap(uiworldratio_, other->uiworldratio_);
    std::swap(mapdetailed_, other->mapdetailed_);
    std::swap(mapdetailedrotate1_, other->mapdetailedrotate1_);
    std::swap(mapdetailedrotate2_, other->mapdetailedrotate2_);
    std::swap(serveruiradio_, other->serveruiradio_);
    std::swap(pvp_, other->pvp_);
    sprays_.Swap(&other->sprays_);
    teams_.Swap(&other->teams_);
    std::swap(lowmodel_, other->lowmodel_);
    std::swap(alphaspeed_, other->alphaspeed_);
    std::swap(transferradius_, other->transferradius_);
    std::swap(mapeffectaura_, other->mapeffectaura_);
    std::swap(mapeffecttransfer_, other->mapeffecttransfer_);
    std::swap(mapeffectarrive_, other->mapeffectarrive_);
    pathgraphs_.Swap(&other->pathgraphs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapSceneData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapSceneData_descriptor_;
  metadata.reflection = MapSceneData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapBasePlaymodeData::kTypeFieldNumber;
const int MapBasePlaymodeData::kDesc1FieldNumber;
const int MapBasePlaymodeData::kDesc2FieldNumber;
const int MapBasePlaymodeData::kModeNameFieldNumber;
const int MapBasePlaymodeData::kUibgFieldNumber;
const int MapBasePlaymodeData::kMainCamerasFieldNumber;
const int MapBasePlaymodeData::kSlaveCamerasFieldNumber;
const int MapBasePlaymodeData::kLiftingsFieldNumber;
const int MapBasePlaymodeData::kCharacterAnimFieldNumber;
const int MapBasePlaymodeData::kReadyFileFieldNumber;
const int MapBasePlaymodeData::kReadyTimeFieldNumber;
const int MapBasePlaymodeData::kControlTimeFieldNumber;
const int MapBasePlaymodeData::kChangePriTimeFieldNumber;
#endif  // !_MSC_VER

MapBasePlaymodeData::MapBasePlaymodeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapBasePlaymodeData::InitAsDefaultInstance() {
}

MapBasePlaymodeData::MapBasePlaymodeData(const MapBasePlaymodeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapBasePlaymodeData::SharedCtor() {
  _cached_size_ = 0;
  type_ = -1;
  desc1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  modename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uibg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  characteranim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  readyfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  readytime_ = -1;
  controltime_ = -1;
  changepritime_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapBasePlaymodeData::~MapBasePlaymodeData() {
  SharedDtor();
}

void MapBasePlaymodeData::SharedDtor() {
  if (desc1_ != &::google::protobuf::internal::kEmptyString) {
    delete desc1_;
  }
  if (desc2_ != &::google::protobuf::internal::kEmptyString) {
    delete desc2_;
  }
  if (modename_ != &::google::protobuf::internal::kEmptyString) {
    delete modename_;
  }
  if (uibg_ != &::google::protobuf::internal::kEmptyString) {
    delete uibg_;
  }
  if (characteranim_ != &::google::protobuf::internal::kEmptyString) {
    delete characteranim_;
  }
  if (readyfile_ != &::google::protobuf::internal::kEmptyString) {
    delete readyfile_;
  }
  if (this != default_instance_) {
  }
}

void MapBasePlaymodeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapBasePlaymodeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapBasePlaymodeData_descriptor_;
}

const MapBasePlaymodeData& MapBasePlaymodeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapCliRpc_2eproto();
  return *default_instance_;
}

MapBasePlaymodeData* MapBasePlaymodeData::default_instance_ = NULL;

MapBasePlaymodeData* MapBasePlaymodeData::New() const {
  return new MapBasePlaymodeData;
}

void MapBasePlaymodeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = -1;
    if (has_desc1()) {
      if (desc1_ != &::google::protobuf::internal::kEmptyString) {
        desc1_->clear();
      }
    }
    if (has_desc2()) {
      if (desc2_ != &::google::protobuf::internal::kEmptyString) {
        desc2_->clear();
      }
    }
    if (has_modename()) {
      if (modename_ != &::google::protobuf::internal::kEmptyString) {
        modename_->clear();
      }
    }
    if (has_uibg()) {
      if (uibg_ != &::google::protobuf::internal::kEmptyString) {
        uibg_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_characteranim()) {
      if (characteranim_ != &::google::protobuf::internal::kEmptyString) {
        characteranim_->clear();
      }
    }
    if (has_readyfile()) {
      if (readyfile_ != &::google::protobuf::internal::kEmptyString) {
        readyfile_->clear();
      }
    }
    readytime_ = -1;
    controltime_ = -1;
    changepritime_ = -1;
  }
  maincameras_.Clear();
  slavecameras_.Clear();
  liftings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapBasePlaymodeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Desc1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc1().data(), this->desc1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Desc2;
        break;
      }

      // optional string Desc2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Desc2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc2().data(), this->desc2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ModeName;
        break;
      }

      // optional string ModeName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ModeName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->modename().data(), this->modename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Uibg;
        break;
      }

      // optional string Uibg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Uibg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uibg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uibg().data(), this->uibg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Type;
        break;
      }

      // optional sint32 Type = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_MainCameras;
        break;
      }

      // repeated .MapCameraData MainCameras = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MainCameras:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_maincameras()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_MainCameras;
        if (input->ExpectTag(58)) goto parse_SlaveCameras;
        break;
      }

      // repeated .MapCameraData SlaveCameras = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SlaveCameras:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slavecameras()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_SlaveCameras;
        if (input->ExpectTag(66)) goto parse_Liftings;
        break;
      }

      // repeated .MapLiftingConfig Liftings = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Liftings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_liftings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_Liftings;
        if (input->ExpectTag(74)) goto parse_CharacterAnim;
        break;
      }

      // optional string CharacterAnim = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CharacterAnim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_characteranim()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->characteranim().data(), this->characteranim().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_ReadyFile;
        break;
      }

      // optional string ReadyFile = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ReadyFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_readyfile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->readyfile().data(), this->readyfile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_ReadyTime;
        break;
      }

      // optional float ReadyTime = 11 [default = -1];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ReadyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &readytime_)));
          set_has_readytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_ControlTime;
        break;
      }

      // optional float ControlTime = 12 [default = -1];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ControlTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &controltime_)));
          set_has_controltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_ChangePriTime;
        break;
      }

      // optional float ChangePriTime = 13 [default = -1];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ChangePriTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &changepritime_)));
          set_has_changepritime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapBasePlaymodeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Desc1 = 1;
  if (has_desc1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc1().data(), this->desc1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->desc1(), output);
  }

  // optional string Desc2 = 2;
  if (has_desc2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc2().data(), this->desc2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->desc2(), output);
  }

  // optional string ModeName = 3;
  if (has_modename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modename().data(), this->modename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->modename(), output);
  }

  // optional string Uibg = 4;
  if (has_uibg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uibg().data(), this->uibg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->uibg(), output);
  }

  // optional sint32 Type = 5 [default = -1];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->type(), output);
  }

  // repeated .MapCameraData MainCameras = 6;
  for (int i = 0; i < this->maincameras_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->maincameras(i), output);
  }

  // repeated .MapCameraData SlaveCameras = 7;
  for (int i = 0; i < this->slavecameras_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->slavecameras(i), output);
  }

  // repeated .MapLiftingConfig Liftings = 8;
  for (int i = 0; i < this->liftings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->liftings(i), output);
  }

  // optional string CharacterAnim = 9;
  if (has_characteranim()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->characteranim().data(), this->characteranim().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->characteranim(), output);
  }

  // optional string ReadyFile = 10;
  if (has_readyfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->readyfile().data(), this->readyfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->readyfile(), output);
  }

  // optional float ReadyTime = 11 [default = -1];
  if (has_readytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->readytime(), output);
  }

  // optional float ControlTime = 12 [default = -1];
  if (has_controltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->controltime(), output);
  }

  // optional float ChangePriTime = 13 [default = -1];
  if (has_changepritime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->changepritime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapBasePlaymodeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Desc1 = 1;
  if (has_desc1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc1().data(), this->desc1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->desc1(), target);
  }

  // optional string Desc2 = 2;
  if (has_desc2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc2().data(), this->desc2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desc2(), target);
  }

  // optional string ModeName = 3;
  if (has_modename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modename().data(), this->modename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->modename(), target);
  }

  // optional string Uibg = 4;
  if (has_uibg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uibg().data(), this->uibg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uibg(), target);
  }

  // optional sint32 Type = 5 [default = -1];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->type(), target);
  }

  // repeated .MapCameraData MainCameras = 6;
  for (int i = 0; i < this->maincameras_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->maincameras(i), target);
  }

  // repeated .MapCameraData SlaveCameras = 7;
  for (int i = 0; i < this->slavecameras_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->slavecameras(i), target);
  }

  // repeated .MapLiftingConfig Liftings = 8;
  for (int i = 0; i < this->liftings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->liftings(i), target);
  }

  // optional string CharacterAnim = 9;
  if (has_characteranim()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->characteranim().data(), this->characteranim().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->characteranim(), target);
  }

  // optional string ReadyFile = 10;
  if (has_readyfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->readyfile().data(), this->readyfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->readyfile(), target);
  }

  // optional float ReadyTime = 11 [default = -1];
  if (has_readytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->readytime(), target);
  }

  // optional float ControlTime = 12 [default = -1];
  if (has_controltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->controltime(), target);
  }

  // optional float ChangePriTime = 13 [default = -1];
  if (has_changepritime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->changepritime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapBasePlaymodeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Type = 5 [default = -1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

    // optional string Desc1 = 1;
    if (has_desc1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc1());
    }

    // optional string Desc2 = 2;
    if (has_desc2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc2());
    }

    // optional string ModeName = 3;
    if (has_modename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modename());
    }

    // optional string Uibg = 4;
    if (has_uibg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uibg());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string CharacterAnim = 9;
    if (has_characteranim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->characteranim());
    }

    // optional string ReadyFile = 10;
    if (has_readyfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->readyfile());
    }

    // optional float ReadyTime = 11 [default = -1];
    if (has_readytime()) {
      total_size += 1 + 4;
    }

    // optional float ControlTime = 12 [default = -1];
    if (has_controltime()) {
      total_size += 1 + 4;
    }

    // optional float ChangePriTime = 13 [default = -1];
    if (has_changepritime()) {
      total_size += 1 + 4;
    }

  }
  // repeated .MapCameraData MainCameras = 6;
  total_size += 1 * this->maincameras_size();
  for (int i = 0; i < this->maincameras_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->maincameras(i));
  }

  // repeated .MapCameraData SlaveCameras = 7;
  total_size += 1 * this->slavecameras_size();
  for (int i = 0; i < this->slavecameras_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slavecameras(i));
  }

  // repeated .MapLiftingConfig Liftings = 8;
  total_size += 1 * this->liftings_size();
  for (int i = 0; i < this->liftings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->liftings(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapBasePlaymodeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapBasePlaymodeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapBasePlaymodeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapBasePlaymodeData::MergeFrom(const MapBasePlaymodeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  maincameras_.MergeFrom(from.maincameras_);
  slavecameras_.MergeFrom(from.slavecameras_);
  liftings_.MergeFrom(from.liftings_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_desc1()) {
      set_desc1(from.desc1());
    }
    if (from.has_desc2()) {
      set_desc2(from.desc2());
    }
    if (from.has_modename()) {
      set_modename(from.modename());
    }
    if (from.has_uibg()) {
      set_uibg(from.uibg());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_characteranim()) {
      set_characteranim(from.characteranim());
    }
    if (from.has_readyfile()) {
      set_readyfile(from.readyfile());
    }
    if (from.has_readytime()) {
      set_readytime(from.readytime());
    }
    if (from.has_controltime()) {
      set_controltime(from.controltime());
    }
    if (from.has_changepritime()) {
      set_changepritime(from.changepritime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapBasePlaymodeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapBasePlaymodeData::CopyFrom(const MapBasePlaymodeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapBasePlaymodeData::IsInitialized() const {

  return true;
}

void MapBasePlaymodeData::Swap(MapBasePlaymodeData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(desc1_, other->desc1_);
    std::swap(desc2_, other->desc2_);
    std::swap(modename_, other->modename_);
    std::swap(uibg_, other->uibg_);
    maincameras_.Swap(&other->maincameras_);
    slavecameras_.Swap(&other->slavecameras_);
    liftings_.Swap(&other->liftings_);
    std::swap(characteranim_, other->characteranim_);
    std::swap(readyfile_, other->readyfile_);
    std::swap(readytime_, other->readytime_);
    std::swap(controltime_, other->controltime_);
    std::swap(changepritime_, other->changepritime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapBasePlaymodeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapBasePlaymodeData_descriptor_;
  metadata.reflection = MapBasePlaymodeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapTeamData::kGuardFieldNumber;
const int MapTeamData::kPedestalFieldNumber;
const int MapTeamData::kSpawnPointsFieldNumber;
const int MapTeamData::kLiftingFieldNumber;
const int MapTeamData::kIdFieldNumber;
const int MapTeamData::kColorFieldNumber;
const int MapTeamData::kPedestalPositionFieldNumber;
#endif  // !_MSC_VER

MapTeamData::MapTeamData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapTeamData::InitAsDefaultInstance() {
  color_ = const_cast< ::Color4PB*>(&::Color4PB::default_instance());
  pedestalposition_ = const_cast< ::Vector3PB*>(&::Vector3PB::default_instance());
}

MapTeamData::MapTeamData(const MapTeamData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapTeamData::SharedCtor() {
  _cached_size_ = 0;
  guard_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pedestal_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lifting_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = -1;
  color_ = NULL;
  pedestalposition_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapTeamData::~MapTeamData() {
  SharedDtor();
}

void MapTeamData::SharedDtor() {
  if (guard_ != &::google::protobuf::internal::kEmptyString) {
    delete guard_;
  }
  if (pedestal_ != &::google::protobuf::internal::kEmptyString) {
    delete pedestal_;
  }
  if (lifting_ != &::google::protobuf::internal::kEmptyString) {
    delete lifting_;
  }
  if (this != default_instance_) {
    delete color_;
    delete pedestalposition_;
  }
}

void MapTeamData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapTeamData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapTeamData_descriptor_;
}

const MapTeamData& MapTeamData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapCliRpc_2eproto();
  return *default_instance_;
}

MapTeamData* MapTeamData::default_instance_ = NULL;

MapTeamData* MapTeamData::New() const {
  return new MapTeamData;
}

void MapTeamData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guard()) {
      if (guard_ != &::google::protobuf::internal::kEmptyString) {
        guard_->clear();
      }
    }
    if (has_pedestal()) {
      if (pedestal_ != &::google::protobuf::internal::kEmptyString) {
        pedestal_->clear();
      }
    }
    if (has_lifting()) {
      if (lifting_ != &::google::protobuf::internal::kEmptyString) {
        lifting_->clear();
      }
    }
    id_ = -1;
    if (has_color()) {
      if (color_ != NULL) color_->::Color4PB::Clear();
    }
    if (has_pedestalposition()) {
      if (pedestalposition_ != NULL) pedestalposition_->::Vector3PB::Clear();
    }
  }
  spawnpoints_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapTeamData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Guard = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guard()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guard().data(), this->guard().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Pedestal;
        break;
      }

      // optional string Pedestal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pedestal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pedestal()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pedestal().data(), this->pedestal().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_SpawnPoints;
        break;
      }

      // repeated .MapPRS SpawnPoints = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SpawnPoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spawnpoints()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_SpawnPoints;
        if (input->ExpectTag(34)) goto parse_Lifting;
        break;
      }

      // optional string Lifting = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Lifting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lifting()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lifting().data(), this->lifting().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Id;
        break;
      }

      // optional sint32 Id = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Color;
        break;
      }

      // optional .Color4PB Color = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_PedestalPosition;
        break;
      }

      // optional .Vector3PB PedestalPosition = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PedestalPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pedestalposition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapTeamData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Guard = 1;
  if (has_guard()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guard().data(), this->guard().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->guard(), output);
  }

  // optional string Pedestal = 2;
  if (has_pedestal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pedestal().data(), this->pedestal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pedestal(), output);
  }

  // repeated .MapPRS SpawnPoints = 3;
  for (int i = 0; i < this->spawnpoints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->spawnpoints(i), output);
  }

  // optional string Lifting = 4;
  if (has_lifting()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lifting().data(), this->lifting().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->lifting(), output);
  }

  // optional sint32 Id = 5 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->id(), output);
  }

  // optional .Color4PB Color = 6;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->color(), output);
  }

  // optional .Vector3PB PedestalPosition = 7;
  if (has_pedestalposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->pedestalposition(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapTeamData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Guard = 1;
  if (has_guard()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guard().data(), this->guard().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->guard(), target);
  }

  // optional string Pedestal = 2;
  if (has_pedestal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pedestal().data(), this->pedestal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pedestal(), target);
  }

  // repeated .MapPRS SpawnPoints = 3;
  for (int i = 0; i < this->spawnpoints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->spawnpoints(i), target);
  }

  // optional string Lifting = 4;
  if (has_lifting()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lifting().data(), this->lifting().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->lifting(), target);
  }

  // optional sint32 Id = 5 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->id(), target);
  }

  // optional .Color4PB Color = 6;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->color(), target);
  }

  // optional .Vector3PB PedestalPosition = 7;
  if (has_pedestalposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->pedestalposition(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapTeamData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Guard = 1;
    if (has_guard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guard());
    }

    // optional string Pedestal = 2;
    if (has_pedestal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pedestal());
    }

    // optional string Lifting = 4;
    if (has_lifting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lifting());
    }

    // optional sint32 Id = 5 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->id());
    }

    // optional .Color4PB Color = 6;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->color());
    }

    // optional .Vector3PB PedestalPosition = 7;
    if (has_pedestalposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pedestalposition());
    }

  }
  // repeated .MapPRS SpawnPoints = 3;
  total_size += 1 * this->spawnpoints_size();
  for (int i = 0; i < this->spawnpoints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spawnpoints(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapTeamData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapTeamData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapTeamData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapTeamData::MergeFrom(const MapTeamData& from) {
  GOOGLE_CHECK_NE(&from, this);
  spawnpoints_.MergeFrom(from.spawnpoints_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guard()) {
      set_guard(from.guard());
    }
    if (from.has_pedestal()) {
      set_pedestal(from.pedestal());
    }
    if (from.has_lifting()) {
      set_lifting(from.lifting());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_color()) {
      mutable_color()->::Color4PB::MergeFrom(from.color());
    }
    if (from.has_pedestalposition()) {
      mutable_pedestalposition()->::Vector3PB::MergeFrom(from.pedestalposition());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapTeamData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapTeamData::CopyFrom(const MapTeamData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapTeamData::IsInitialized() const {

  return true;
}

void MapTeamData::Swap(MapTeamData* other) {
  if (other != this) {
    std::swap(guard_, other->guard_);
    std::swap(pedestal_, other->pedestal_);
    spawnpoints_.Swap(&other->spawnpoints_);
    std::swap(lifting_, other->lifting_);
    std::swap(id_, other->id_);
    std::swap(color_, other->color_);
    std::swap(pedestalposition_, other->pedestalposition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapTeamData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapTeamData_descriptor_;
  metadata.reflection = MapTeamData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapSprayData::kNameFieldNumber;
const int MapSprayData::kPositionFieldNumber;
const int MapSprayData::kDpiFieldNumber;
const int MapSprayData::kCoefficientFieldNumber;
#endif  // !_MSC_VER

MapSprayData::MapSprayData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapSprayData::InitAsDefaultInstance() {
  position_ = const_cast< ::Vector3PB*>(&::Vector3PB::default_instance());
}

MapSprayData::MapSprayData(const MapSprayData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapSprayData::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  position_ = NULL;
  dpi_ = -1;
  coefficient_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapSprayData::~MapSprayData() {
  SharedDtor();
}

void MapSprayData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete position_;
  }
}

void MapSprayData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapSprayData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapSprayData_descriptor_;
}

const MapSprayData& MapSprayData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapCliRpc_2eproto();
  return *default_instance_;
}

MapSprayData* MapSprayData::default_instance_ = NULL;

MapSprayData* MapSprayData::New() const {
  return new MapSprayData;
}

void MapSprayData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_position()) {
      if (position_ != NULL) position_->::Vector3PB::Clear();
    }
    dpi_ = -1;
    coefficient_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapSprayData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Position;
        break;
      }

      // optional .Vector3PB Position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Dpi;
        break;
      }

      // optional sint32 Dpi = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Dpi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dpi_)));
          set_has_dpi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_Coefficient;
        break;
      }

      // optional float Coefficient = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Coefficient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &coefficient_)));
          set_has_coefficient();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapSprayData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional .Vector3PB Position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }

  // optional sint32 Dpi = 3 [default = -1];
  if (has_dpi()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->dpi(), output);
  }

  // optional float Coefficient = 4 [default = -1];
  if (has_coefficient()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->coefficient(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapSprayData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .Vector3PB Position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }

  // optional sint32 Dpi = 3 [default = -1];
  if (has_dpi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->dpi(), target);
  }

  // optional float Coefficient = 4 [default = -1];
  if (has_coefficient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->coefficient(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapSprayData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .Vector3PB Position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional sint32 Dpi = 3 [default = -1];
    if (has_dpi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->dpi());
    }

    // optional float Coefficient = 4 [default = -1];
    if (has_coefficient()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapSprayData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapSprayData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapSprayData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapSprayData::MergeFrom(const MapSprayData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_position()) {
      mutable_position()->::Vector3PB::MergeFrom(from.position());
    }
    if (from.has_dpi()) {
      set_dpi(from.dpi());
    }
    if (from.has_coefficient()) {
      set_coefficient(from.coefficient());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapSprayData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapSprayData::CopyFrom(const MapSprayData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapSprayData::IsInitialized() const {

  return true;
}

void MapSprayData::Swap(MapSprayData* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(position_, other->position_);
    std::swap(dpi_, other->dpi_);
    std::swap(coefficient_, other->coefficient_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapSprayData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapSprayData_descriptor_;
  metadata.reflection = MapSprayData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapPvpData::kBaseDataFieldNumber;
const int MapPvpData::kAddHereFieldNumber;
#endif  // !_MSC_VER

MapPvpData::MapPvpData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapPvpData::InitAsDefaultInstance() {
  basedata_ = const_cast< ::MapBasePlaymodeData*>(&::MapBasePlaymodeData::default_instance());
}

MapPvpData::MapPvpData(const MapPvpData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapPvpData::SharedCtor() {
  _cached_size_ = 0;
  basedata_ = NULL;
  addhere_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapPvpData::~MapPvpData() {
  SharedDtor();
}

void MapPvpData::SharedDtor() {
  if (addhere_ != &::google::protobuf::internal::kEmptyString) {
    delete addhere_;
  }
  if (this != default_instance_) {
    delete basedata_;
  }
}

void MapPvpData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapPvpData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapPvpData_descriptor_;
}

const MapPvpData& MapPvpData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapCliRpc_2eproto();
  return *default_instance_;
}

MapPvpData* MapPvpData::default_instance_ = NULL;

MapPvpData* MapPvpData::New() const {
  return new MapPvpData;
}

void MapPvpData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_basedata()) {
      if (basedata_ != NULL) basedata_->::MapBasePlaymodeData::Clear();
    }
    if (has_addhere()) {
      if (addhere_ != &::google::protobuf::internal::kEmptyString) {
        addhere_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapPvpData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MapBasePlaymodeData BaseData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AddHere;
        break;
      }

      // optional string AddHere = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AddHere:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addhere()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->addhere().data(), this->addhere().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapPvpData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MapBasePlaymodeData BaseData = 1;
  if (has_basedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->basedata(), output);
  }

  // optional string AddHere = 2;
  if (has_addhere()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addhere().data(), this->addhere().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->addhere(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapPvpData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MapBasePlaymodeData BaseData = 1;
  if (has_basedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->basedata(), target);
  }

  // optional string AddHere = 2;
  if (has_addhere()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addhere().data(), this->addhere().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->addhere(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapPvpData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MapBasePlaymodeData BaseData = 1;
    if (has_basedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basedata());
    }

    // optional string AddHere = 2;
    if (has_addhere()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addhere());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapPvpData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapPvpData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapPvpData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapPvpData::MergeFrom(const MapPvpData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_basedata()) {
      mutable_basedata()->::MapBasePlaymodeData::MergeFrom(from.basedata());
    }
    if (from.has_addhere()) {
      set_addhere(from.addhere());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapPvpData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapPvpData::CopyFrom(const MapPvpData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapPvpData::IsInitialized() const {

  return true;
}

void MapPvpData::Swap(MapPvpData* other) {
  if (other != this) {
    std::swap(basedata_, other->basedata_);
    std::swap(addhere_, other->addhere_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapPvpData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapPvpData_descriptor_;
  metadata.reflection = MapPvpData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapPRS::kPositionFieldNumber;
const int MapPRS::kEularRotationFieldNumber;
const int MapPRS::kScaleFieldNumber;
#endif  // !_MSC_VER

MapPRS::MapPRS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapPRS::InitAsDefaultInstance() {
  position_ = const_cast< ::Vector3PB*>(&::Vector3PB::default_instance());
  eularrotation_ = const_cast< ::Vector3PB*>(&::Vector3PB::default_instance());
  scale_ = const_cast< ::Vector3PB*>(&::Vector3PB::default_instance());
}

MapPRS::MapPRS(const MapPRS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapPRS::SharedCtor() {
  _cached_size_ = 0;
  position_ = NULL;
  eularrotation_ = NULL;
  scale_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapPRS::~MapPRS() {
  SharedDtor();
}

void MapPRS::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
    delete eularrotation_;
    delete scale_;
  }
}

void MapPRS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapPRS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapPRS_descriptor_;
}

const MapPRS& MapPRS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapCliRpc_2eproto();
  return *default_instance_;
}

MapPRS* MapPRS::default_instance_ = NULL;

MapPRS* MapPRS::New() const {
  return new MapPRS;
}

void MapPRS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_position()) {
      if (position_ != NULL) position_->::Vector3PB::Clear();
    }
    if (has_eularrotation()) {
      if (eularrotation_ != NULL) eularrotation_->::Vector3PB::Clear();
    }
    if (has_scale()) {
      if (scale_ != NULL) scale_->::Vector3PB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapPRS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Vector3PB Position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_EularRotation;
        break;
      }

      // optional .Vector3PB EularRotation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EularRotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eularrotation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Scale;
        break;
      }

      // optional .Vector3PB Scale = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapPRS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Vector3PB Position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->position(), output);
  }

  // optional .Vector3PB EularRotation = 2;
  if (has_eularrotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->eularrotation(), output);
  }

  // optional .Vector3PB Scale = 3;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->scale(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapPRS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Vector3PB Position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->position(), target);
  }

  // optional .Vector3PB EularRotation = 2;
  if (has_eularrotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->eularrotation(), target);
  }

  // optional .Vector3PB Scale = 3;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->scale(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapPRS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Vector3PB Position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional .Vector3PB EularRotation = 2;
    if (has_eularrotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eularrotation());
    }

    // optional .Vector3PB Scale = 3;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scale());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapPRS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapPRS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapPRS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapPRS::MergeFrom(const MapPRS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      mutable_position()->::Vector3PB::MergeFrom(from.position());
    }
    if (from.has_eularrotation()) {
      mutable_eularrotation()->::Vector3PB::MergeFrom(from.eularrotation());
    }
    if (from.has_scale()) {
      mutable_scale()->::Vector3PB::MergeFrom(from.scale());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapPRS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapPRS::CopyFrom(const MapPRS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapPRS::IsInitialized() const {

  return true;
}

void MapPRS::Swap(MapPRS* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(eularrotation_, other->eularrotation_);
    std::swap(scale_, other->scale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapPRS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapPRS_descriptor_;
  metadata.reflection = MapPRS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapCameraData::kPathFieldNumber;
const int MapCameraData::kStartTimeFieldNumber;
const int MapCameraData::kEndTimeFieldNumber;
#endif  // !_MSC_VER

MapCameraData::MapCameraData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapCameraData::InitAsDefaultInstance() {
}

MapCameraData::MapCameraData(const MapCameraData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapCameraData::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  starttime_ = -1;
  endtime_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapCameraData::~MapCameraData() {
  SharedDtor();
}

void MapCameraData::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void MapCameraData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapCameraData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapCameraData_descriptor_;
}

const MapCameraData& MapCameraData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapCliRpc_2eproto();
  return *default_instance_;
}

MapCameraData* MapCameraData::default_instance_ = NULL;

MapCameraData* MapCameraData::New() const {
  return new MapCameraData;
}

void MapCameraData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    starttime_ = -1;
    endtime_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapCameraData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_StartTime;
        break;
      }

      // optional float StartTime = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_StartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_EndTime;
        break;
      }

      // optional float EndTime = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapCameraData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  // optional float StartTime = 2 [default = -1];
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->starttime(), output);
  }

  // optional float EndTime = 3 [default = -1];
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapCameraData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // optional float StartTime = 2 [default = -1];
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->starttime(), target);
  }

  // optional float EndTime = 3 [default = -1];
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapCameraData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional float StartTime = 2 [default = -1];
    if (has_starttime()) {
      total_size += 1 + 4;
    }

    // optional float EndTime = 3 [default = -1];
    if (has_endtime()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapCameraData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapCameraData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapCameraData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapCameraData::MergeFrom(const MapCameraData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapCameraData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapCameraData::CopyFrom(const MapCameraData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapCameraData::IsInitialized() const {

  return true;
}

void MapCameraData::Swap(MapCameraData* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapCameraData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapCameraData_descriptor_;
  metadata.reflection = MapCameraData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapLiftingConfig::kStartTimeFieldNumber;
const int MapLiftingConfig::kSpeedFieldNumber;
#endif  // !_MSC_VER

MapLiftingConfig::MapLiftingConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapLiftingConfig::InitAsDefaultInstance() {
}

MapLiftingConfig::MapLiftingConfig(const MapLiftingConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapLiftingConfig::SharedCtor() {
  _cached_size_ = 0;
  starttime_ = -1;
  speed_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapLiftingConfig::~MapLiftingConfig() {
  SharedDtor();
}

void MapLiftingConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapLiftingConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapLiftingConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapLiftingConfig_descriptor_;
}

const MapLiftingConfig& MapLiftingConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapCliRpc_2eproto();
  return *default_instance_;
}

MapLiftingConfig* MapLiftingConfig::default_instance_ = NULL;

MapLiftingConfig* MapLiftingConfig::New() const {
  return new MapLiftingConfig;
}

void MapLiftingConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    starttime_ = -1;
    speed_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapLiftingConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float StartTime = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_Speed;
        break;
      }

      // optional float Speed = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapLiftingConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float StartTime = 1 [default = -1];
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->starttime(), output);
  }

  // optional float Speed = 2 [default = -1];
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->speed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapLiftingConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float StartTime = 1 [default = -1];
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->starttime(), target);
  }

  // optional float Speed = 2 [default = -1];
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->speed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapLiftingConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float StartTime = 1 [default = -1];
    if (has_starttime()) {
      total_size += 1 + 4;
    }

    // optional float Speed = 2 [default = -1];
    if (has_speed()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapLiftingConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapLiftingConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapLiftingConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapLiftingConfig::MergeFrom(const MapLiftingConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapLiftingConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapLiftingConfig::CopyFrom(const MapLiftingConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapLiftingConfig::IsInitialized() const {

  return true;
}

void MapLiftingConfig::Swap(MapLiftingConfig* other) {
  if (other != this) {
    std::swap(starttime_, other->starttime_);
    std::swap(speed_, other->speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapLiftingConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapLiftingConfig_descriptor_;
  metadata.reflection = MapLiftingConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapPositionGraph::kIdFieldNumber;
const int MapPositionGraph::kVerticesFieldNumber;
const int MapPositionGraph::kEdgesFieldNumber;
#endif  // !_MSC_VER

MapPositionGraph::MapPositionGraph()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapPositionGraph::InitAsDefaultInstance() {
}

MapPositionGraph::MapPositionGraph(const MapPositionGraph& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapPositionGraph::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapPositionGraph::~MapPositionGraph() {
  SharedDtor();
}

void MapPositionGraph::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapPositionGraph::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapPositionGraph::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapPositionGraph_descriptor_;
}

const MapPositionGraph& MapPositionGraph::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapCliRpc_2eproto();
  return *default_instance_;
}

MapPositionGraph* MapPositionGraph::default_instance_ = NULL;

MapPositionGraph* MapPositionGraph::New() const {
  return new MapPositionGraph;
}

void MapPositionGraph::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = -1;
  }
  vertices_.Clear();
  edges_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapPositionGraph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Id = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Vertices;
        break;
      }

      // repeated .Vector3PB Vertices = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Vertices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vertices()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Vertices;
        if (input->ExpectTag(26)) goto parse_Edges;
        break;
      }

      // repeated .Vector2IntPB Edges = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Edges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_edges()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Edges;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapPositionGraph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Id = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->id(), output);
  }

  // repeated .Vector3PB Vertices = 2;
  for (int i = 0; i < this->vertices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vertices(i), output);
  }

  // repeated .Vector2IntPB Edges = 3;
  for (int i = 0; i < this->edges_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->edges(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapPositionGraph::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Id = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->id(), target);
  }

  // repeated .Vector3PB Vertices = 2;
  for (int i = 0; i < this->vertices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vertices(i), target);
  }

  // repeated .Vector2IntPB Edges = 3;
  for (int i = 0; i < this->edges_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->edges(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapPositionGraph::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Id = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->id());
    }

  }
  // repeated .Vector3PB Vertices = 2;
  total_size += 1 * this->vertices_size();
  for (int i = 0; i < this->vertices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vertices(i));
  }

  // repeated .Vector2IntPB Edges = 3;
  total_size += 1 * this->edges_size();
  for (int i = 0; i < this->edges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->edges(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapPositionGraph::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapPositionGraph* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapPositionGraph*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapPositionGraph::MergeFrom(const MapPositionGraph& from) {
  GOOGLE_CHECK_NE(&from, this);
  vertices_.MergeFrom(from.vertices_);
  edges_.MergeFrom(from.edges_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapPositionGraph::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapPositionGraph::CopyFrom(const MapPositionGraph& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapPositionGraph::IsInitialized() const {

  return true;
}

void MapPositionGraph::Swap(MapPositionGraph* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    vertices_.Swap(&other->vertices_);
    edges_.Swap(&other->edges_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapPositionGraph::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapPositionGraph_descriptor_;
  metadata.reflection = MapPositionGraph_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
