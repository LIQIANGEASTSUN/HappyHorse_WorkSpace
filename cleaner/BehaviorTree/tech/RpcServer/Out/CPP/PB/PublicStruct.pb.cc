// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PublicStruct.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PublicStruct.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Vector3PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3PB_reflection_ = NULL;
const ::google::protobuf::Descriptor* SmallUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SmallUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  User_reflection_ = NULL;
const ::google::protobuf::Descriptor* Color4PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Color4PB_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector2IntPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector2IntPB_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PublicStruct_2eproto() {
  protobuf_AddDesc_PublicStruct_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PublicStruct.proto");
  GOOGLE_CHECK(file != NULL);
  Vector3PB_descriptor_ = file->message_type(0);
  static const int Vector3PB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3PB, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3PB, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3PB, z_),
  };
  Vector3PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector3PB_descriptor_,
      Vector3PB::default_instance_,
      Vector3PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector3PB));
  SmallUser_descriptor_ = file->message_type(1);
  static const int SmallUser_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmallUser, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmallUser, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmallUser, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmallUser, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmallUser, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmallUser, channel_),
  };
  SmallUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SmallUser_descriptor_,
      SmallUser::default_instance_,
      SmallUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmallUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmallUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SmallUser));
  User_descriptor_ = file->message_type(2);
  static const int User_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, channel_),
  };
  User_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      User_descriptor_,
      User::default_instance_,
      User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(User));
  Color4PB_descriptor_ = file->message_type(3);
  static const int Color4PB_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color4PB, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color4PB, g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color4PB, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color4PB, a_),
  };
  Color4PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Color4PB_descriptor_,
      Color4PB::default_instance_,
      Color4PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color4PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color4PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Color4PB));
  Vector2IntPB_descriptor_ = file->message_type(4);
  static const int Vector2IntPB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2IntPB, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2IntPB, y_),
  };
  Vector2IntPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector2IntPB_descriptor_,
      Vector2IntPB::default_instance_,
      Vector2IntPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2IntPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2IntPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector2IntPB));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PublicStruct_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector3PB_descriptor_, &Vector3PB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SmallUser_descriptor_, &SmallUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    User_descriptor_, &User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Color4PB_descriptor_, &Color4PB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector2IntPB_descriptor_, &Vector2IntPB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PublicStruct_2eproto() {
  delete Vector3PB::default_instance_;
  delete Vector3PB_reflection_;
  delete SmallUser::default_instance_;
  delete SmallUser_reflection_;
  delete User::default_instance_;
  delete User_reflection_;
  delete Color4PB::default_instance_;
  delete Color4PB_reflection_;
  delete Vector2IntPB::default_instance_;
  delete Vector2IntPB_reflection_;
}

void protobuf_AddDesc_PublicStruct_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022PublicStruct.proto\"5\n\tVector3PB\022\014\n\001X\030\001"
    " \001(\002:\0010\022\014\n\001Y\030\002 \001(\002:\0010\022\014\n\001Z\030\003 \001(\002:\0010\"w\n\tS"
    "mallUser\022\016\n\003Uid\030\001 \001(\022:\0010\022\020\n\010NickName\030\002 \001"
    "(\t\022\017\n\004Head\030\003 \001(\021:\0011\022\017\n\004Rank\030\004 \001(\021:\0010\022\021\n\006"
    "Status\030\005 \001(\021:\0010\022\023\n\007Channel\030\014 \001(\021:\002-1\"\244\001\n"
    "\004User\022\016\n\003Uid\030\001 \001(\022:\0010\022\021\n\006Status\030\002 \001(\021:\0010"
    "\022\r\n\002Lv\030\003 \001(\021:\0011\022\016\n\003Exp\030\004 \001(\021:\0010\022\020\n\010NickN"
    "ame\030\005 \001(\t\022\017\n\004Head\030\006 \001(\021:\0011\022\017\n\004Gold\030\007 \001(\021"
    ":\0010\022\022\n\007Diamond\030\010 \001(\021:\0010\022\022\n\007Channel\030\t \001(\021"
    ":\0010\"F\n\010Color4PB\022\r\n\001R\030\001 \001(\021:\002-1\022\r\n\001G\030\002 \001("
    "\021:\002-1\022\r\n\001B\030\003 \001(\021:\002-1\022\r\n\001A\030\004 \001(\021:\002-1\",\n\014V"
    "ector2IntPB\022\r\n\001X\030\001 \001(\021:\002-1\022\r\n\001Y\030\002 \001(\021:\002-"
    "1", 481);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PublicStruct.proto", &protobuf_RegisterTypes);
  Vector3PB::default_instance_ = new Vector3PB();
  SmallUser::default_instance_ = new SmallUser();
  User::default_instance_ = new User();
  Color4PB::default_instance_ = new Color4PB();
  Vector2IntPB::default_instance_ = new Vector2IntPB();
  Vector3PB::default_instance_->InitAsDefaultInstance();
  SmallUser::default_instance_->InitAsDefaultInstance();
  User::default_instance_->InitAsDefaultInstance();
  Color4PB::default_instance_->InitAsDefaultInstance();
  Vector2IntPB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PublicStruct_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PublicStruct_2eproto {
  StaticDescriptorInitializer_PublicStruct_2eproto() {
    protobuf_AddDesc_PublicStruct_2eproto();
  }
} static_descriptor_initializer_PublicStruct_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Vector3PB::kXFieldNumber;
const int Vector3PB::kYFieldNumber;
const int Vector3PB::kZFieldNumber;
#endif  // !_MSC_VER

Vector3PB::Vector3PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vector3PB::InitAsDefaultInstance() {
}

Vector3PB::Vector3PB(const Vector3PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vector3PB::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector3PB::~Vector3PB() {
  SharedDtor();
}

void Vector3PB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector3PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3PB_descriptor_;
}

const Vector3PB& Vector3PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

Vector3PB* Vector3PB::default_instance_ = NULL;

Vector3PB* Vector3PB::New() const {
  return new Vector3PB;
}

void Vector3PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector3PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float X = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_Y;
        break;
      }

      // optional float Y = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_Z;
        break;
      }

      // optional float Z = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vector3PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float X = 1 [default = 0];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float Y = 2 [default = 0];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float Z = 3 [default = 0];
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vector3PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float X = 1 [default = 0];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float Y = 2 [default = 0];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float Z = 3 [default = 0];
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vector3PB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float X = 1 [default = 0];
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float Y = 2 [default = 0];
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float Z = 3 [default = 0];
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector3PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector3PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector3PB::MergeFrom(const Vector3PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector3PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3PB::CopyFrom(const Vector3PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3PB::IsInitialized() const {

  return true;
}

void Vector3PB::Swap(Vector3PB* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector3PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3PB_descriptor_;
  metadata.reflection = Vector3PB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SmallUser::kUidFieldNumber;
const int SmallUser::kNickNameFieldNumber;
const int SmallUser::kHeadFieldNumber;
const int SmallUser::kRankFieldNumber;
const int SmallUser::kStatusFieldNumber;
const int SmallUser::kChannelFieldNumber;
#endif  // !_MSC_VER

SmallUser::SmallUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SmallUser::InitAsDefaultInstance() {
}

SmallUser::SmallUser(const SmallUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SmallUser::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_ = 1;
  rank_ = 0;
  status_ = 0;
  channel_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmallUser::~SmallUser() {
  SharedDtor();
}

void SmallUser::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void SmallUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmallUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmallUser_descriptor_;
}

const SmallUser& SmallUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

SmallUser* SmallUser::default_instance_ = NULL;

SmallUser* SmallUser::New() const {
  return new SmallUser;
}

void SmallUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    head_ = 1;
    rank_ = 0;
    status_ = 0;
    channel_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SmallUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 Uid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_NickName;
        break;
      }

      // optional string NickName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Head;
        break;
      }

      // optional sint32 Head = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &head_)));
          set_has_head();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Rank;
        break;
      }

      // optional sint32 Rank = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Status;
        break;
      }

      // optional sint32 Status = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_Channel;
        break;
      }

      // optional sint32 Channel = 12 [default = -1];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SmallUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint64 Uid = 1 [default = 0];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->uid(), output);
  }

  // optional string NickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  // optional sint32 Head = 3 [default = 1];
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->head(), output);
  }

  // optional sint32 Rank = 4 [default = 0];
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->rank(), output);
  }

  // optional sint32 Status = 5 [default = 0];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->status(), output);
  }

  // optional sint32 Channel = 12 [default = -1];
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(12, this->channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SmallUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint64 Uid = 1 [default = 0];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->uid(), target);
  }

  // optional string NickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional sint32 Head = 3 [default = 1];
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->head(), target);
  }

  // optional sint32 Rank = 4 [default = 0];
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->rank(), target);
  }

  // optional sint32 Status = 5 [default = 0];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->status(), target);
  }

  // optional sint32 Channel = 12 [default = -1];
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(12, this->channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SmallUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 Uid = 1 [default = 0];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->uid());
    }

    // optional string NickName = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional sint32 Head = 3 [default = 1];
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->head());
    }

    // optional sint32 Rank = 4 [default = 0];
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->rank());
    }

    // optional sint32 Status = 5 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

    // optional sint32 Channel = 12 [default = -1];
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmallUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SmallUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SmallUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SmallUser::MergeFrom(const SmallUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SmallUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmallUser::CopyFrom(const SmallUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmallUser::IsInitialized() const {

  return true;
}

void SmallUser::Swap(SmallUser* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(nickname_, other->nickname_);
    std::swap(head_, other->head_);
    std::swap(rank_, other->rank_);
    std::swap(status_, other->status_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SmallUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SmallUser_descriptor_;
  metadata.reflection = SmallUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int User::kUidFieldNumber;
const int User::kStatusFieldNumber;
const int User::kLvFieldNumber;
const int User::kExpFieldNumber;
const int User::kNickNameFieldNumber;
const int User::kHeadFieldNumber;
const int User::kGoldFieldNumber;
const int User::kDiamondFieldNumber;
const int User::kChannelFieldNumber;
#endif  // !_MSC_VER

User::User()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void User::InitAsDefaultInstance() {
}

User::User(const User& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void User::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  status_ = 0;
  lv_ = 1;
  exp_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_ = 1;
  gold_ = 0;
  diamond_ = 0;
  channel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

User::~User() {
  SharedDtor();
}

void User::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return User_descriptor_;
}

const User& User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

User* User::default_instance_ = NULL;

User* User::New() const {
  return new User;
}

void User::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    status_ = 0;
    lv_ = 1;
    exp_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    head_ = 1;
    gold_ = 0;
    diamond_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    channel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 Uid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Status;
        break;
      }

      // optional sint32 Status = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Lv;
        break;
      }

      // optional sint32 Lv = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Exp;
        break;
      }

      // optional sint32 Exp = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_NickName;
        break;
      }

      // optional string NickName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Head;
        break;
      }

      // optional sint32 Head = 6 [default = 1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &head_)));
          set_has_head();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Gold;
        break;
      }

      // optional sint32 Gold = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_Diamond;
        break;
      }

      // optional sint32 Diamond = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_Channel;
        break;
      }

      // optional sint32 Channel = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint64 Uid = 1 [default = 0];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->uid(), output);
  }

  // optional sint32 Status = 2 [default = 0];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->status(), output);
  }

  // optional sint32 Lv = 3 [default = 1];
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->lv(), output);
  }

  // optional sint32 Exp = 4 [default = 0];
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->exp(), output);
  }

  // optional string NickName = 5;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->nickname(), output);
  }

  // optional sint32 Head = 6 [default = 1];
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->head(), output);
  }

  // optional sint32 Gold = 7 [default = 0];
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->gold(), output);
  }

  // optional sint32 Diamond = 8 [default = 0];
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->diamond(), output);
  }

  // optional sint32 Channel = 9 [default = 0];
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(9, this->channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint64 Uid = 1 [default = 0];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->uid(), target);
  }

  // optional sint32 Status = 2 [default = 0];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->status(), target);
  }

  // optional sint32 Lv = 3 [default = 1];
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->lv(), target);
  }

  // optional sint32 Exp = 4 [default = 0];
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->exp(), target);
  }

  // optional string NickName = 5;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nickname(), target);
  }

  // optional sint32 Head = 6 [default = 1];
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->head(), target);
  }

  // optional sint32 Gold = 7 [default = 0];
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->gold(), target);
  }

  // optional sint32 Diamond = 8 [default = 0];
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->diamond(), target);
  }

  // optional sint32 Channel = 9 [default = 0];
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(9, this->channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int User::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 Uid = 1 [default = 0];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->uid());
    }

    // optional sint32 Status = 2 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

    // optional sint32 Lv = 3 [default = 1];
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->lv());
    }

    // optional sint32 Exp = 4 [default = 0];
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->exp());
    }

    // optional string NickName = 5;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional sint32 Head = 6 [default = 1];
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->head());
    }

    // optional sint32 Gold = 7 [default = 0];
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->gold());
    }

    // optional sint32 Diamond = 8 [default = 0];
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->diamond());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional sint32 Channel = 9 [default = 0];
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const User* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const User*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void User::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {

  return true;
}

void User::Swap(User* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(status_, other->status_);
    std::swap(lv_, other->lv_);
    std::swap(exp_, other->exp_);
    std::swap(nickname_, other->nickname_);
    std::swap(head_, other->head_);
    std::swap(gold_, other->gold_);
    std::swap(diamond_, other->diamond_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = User_descriptor_;
  metadata.reflection = User_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Color4PB::kRFieldNumber;
const int Color4PB::kGFieldNumber;
const int Color4PB::kBFieldNumber;
const int Color4PB::kAFieldNumber;
#endif  // !_MSC_VER

Color4PB::Color4PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Color4PB::InitAsDefaultInstance() {
}

Color4PB::Color4PB(const Color4PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Color4PB::SharedCtor() {
  _cached_size_ = 0;
  r_ = -1;
  g_ = -1;
  b_ = -1;
  a_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Color4PB::~Color4PB() {
  SharedDtor();
}

void Color4PB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Color4PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Color4PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Color4PB_descriptor_;
}

const Color4PB& Color4PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

Color4PB* Color4PB::default_instance_ = NULL;

Color4PB* Color4PB::New() const {
  return new Color4PB;
}

void Color4PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    r_ = -1;
    g_ = -1;
    b_ = -1;
    a_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Color4PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 R = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_G;
        break;
      }

      // optional sint32 G = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_G:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &g_)));
          set_has_g();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_B;
        break;
      }

      // optional sint32 B = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_B:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_A;
        break;
      }

      // optional sint32 A = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_A:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Color4PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 R = 1 [default = -1];
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->r(), output);
  }

  // optional sint32 G = 2 [default = -1];
  if (has_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->g(), output);
  }

  // optional sint32 B = 3 [default = -1];
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->b(), output);
  }

  // optional sint32 A = 4 [default = -1];
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->a(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Color4PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 R = 1 [default = -1];
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->r(), target);
  }

  // optional sint32 G = 2 [default = -1];
  if (has_g()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->g(), target);
  }

  // optional sint32 B = 3 [default = -1];
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->b(), target);
  }

  // optional sint32 A = 4 [default = -1];
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->a(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Color4PB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 R = 1 [default = -1];
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->r());
    }

    // optional sint32 G = 2 [default = -1];
    if (has_g()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->g());
    }

    // optional sint32 B = 3 [default = -1];
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->b());
    }

    // optional sint32 A = 4 [default = -1];
    if (has_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->a());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Color4PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Color4PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Color4PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Color4PB::MergeFrom(const Color4PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_g()) {
      set_g(from.g());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
    if (from.has_a()) {
      set_a(from.a());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Color4PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Color4PB::CopyFrom(const Color4PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color4PB::IsInitialized() const {

  return true;
}

void Color4PB::Swap(Color4PB* other) {
  if (other != this) {
    std::swap(r_, other->r_);
    std::swap(g_, other->g_);
    std::swap(b_, other->b_);
    std::swap(a_, other->a_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Color4PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Color4PB_descriptor_;
  metadata.reflection = Color4PB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vector2IntPB::kXFieldNumber;
const int Vector2IntPB::kYFieldNumber;
#endif  // !_MSC_VER

Vector2IntPB::Vector2IntPB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vector2IntPB::InitAsDefaultInstance() {
}

Vector2IntPB::Vector2IntPB(const Vector2IntPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vector2IntPB::SharedCtor() {
  _cached_size_ = 0;
  x_ = -1;
  y_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector2IntPB::~Vector2IntPB() {
  SharedDtor();
}

void Vector2IntPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector2IntPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector2IntPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector2IntPB_descriptor_;
}

const Vector2IntPB& Vector2IntPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PublicStruct_2eproto();
  return *default_instance_;
}

Vector2IntPB* Vector2IntPB::default_instance_ = NULL;

Vector2IntPB* Vector2IntPB::New() const {
  return new Vector2IntPB;
}

void Vector2IntPB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = -1;
    y_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector2IntPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 X = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Y;
        break;
      }

      // optional sint32 Y = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vector2IntPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 X = 1 [default = -1];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->x(), output);
  }

  // optional sint32 Y = 2 [default = -1];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vector2IntPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 X = 1 [default = -1];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->x(), target);
  }

  // optional sint32 Y = 2 [default = -1];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vector2IntPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 X = 1 [default = -1];
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->x());
    }

    // optional sint32 Y = 2 [default = -1];
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector2IntPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector2IntPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector2IntPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector2IntPB::MergeFrom(const Vector2IntPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector2IntPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector2IntPB::CopyFrom(const Vector2IntPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2IntPB::IsInitialized() const {

  return true;
}

void Vector2IntPB::Swap(Vector2IntPB* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector2IntPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector2IntPB_descriptor_;
  metadata.reflection = Vector2IntPB_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
