// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TeamCliRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TeamCliRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* TeamRpcPullTeammateAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcPullTeammateAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRpcPullTeammateReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcPullTeammateReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRpcAddTeamNoifyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcAddTeamNoifyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRpcGetTeamNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcGetTeamNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRpcCtrlTeamAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcCtrlTeamAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRpcCtrlTeamReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcCtrlTeamReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRpcFindTeamAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcFindTeamAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRpcFindTeamReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRpcFindTeamReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamTeamV_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamTeamV_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TeamCliRpc_2eproto() {
  protobuf_AddDesc_TeamCliRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TeamCliRpc.proto");
  GOOGLE_CHECK(file != NULL);
  TeamRpcPullTeammateAsk_descriptor_ = file->message_type(0);
  static const int TeamRpcPullTeammateAsk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcPullTeammateAsk, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcPullTeammateAsk, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcPullTeammateAsk, type_),
  };
  TeamRpcPullTeammateAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcPullTeammateAsk_descriptor_,
      TeamRpcPullTeammateAsk::default_instance_,
      TeamRpcPullTeammateAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcPullTeammateAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcPullTeammateAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcPullTeammateAsk));
  TeamRpcPullTeammateReply_descriptor_ = file->message_type(1);
  static const int TeamRpcPullTeammateReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcPullTeammateReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcPullTeammateReply, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcPullTeammateReply, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcPullTeammateReply, type_),
  };
  TeamRpcPullTeammateReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcPullTeammateReply_descriptor_,
      TeamRpcPullTeammateReply::default_instance_,
      TeamRpcPullTeammateReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcPullTeammateReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcPullTeammateReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcPullTeammateReply));
  TeamRpcAddTeamNoifyNotify_descriptor_ = file->message_type(2);
  static const int TeamRpcAddTeamNoifyNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcAddTeamNoifyNotify, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcAddTeamNoifyNotify, beuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcAddTeamNoifyNotify, isok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcAddTeamNoifyNotify, type_),
  };
  TeamRpcAddTeamNoifyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcAddTeamNoifyNotify_descriptor_,
      TeamRpcAddTeamNoifyNotify::default_instance_,
      TeamRpcAddTeamNoifyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcAddTeamNoifyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcAddTeamNoifyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcAddTeamNoifyNotify));
  TeamRpcGetTeamNotify_descriptor_ = file->message_type(3);
  static const int TeamRpcGetTeamNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcGetTeamNotify, team_),
  };
  TeamRpcGetTeamNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcGetTeamNotify_descriptor_,
      TeamRpcGetTeamNotify::default_instance_,
      TeamRpcGetTeamNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcGetTeamNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcGetTeamNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcGetTeamNotify));
  TeamRpcCtrlTeamAsk_descriptor_ = file->message_type(4);
  static const int TeamRpcCtrlTeamAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcCtrlTeamAsk, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcCtrlTeamAsk, uid_),
  };
  TeamRpcCtrlTeamAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcCtrlTeamAsk_descriptor_,
      TeamRpcCtrlTeamAsk::default_instance_,
      TeamRpcCtrlTeamAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcCtrlTeamAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcCtrlTeamAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcCtrlTeamAsk));
  TeamRpcCtrlTeamReply_descriptor_ = file->message_type(5);
  static const int TeamRpcCtrlTeamReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcCtrlTeamReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcCtrlTeamReply, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcCtrlTeamReply, uid_),
  };
  TeamRpcCtrlTeamReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcCtrlTeamReply_descriptor_,
      TeamRpcCtrlTeamReply::default_instance_,
      TeamRpcCtrlTeamReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcCtrlTeamReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcCtrlTeamReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcCtrlTeamReply));
  TeamRpcFindTeamAsk_descriptor_ = file->message_type(6);
  static const int TeamRpcFindTeamAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcFindTeamAsk, teamid_),
  };
  TeamRpcFindTeamAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcFindTeamAsk_descriptor_,
      TeamRpcFindTeamAsk::default_instance_,
      TeamRpcFindTeamAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcFindTeamAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcFindTeamAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcFindTeamAsk));
  TeamRpcFindTeamReply_descriptor_ = file->message_type(7);
  static const int TeamRpcFindTeamReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcFindTeamReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcFindTeamReply, teams_),
  };
  TeamRpcFindTeamReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRpcFindTeamReply_descriptor_,
      TeamRpcFindTeamReply::default_instance_,
      TeamRpcFindTeamReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcFindTeamReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcFindTeamReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRpcFindTeamReply));
  TeamTeamV_descriptor_ = file->message_type(8);
  static const int TeamTeamV_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTeamV, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTeamV, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTeamV, captainid_),
  };
  TeamTeamV_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamTeamV_descriptor_,
      TeamTeamV::default_instance_,
      TeamTeamV_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTeamV, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTeamV, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamTeamV));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TeamCliRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcPullTeammateAsk_descriptor_, &TeamRpcPullTeammateAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcPullTeammateReply_descriptor_, &TeamRpcPullTeammateReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcAddTeamNoifyNotify_descriptor_, &TeamRpcAddTeamNoifyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcGetTeamNotify_descriptor_, &TeamRpcGetTeamNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcCtrlTeamAsk_descriptor_, &TeamRpcCtrlTeamAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcCtrlTeamReply_descriptor_, &TeamRpcCtrlTeamReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcFindTeamAsk_descriptor_, &TeamRpcFindTeamAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRpcFindTeamReply_descriptor_, &TeamRpcFindTeamReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamTeamV_descriptor_, &TeamTeamV::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TeamCliRpc_2eproto() {
  delete TeamRpcPullTeammateAsk::default_instance_;
  delete TeamRpcPullTeammateAsk_reflection_;
  delete TeamRpcPullTeammateReply::default_instance_;
  delete TeamRpcPullTeammateReply_reflection_;
  delete TeamRpcAddTeamNoifyNotify::default_instance_;
  delete TeamRpcAddTeamNoifyNotify_reflection_;
  delete TeamRpcGetTeamNotify::default_instance_;
  delete TeamRpcGetTeamNotify_reflection_;
  delete TeamRpcCtrlTeamAsk::default_instance_;
  delete TeamRpcCtrlTeamAsk_reflection_;
  delete TeamRpcCtrlTeamReply::default_instance_;
  delete TeamRpcCtrlTeamReply_reflection_;
  delete TeamRpcFindTeamAsk::default_instance_;
  delete TeamRpcFindTeamAsk_reflection_;
  delete TeamRpcFindTeamReply::default_instance_;
  delete TeamRpcFindTeamReply_reflection_;
  delete TeamTeamV::default_instance_;
  delete TeamTeamV_reflection_;
}

void protobuf_AddDesc_TeamCliRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020TeamCliRpc.proto\032\022PublicStruct.proto\"L"
    "\n\026TeamRpcPullTeammateAsk\022\017\n\003UID\030\001 \001(\021:\002-"
    "1\022\020\n\010UserName\030\002 \001(\t\022\017\n\004Type\030\003 \001(\021:\0010\"e\n\030"
    "TeamRpcPullTeammateReply\022\025\n\006Result\030\001 \001(\021"
    ":\005-9999\022\017\n\003UID\030\002 \001(\021:\002-1\022\020\n\010UserName\030\003 \001"
    "(\t\022\017\n\004Type\030\004 \001(\021:\0010\"t\n\031TeamRpcAddTeamNoi"
    "fyNotify\022\030\n\004User\030\003 \001(\0132\n.SmallUser\022\032\n\006Be"
    "User\030\004 \001(\0132\n.SmallUser\022\020\n\004IsOk\030\006 \001(\021:\002-1"
    "\022\017\n\004Type\030\007 \001(\021:\0010\"0\n\024TeamRpcGetTeamNotif"
    "y\022\030\n\004Team\030\001 \001(\0132\n.TeamTeamV\"7\n\022TeamRpcCt"
    "rlTeamAsk\022\020\n\004Type\030\001 \001(\021:\002-1\022\017\n\003UID\030\003 \001(\021"
    ":\002-1\"P\n\024TeamRpcCtrlTeamReply\022\025\n\006Result\030\001"
    " \001(\021:\005-9999\022\020\n\004Type\030\002 \001(\021:\002-1\022\017\n\003UID\030\003 \001"
    "(\021:\002-1\"(\n\022TeamRpcFindTeamAsk\022\022\n\006TeamID\030\001"
    " \001(\022:\002-1\"H\n\024TeamRpcFindTeamReply\022\025\n\006Resu"
    "lt\030\001 \001(\021:\005-9999\022\031\n\005Teams\030\002 \003(\0132\n.TeamTea"
    "mV\"P\n\tTeamTeamV\022\022\n\006TeamID\030\001 \001(\021:\002-1\022\030\n\004R"
    "ole\030\002 \003(\0132\n.SmallUser\022\025\n\tCaptainID\030\003 \001(\021"
    ":\002-1", 724);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TeamCliRpc.proto", &protobuf_RegisterTypes);
  TeamRpcPullTeammateAsk::default_instance_ = new TeamRpcPullTeammateAsk();
  TeamRpcPullTeammateReply::default_instance_ = new TeamRpcPullTeammateReply();
  TeamRpcAddTeamNoifyNotify::default_instance_ = new TeamRpcAddTeamNoifyNotify();
  TeamRpcGetTeamNotify::default_instance_ = new TeamRpcGetTeamNotify();
  TeamRpcCtrlTeamAsk::default_instance_ = new TeamRpcCtrlTeamAsk();
  TeamRpcCtrlTeamReply::default_instance_ = new TeamRpcCtrlTeamReply();
  TeamRpcFindTeamAsk::default_instance_ = new TeamRpcFindTeamAsk();
  TeamRpcFindTeamReply::default_instance_ = new TeamRpcFindTeamReply();
  TeamTeamV::default_instance_ = new TeamTeamV();
  TeamRpcPullTeammateAsk::default_instance_->InitAsDefaultInstance();
  TeamRpcPullTeammateReply::default_instance_->InitAsDefaultInstance();
  TeamRpcAddTeamNoifyNotify::default_instance_->InitAsDefaultInstance();
  TeamRpcGetTeamNotify::default_instance_->InitAsDefaultInstance();
  TeamRpcCtrlTeamAsk::default_instance_->InitAsDefaultInstance();
  TeamRpcCtrlTeamReply::default_instance_->InitAsDefaultInstance();
  TeamRpcFindTeamAsk::default_instance_->InitAsDefaultInstance();
  TeamRpcFindTeamReply::default_instance_->InitAsDefaultInstance();
  TeamTeamV::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TeamCliRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TeamCliRpc_2eproto {
  StaticDescriptorInitializer_TeamCliRpc_2eproto() {
    protobuf_AddDesc_TeamCliRpc_2eproto();
  }
} static_descriptor_initializer_TeamCliRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TeamRpcPullTeammateAsk::kUIDFieldNumber;
const int TeamRpcPullTeammateAsk::kUserNameFieldNumber;
const int TeamRpcPullTeammateAsk::kTypeFieldNumber;
#endif  // !_MSC_VER

TeamRpcPullTeammateAsk::TeamRpcPullTeammateAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcPullTeammateAsk::InitAsDefaultInstance() {
}

TeamRpcPullTeammateAsk::TeamRpcPullTeammateAsk(const TeamRpcPullTeammateAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcPullTeammateAsk::SharedCtor() {
  _cached_size_ = 0;
  uid_ = -1;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcPullTeammateAsk::~TeamRpcPullTeammateAsk() {
  SharedDtor();
}

void TeamRpcPullTeammateAsk::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void TeamRpcPullTeammateAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcPullTeammateAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcPullTeammateAsk_descriptor_;
}

const TeamRpcPullTeammateAsk& TeamRpcPullTeammateAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamCliRpc_2eproto();
  return *default_instance_;
}

TeamRpcPullTeammateAsk* TeamRpcPullTeammateAsk::default_instance_ = NULL;

TeamRpcPullTeammateAsk* TeamRpcPullTeammateAsk::New() const {
  return new TeamRpcPullTeammateAsk;
}

void TeamRpcPullTeammateAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = -1;
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcPullTeammateAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 UID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_UserName;
        break;
      }

      // optional string UserName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Type;
        break;
      }

      // optional sint32 Type = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamRpcPullTeammateAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 UID = 1 [default = -1];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->uid(), output);
  }

  // optional string UserName = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }

  // optional sint32 Type = 3 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcPullTeammateAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 UID = 1 [default = -1];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->uid(), target);
  }

  // optional string UserName = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional sint32 Type = 3 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcPullTeammateAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 UID = 1 [default = -1];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->uid());
    }

    // optional string UserName = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional sint32 Type = 3 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcPullTeammateAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcPullTeammateAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcPullTeammateAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcPullTeammateAsk::MergeFrom(const TeamRpcPullTeammateAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcPullTeammateAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcPullTeammateAsk::CopyFrom(const TeamRpcPullTeammateAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcPullTeammateAsk::IsInitialized() const {

  return true;
}

void TeamRpcPullTeammateAsk::Swap(TeamRpcPullTeammateAsk* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(username_, other->username_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcPullTeammateAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcPullTeammateAsk_descriptor_;
  metadata.reflection = TeamRpcPullTeammateAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRpcPullTeammateReply::kResultFieldNumber;
const int TeamRpcPullTeammateReply::kUIDFieldNumber;
const int TeamRpcPullTeammateReply::kUserNameFieldNumber;
const int TeamRpcPullTeammateReply::kTypeFieldNumber;
#endif  // !_MSC_VER

TeamRpcPullTeammateReply::TeamRpcPullTeammateReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcPullTeammateReply::InitAsDefaultInstance() {
}

TeamRpcPullTeammateReply::TeamRpcPullTeammateReply(const TeamRpcPullTeammateReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcPullTeammateReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  uid_ = -1;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcPullTeammateReply::~TeamRpcPullTeammateReply() {
  SharedDtor();
}

void TeamRpcPullTeammateReply::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void TeamRpcPullTeammateReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcPullTeammateReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcPullTeammateReply_descriptor_;
}

const TeamRpcPullTeammateReply& TeamRpcPullTeammateReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamCliRpc_2eproto();
  return *default_instance_;
}

TeamRpcPullTeammateReply* TeamRpcPullTeammateReply::default_instance_ = NULL;

TeamRpcPullTeammateReply* TeamRpcPullTeammateReply::New() const {
  return new TeamRpcPullTeammateReply;
}

void TeamRpcPullTeammateReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    uid_ = -1;
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcPullTeammateReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_UID;
        break;
      }

      // optional sint32 UID = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_UserName;
        break;
      }

      // optional string UserName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Type;
        break;
      }

      // optional sint32 Type = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamRpcPullTeammateReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint32 UID = 2 [default = -1];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->uid(), output);
  }

  // optional string UserName = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->username(), output);
  }

  // optional sint32 Type = 4 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcPullTeammateReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint32 UID = 2 [default = -1];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->uid(), target);
  }

  // optional string UserName = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  // optional sint32 Type = 4 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcPullTeammateReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 UID = 2 [default = -1];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->uid());
    }

    // optional string UserName = 3;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional sint32 Type = 4 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcPullTeammateReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcPullTeammateReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcPullTeammateReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcPullTeammateReply::MergeFrom(const TeamRpcPullTeammateReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcPullTeammateReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcPullTeammateReply::CopyFrom(const TeamRpcPullTeammateReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcPullTeammateReply::IsInitialized() const {

  return true;
}

void TeamRpcPullTeammateReply::Swap(TeamRpcPullTeammateReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(uid_, other->uid_);
    std::swap(username_, other->username_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcPullTeammateReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcPullTeammateReply_descriptor_;
  metadata.reflection = TeamRpcPullTeammateReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRpcAddTeamNoifyNotify::kUserFieldNumber;
const int TeamRpcAddTeamNoifyNotify::kBeUserFieldNumber;
const int TeamRpcAddTeamNoifyNotify::kIsOkFieldNumber;
const int TeamRpcAddTeamNoifyNotify::kTypeFieldNumber;
#endif  // !_MSC_VER

TeamRpcAddTeamNoifyNotify::TeamRpcAddTeamNoifyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcAddTeamNoifyNotify::InitAsDefaultInstance() {
  user_ = const_cast< ::SmallUser*>(&::SmallUser::default_instance());
  beuser_ = const_cast< ::SmallUser*>(&::SmallUser::default_instance());
}

TeamRpcAddTeamNoifyNotify::TeamRpcAddTeamNoifyNotify(const TeamRpcAddTeamNoifyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcAddTeamNoifyNotify::SharedCtor() {
  _cached_size_ = 0;
  user_ = NULL;
  beuser_ = NULL;
  isok_ = -1;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcAddTeamNoifyNotify::~TeamRpcAddTeamNoifyNotify() {
  SharedDtor();
}

void TeamRpcAddTeamNoifyNotify::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
    delete beuser_;
  }
}

void TeamRpcAddTeamNoifyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcAddTeamNoifyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcAddTeamNoifyNotify_descriptor_;
}

const TeamRpcAddTeamNoifyNotify& TeamRpcAddTeamNoifyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamCliRpc_2eproto();
  return *default_instance_;
}

TeamRpcAddTeamNoifyNotify* TeamRpcAddTeamNoifyNotify::default_instance_ = NULL;

TeamRpcAddTeamNoifyNotify* TeamRpcAddTeamNoifyNotify::New() const {
  return new TeamRpcAddTeamNoifyNotify;
}

void TeamRpcAddTeamNoifyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user()) {
      if (user_ != NULL) user_->::SmallUser::Clear();
    }
    if (has_beuser()) {
      if (beuser_ != NULL) beuser_->::SmallUser::Clear();
    }
    isok_ = -1;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcAddTeamNoifyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SmallUser User = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_BeUser;
        break;
      }

      // optional .SmallUser BeUser = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BeUser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_beuser()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_IsOk;
        break;
      }

      // optional sint32 IsOk = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsOk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &isok_)));
          set_has_isok();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Type;
        break;
      }

      // optional sint32 Type = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamRpcAddTeamNoifyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SmallUser User = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->user(), output);
  }

  // optional .SmallUser BeUser = 4;
  if (has_beuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->beuser(), output);
  }

  // optional sint32 IsOk = 6 [default = -1];
  if (has_isok()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->isok(), output);
  }

  // optional sint32 Type = 7 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcAddTeamNoifyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SmallUser User = 3;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->user(), target);
  }

  // optional .SmallUser BeUser = 4;
  if (has_beuser()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->beuser(), target);
  }

  // optional sint32 IsOk = 6 [default = -1];
  if (has_isok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->isok(), target);
  }

  // optional sint32 Type = 7 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcAddTeamNoifyNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SmallUser User = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional .SmallUser BeUser = 4;
    if (has_beuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->beuser());
    }

    // optional sint32 IsOk = 6 [default = -1];
    if (has_isok()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->isok());
    }

    // optional sint32 Type = 7 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcAddTeamNoifyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcAddTeamNoifyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcAddTeamNoifyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcAddTeamNoifyNotify::MergeFrom(const TeamRpcAddTeamNoifyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      mutable_user()->::SmallUser::MergeFrom(from.user());
    }
    if (from.has_beuser()) {
      mutable_beuser()->::SmallUser::MergeFrom(from.beuser());
    }
    if (from.has_isok()) {
      set_isok(from.isok());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcAddTeamNoifyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcAddTeamNoifyNotify::CopyFrom(const TeamRpcAddTeamNoifyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcAddTeamNoifyNotify::IsInitialized() const {

  return true;
}

void TeamRpcAddTeamNoifyNotify::Swap(TeamRpcAddTeamNoifyNotify* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(beuser_, other->beuser_);
    std::swap(isok_, other->isok_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcAddTeamNoifyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcAddTeamNoifyNotify_descriptor_;
  metadata.reflection = TeamRpcAddTeamNoifyNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRpcGetTeamNotify::kTeamFieldNumber;
#endif  // !_MSC_VER

TeamRpcGetTeamNotify::TeamRpcGetTeamNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcGetTeamNotify::InitAsDefaultInstance() {
  team_ = const_cast< ::TeamTeamV*>(&::TeamTeamV::default_instance());
}

TeamRpcGetTeamNotify::TeamRpcGetTeamNotify(const TeamRpcGetTeamNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcGetTeamNotify::SharedCtor() {
  _cached_size_ = 0;
  team_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcGetTeamNotify::~TeamRpcGetTeamNotify() {
  SharedDtor();
}

void TeamRpcGetTeamNotify::SharedDtor() {
  if (this != default_instance_) {
    delete team_;
  }
}

void TeamRpcGetTeamNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcGetTeamNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcGetTeamNotify_descriptor_;
}

const TeamRpcGetTeamNotify& TeamRpcGetTeamNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamCliRpc_2eproto();
  return *default_instance_;
}

TeamRpcGetTeamNotify* TeamRpcGetTeamNotify::default_instance_ = NULL;

TeamRpcGetTeamNotify* TeamRpcGetTeamNotify::New() const {
  return new TeamRpcGetTeamNotify;
}

void TeamRpcGetTeamNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_team()) {
      if (team_ != NULL) team_->::TeamTeamV::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcGetTeamNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TeamTeamV Team = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamRpcGetTeamNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TeamTeamV Team = 1;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcGetTeamNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TeamTeamV Team = 1;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcGetTeamNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TeamTeamV Team = 1;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcGetTeamNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcGetTeamNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcGetTeamNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcGetTeamNotify::MergeFrom(const TeamRpcGetTeamNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      mutable_team()->::TeamTeamV::MergeFrom(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcGetTeamNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcGetTeamNotify::CopyFrom(const TeamRpcGetTeamNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcGetTeamNotify::IsInitialized() const {

  return true;
}

void TeamRpcGetTeamNotify::Swap(TeamRpcGetTeamNotify* other) {
  if (other != this) {
    std::swap(team_, other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcGetTeamNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcGetTeamNotify_descriptor_;
  metadata.reflection = TeamRpcGetTeamNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRpcCtrlTeamAsk::kTypeFieldNumber;
const int TeamRpcCtrlTeamAsk::kUIDFieldNumber;
#endif  // !_MSC_VER

TeamRpcCtrlTeamAsk::TeamRpcCtrlTeamAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcCtrlTeamAsk::InitAsDefaultInstance() {
}

TeamRpcCtrlTeamAsk::TeamRpcCtrlTeamAsk(const TeamRpcCtrlTeamAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcCtrlTeamAsk::SharedCtor() {
  _cached_size_ = 0;
  type_ = -1;
  uid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcCtrlTeamAsk::~TeamRpcCtrlTeamAsk() {
  SharedDtor();
}

void TeamRpcCtrlTeamAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamRpcCtrlTeamAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcCtrlTeamAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcCtrlTeamAsk_descriptor_;
}

const TeamRpcCtrlTeamAsk& TeamRpcCtrlTeamAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamCliRpc_2eproto();
  return *default_instance_;
}

TeamRpcCtrlTeamAsk* TeamRpcCtrlTeamAsk::default_instance_ = NULL;

TeamRpcCtrlTeamAsk* TeamRpcCtrlTeamAsk::New() const {
  return new TeamRpcCtrlTeamAsk;
}

void TeamRpcCtrlTeamAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = -1;
    uid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcCtrlTeamAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Type = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_UID;
        break;
      }

      // optional sint32 UID = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamRpcCtrlTeamAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Type = 1 [default = -1];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->type(), output);
  }

  // optional sint32 UID = 3 [default = -1];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcCtrlTeamAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Type = 1 [default = -1];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->type(), target);
  }

  // optional sint32 UID = 3 [default = -1];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcCtrlTeamAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Type = 1 [default = -1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

    // optional sint32 UID = 3 [default = -1];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcCtrlTeamAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcCtrlTeamAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcCtrlTeamAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcCtrlTeamAsk::MergeFrom(const TeamRpcCtrlTeamAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcCtrlTeamAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcCtrlTeamAsk::CopyFrom(const TeamRpcCtrlTeamAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcCtrlTeamAsk::IsInitialized() const {

  return true;
}

void TeamRpcCtrlTeamAsk::Swap(TeamRpcCtrlTeamAsk* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcCtrlTeamAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcCtrlTeamAsk_descriptor_;
  metadata.reflection = TeamRpcCtrlTeamAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRpcCtrlTeamReply::kResultFieldNumber;
const int TeamRpcCtrlTeamReply::kTypeFieldNumber;
const int TeamRpcCtrlTeamReply::kUIDFieldNumber;
#endif  // !_MSC_VER

TeamRpcCtrlTeamReply::TeamRpcCtrlTeamReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcCtrlTeamReply::InitAsDefaultInstance() {
}

TeamRpcCtrlTeamReply::TeamRpcCtrlTeamReply(const TeamRpcCtrlTeamReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcCtrlTeamReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  type_ = -1;
  uid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcCtrlTeamReply::~TeamRpcCtrlTeamReply() {
  SharedDtor();
}

void TeamRpcCtrlTeamReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamRpcCtrlTeamReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcCtrlTeamReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcCtrlTeamReply_descriptor_;
}

const TeamRpcCtrlTeamReply& TeamRpcCtrlTeamReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamCliRpc_2eproto();
  return *default_instance_;
}

TeamRpcCtrlTeamReply* TeamRpcCtrlTeamReply::default_instance_ = NULL;

TeamRpcCtrlTeamReply* TeamRpcCtrlTeamReply::New() const {
  return new TeamRpcCtrlTeamReply;
}

void TeamRpcCtrlTeamReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    type_ = -1;
    uid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcCtrlTeamReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // optional sint32 Type = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_UID;
        break;
      }

      // optional sint32 UID = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamRpcCtrlTeamReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint32 Type = 2 [default = -1];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->type(), output);
  }

  // optional sint32 UID = 3 [default = -1];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcCtrlTeamReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint32 Type = 2 [default = -1];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->type(), target);
  }

  // optional sint32 UID = 3 [default = -1];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcCtrlTeamReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 Type = 2 [default = -1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

    // optional sint32 UID = 3 [default = -1];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcCtrlTeamReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcCtrlTeamReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcCtrlTeamReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcCtrlTeamReply::MergeFrom(const TeamRpcCtrlTeamReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcCtrlTeamReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcCtrlTeamReply::CopyFrom(const TeamRpcCtrlTeamReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcCtrlTeamReply::IsInitialized() const {

  return true;
}

void TeamRpcCtrlTeamReply::Swap(TeamRpcCtrlTeamReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(type_, other->type_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcCtrlTeamReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcCtrlTeamReply_descriptor_;
  metadata.reflection = TeamRpcCtrlTeamReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRpcFindTeamAsk::kTeamIDFieldNumber;
#endif  // !_MSC_VER

TeamRpcFindTeamAsk::TeamRpcFindTeamAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcFindTeamAsk::InitAsDefaultInstance() {
}

TeamRpcFindTeamAsk::TeamRpcFindTeamAsk(const TeamRpcFindTeamAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcFindTeamAsk::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcFindTeamAsk::~TeamRpcFindTeamAsk() {
  SharedDtor();
}

void TeamRpcFindTeamAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamRpcFindTeamAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcFindTeamAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcFindTeamAsk_descriptor_;
}

const TeamRpcFindTeamAsk& TeamRpcFindTeamAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamCliRpc_2eproto();
  return *default_instance_;
}

TeamRpcFindTeamAsk* TeamRpcFindTeamAsk::default_instance_ = NULL;

TeamRpcFindTeamAsk* TeamRpcFindTeamAsk::New() const {
  return new TeamRpcFindTeamAsk;
}

void TeamRpcFindTeamAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = GOOGLE_LONGLONG(-1);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcFindTeamAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 TeamID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamRpcFindTeamAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint64 TeamID = 1 [default = -1];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcFindTeamAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint64 TeamID = 1 [default = -1];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcFindTeamAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 TeamID = 1 [default = -1];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcFindTeamAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcFindTeamAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcFindTeamAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcFindTeamAsk::MergeFrom(const TeamRpcFindTeamAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcFindTeamAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcFindTeamAsk::CopyFrom(const TeamRpcFindTeamAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcFindTeamAsk::IsInitialized() const {

  return true;
}

void TeamRpcFindTeamAsk::Swap(TeamRpcFindTeamAsk* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcFindTeamAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcFindTeamAsk_descriptor_;
  metadata.reflection = TeamRpcFindTeamAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRpcFindTeamReply::kResultFieldNumber;
const int TeamRpcFindTeamReply::kTeamsFieldNumber;
#endif  // !_MSC_VER

TeamRpcFindTeamReply::TeamRpcFindTeamReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRpcFindTeamReply::InitAsDefaultInstance() {
}

TeamRpcFindTeamReply::TeamRpcFindTeamReply(const TeamRpcFindTeamReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRpcFindTeamReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRpcFindTeamReply::~TeamRpcFindTeamReply() {
  SharedDtor();
}

void TeamRpcFindTeamReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamRpcFindTeamReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcFindTeamReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRpcFindTeamReply_descriptor_;
}

const TeamRpcFindTeamReply& TeamRpcFindTeamReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamCliRpc_2eproto();
  return *default_instance_;
}

TeamRpcFindTeamReply* TeamRpcFindTeamReply::default_instance_ = NULL;

TeamRpcFindTeamReply* TeamRpcFindTeamReply::New() const {
  return new TeamRpcFindTeamReply;
}

void TeamRpcFindTeamReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  teams_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRpcFindTeamReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Teams;
        break;
      }

      // repeated .TeamTeamV Teams = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Teams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teams()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Teams;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamRpcFindTeamReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // repeated .TeamTeamV Teams = 2;
  for (int i = 0; i < this->teams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->teams(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRpcFindTeamReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // repeated .TeamTeamV Teams = 2;
  for (int i = 0; i < this->teams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->teams(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRpcFindTeamReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

  }
  // repeated .TeamTeamV Teams = 2;
  total_size += 1 * this->teams_size();
  for (int i = 0; i < this->teams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teams(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcFindTeamReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRpcFindTeamReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRpcFindTeamReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRpcFindTeamReply::MergeFrom(const TeamRpcFindTeamReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  teams_.MergeFrom(from.teams_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRpcFindTeamReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcFindTeamReply::CopyFrom(const TeamRpcFindTeamReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcFindTeamReply::IsInitialized() const {

  return true;
}

void TeamRpcFindTeamReply::Swap(TeamRpcFindTeamReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    teams_.Swap(&other->teams_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRpcFindTeamReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRpcFindTeamReply_descriptor_;
  metadata.reflection = TeamRpcFindTeamReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamTeamV::kTeamIDFieldNumber;
const int TeamTeamV::kRoleFieldNumber;
const int TeamTeamV::kCaptainIDFieldNumber;
#endif  // !_MSC_VER

TeamTeamV::TeamTeamV()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamTeamV::InitAsDefaultInstance() {
}

TeamTeamV::TeamTeamV(const TeamTeamV& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamTeamV::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = -1;
  captainid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamTeamV::~TeamTeamV() {
  SharedDtor();
}

void TeamTeamV::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamTeamV::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamTeamV::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamTeamV_descriptor_;
}

const TeamTeamV& TeamTeamV::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TeamCliRpc_2eproto();
  return *default_instance_;
}

TeamTeamV* TeamTeamV::default_instance_ = NULL;

TeamTeamV* TeamTeamV::New() const {
  return new TeamTeamV;
}

void TeamTeamV::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = -1;
    captainid_ = -1;
  }
  role_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamTeamV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 TeamID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Role;
        break;
      }

      // repeated .SmallUser Role = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Role;
        if (input->ExpectTag(24)) goto parse_CaptainID;
        break;
      }

      // optional sint32 CaptainID = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CaptainID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &captainid_)));
          set_has_captainid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamTeamV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 TeamID = 1 [default = -1];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->teamid(), output);
  }

  // repeated .SmallUser Role = 2;
  for (int i = 0; i < this->role_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->role(i), output);
  }

  // optional sint32 CaptainID = 3 [default = -1];
  if (has_captainid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->captainid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamTeamV::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 TeamID = 1 [default = -1];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->teamid(), target);
  }

  // repeated .SmallUser Role = 2;
  for (int i = 0; i < this->role_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->role(i), target);
  }

  // optional sint32 CaptainID = 3 [default = -1];
  if (has_captainid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->captainid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamTeamV::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 TeamID = 1 [default = -1];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->teamid());
    }

    // optional sint32 CaptainID = 3 [default = -1];
    if (has_captainid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->captainid());
    }

  }
  // repeated .SmallUser Role = 2;
  total_size += 1 * this->role_size();
  for (int i = 0; i < this->role_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamTeamV::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamTeamV* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamTeamV*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamTeamV::MergeFrom(const TeamTeamV& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_.MergeFrom(from.role_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_captainid()) {
      set_captainid(from.captainid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamTeamV::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamTeamV::CopyFrom(const TeamTeamV& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamTeamV::IsInitialized() const {

  return true;
}

void TeamTeamV::Swap(TeamTeamV* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    role_.Swap(&other->role_);
    std::swap(captainid_, other->captainid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamTeamV::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamTeamV_descriptor_;
  metadata.reflection = TeamTeamV_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
