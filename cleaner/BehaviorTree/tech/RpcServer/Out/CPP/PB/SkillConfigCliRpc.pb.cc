// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SkillConfigCliRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SkillConfigCliRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SkillConfigRpcsyncNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillConfigRpcsyncNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillConfigSkillPhase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillConfigSkillPhase_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillConfigSkillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillConfigSkillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillConfigSkillEventBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillConfigSkillEventBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillConfigSkillCustomEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillConfigSkillCustomEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillConfigCameraChangeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillConfigCameraChangeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillConfigSkillData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillConfigSkillData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillConfigSkillDamage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillConfigSkillDamage_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillConfigShotPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillConfigShotPoint_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SkillConfigCliRpc_2eproto() {
  protobuf_AddDesc_SkillConfigCliRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SkillConfigCliRpc.proto");
  GOOGLE_CHECK(file != NULL);
  SkillConfigRpcsyncNotify_descriptor_ = file->message_type(0);
  static const int SkillConfigRpcsyncNotify_offsets_[1] = {
  };
  SkillConfigRpcsyncNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillConfigRpcsyncNotify_descriptor_,
      SkillConfigRpcsyncNotify::default_instance_,
      SkillConfigRpcsyncNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigRpcsyncNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigRpcsyncNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillConfigRpcsyncNotify));
  SkillConfigSkillPhase_descriptor_ = file->message_type(1);
  static const int SkillConfigSkillPhase_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillPhase, skillphasetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillPhase, timelength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillPhase, eventidlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillPhase, looptime_),
  };
  SkillConfigSkillPhase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillConfigSkillPhase_descriptor_,
      SkillConfigSkillPhase::default_instance_,
      SkillConfigSkillPhase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillPhase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillPhase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillConfigSkillPhase));
  SkillConfigSkillInfo_descriptor_ = file->message_type(2);
  static const int SkillConfigSkillInfo_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, handletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, skilltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, unbroken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, usetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, crosstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, aimingarea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, aimingmaxcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, areahorizontal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, areavertical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, jumpareahorizontal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, jumpareavertical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, velocitycorrection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, recoverycd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, focotime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, shoottime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, skillcd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, shotinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, costtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, costvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, coststage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, bulletconfigcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, collectcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, islockcamera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, damagelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, cameradata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, skillphaselist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, customeventlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, ikfile_),
  };
  SkillConfigSkillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillConfigSkillInfo_descriptor_,
      SkillConfigSkillInfo::default_instance_,
      SkillConfigSkillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillConfigSkillInfo));
  SkillConfigSkillEventBase_descriptor_ = file->message_type(3);
  static const int SkillConfigSkillEventBase_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillEventBase, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillEventBase, eventtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillEventBase, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillEventBase, eventlength_),
  };
  SkillConfigSkillEventBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillConfigSkillEventBase_descriptor_,
      SkillConfigSkillEventBase::default_instance_,
      SkillConfigSkillEventBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillEventBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillEventBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillConfigSkillEventBase));
  SkillConfigSkillCustomEvent_descriptor_ = file->message_type(4);
  static const int SkillConfigSkillCustomEvent_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, eventbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, skillphasetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, modelmountpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, weaponmountpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, effectmountpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, loop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, wholeanimation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, offsetx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, offsety_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, offsetz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, createtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, removetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, removephase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, removetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, effectfollow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, usemount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, holdtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, camerachangetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, camerahorcoef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, cameravercoef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, camerapower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, cameracont_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, audio3d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, shotpointanglemin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, shotpointlist_),
  };
  SkillConfigSkillCustomEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillConfigSkillCustomEvent_descriptor_,
      SkillConfigSkillCustomEvent::default_instance_,
      SkillConfigSkillCustomEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillCustomEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillConfigSkillCustomEvent));
  SkillConfigCameraChangeInfo_descriptor_ = file->message_type(5);
  static const int SkillConfigCameraChangeInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigCameraChangeInfo, camerachange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigCameraChangeInfo, camerachangestarttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigCameraChangeInfo, camerafieldview_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigCameraChangeInfo, camerachangeendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigCameraChangeInfo, camerarecovertime_),
  };
  SkillConfigCameraChangeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillConfigCameraChangeInfo_descriptor_,
      SkillConfigCameraChangeInfo::default_instance_,
      SkillConfigCameraChangeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigCameraChangeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigCameraChangeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillConfigCameraChangeInfo));
  SkillConfigSkillData_descriptor_ = file->message_type(6);
  static const int SkillConfigSkillData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillData, skillinfolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillData, handlefile_),
  };
  SkillConfigSkillData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillConfigSkillData_descriptor_,
      SkillConfigSkillData::default_instance_,
      SkillConfigSkillData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillConfigSkillData));
  SkillConfigSkillDamage_descriptor_ = file->message_type(7);
  static const int SkillConfigSkillDamage_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillDamage, damagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillDamage, basedamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillDamage, basedamagetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillDamage, decreasedamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillDamage, decreasemindamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillDamage, maxdamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillDamage, maxhitcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillDamage, focobasedamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillDamage, focomindamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillDamage, focofulldamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillDamage, focomaxdamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillDamage, focomaxhitcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillDamage, explosiondamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillDamage, explosionminidamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillDamage, bfix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillDamage, explosionradius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillDamage, collisiondamage_),
  };
  SkillConfigSkillDamage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillConfigSkillDamage_descriptor_,
      SkillConfigSkillDamage::default_instance_,
      SkillConfigSkillDamage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillDamage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigSkillDamage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillConfigSkillDamage));
  SkillConfigShotPoint_descriptor_ = file->message_type(8);
  static const int SkillConfigShotPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigShotPoint, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigShotPoint, localpos_),
  };
  SkillConfigShotPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillConfigShotPoint_descriptor_,
      SkillConfigShotPoint::default_instance_,
      SkillConfigShotPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigShotPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfigShotPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillConfigShotPoint));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SkillConfigCliRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillConfigRpcsyncNotify_descriptor_, &SkillConfigRpcsyncNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillConfigSkillPhase_descriptor_, &SkillConfigSkillPhase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillConfigSkillInfo_descriptor_, &SkillConfigSkillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillConfigSkillEventBase_descriptor_, &SkillConfigSkillEventBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillConfigSkillCustomEvent_descriptor_, &SkillConfigSkillCustomEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillConfigCameraChangeInfo_descriptor_, &SkillConfigCameraChangeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillConfigSkillData_descriptor_, &SkillConfigSkillData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillConfigSkillDamage_descriptor_, &SkillConfigSkillDamage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillConfigShotPoint_descriptor_, &SkillConfigShotPoint::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SkillConfigCliRpc_2eproto() {
  delete SkillConfigRpcsyncNotify::default_instance_;
  delete SkillConfigRpcsyncNotify_reflection_;
  delete SkillConfigSkillPhase::default_instance_;
  delete SkillConfigSkillPhase_reflection_;
  delete SkillConfigSkillInfo::default_instance_;
  delete SkillConfigSkillInfo_reflection_;
  delete SkillConfigSkillEventBase::default_instance_;
  delete SkillConfigSkillEventBase_reflection_;
  delete SkillConfigSkillCustomEvent::default_instance_;
  delete SkillConfigSkillCustomEvent_reflection_;
  delete SkillConfigCameraChangeInfo::default_instance_;
  delete SkillConfigCameraChangeInfo_reflection_;
  delete SkillConfigSkillData::default_instance_;
  delete SkillConfigSkillData_reflection_;
  delete SkillConfigSkillDamage::default_instance_;
  delete SkillConfigSkillDamage_reflection_;
  delete SkillConfigShotPoint::default_instance_;
  delete SkillConfigShotPoint_reflection_;
}

void protobuf_AddDesc_SkillConfigCliRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027SkillConfigCliRpc.proto\032\022PublicStruct."
    "proto\"\032\n\030SkillConfigRpcsyncNotify\"u\n\025Ski"
    "llConfigSkillPhase\022\031\n\016SkillPhaseType\030\001 \001"
    "(\021:\0010\022\026\n\nTimeLength\030\002 \001(\021:\002-1\022\023\n\013EventId"
    "List\030\t \003(\021\022\024\n\010LoopTime\030\014 \001(\021:\002-1\"\264\006\n\024Ski"
    "llConfigSkillInfo\022\016\n\002Id\030\010 \001(\021:\002-1\022\025\n\nHan"
    "dleType\030\004 \001(\021:\0010\022\025\n\tSkillTime\030\005 \001(\021:\002-1\022"
    "\027\n\010Unbroken\030\n \001(\010:\005false\022\024\n\010UseTimes\030\013 \001"
    "(\021:\002-1\022\024\n\tCrossType\030\022 \001(\021:\0010\022\025\n\nAimingAr"
    "ea\030, \001(\002:\0010\022\032\n\016AimingMaxCount\030- \001(\021:\002-1\022"
    "\031\n\016AreaHorizontal\030\037 \001(\002:\0010\022\027\n\014AreaVertic"
    "al\030\036 \001(\002:\0010\022\035\n\022JumpAreaHorizontal\030\035 \001(\002:"
    "\0010\022\033\n\020JumpAreaVertical\030\" \001(\002:\0010\022\035\n\022Veloc"
    "ityCorrection\030# \001(\002:\0010\022\025\n\nRecoveryCD\030$ \001"
    "(\021:\0010\022\023\n\010FocoTime\030\030 \001(\021:\0010\022\024\n\tShootTime\030"
    "\031 \001(\021:\0010\022\022\n\007SkillCD\030% \001(\002:\0010\022\027\n\014ShotInte"
    "rval\030& \001(\002:\0010\022\024\n\010CostType\030\' \001(\021:\002-1\022\024\n\tC"
    "ostValue\030( \001(\002:\0010\022\024\n\tCostStage\030\023 \001(\002:\0010\022"
    "\033\n\020BulletConfigCost\030\024 \001(\002:\0010\022\026\n\013CollectC"
    "ost\030\032 \001(\002:\0010\022\033\n\014IsLockCamera\030\026 \001(\010:\005fals"
    "e\022+\n\nDamageList\030+ \003(\0132\027.SkillConfigSkill"
    "Damage\0220\n\nCameraData\030\020 \001(\0132\034.SkillConfig"
    "CameraChangeInfo\022.\n\016SkillPhaseList\030\007 \003(\013"
    "2\026.SkillConfigSkillPhase\0225\n\017CustomEventL"
    "ist\030\021 \003(\0132\034.SkillConfigSkillCustomEvent\022"
    "\016\n\006IkFile\030  \001(\t\"m\n\031SkillConfigSkillEvent"
    "Base\022\016\n\002Id\030\005 \001(\021:\002-1\022\024\n\tEventType\030\002 \001(\021:"
    "\0010\022\021\n\005Start\030\003 \001(\021:\002-1\022\027\n\013EventLength\030\004 \001"
    "(\021:\002-1\"\346\005\n\033SkillConfigSkillCustomEvent\022-"
    "\n\tEventBase\030\021 \001(\0132\032.SkillConfigSkillEven"
    "tBase\022\031\n\016SkillPhaseType\030  \001(\021:\0010\022\020\n\010File"
    "Name\030\006 \001(\t\022\032\n\017ModelMountPoint\030\007 \001(\021:\0010\022\033"
    "\n\020WeaponMountPoint\030\010 \001(\021:\0010\022\033\n\020EffectMou"
    "ntPoint\030\014 \001(\021:\0010\022\023\n\004Loop\030\t \001(\010:\005false\022\035\n"
    "\016WholeAnimation\030\n \001(\010:\005false\022\022\n\007OffsetX\030"
    "\016 \001(\002:\0010\022\022\n\007OffsetY\030\017 \001(\002:\0010\022\022\n\007OffsetZ\030"
    "\020 \001(\002:\0010\022\016\n\002Id\030\022 \001(\021:\002-1\022\025\n\nCreateType\030\037"
    " \001(\021:\0010\022\025\n\nRemoveType\030\035 \001(\021:\0011\022\026\n\013Remove"
    "Phase\030\025 \001(\021:\0010\022\026\n\nRemoveTime\030\024 \001(\021:\002-1\022\032"
    "\n\014EffectFollow\030\" \001(\010:\004true\022\027\n\010UseMount\030!"
    " \001(\010:\005false\022\023\n\010HoldType\030\027 \001(\021:\0010\022\033\n\020Came"
    "raChangeType\030\034 \001(\021:\0010\022\033\n\rCameraHorcoef\030\030"
    " \001(\002:\0040.13\022\033\n\rCameraVercoef\030\031 \001(\002:\0040.13\022"
    "\030\n\013CameraPower\030\032 \001(\002:\0031.2\022\027\n\nCameraCont\030"
    "\033 \001(\002:\0030.1\022\026\n\007Audio3D\030& \001(\010:\005false\022\035\n\021Sh"
    "otPointAngleMin\030( \001(\021:\002-1\022,\n\rShotPointLi"
    "st\030\' \003(\0132\025.SkillConfigShotPoint\"\272\001\n\033Skil"
    "lConfigCameraChangeInfo\022\033\n\014CameraChange\030"
    "\005 \001(\010:\005false\022!\n\025CameraChangeStartTime\030\001 "
    "\001(\021:\002-1\022\033\n\017CameraFieldView\030\002 \001(\002:\002-1\022\037\n\023"
    "CameraChangeEndTime\030\003 \001(\021:\002-1\022\035\n\021CameraR"
    "ecoverTime\030\004 \001(\021:\002-1\"h\n\024SkillConfigSkill"
    "Data\022\016\n\002Id\030\002 \001(\021:\002-1\022,\n\rSkillInfoList\030\001 "
    "\003(\0132\025.SkillConfigSkillInfo\022\022\n\nHandleFile"
    "\030\003 \001(\t\"\327\003\n\026SkillConfigSkillDamage\022\025\n\nDam"
    "ageType\030\016 \001(\021:\0010\022\025\n\nBaseDamage\030\001 \001(\002:\0010\022"
    "\031\n\016BaseDamageTime\030\002 \001(\002:\0010\022\031\n\016DecreaseDa"
    "mage\030\005 \001(\002:\0010\022\034\n\021DecreaseMinDamage\030\003 \001(\002"
    ":\0010\022\024\n\tMaxDamage\030\004 \001(\002:\0010\022\026\n\013MaxHitCount"
    "\030\006 \001(\021:\0010\022\031\n\016FocoBaseDamage\030\017 \001(\002:\0010\022\030\n\r"
    "FocoMinDamage\030\007 \001(\002:\0010\022\031\n\016FocoFullDamage"
    "\030\010 \001(\002:\0010\022\030\n\rFocoMaxDamage\030\020 \001(\002:\0010\022\032\n\017F"
    "ocoMaxHitCount\030\021 \001(\021:\0010\022\032\n\017ExplosionDama"
    "ge\030\t \001(\002:\0010\022\036\n\023ExplosionMiniDamage\030\n \001(\002"
    ":\0010\022\023\n\004BFix\030\014 \001(\010:\005false\022\032\n\017ExplosionRad"
    "ius\030\013 \001(\002:\0010\022\032\n\017CollisionDamage\030\r \001(\002:\0010"
    "\"G\n\024SkillConfigShotPoint\022\021\n\005Angle\030\001 \001(\021:"
    "\002-1\022\034\n\010LocalPos\030\002 \001(\0132\n.Vector3PB", 2713);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SkillConfigCliRpc.proto", &protobuf_RegisterTypes);
  SkillConfigRpcsyncNotify::default_instance_ = new SkillConfigRpcsyncNotify();
  SkillConfigSkillPhase::default_instance_ = new SkillConfigSkillPhase();
  SkillConfigSkillInfo::default_instance_ = new SkillConfigSkillInfo();
  SkillConfigSkillEventBase::default_instance_ = new SkillConfigSkillEventBase();
  SkillConfigSkillCustomEvent::default_instance_ = new SkillConfigSkillCustomEvent();
  SkillConfigCameraChangeInfo::default_instance_ = new SkillConfigCameraChangeInfo();
  SkillConfigSkillData::default_instance_ = new SkillConfigSkillData();
  SkillConfigSkillDamage::default_instance_ = new SkillConfigSkillDamage();
  SkillConfigShotPoint::default_instance_ = new SkillConfigShotPoint();
  SkillConfigRpcsyncNotify::default_instance_->InitAsDefaultInstance();
  SkillConfigSkillPhase::default_instance_->InitAsDefaultInstance();
  SkillConfigSkillInfo::default_instance_->InitAsDefaultInstance();
  SkillConfigSkillEventBase::default_instance_->InitAsDefaultInstance();
  SkillConfigSkillCustomEvent::default_instance_->InitAsDefaultInstance();
  SkillConfigCameraChangeInfo::default_instance_->InitAsDefaultInstance();
  SkillConfigSkillData::default_instance_->InitAsDefaultInstance();
  SkillConfigSkillDamage::default_instance_->InitAsDefaultInstance();
  SkillConfigShotPoint::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SkillConfigCliRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SkillConfigCliRpc_2eproto {
  StaticDescriptorInitializer_SkillConfigCliRpc_2eproto() {
    protobuf_AddDesc_SkillConfigCliRpc_2eproto();
  }
} static_descriptor_initializer_SkillConfigCliRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SkillConfigRpcsyncNotify::SkillConfigRpcsyncNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillConfigRpcsyncNotify::InitAsDefaultInstance() {
}

SkillConfigRpcsyncNotify::SkillConfigRpcsyncNotify(const SkillConfigRpcsyncNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillConfigRpcsyncNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillConfigRpcsyncNotify::~SkillConfigRpcsyncNotify() {
  SharedDtor();
}

void SkillConfigRpcsyncNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillConfigRpcsyncNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillConfigRpcsyncNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillConfigRpcsyncNotify_descriptor_;
}

const SkillConfigRpcsyncNotify& SkillConfigRpcsyncNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillConfigCliRpc_2eproto();
  return *default_instance_;
}

SkillConfigRpcsyncNotify* SkillConfigRpcsyncNotify::default_instance_ = NULL;

SkillConfigRpcsyncNotify* SkillConfigRpcsyncNotify::New() const {
  return new SkillConfigRpcsyncNotify;
}

void SkillConfigRpcsyncNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillConfigRpcsyncNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SkillConfigRpcsyncNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillConfigRpcsyncNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillConfigRpcsyncNotify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillConfigRpcsyncNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillConfigRpcsyncNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillConfigRpcsyncNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillConfigRpcsyncNotify::MergeFrom(const SkillConfigRpcsyncNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillConfigRpcsyncNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillConfigRpcsyncNotify::CopyFrom(const SkillConfigRpcsyncNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillConfigRpcsyncNotify::IsInitialized() const {

  return true;
}

void SkillConfigRpcsyncNotify::Swap(SkillConfigRpcsyncNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillConfigRpcsyncNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillConfigRpcsyncNotify_descriptor_;
  metadata.reflection = SkillConfigRpcsyncNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillConfigSkillPhase::kSkillPhaseTypeFieldNumber;
const int SkillConfigSkillPhase::kTimeLengthFieldNumber;
const int SkillConfigSkillPhase::kEventIdListFieldNumber;
const int SkillConfigSkillPhase::kLoopTimeFieldNumber;
#endif  // !_MSC_VER

SkillConfigSkillPhase::SkillConfigSkillPhase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillConfigSkillPhase::InitAsDefaultInstance() {
}

SkillConfigSkillPhase::SkillConfigSkillPhase(const SkillConfigSkillPhase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillConfigSkillPhase::SharedCtor() {
  _cached_size_ = 0;
  skillphasetype_ = 0;
  timelength_ = -1;
  looptime_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillConfigSkillPhase::~SkillConfigSkillPhase() {
  SharedDtor();
}

void SkillConfigSkillPhase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillConfigSkillPhase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillConfigSkillPhase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillConfigSkillPhase_descriptor_;
}

const SkillConfigSkillPhase& SkillConfigSkillPhase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillConfigCliRpc_2eproto();
  return *default_instance_;
}

SkillConfigSkillPhase* SkillConfigSkillPhase::default_instance_ = NULL;

SkillConfigSkillPhase* SkillConfigSkillPhase::New() const {
  return new SkillConfigSkillPhase;
}

void SkillConfigSkillPhase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillphasetype_ = 0;
    timelength_ = -1;
    looptime_ = -1;
  }
  eventidlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillConfigSkillPhase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 SkillPhaseType = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &skillphasetype_)));
          set_has_skillphasetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TimeLength;
        break;
      }

      // optional sint32 TimeLength = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &timelength_)));
          set_has_timelength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_EventIdList;
        break;
      }

      // repeated sint32 EventIdList = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EventIdList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 72, input, this->mutable_eventidlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_eventidlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_EventIdList;
        if (input->ExpectTag(96)) goto parse_LoopTime;
        break;
      }

      // optional sint32 LoopTime = 12 [default = -1];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LoopTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &looptime_)));
          set_has_looptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillConfigSkillPhase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 SkillPhaseType = 1 [default = 0];
  if (has_skillphasetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->skillphasetype(), output);
  }

  // optional sint32 TimeLength = 2 [default = -1];
  if (has_timelength()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->timelength(), output);
  }

  // repeated sint32 EventIdList = 9;
  for (int i = 0; i < this->eventidlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      9, this->eventidlist(i), output);
  }

  // optional sint32 LoopTime = 12 [default = -1];
  if (has_looptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(12, this->looptime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillConfigSkillPhase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 SkillPhaseType = 1 [default = 0];
  if (has_skillphasetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->skillphasetype(), target);
  }

  // optional sint32 TimeLength = 2 [default = -1];
  if (has_timelength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->timelength(), target);
  }

  // repeated sint32 EventIdList = 9;
  for (int i = 0; i < this->eventidlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(9, this->eventidlist(i), target);
  }

  // optional sint32 LoopTime = 12 [default = -1];
  if (has_looptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(12, this->looptime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillConfigSkillPhase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 SkillPhaseType = 1 [default = 0];
    if (has_skillphasetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->skillphasetype());
    }

    // optional sint32 TimeLength = 2 [default = -1];
    if (has_timelength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->timelength());
    }

    // optional sint32 LoopTime = 12 [default = -1];
    if (has_looptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->looptime());
    }

  }
  // repeated sint32 EventIdList = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->eventidlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->eventidlist(i));
    }
    total_size += 1 * this->eventidlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillConfigSkillPhase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillConfigSkillPhase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillConfigSkillPhase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillConfigSkillPhase::MergeFrom(const SkillConfigSkillPhase& from) {
  GOOGLE_CHECK_NE(&from, this);
  eventidlist_.MergeFrom(from.eventidlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillphasetype()) {
      set_skillphasetype(from.skillphasetype());
    }
    if (from.has_timelength()) {
      set_timelength(from.timelength());
    }
    if (from.has_looptime()) {
      set_looptime(from.looptime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillConfigSkillPhase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillConfigSkillPhase::CopyFrom(const SkillConfigSkillPhase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillConfigSkillPhase::IsInitialized() const {

  return true;
}

void SkillConfigSkillPhase::Swap(SkillConfigSkillPhase* other) {
  if (other != this) {
    std::swap(skillphasetype_, other->skillphasetype_);
    std::swap(timelength_, other->timelength_);
    eventidlist_.Swap(&other->eventidlist_);
    std::swap(looptime_, other->looptime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillConfigSkillPhase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillConfigSkillPhase_descriptor_;
  metadata.reflection = SkillConfigSkillPhase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillConfigSkillInfo::kIdFieldNumber;
const int SkillConfigSkillInfo::kHandleTypeFieldNumber;
const int SkillConfigSkillInfo::kSkillTimeFieldNumber;
const int SkillConfigSkillInfo::kUnbrokenFieldNumber;
const int SkillConfigSkillInfo::kUseTimesFieldNumber;
const int SkillConfigSkillInfo::kCrossTypeFieldNumber;
const int SkillConfigSkillInfo::kAimingAreaFieldNumber;
const int SkillConfigSkillInfo::kAimingMaxCountFieldNumber;
const int SkillConfigSkillInfo::kAreaHorizontalFieldNumber;
const int SkillConfigSkillInfo::kAreaVerticalFieldNumber;
const int SkillConfigSkillInfo::kJumpAreaHorizontalFieldNumber;
const int SkillConfigSkillInfo::kJumpAreaVerticalFieldNumber;
const int SkillConfigSkillInfo::kVelocityCorrectionFieldNumber;
const int SkillConfigSkillInfo::kRecoveryCDFieldNumber;
const int SkillConfigSkillInfo::kFocoTimeFieldNumber;
const int SkillConfigSkillInfo::kShootTimeFieldNumber;
const int SkillConfigSkillInfo::kSkillCDFieldNumber;
const int SkillConfigSkillInfo::kShotIntervalFieldNumber;
const int SkillConfigSkillInfo::kCostTypeFieldNumber;
const int SkillConfigSkillInfo::kCostValueFieldNumber;
const int SkillConfigSkillInfo::kCostStageFieldNumber;
const int SkillConfigSkillInfo::kBulletConfigCostFieldNumber;
const int SkillConfigSkillInfo::kCollectCostFieldNumber;
const int SkillConfigSkillInfo::kIsLockCameraFieldNumber;
const int SkillConfigSkillInfo::kDamageListFieldNumber;
const int SkillConfigSkillInfo::kCameraDataFieldNumber;
const int SkillConfigSkillInfo::kSkillPhaseListFieldNumber;
const int SkillConfigSkillInfo::kCustomEventListFieldNumber;
const int SkillConfigSkillInfo::kIkFileFieldNumber;
#endif  // !_MSC_VER

SkillConfigSkillInfo::SkillConfigSkillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillConfigSkillInfo::InitAsDefaultInstance() {
  cameradata_ = const_cast< ::SkillConfigCameraChangeInfo*>(&::SkillConfigCameraChangeInfo::default_instance());
}

SkillConfigSkillInfo::SkillConfigSkillInfo(const SkillConfigSkillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillConfigSkillInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  handletype_ = 0;
  skilltime_ = -1;
  unbroken_ = false;
  usetimes_ = -1;
  crosstype_ = 0;
  aimingarea_ = 0;
  aimingmaxcount_ = -1;
  areahorizontal_ = 0;
  areavertical_ = 0;
  jumpareahorizontal_ = 0;
  jumpareavertical_ = 0;
  velocitycorrection_ = 0;
  recoverycd_ = 0;
  focotime_ = 0;
  shoottime_ = 0;
  skillcd_ = 0;
  shotinterval_ = 0;
  costtype_ = -1;
  costvalue_ = 0;
  coststage_ = 0;
  bulletconfigcost_ = 0;
  collectcost_ = 0;
  islockcamera_ = false;
  cameradata_ = NULL;
  ikfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillConfigSkillInfo::~SkillConfigSkillInfo() {
  SharedDtor();
}

void SkillConfigSkillInfo::SharedDtor() {
  if (ikfile_ != &::google::protobuf::internal::kEmptyString) {
    delete ikfile_;
  }
  if (this != default_instance_) {
    delete cameradata_;
  }
}

void SkillConfigSkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillConfigSkillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillConfigSkillInfo_descriptor_;
}

const SkillConfigSkillInfo& SkillConfigSkillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillConfigCliRpc_2eproto();
  return *default_instance_;
}

SkillConfigSkillInfo* SkillConfigSkillInfo::default_instance_ = NULL;

SkillConfigSkillInfo* SkillConfigSkillInfo::New() const {
  return new SkillConfigSkillInfo;
}

void SkillConfigSkillInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = -1;
    handletype_ = 0;
    skilltime_ = -1;
    unbroken_ = false;
    usetimes_ = -1;
    crosstype_ = 0;
    aimingarea_ = 0;
    aimingmaxcount_ = -1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    areahorizontal_ = 0;
    areavertical_ = 0;
    jumpareahorizontal_ = 0;
    jumpareavertical_ = 0;
    velocitycorrection_ = 0;
    recoverycd_ = 0;
    focotime_ = 0;
    shoottime_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    skillcd_ = 0;
    shotinterval_ = 0;
    costtype_ = -1;
    costvalue_ = 0;
    coststage_ = 0;
    bulletconfigcost_ = 0;
    collectcost_ = 0;
    islockcamera_ = false;
  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (has_cameradata()) {
      if (cameradata_ != NULL) cameradata_->::SkillConfigCameraChangeInfo::Clear();
    }
    if (has_ikfile()) {
      if (ikfile_ != &::google::protobuf::internal::kEmptyString) {
        ikfile_->clear();
      }
    }
  }
  damagelist_.Clear();
  skillphaselist_.Clear();
  customeventlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillConfigSkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 HandleType = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &handletype_)));
          set_has_handletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_SkillTime;
        break;
      }

      // optional sint32 SkillTime = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkillTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &skilltime_)));
          set_has_skilltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_SkillPhaseList;
        break;
      }

      // repeated .SkillConfigSkillPhase SkillPhaseList = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SkillPhaseList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skillphaselist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_SkillPhaseList;
        if (input->ExpectTag(64)) goto parse_Id;
        break;
      }

      // optional sint32 Id = 8 [default = -1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_Unbroken;
        break;
      }

      // optional bool Unbroken = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Unbroken:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unbroken_)));
          set_has_unbroken();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_UseTimes;
        break;
      }

      // optional sint32 UseTimes = 11 [default = -1];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UseTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &usetimes_)));
          set_has_usetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_CameraData;
        break;
      }

      // optional .SkillConfigCameraChangeInfo CameraData = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CameraData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cameradata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_CustomEventList;
        break;
      }

      // repeated .SkillConfigSkillCustomEvent CustomEventList = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CustomEventList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_customeventlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_CustomEventList;
        if (input->ExpectTag(144)) goto parse_CrossType;
        break;
      }

      // optional sint32 CrossType = 18 [default = 0];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CrossType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &crosstype_)));
          set_has_crosstype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_CostStage;
        break;
      }

      // optional float CostStage = 19 [default = 0];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_CostStage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &coststage_)));
          set_has_coststage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_BulletConfigCost;
        break;
      }

      // optional float BulletConfigCost = 20 [default = 0];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_BulletConfigCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bulletconfigcost_)));
          set_has_bulletconfigcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_IsLockCamera;
        break;
      }

      // optional bool IsLockCamera = 22 [default = false];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsLockCamera:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islockcamera_)));
          set_has_islockcamera();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_FocoTime;
        break;
      }

      // optional sint32 FocoTime = 24 [default = 0];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FocoTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &focotime_)));
          set_has_focotime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_ShootTime;
        break;
      }

      // optional sint32 ShootTime = 25 [default = 0];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShootTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &shoottime_)));
          set_has_shoottime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(213)) goto parse_CollectCost;
        break;
      }

      // optional float CollectCost = 26 [default = 0];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_CollectCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &collectcost_)));
          set_has_collectcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(237)) goto parse_JumpAreaHorizontal;
        break;
      }

      // optional float JumpAreaHorizontal = 29 [default = 0];
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_JumpAreaHorizontal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &jumpareahorizontal_)));
          set_has_jumpareahorizontal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(245)) goto parse_AreaVertical;
        break;
      }

      // optional float AreaVertical = 30 [default = 0];
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_AreaVertical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &areavertical_)));
          set_has_areavertical();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(253)) goto parse_AreaHorizontal;
        break;
      }

      // optional float AreaHorizontal = 31 [default = 0];
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_AreaHorizontal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &areahorizontal_)));
          set_has_areahorizontal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_IkFile;
        break;
      }

      // optional string IkFile = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IkFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ikfile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ikfile().data(), this->ikfile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(277)) goto parse_JumpAreaVertical;
        break;
      }

      // optional float JumpAreaVertical = 34 [default = 0];
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_JumpAreaVertical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &jumpareavertical_)));
          set_has_jumpareavertical();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(285)) goto parse_VelocityCorrection;
        break;
      }

      // optional float VelocityCorrection = 35 [default = 0];
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_VelocityCorrection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocitycorrection_)));
          set_has_velocitycorrection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_RecoveryCD;
        break;
      }

      // optional sint32 RecoveryCD = 36 [default = 0];
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RecoveryCD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &recoverycd_)));
          set_has_recoverycd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(301)) goto parse_SkillCD;
        break;
      }

      // optional float SkillCD = 37 [default = 0];
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_SkillCD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &skillcd_)));
          set_has_skillcd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(309)) goto parse_ShotInterval;
        break;
      }

      // optional float ShotInterval = 38 [default = 0];
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ShotInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shotinterval_)));
          set_has_shotinterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_CostType;
        break;
      }

      // optional sint32 CostType = 39 [default = -1];
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CostType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &costtype_)));
          set_has_costtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(325)) goto parse_CostValue;
        break;
      }

      // optional float CostValue = 40 [default = 0];
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_CostValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &costvalue_)));
          set_has_costvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_DamageList;
        break;
      }

      // repeated .SkillConfigSkillDamage DamageList = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DamageList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_damagelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_DamageList;
        if (input->ExpectTag(357)) goto parse_AimingArea;
        break;
      }

      // optional float AimingArea = 44 [default = 0];
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_AimingArea:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &aimingarea_)));
          set_has_aimingarea();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_AimingMaxCount;
        break;
      }

      // optional sint32 AimingMaxCount = 45 [default = -1];
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AimingMaxCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &aimingmaxcount_)));
          set_has_aimingmaxcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillConfigSkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 HandleType = 4 [default = 0];
  if (has_handletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->handletype(), output);
  }

  // optional sint32 SkillTime = 5 [default = -1];
  if (has_skilltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->skilltime(), output);
  }

  // repeated .SkillConfigSkillPhase SkillPhaseList = 7;
  for (int i = 0; i < this->skillphaselist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->skillphaselist(i), output);
  }

  // optional sint32 Id = 8 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->id(), output);
  }

  // optional bool Unbroken = 10 [default = false];
  if (has_unbroken()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->unbroken(), output);
  }

  // optional sint32 UseTimes = 11 [default = -1];
  if (has_usetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(11, this->usetimes(), output);
  }

  // optional .SkillConfigCameraChangeInfo CameraData = 16;
  if (has_cameradata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->cameradata(), output);
  }

  // repeated .SkillConfigSkillCustomEvent CustomEventList = 17;
  for (int i = 0; i < this->customeventlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->customeventlist(i), output);
  }

  // optional sint32 CrossType = 18 [default = 0];
  if (has_crosstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(18, this->crosstype(), output);
  }

  // optional float CostStage = 19 [default = 0];
  if (has_coststage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->coststage(), output);
  }

  // optional float BulletConfigCost = 20 [default = 0];
  if (has_bulletconfigcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->bulletconfigcost(), output);
  }

  // optional bool IsLockCamera = 22 [default = false];
  if (has_islockcamera()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->islockcamera(), output);
  }

  // optional sint32 FocoTime = 24 [default = 0];
  if (has_focotime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(24, this->focotime(), output);
  }

  // optional sint32 ShootTime = 25 [default = 0];
  if (has_shoottime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(25, this->shoottime(), output);
  }

  // optional float CollectCost = 26 [default = 0];
  if (has_collectcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->collectcost(), output);
  }

  // optional float JumpAreaHorizontal = 29 [default = 0];
  if (has_jumpareahorizontal()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->jumpareahorizontal(), output);
  }

  // optional float AreaVertical = 30 [default = 0];
  if (has_areavertical()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->areavertical(), output);
  }

  // optional float AreaHorizontal = 31 [default = 0];
  if (has_areahorizontal()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->areahorizontal(), output);
  }

  // optional string IkFile = 32;
  if (has_ikfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ikfile().data(), this->ikfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      32, this->ikfile(), output);
  }

  // optional float JumpAreaVertical = 34 [default = 0];
  if (has_jumpareavertical()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(34, this->jumpareavertical(), output);
  }

  // optional float VelocityCorrection = 35 [default = 0];
  if (has_velocitycorrection()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(35, this->velocitycorrection(), output);
  }

  // optional sint32 RecoveryCD = 36 [default = 0];
  if (has_recoverycd()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(36, this->recoverycd(), output);
  }

  // optional float SkillCD = 37 [default = 0];
  if (has_skillcd()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(37, this->skillcd(), output);
  }

  // optional float ShotInterval = 38 [default = 0];
  if (has_shotinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(38, this->shotinterval(), output);
  }

  // optional sint32 CostType = 39 [default = -1];
  if (has_costtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(39, this->costtype(), output);
  }

  // optional float CostValue = 40 [default = 0];
  if (has_costvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(40, this->costvalue(), output);
  }

  // repeated .SkillConfigSkillDamage DamageList = 43;
  for (int i = 0; i < this->damagelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, this->damagelist(i), output);
  }

  // optional float AimingArea = 44 [default = 0];
  if (has_aimingarea()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(44, this->aimingarea(), output);
  }

  // optional sint32 AimingMaxCount = 45 [default = -1];
  if (has_aimingmaxcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(45, this->aimingmaxcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillConfigSkillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 HandleType = 4 [default = 0];
  if (has_handletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->handletype(), target);
  }

  // optional sint32 SkillTime = 5 [default = -1];
  if (has_skilltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->skilltime(), target);
  }

  // repeated .SkillConfigSkillPhase SkillPhaseList = 7;
  for (int i = 0; i < this->skillphaselist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->skillphaselist(i), target);
  }

  // optional sint32 Id = 8 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->id(), target);
  }

  // optional bool Unbroken = 10 [default = false];
  if (has_unbroken()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->unbroken(), target);
  }

  // optional sint32 UseTimes = 11 [default = -1];
  if (has_usetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(11, this->usetimes(), target);
  }

  // optional .SkillConfigCameraChangeInfo CameraData = 16;
  if (has_cameradata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->cameradata(), target);
  }

  // repeated .SkillConfigSkillCustomEvent CustomEventList = 17;
  for (int i = 0; i < this->customeventlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->customeventlist(i), target);
  }

  // optional sint32 CrossType = 18 [default = 0];
  if (has_crosstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(18, this->crosstype(), target);
  }

  // optional float CostStage = 19 [default = 0];
  if (has_coststage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->coststage(), target);
  }

  // optional float BulletConfigCost = 20 [default = 0];
  if (has_bulletconfigcost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->bulletconfigcost(), target);
  }

  // optional bool IsLockCamera = 22 [default = false];
  if (has_islockcamera()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->islockcamera(), target);
  }

  // optional sint32 FocoTime = 24 [default = 0];
  if (has_focotime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(24, this->focotime(), target);
  }

  // optional sint32 ShootTime = 25 [default = 0];
  if (has_shoottime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(25, this->shoottime(), target);
  }

  // optional float CollectCost = 26 [default = 0];
  if (has_collectcost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->collectcost(), target);
  }

  // optional float JumpAreaHorizontal = 29 [default = 0];
  if (has_jumpareahorizontal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->jumpareahorizontal(), target);
  }

  // optional float AreaVertical = 30 [default = 0];
  if (has_areavertical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->areavertical(), target);
  }

  // optional float AreaHorizontal = 31 [default = 0];
  if (has_areahorizontal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->areahorizontal(), target);
  }

  // optional string IkFile = 32;
  if (has_ikfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ikfile().data(), this->ikfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->ikfile(), target);
  }

  // optional float JumpAreaVertical = 34 [default = 0];
  if (has_jumpareavertical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(34, this->jumpareavertical(), target);
  }

  // optional float VelocityCorrection = 35 [default = 0];
  if (has_velocitycorrection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(35, this->velocitycorrection(), target);
  }

  // optional sint32 RecoveryCD = 36 [default = 0];
  if (has_recoverycd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(36, this->recoverycd(), target);
  }

  // optional float SkillCD = 37 [default = 0];
  if (has_skillcd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(37, this->skillcd(), target);
  }

  // optional float ShotInterval = 38 [default = 0];
  if (has_shotinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(38, this->shotinterval(), target);
  }

  // optional sint32 CostType = 39 [default = -1];
  if (has_costtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(39, this->costtype(), target);
  }

  // optional float CostValue = 40 [default = 0];
  if (has_costvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(40, this->costvalue(), target);
  }

  // repeated .SkillConfigSkillDamage DamageList = 43;
  for (int i = 0; i < this->damagelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, this->damagelist(i), target);
  }

  // optional float AimingArea = 44 [default = 0];
  if (has_aimingarea()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(44, this->aimingarea(), target);
  }

  // optional sint32 AimingMaxCount = 45 [default = -1];
  if (has_aimingmaxcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(45, this->aimingmaxcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillConfigSkillInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Id = 8 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->id());
    }

    // optional sint32 HandleType = 4 [default = 0];
    if (has_handletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->handletype());
    }

    // optional sint32 SkillTime = 5 [default = -1];
    if (has_skilltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->skilltime());
    }

    // optional bool Unbroken = 10 [default = false];
    if (has_unbroken()) {
      total_size += 1 + 1;
    }

    // optional sint32 UseTimes = 11 [default = -1];
    if (has_usetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->usetimes());
    }

    // optional sint32 CrossType = 18 [default = 0];
    if (has_crosstype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->crosstype());
    }

    // optional float AimingArea = 44 [default = 0];
    if (has_aimingarea()) {
      total_size += 2 + 4;
    }

    // optional sint32 AimingMaxCount = 45 [default = -1];
    if (has_aimingmaxcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->aimingmaxcount());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float AreaHorizontal = 31 [default = 0];
    if (has_areahorizontal()) {
      total_size += 2 + 4;
    }

    // optional float AreaVertical = 30 [default = 0];
    if (has_areavertical()) {
      total_size += 2 + 4;
    }

    // optional float JumpAreaHorizontal = 29 [default = 0];
    if (has_jumpareahorizontal()) {
      total_size += 2 + 4;
    }

    // optional float JumpAreaVertical = 34 [default = 0];
    if (has_jumpareavertical()) {
      total_size += 2 + 4;
    }

    // optional float VelocityCorrection = 35 [default = 0];
    if (has_velocitycorrection()) {
      total_size += 2 + 4;
    }

    // optional sint32 RecoveryCD = 36 [default = 0];
    if (has_recoverycd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->recoverycd());
    }

    // optional sint32 FocoTime = 24 [default = 0];
    if (has_focotime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->focotime());
    }

    // optional sint32 ShootTime = 25 [default = 0];
    if (has_shoottime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->shoottime());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float SkillCD = 37 [default = 0];
    if (has_skillcd()) {
      total_size += 2 + 4;
    }

    // optional float ShotInterval = 38 [default = 0];
    if (has_shotinterval()) {
      total_size += 2 + 4;
    }

    // optional sint32 CostType = 39 [default = -1];
    if (has_costtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->costtype());
    }

    // optional float CostValue = 40 [default = 0];
    if (has_costvalue()) {
      total_size += 2 + 4;
    }

    // optional float CostStage = 19 [default = 0];
    if (has_coststage()) {
      total_size += 2 + 4;
    }

    // optional float BulletConfigCost = 20 [default = 0];
    if (has_bulletconfigcost()) {
      total_size += 2 + 4;
    }

    // optional float CollectCost = 26 [default = 0];
    if (has_collectcost()) {
      total_size += 2 + 4;
    }

    // optional bool IsLockCamera = 22 [default = false];
    if (has_islockcamera()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    // optional .SkillConfigCameraChangeInfo CameraData = 16;
    if (has_cameradata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cameradata());
    }

    // optional string IkFile = 32;
    if (has_ikfile()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ikfile());
    }

  }
  // repeated .SkillConfigSkillDamage DamageList = 43;
  total_size += 2 * this->damagelist_size();
  for (int i = 0; i < this->damagelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->damagelist(i));
  }

  // repeated .SkillConfigSkillPhase SkillPhaseList = 7;
  total_size += 1 * this->skillphaselist_size();
  for (int i = 0; i < this->skillphaselist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skillphaselist(i));
  }

  // repeated .SkillConfigSkillCustomEvent CustomEventList = 17;
  total_size += 2 * this->customeventlist_size();
  for (int i = 0; i < this->customeventlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->customeventlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillConfigSkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillConfigSkillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillConfigSkillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillConfigSkillInfo::MergeFrom(const SkillConfigSkillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  damagelist_.MergeFrom(from.damagelist_);
  skillphaselist_.MergeFrom(from.skillphaselist_);
  customeventlist_.MergeFrom(from.customeventlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_handletype()) {
      set_handletype(from.handletype());
    }
    if (from.has_skilltime()) {
      set_skilltime(from.skilltime());
    }
    if (from.has_unbroken()) {
      set_unbroken(from.unbroken());
    }
    if (from.has_usetimes()) {
      set_usetimes(from.usetimes());
    }
    if (from.has_crosstype()) {
      set_crosstype(from.crosstype());
    }
    if (from.has_aimingarea()) {
      set_aimingarea(from.aimingarea());
    }
    if (from.has_aimingmaxcount()) {
      set_aimingmaxcount(from.aimingmaxcount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_areahorizontal()) {
      set_areahorizontal(from.areahorizontal());
    }
    if (from.has_areavertical()) {
      set_areavertical(from.areavertical());
    }
    if (from.has_jumpareahorizontal()) {
      set_jumpareahorizontal(from.jumpareahorizontal());
    }
    if (from.has_jumpareavertical()) {
      set_jumpareavertical(from.jumpareavertical());
    }
    if (from.has_velocitycorrection()) {
      set_velocitycorrection(from.velocitycorrection());
    }
    if (from.has_recoverycd()) {
      set_recoverycd(from.recoverycd());
    }
    if (from.has_focotime()) {
      set_focotime(from.focotime());
    }
    if (from.has_shoottime()) {
      set_shoottime(from.shoottime());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_skillcd()) {
      set_skillcd(from.skillcd());
    }
    if (from.has_shotinterval()) {
      set_shotinterval(from.shotinterval());
    }
    if (from.has_costtype()) {
      set_costtype(from.costtype());
    }
    if (from.has_costvalue()) {
      set_costvalue(from.costvalue());
    }
    if (from.has_coststage()) {
      set_coststage(from.coststage());
    }
    if (from.has_bulletconfigcost()) {
      set_bulletconfigcost(from.bulletconfigcost());
    }
    if (from.has_collectcost()) {
      set_collectcost(from.collectcost());
    }
    if (from.has_islockcamera()) {
      set_islockcamera(from.islockcamera());
    }
  }
  if (from._has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (from.has_cameradata()) {
      mutable_cameradata()->::SkillConfigCameraChangeInfo::MergeFrom(from.cameradata());
    }
    if (from.has_ikfile()) {
      set_ikfile(from.ikfile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillConfigSkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillConfigSkillInfo::CopyFrom(const SkillConfigSkillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillConfigSkillInfo::IsInitialized() const {

  return true;
}

void SkillConfigSkillInfo::Swap(SkillConfigSkillInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(handletype_, other->handletype_);
    std::swap(skilltime_, other->skilltime_);
    std::swap(unbroken_, other->unbroken_);
    std::swap(usetimes_, other->usetimes_);
    std::swap(crosstype_, other->crosstype_);
    std::swap(aimingarea_, other->aimingarea_);
    std::swap(aimingmaxcount_, other->aimingmaxcount_);
    std::swap(areahorizontal_, other->areahorizontal_);
    std::swap(areavertical_, other->areavertical_);
    std::swap(jumpareahorizontal_, other->jumpareahorizontal_);
    std::swap(jumpareavertical_, other->jumpareavertical_);
    std::swap(velocitycorrection_, other->velocitycorrection_);
    std::swap(recoverycd_, other->recoverycd_);
    std::swap(focotime_, other->focotime_);
    std::swap(shoottime_, other->shoottime_);
    std::swap(skillcd_, other->skillcd_);
    std::swap(shotinterval_, other->shotinterval_);
    std::swap(costtype_, other->costtype_);
    std::swap(costvalue_, other->costvalue_);
    std::swap(coststage_, other->coststage_);
    std::swap(bulletconfigcost_, other->bulletconfigcost_);
    std::swap(collectcost_, other->collectcost_);
    std::swap(islockcamera_, other->islockcamera_);
    damagelist_.Swap(&other->damagelist_);
    std::swap(cameradata_, other->cameradata_);
    skillphaselist_.Swap(&other->skillphaselist_);
    customeventlist_.Swap(&other->customeventlist_);
    std::swap(ikfile_, other->ikfile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillConfigSkillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillConfigSkillInfo_descriptor_;
  metadata.reflection = SkillConfigSkillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillConfigSkillEventBase::kIdFieldNumber;
const int SkillConfigSkillEventBase::kEventTypeFieldNumber;
const int SkillConfigSkillEventBase::kStartFieldNumber;
const int SkillConfigSkillEventBase::kEventLengthFieldNumber;
#endif  // !_MSC_VER

SkillConfigSkillEventBase::SkillConfigSkillEventBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillConfigSkillEventBase::InitAsDefaultInstance() {
}

SkillConfigSkillEventBase::SkillConfigSkillEventBase(const SkillConfigSkillEventBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillConfigSkillEventBase::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  eventtype_ = 0;
  start_ = -1;
  eventlength_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillConfigSkillEventBase::~SkillConfigSkillEventBase() {
  SharedDtor();
}

void SkillConfigSkillEventBase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillConfigSkillEventBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillConfigSkillEventBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillConfigSkillEventBase_descriptor_;
}

const SkillConfigSkillEventBase& SkillConfigSkillEventBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillConfigCliRpc_2eproto();
  return *default_instance_;
}

SkillConfigSkillEventBase* SkillConfigSkillEventBase::default_instance_ = NULL;

SkillConfigSkillEventBase* SkillConfigSkillEventBase::New() const {
  return new SkillConfigSkillEventBase;
}

void SkillConfigSkillEventBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = -1;
    eventtype_ = 0;
    start_ = -1;
    eventlength_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillConfigSkillEventBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 EventType = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &eventtype_)));
          set_has_eventtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Start;
        break;
      }

      // optional sint32 Start = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_EventLength;
        break;
      }

      // optional sint32 EventLength = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EventLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &eventlength_)));
          set_has_eventlength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Id;
        break;
      }

      // optional sint32 Id = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillConfigSkillEventBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 EventType = 2 [default = 0];
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->eventtype(), output);
  }

  // optional sint32 Start = 3 [default = -1];
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->start(), output);
  }

  // optional sint32 EventLength = 4 [default = -1];
  if (has_eventlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->eventlength(), output);
  }

  // optional sint32 Id = 5 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillConfigSkillEventBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 EventType = 2 [default = 0];
  if (has_eventtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->eventtype(), target);
  }

  // optional sint32 Start = 3 [default = -1];
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->start(), target);
  }

  // optional sint32 EventLength = 4 [default = -1];
  if (has_eventlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->eventlength(), target);
  }

  // optional sint32 Id = 5 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillConfigSkillEventBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Id = 5 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->id());
    }

    // optional sint32 EventType = 2 [default = 0];
    if (has_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->eventtype());
    }

    // optional sint32 Start = 3 [default = -1];
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->start());
    }

    // optional sint32 EventLength = 4 [default = -1];
    if (has_eventlength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->eventlength());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillConfigSkillEventBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillConfigSkillEventBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillConfigSkillEventBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillConfigSkillEventBase::MergeFrom(const SkillConfigSkillEventBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_eventtype()) {
      set_eventtype(from.eventtype());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_eventlength()) {
      set_eventlength(from.eventlength());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillConfigSkillEventBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillConfigSkillEventBase::CopyFrom(const SkillConfigSkillEventBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillConfigSkillEventBase::IsInitialized() const {

  return true;
}

void SkillConfigSkillEventBase::Swap(SkillConfigSkillEventBase* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(eventtype_, other->eventtype_);
    std::swap(start_, other->start_);
    std::swap(eventlength_, other->eventlength_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillConfigSkillEventBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillConfigSkillEventBase_descriptor_;
  metadata.reflection = SkillConfigSkillEventBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillConfigSkillCustomEvent::kEventBaseFieldNumber;
const int SkillConfigSkillCustomEvent::kSkillPhaseTypeFieldNumber;
const int SkillConfigSkillCustomEvent::kFileNameFieldNumber;
const int SkillConfigSkillCustomEvent::kModelMountPointFieldNumber;
const int SkillConfigSkillCustomEvent::kWeaponMountPointFieldNumber;
const int SkillConfigSkillCustomEvent::kEffectMountPointFieldNumber;
const int SkillConfigSkillCustomEvent::kLoopFieldNumber;
const int SkillConfigSkillCustomEvent::kWholeAnimationFieldNumber;
const int SkillConfigSkillCustomEvent::kOffsetXFieldNumber;
const int SkillConfigSkillCustomEvent::kOffsetYFieldNumber;
const int SkillConfigSkillCustomEvent::kOffsetZFieldNumber;
const int SkillConfigSkillCustomEvent::kIdFieldNumber;
const int SkillConfigSkillCustomEvent::kCreateTypeFieldNumber;
const int SkillConfigSkillCustomEvent::kRemoveTypeFieldNumber;
const int SkillConfigSkillCustomEvent::kRemovePhaseFieldNumber;
const int SkillConfigSkillCustomEvent::kRemoveTimeFieldNumber;
const int SkillConfigSkillCustomEvent::kEffectFollowFieldNumber;
const int SkillConfigSkillCustomEvent::kUseMountFieldNumber;
const int SkillConfigSkillCustomEvent::kHoldTypeFieldNumber;
const int SkillConfigSkillCustomEvent::kCameraChangeTypeFieldNumber;
const int SkillConfigSkillCustomEvent::kCameraHorcoefFieldNumber;
const int SkillConfigSkillCustomEvent::kCameraVercoefFieldNumber;
const int SkillConfigSkillCustomEvent::kCameraPowerFieldNumber;
const int SkillConfigSkillCustomEvent::kCameraContFieldNumber;
const int SkillConfigSkillCustomEvent::kAudio3DFieldNumber;
const int SkillConfigSkillCustomEvent::kShotPointAngleMinFieldNumber;
const int SkillConfigSkillCustomEvent::kShotPointListFieldNumber;
#endif  // !_MSC_VER

SkillConfigSkillCustomEvent::SkillConfigSkillCustomEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillConfigSkillCustomEvent::InitAsDefaultInstance() {
  eventbase_ = const_cast< ::SkillConfigSkillEventBase*>(&::SkillConfigSkillEventBase::default_instance());
}

SkillConfigSkillCustomEvent::SkillConfigSkillCustomEvent(const SkillConfigSkillCustomEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillConfigSkillCustomEvent::SharedCtor() {
  _cached_size_ = 0;
  eventbase_ = NULL;
  skillphasetype_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  modelmountpoint_ = 0;
  weaponmountpoint_ = 0;
  effectmountpoint_ = 0;
  loop_ = false;
  wholeanimation_ = false;
  offsetx_ = 0;
  offsety_ = 0;
  offsetz_ = 0;
  id_ = -1;
  createtype_ = 0;
  removetype_ = 1;
  removephase_ = 0;
  removetime_ = -1;
  effectfollow_ = true;
  usemount_ = false;
  holdtype_ = 0;
  camerachangetype_ = 0;
  camerahorcoef_ = 0.13f;
  cameravercoef_ = 0.13f;
  camerapower_ = 1.2f;
  cameracont_ = 0.1f;
  audio3d_ = false;
  shotpointanglemin_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillConfigSkillCustomEvent::~SkillConfigSkillCustomEvent() {
  SharedDtor();
}

void SkillConfigSkillCustomEvent::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (this != default_instance_) {
    delete eventbase_;
  }
}

void SkillConfigSkillCustomEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillConfigSkillCustomEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillConfigSkillCustomEvent_descriptor_;
}

const SkillConfigSkillCustomEvent& SkillConfigSkillCustomEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillConfigCliRpc_2eproto();
  return *default_instance_;
}

SkillConfigSkillCustomEvent* SkillConfigSkillCustomEvent::default_instance_ = NULL;

SkillConfigSkillCustomEvent* SkillConfigSkillCustomEvent::New() const {
  return new SkillConfigSkillCustomEvent;
}

void SkillConfigSkillCustomEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_eventbase()) {
      if (eventbase_ != NULL) eventbase_->::SkillConfigSkillEventBase::Clear();
    }
    skillphasetype_ = 0;
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    modelmountpoint_ = 0;
    weaponmountpoint_ = 0;
    effectmountpoint_ = 0;
    loop_ = false;
    wholeanimation_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    offsetx_ = 0;
    offsety_ = 0;
    offsetz_ = 0;
    id_ = -1;
    createtype_ = 0;
    removetype_ = 1;
    removephase_ = 0;
    removetime_ = -1;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    effectfollow_ = true;
    usemount_ = false;
    holdtype_ = 0;
    camerachangetype_ = 0;
    camerahorcoef_ = 0.13f;
    cameravercoef_ = 0.13f;
    camerapower_ = 1.2f;
    cameracont_ = 0.1f;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    audio3d_ = false;
    shotpointanglemin_ = -1;
  }
  shotpointlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillConfigSkillCustomEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string FileName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ModelMountPoint;
        break;
      }

      // optional sint32 ModelMountPoint = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ModelMountPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &modelmountpoint_)));
          set_has_modelmountpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_WeaponMountPoint;
        break;
      }

      // optional sint32 WeaponMountPoint = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponMountPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &weaponmountpoint_)));
          set_has_weaponmountpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_Loop;
        break;
      }

      // optional bool Loop = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Loop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &loop_)));
          set_has_loop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_WholeAnimation;
        break;
      }

      // optional bool WholeAnimation = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WholeAnimation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wholeanimation_)));
          set_has_wholeanimation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_EffectMountPoint;
        break;
      }

      // optional sint32 EffectMountPoint = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EffectMountPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &effectmountpoint_)));
          set_has_effectmountpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_OffsetX;
        break;
      }

      // optional float OffsetX = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_OffsetX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offsetx_)));
          set_has_offsetx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_OffsetY;
        break;
      }

      // optional float OffsetY = 15 [default = 0];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_OffsetY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offsety_)));
          set_has_offsety();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_OffsetZ;
        break;
      }

      // optional float OffsetZ = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_OffsetZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offsetz_)));
          set_has_offsetz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_EventBase;
        break;
      }

      // optional .SkillConfigSkillEventBase EventBase = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EventBase:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eventbase()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_Id;
        break;
      }

      // optional sint32 Id = 18 [default = -1];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_RemoveTime;
        break;
      }

      // optional sint32 RemoveTime = 20 [default = -1];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RemoveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &removetime_)));
          set_has_removetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_RemovePhase;
        break;
      }

      // optional sint32 RemovePhase = 21 [default = 0];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RemovePhase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &removephase_)));
          set_has_removephase();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_HoldType;
        break;
      }

      // optional sint32 HoldType = 23 [default = 0];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HoldType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &holdtype_)));
          set_has_holdtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(197)) goto parse_CameraHorcoef;
        break;
      }

      // optional float CameraHorcoef = 24 [default = 0.13];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_CameraHorcoef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &camerahorcoef_)));
          set_has_camerahorcoef();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(205)) goto parse_CameraVercoef;
        break;
      }

      // optional float CameraVercoef = 25 [default = 0.13];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_CameraVercoef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cameravercoef_)));
          set_has_cameravercoef();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(213)) goto parse_CameraPower;
        break;
      }

      // optional float CameraPower = 26 [default = 1.2];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_CameraPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &camerapower_)));
          set_has_camerapower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(221)) goto parse_CameraCont;
        break;
      }

      // optional float CameraCont = 27 [default = 0.1];
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_CameraCont:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cameracont_)));
          set_has_cameracont();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_CameraChangeType;
        break;
      }

      // optional sint32 CameraChangeType = 28 [default = 0];
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CameraChangeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &camerachangetype_)));
          set_has_camerachangetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_RemoveType;
        break;
      }

      // optional sint32 RemoveType = 29 [default = 1];
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RemoveType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &removetype_)));
          set_has_removetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_CreateType;
        break;
      }

      // optional sint32 CreateType = 31 [default = 0];
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &createtype_)));
          set_has_createtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_SkillPhaseType;
        break;
      }

      // optional sint32 SkillPhaseType = 32 [default = 0];
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkillPhaseType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &skillphasetype_)));
          set_has_skillphasetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_UseMount;
        break;
      }

      // optional bool UseMount = 33 [default = false];
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UseMount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usemount_)));
          set_has_usemount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_EffectFollow;
        break;
      }

      // optional bool EffectFollow = 34 [default = true];
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EffectFollow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &effectfollow_)));
          set_has_effectfollow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_Audio3D;
        break;
      }

      // optional bool Audio3D = 38 [default = false];
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Audio3D:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &audio3d_)));
          set_has_audio3d();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_ShotPointList;
        break;
      }

      // repeated .SkillConfigShotPoint ShotPointList = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ShotPointList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shotpointlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_ShotPointList;
        if (input->ExpectTag(320)) goto parse_ShotPointAngleMin;
        break;
      }

      // optional sint32 ShotPointAngleMin = 40 [default = -1];
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShotPointAngleMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &shotpointanglemin_)));
          set_has_shotpointanglemin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillConfigSkillCustomEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string FileName = 6;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->filename(), output);
  }

  // optional sint32 ModelMountPoint = 7 [default = 0];
  if (has_modelmountpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->modelmountpoint(), output);
  }

  // optional sint32 WeaponMountPoint = 8 [default = 0];
  if (has_weaponmountpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->weaponmountpoint(), output);
  }

  // optional bool Loop = 9 [default = false];
  if (has_loop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->loop(), output);
  }

  // optional bool WholeAnimation = 10 [default = false];
  if (has_wholeanimation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->wholeanimation(), output);
  }

  // optional sint32 EffectMountPoint = 12 [default = 0];
  if (has_effectmountpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(12, this->effectmountpoint(), output);
  }

  // optional float OffsetX = 14 [default = 0];
  if (has_offsetx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->offsetx(), output);
  }

  // optional float OffsetY = 15 [default = 0];
  if (has_offsety()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->offsety(), output);
  }

  // optional float OffsetZ = 16 [default = 0];
  if (has_offsetz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->offsetz(), output);
  }

  // optional .SkillConfigSkillEventBase EventBase = 17;
  if (has_eventbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->eventbase(), output);
  }

  // optional sint32 Id = 18 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(18, this->id(), output);
  }

  // optional sint32 RemoveTime = 20 [default = -1];
  if (has_removetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(20, this->removetime(), output);
  }

  // optional sint32 RemovePhase = 21 [default = 0];
  if (has_removephase()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(21, this->removephase(), output);
  }

  // optional sint32 HoldType = 23 [default = 0];
  if (has_holdtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(23, this->holdtype(), output);
  }

  // optional float CameraHorcoef = 24 [default = 0.13];
  if (has_camerahorcoef()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->camerahorcoef(), output);
  }

  // optional float CameraVercoef = 25 [default = 0.13];
  if (has_cameravercoef()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->cameravercoef(), output);
  }

  // optional float CameraPower = 26 [default = 1.2];
  if (has_camerapower()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->camerapower(), output);
  }

  // optional float CameraCont = 27 [default = 0.1];
  if (has_cameracont()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->cameracont(), output);
  }

  // optional sint32 CameraChangeType = 28 [default = 0];
  if (has_camerachangetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(28, this->camerachangetype(), output);
  }

  // optional sint32 RemoveType = 29 [default = 1];
  if (has_removetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(29, this->removetype(), output);
  }

  // optional sint32 CreateType = 31 [default = 0];
  if (has_createtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(31, this->createtype(), output);
  }

  // optional sint32 SkillPhaseType = 32 [default = 0];
  if (has_skillphasetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(32, this->skillphasetype(), output);
  }

  // optional bool UseMount = 33 [default = false];
  if (has_usemount()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->usemount(), output);
  }

  // optional bool EffectFollow = 34 [default = true];
  if (has_effectfollow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->effectfollow(), output);
  }

  // optional bool Audio3D = 38 [default = false];
  if (has_audio3d()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(38, this->audio3d(), output);
  }

  // repeated .SkillConfigShotPoint ShotPointList = 39;
  for (int i = 0; i < this->shotpointlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->shotpointlist(i), output);
  }

  // optional sint32 ShotPointAngleMin = 40 [default = -1];
  if (has_shotpointanglemin()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(40, this->shotpointanglemin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillConfigSkillCustomEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string FileName = 6;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->filename(), target);
  }

  // optional sint32 ModelMountPoint = 7 [default = 0];
  if (has_modelmountpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->modelmountpoint(), target);
  }

  // optional sint32 WeaponMountPoint = 8 [default = 0];
  if (has_weaponmountpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->weaponmountpoint(), target);
  }

  // optional bool Loop = 9 [default = false];
  if (has_loop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->loop(), target);
  }

  // optional bool WholeAnimation = 10 [default = false];
  if (has_wholeanimation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->wholeanimation(), target);
  }

  // optional sint32 EffectMountPoint = 12 [default = 0];
  if (has_effectmountpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(12, this->effectmountpoint(), target);
  }

  // optional float OffsetX = 14 [default = 0];
  if (has_offsetx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->offsetx(), target);
  }

  // optional float OffsetY = 15 [default = 0];
  if (has_offsety()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->offsety(), target);
  }

  // optional float OffsetZ = 16 [default = 0];
  if (has_offsetz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->offsetz(), target);
  }

  // optional .SkillConfigSkillEventBase EventBase = 17;
  if (has_eventbase()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->eventbase(), target);
  }

  // optional sint32 Id = 18 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(18, this->id(), target);
  }

  // optional sint32 RemoveTime = 20 [default = -1];
  if (has_removetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(20, this->removetime(), target);
  }

  // optional sint32 RemovePhase = 21 [default = 0];
  if (has_removephase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(21, this->removephase(), target);
  }

  // optional sint32 HoldType = 23 [default = 0];
  if (has_holdtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(23, this->holdtype(), target);
  }

  // optional float CameraHorcoef = 24 [default = 0.13];
  if (has_camerahorcoef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->camerahorcoef(), target);
  }

  // optional float CameraVercoef = 25 [default = 0.13];
  if (has_cameravercoef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->cameravercoef(), target);
  }

  // optional float CameraPower = 26 [default = 1.2];
  if (has_camerapower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->camerapower(), target);
  }

  // optional float CameraCont = 27 [default = 0.1];
  if (has_cameracont()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->cameracont(), target);
  }

  // optional sint32 CameraChangeType = 28 [default = 0];
  if (has_camerachangetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(28, this->camerachangetype(), target);
  }

  // optional sint32 RemoveType = 29 [default = 1];
  if (has_removetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(29, this->removetype(), target);
  }

  // optional sint32 CreateType = 31 [default = 0];
  if (has_createtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(31, this->createtype(), target);
  }

  // optional sint32 SkillPhaseType = 32 [default = 0];
  if (has_skillphasetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(32, this->skillphasetype(), target);
  }

  // optional bool UseMount = 33 [default = false];
  if (has_usemount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->usemount(), target);
  }

  // optional bool EffectFollow = 34 [default = true];
  if (has_effectfollow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(34, this->effectfollow(), target);
  }

  // optional bool Audio3D = 38 [default = false];
  if (has_audio3d()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(38, this->audio3d(), target);
  }

  // repeated .SkillConfigShotPoint ShotPointList = 39;
  for (int i = 0; i < this->shotpointlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->shotpointlist(i), target);
  }

  // optional sint32 ShotPointAngleMin = 40 [default = -1];
  if (has_shotpointanglemin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(40, this->shotpointanglemin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillConfigSkillCustomEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SkillConfigSkillEventBase EventBase = 17;
    if (has_eventbase()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eventbase());
    }

    // optional sint32 SkillPhaseType = 32 [default = 0];
    if (has_skillphasetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->skillphasetype());
    }

    // optional string FileName = 6;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional sint32 ModelMountPoint = 7 [default = 0];
    if (has_modelmountpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->modelmountpoint());
    }

    // optional sint32 WeaponMountPoint = 8 [default = 0];
    if (has_weaponmountpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->weaponmountpoint());
    }

    // optional sint32 EffectMountPoint = 12 [default = 0];
    if (has_effectmountpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->effectmountpoint());
    }

    // optional bool Loop = 9 [default = false];
    if (has_loop()) {
      total_size += 1 + 1;
    }

    // optional bool WholeAnimation = 10 [default = false];
    if (has_wholeanimation()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float OffsetX = 14 [default = 0];
    if (has_offsetx()) {
      total_size += 1 + 4;
    }

    // optional float OffsetY = 15 [default = 0];
    if (has_offsety()) {
      total_size += 1 + 4;
    }

    // optional float OffsetZ = 16 [default = 0];
    if (has_offsetz()) {
      total_size += 2 + 4;
    }

    // optional sint32 Id = 18 [default = -1];
    if (has_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->id());
    }

    // optional sint32 CreateType = 31 [default = 0];
    if (has_createtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->createtype());
    }

    // optional sint32 RemoveType = 29 [default = 1];
    if (has_removetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->removetype());
    }

    // optional sint32 RemovePhase = 21 [default = 0];
    if (has_removephase()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->removephase());
    }

    // optional sint32 RemoveTime = 20 [default = -1];
    if (has_removetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->removetime());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool EffectFollow = 34 [default = true];
    if (has_effectfollow()) {
      total_size += 2 + 1;
    }

    // optional bool UseMount = 33 [default = false];
    if (has_usemount()) {
      total_size += 2 + 1;
    }

    // optional sint32 HoldType = 23 [default = 0];
    if (has_holdtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->holdtype());
    }

    // optional sint32 CameraChangeType = 28 [default = 0];
    if (has_camerachangetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->camerachangetype());
    }

    // optional float CameraHorcoef = 24 [default = 0.13];
    if (has_camerahorcoef()) {
      total_size += 2 + 4;
    }

    // optional float CameraVercoef = 25 [default = 0.13];
    if (has_cameravercoef()) {
      total_size += 2 + 4;
    }

    // optional float CameraPower = 26 [default = 1.2];
    if (has_camerapower()) {
      total_size += 2 + 4;
    }

    // optional float CameraCont = 27 [default = 0.1];
    if (has_cameracont()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool Audio3D = 38 [default = false];
    if (has_audio3d()) {
      total_size += 2 + 1;
    }

    // optional sint32 ShotPointAngleMin = 40 [default = -1];
    if (has_shotpointanglemin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->shotpointanglemin());
    }

  }
  // repeated .SkillConfigShotPoint ShotPointList = 39;
  total_size += 2 * this->shotpointlist_size();
  for (int i = 0; i < this->shotpointlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shotpointlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillConfigSkillCustomEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillConfigSkillCustomEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillConfigSkillCustomEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillConfigSkillCustomEvent::MergeFrom(const SkillConfigSkillCustomEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  shotpointlist_.MergeFrom(from.shotpointlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventbase()) {
      mutable_eventbase()->::SkillConfigSkillEventBase::MergeFrom(from.eventbase());
    }
    if (from.has_skillphasetype()) {
      set_skillphasetype(from.skillphasetype());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_modelmountpoint()) {
      set_modelmountpoint(from.modelmountpoint());
    }
    if (from.has_weaponmountpoint()) {
      set_weaponmountpoint(from.weaponmountpoint());
    }
    if (from.has_effectmountpoint()) {
      set_effectmountpoint(from.effectmountpoint());
    }
    if (from.has_loop()) {
      set_loop(from.loop());
    }
    if (from.has_wholeanimation()) {
      set_wholeanimation(from.wholeanimation());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_offsetx()) {
      set_offsetx(from.offsetx());
    }
    if (from.has_offsety()) {
      set_offsety(from.offsety());
    }
    if (from.has_offsetz()) {
      set_offsetz(from.offsetz());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_createtype()) {
      set_createtype(from.createtype());
    }
    if (from.has_removetype()) {
      set_removetype(from.removetype());
    }
    if (from.has_removephase()) {
      set_removephase(from.removephase());
    }
    if (from.has_removetime()) {
      set_removetime(from.removetime());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_effectfollow()) {
      set_effectfollow(from.effectfollow());
    }
    if (from.has_usemount()) {
      set_usemount(from.usemount());
    }
    if (from.has_holdtype()) {
      set_holdtype(from.holdtype());
    }
    if (from.has_camerachangetype()) {
      set_camerachangetype(from.camerachangetype());
    }
    if (from.has_camerahorcoef()) {
      set_camerahorcoef(from.camerahorcoef());
    }
    if (from.has_cameravercoef()) {
      set_cameravercoef(from.cameravercoef());
    }
    if (from.has_camerapower()) {
      set_camerapower(from.camerapower());
    }
    if (from.has_cameracont()) {
      set_cameracont(from.cameracont());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_audio3d()) {
      set_audio3d(from.audio3d());
    }
    if (from.has_shotpointanglemin()) {
      set_shotpointanglemin(from.shotpointanglemin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillConfigSkillCustomEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillConfigSkillCustomEvent::CopyFrom(const SkillConfigSkillCustomEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillConfigSkillCustomEvent::IsInitialized() const {

  return true;
}

void SkillConfigSkillCustomEvent::Swap(SkillConfigSkillCustomEvent* other) {
  if (other != this) {
    std::swap(eventbase_, other->eventbase_);
    std::swap(skillphasetype_, other->skillphasetype_);
    std::swap(filename_, other->filename_);
    std::swap(modelmountpoint_, other->modelmountpoint_);
    std::swap(weaponmountpoint_, other->weaponmountpoint_);
    std::swap(effectmountpoint_, other->effectmountpoint_);
    std::swap(loop_, other->loop_);
    std::swap(wholeanimation_, other->wholeanimation_);
    std::swap(offsetx_, other->offsetx_);
    std::swap(offsety_, other->offsety_);
    std::swap(offsetz_, other->offsetz_);
    std::swap(id_, other->id_);
    std::swap(createtype_, other->createtype_);
    std::swap(removetype_, other->removetype_);
    std::swap(removephase_, other->removephase_);
    std::swap(removetime_, other->removetime_);
    std::swap(effectfollow_, other->effectfollow_);
    std::swap(usemount_, other->usemount_);
    std::swap(holdtype_, other->holdtype_);
    std::swap(camerachangetype_, other->camerachangetype_);
    std::swap(camerahorcoef_, other->camerahorcoef_);
    std::swap(cameravercoef_, other->cameravercoef_);
    std::swap(camerapower_, other->camerapower_);
    std::swap(cameracont_, other->cameracont_);
    std::swap(audio3d_, other->audio3d_);
    std::swap(shotpointanglemin_, other->shotpointanglemin_);
    shotpointlist_.Swap(&other->shotpointlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillConfigSkillCustomEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillConfigSkillCustomEvent_descriptor_;
  metadata.reflection = SkillConfigSkillCustomEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillConfigCameraChangeInfo::kCameraChangeFieldNumber;
const int SkillConfigCameraChangeInfo::kCameraChangeStartTimeFieldNumber;
const int SkillConfigCameraChangeInfo::kCameraFieldViewFieldNumber;
const int SkillConfigCameraChangeInfo::kCameraChangeEndTimeFieldNumber;
const int SkillConfigCameraChangeInfo::kCameraRecoverTimeFieldNumber;
#endif  // !_MSC_VER

SkillConfigCameraChangeInfo::SkillConfigCameraChangeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillConfigCameraChangeInfo::InitAsDefaultInstance() {
}

SkillConfigCameraChangeInfo::SkillConfigCameraChangeInfo(const SkillConfigCameraChangeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillConfigCameraChangeInfo::SharedCtor() {
  _cached_size_ = 0;
  camerachange_ = false;
  camerachangestarttime_ = -1;
  camerafieldview_ = -1;
  camerachangeendtime_ = -1;
  camerarecovertime_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillConfigCameraChangeInfo::~SkillConfigCameraChangeInfo() {
  SharedDtor();
}

void SkillConfigCameraChangeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillConfigCameraChangeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillConfigCameraChangeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillConfigCameraChangeInfo_descriptor_;
}

const SkillConfigCameraChangeInfo& SkillConfigCameraChangeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillConfigCliRpc_2eproto();
  return *default_instance_;
}

SkillConfigCameraChangeInfo* SkillConfigCameraChangeInfo::default_instance_ = NULL;

SkillConfigCameraChangeInfo* SkillConfigCameraChangeInfo::New() const {
  return new SkillConfigCameraChangeInfo;
}

void SkillConfigCameraChangeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    camerachange_ = false;
    camerachangestarttime_ = -1;
    camerafieldview_ = -1;
    camerachangeendtime_ = -1;
    camerarecovertime_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillConfigCameraChangeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 CameraChangeStartTime = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &camerachangestarttime_)));
          set_has_camerachangestarttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_CameraFieldView;
        break;
      }

      // optional float CameraFieldView = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_CameraFieldView:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &camerafieldview_)));
          set_has_camerafieldview();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_CameraChangeEndTime;
        break;
      }

      // optional sint32 CameraChangeEndTime = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CameraChangeEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &camerachangeendtime_)));
          set_has_camerachangeendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_CameraRecoverTime;
        break;
      }

      // optional sint32 CameraRecoverTime = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CameraRecoverTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &camerarecovertime_)));
          set_has_camerarecovertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_CameraChange;
        break;
      }

      // optional bool CameraChange = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CameraChange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &camerachange_)));
          set_has_camerachange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillConfigCameraChangeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 CameraChangeStartTime = 1 [default = -1];
  if (has_camerachangestarttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->camerachangestarttime(), output);
  }

  // optional float CameraFieldView = 2 [default = -1];
  if (has_camerafieldview()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->camerafieldview(), output);
  }

  // optional sint32 CameraChangeEndTime = 3 [default = -1];
  if (has_camerachangeendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->camerachangeendtime(), output);
  }

  // optional sint32 CameraRecoverTime = 4 [default = -1];
  if (has_camerarecovertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->camerarecovertime(), output);
  }

  // optional bool CameraChange = 5 [default = false];
  if (has_camerachange()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->camerachange(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillConfigCameraChangeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 CameraChangeStartTime = 1 [default = -1];
  if (has_camerachangestarttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->camerachangestarttime(), target);
  }

  // optional float CameraFieldView = 2 [default = -1];
  if (has_camerafieldview()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->camerafieldview(), target);
  }

  // optional sint32 CameraChangeEndTime = 3 [default = -1];
  if (has_camerachangeendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->camerachangeendtime(), target);
  }

  // optional sint32 CameraRecoverTime = 4 [default = -1];
  if (has_camerarecovertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->camerarecovertime(), target);
  }

  // optional bool CameraChange = 5 [default = false];
  if (has_camerachange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->camerachange(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillConfigCameraChangeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool CameraChange = 5 [default = false];
    if (has_camerachange()) {
      total_size += 1 + 1;
    }

    // optional sint32 CameraChangeStartTime = 1 [default = -1];
    if (has_camerachangestarttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->camerachangestarttime());
    }

    // optional float CameraFieldView = 2 [default = -1];
    if (has_camerafieldview()) {
      total_size += 1 + 4;
    }

    // optional sint32 CameraChangeEndTime = 3 [default = -1];
    if (has_camerachangeendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->camerachangeendtime());
    }

    // optional sint32 CameraRecoverTime = 4 [default = -1];
    if (has_camerarecovertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->camerarecovertime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillConfigCameraChangeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillConfigCameraChangeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillConfigCameraChangeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillConfigCameraChangeInfo::MergeFrom(const SkillConfigCameraChangeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_camerachange()) {
      set_camerachange(from.camerachange());
    }
    if (from.has_camerachangestarttime()) {
      set_camerachangestarttime(from.camerachangestarttime());
    }
    if (from.has_camerafieldview()) {
      set_camerafieldview(from.camerafieldview());
    }
    if (from.has_camerachangeendtime()) {
      set_camerachangeendtime(from.camerachangeendtime());
    }
    if (from.has_camerarecovertime()) {
      set_camerarecovertime(from.camerarecovertime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillConfigCameraChangeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillConfigCameraChangeInfo::CopyFrom(const SkillConfigCameraChangeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillConfigCameraChangeInfo::IsInitialized() const {

  return true;
}

void SkillConfigCameraChangeInfo::Swap(SkillConfigCameraChangeInfo* other) {
  if (other != this) {
    std::swap(camerachange_, other->camerachange_);
    std::swap(camerachangestarttime_, other->camerachangestarttime_);
    std::swap(camerafieldview_, other->camerafieldview_);
    std::swap(camerachangeendtime_, other->camerachangeendtime_);
    std::swap(camerarecovertime_, other->camerarecovertime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillConfigCameraChangeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillConfigCameraChangeInfo_descriptor_;
  metadata.reflection = SkillConfigCameraChangeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillConfigSkillData::kIdFieldNumber;
const int SkillConfigSkillData::kSkillInfoListFieldNumber;
const int SkillConfigSkillData::kHandleFileFieldNumber;
#endif  // !_MSC_VER

SkillConfigSkillData::SkillConfigSkillData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillConfigSkillData::InitAsDefaultInstance() {
}

SkillConfigSkillData::SkillConfigSkillData(const SkillConfigSkillData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillConfigSkillData::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  handlefile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillConfigSkillData::~SkillConfigSkillData() {
  SharedDtor();
}

void SkillConfigSkillData::SharedDtor() {
  if (handlefile_ != &::google::protobuf::internal::kEmptyString) {
    delete handlefile_;
  }
  if (this != default_instance_) {
  }
}

void SkillConfigSkillData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillConfigSkillData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillConfigSkillData_descriptor_;
}

const SkillConfigSkillData& SkillConfigSkillData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillConfigCliRpc_2eproto();
  return *default_instance_;
}

SkillConfigSkillData* SkillConfigSkillData::default_instance_ = NULL;

SkillConfigSkillData* SkillConfigSkillData::New() const {
  return new SkillConfigSkillData;
}

void SkillConfigSkillData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = -1;
    if (has_handlefile()) {
      if (handlefile_ != &::google::protobuf::internal::kEmptyString) {
        handlefile_->clear();
      }
    }
  }
  skillinfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillConfigSkillData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SkillConfigSkillInfo SkillInfoList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SkillInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skillinfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_SkillInfoList;
        if (input->ExpectTag(16)) goto parse_Id;
        break;
      }

      // optional sint32 Id = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_HandleFile;
        break;
      }

      // optional string HandleFile = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HandleFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_handlefile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->handlefile().data(), this->handlefile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillConfigSkillData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SkillConfigSkillInfo SkillInfoList = 1;
  for (int i = 0; i < this->skillinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skillinfolist(i), output);
  }

  // optional sint32 Id = 2 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->id(), output);
  }

  // optional string HandleFile = 3;
  if (has_handlefile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->handlefile().data(), this->handlefile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->handlefile(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillConfigSkillData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SkillConfigSkillInfo SkillInfoList = 1;
  for (int i = 0; i < this->skillinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skillinfolist(i), target);
  }

  // optional sint32 Id = 2 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->id(), target);
  }

  // optional string HandleFile = 3;
  if (has_handlefile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->handlefile().data(), this->handlefile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->handlefile(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillConfigSkillData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Id = 2 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->id());
    }

    // optional string HandleFile = 3;
    if (has_handlefile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->handlefile());
    }

  }
  // repeated .SkillConfigSkillInfo SkillInfoList = 1;
  total_size += 1 * this->skillinfolist_size();
  for (int i = 0; i < this->skillinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skillinfolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillConfigSkillData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillConfigSkillData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillConfigSkillData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillConfigSkillData::MergeFrom(const SkillConfigSkillData& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillinfolist_.MergeFrom(from.skillinfolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_handlefile()) {
      set_handlefile(from.handlefile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillConfigSkillData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillConfigSkillData::CopyFrom(const SkillConfigSkillData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillConfigSkillData::IsInitialized() const {

  return true;
}

void SkillConfigSkillData::Swap(SkillConfigSkillData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    skillinfolist_.Swap(&other->skillinfolist_);
    std::swap(handlefile_, other->handlefile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillConfigSkillData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillConfigSkillData_descriptor_;
  metadata.reflection = SkillConfigSkillData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillConfigSkillDamage::kDamageTypeFieldNumber;
const int SkillConfigSkillDamage::kBaseDamageFieldNumber;
const int SkillConfigSkillDamage::kBaseDamageTimeFieldNumber;
const int SkillConfigSkillDamage::kDecreaseDamageFieldNumber;
const int SkillConfigSkillDamage::kDecreaseMinDamageFieldNumber;
const int SkillConfigSkillDamage::kMaxDamageFieldNumber;
const int SkillConfigSkillDamage::kMaxHitCountFieldNumber;
const int SkillConfigSkillDamage::kFocoBaseDamageFieldNumber;
const int SkillConfigSkillDamage::kFocoMinDamageFieldNumber;
const int SkillConfigSkillDamage::kFocoFullDamageFieldNumber;
const int SkillConfigSkillDamage::kFocoMaxDamageFieldNumber;
const int SkillConfigSkillDamage::kFocoMaxHitCountFieldNumber;
const int SkillConfigSkillDamage::kExplosionDamageFieldNumber;
const int SkillConfigSkillDamage::kExplosionMiniDamageFieldNumber;
const int SkillConfigSkillDamage::kBFixFieldNumber;
const int SkillConfigSkillDamage::kExplosionRadiusFieldNumber;
const int SkillConfigSkillDamage::kCollisionDamageFieldNumber;
#endif  // !_MSC_VER

SkillConfigSkillDamage::SkillConfigSkillDamage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillConfigSkillDamage::InitAsDefaultInstance() {
}

SkillConfigSkillDamage::SkillConfigSkillDamage(const SkillConfigSkillDamage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillConfigSkillDamage::SharedCtor() {
  _cached_size_ = 0;
  damagetype_ = 0;
  basedamage_ = 0;
  basedamagetime_ = 0;
  decreasedamage_ = 0;
  decreasemindamage_ = 0;
  maxdamage_ = 0;
  maxhitcount_ = 0;
  focobasedamage_ = 0;
  focomindamage_ = 0;
  focofulldamage_ = 0;
  focomaxdamage_ = 0;
  focomaxhitcount_ = 0;
  explosiondamage_ = 0;
  explosionminidamage_ = 0;
  bfix_ = false;
  explosionradius_ = 0;
  collisiondamage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillConfigSkillDamage::~SkillConfigSkillDamage() {
  SharedDtor();
}

void SkillConfigSkillDamage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillConfigSkillDamage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillConfigSkillDamage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillConfigSkillDamage_descriptor_;
}

const SkillConfigSkillDamage& SkillConfigSkillDamage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillConfigCliRpc_2eproto();
  return *default_instance_;
}

SkillConfigSkillDamage* SkillConfigSkillDamage::default_instance_ = NULL;

SkillConfigSkillDamage* SkillConfigSkillDamage::New() const {
  return new SkillConfigSkillDamage;
}

void SkillConfigSkillDamage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    damagetype_ = 0;
    basedamage_ = 0;
    basedamagetime_ = 0;
    decreasedamage_ = 0;
    decreasemindamage_ = 0;
    maxdamage_ = 0;
    maxhitcount_ = 0;
    focobasedamage_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    focomindamage_ = 0;
    focofulldamage_ = 0;
    focomaxdamage_ = 0;
    focomaxhitcount_ = 0;
    explosiondamage_ = 0;
    explosionminidamage_ = 0;
    bfix_ = false;
    explosionradius_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    collisiondamage_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillConfigSkillDamage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float BaseDamage = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &basedamage_)));
          set_has_basedamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_BaseDamageTime;
        break;
      }

      // optional float BaseDamageTime = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_BaseDamageTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &basedamagetime_)));
          set_has_basedamagetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_DecreaseMinDamage;
        break;
      }

      // optional float DecreaseMinDamage = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_DecreaseMinDamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &decreasemindamage_)));
          set_has_decreasemindamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_MaxDamage;
        break;
      }

      // optional float MaxDamage = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_MaxDamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxdamage_)));
          set_has_maxdamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_DecreaseDamage;
        break;
      }

      // optional float DecreaseDamage = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_DecreaseDamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &decreasedamage_)));
          set_has_decreasedamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_MaxHitCount;
        break;
      }

      // optional sint32 MaxHitCount = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxHitCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &maxhitcount_)));
          set_has_maxhitcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_FocoMinDamage;
        break;
      }

      // optional float FocoMinDamage = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_FocoMinDamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &focomindamage_)));
          set_has_focomindamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_FocoFullDamage;
        break;
      }

      // optional float FocoFullDamage = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_FocoFullDamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &focofulldamage_)));
          set_has_focofulldamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_ExplosionDamage;
        break;
      }

      // optional float ExplosionDamage = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ExplosionDamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &explosiondamage_)));
          set_has_explosiondamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_ExplosionMiniDamage;
        break;
      }

      // optional float ExplosionMiniDamage = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ExplosionMiniDamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &explosionminidamage_)));
          set_has_explosionminidamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_ExplosionRadius;
        break;
      }

      // optional float ExplosionRadius = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ExplosionRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &explosionradius_)));
          set_has_explosionradius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_BFix;
        break;
      }

      // optional bool BFix = 12 [default = false];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BFix:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bfix_)));
          set_has_bfix();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_CollisionDamage;
        break;
      }

      // optional float CollisionDamage = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_CollisionDamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &collisiondamage_)));
          set_has_collisiondamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_DamageType;
        break;
      }

      // optional sint32 DamageType = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DamageType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &damagetype_)));
          set_has_damagetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_FocoBaseDamage;
        break;
      }

      // optional float FocoBaseDamage = 15 [default = 0];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_FocoBaseDamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &focobasedamage_)));
          set_has_focobasedamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_FocoMaxDamage;
        break;
      }

      // optional float FocoMaxDamage = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_FocoMaxDamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &focomaxdamage_)));
          set_has_focomaxdamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_FocoMaxHitCount;
        break;
      }

      // optional sint32 FocoMaxHitCount = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FocoMaxHitCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &focomaxhitcount_)));
          set_has_focomaxhitcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillConfigSkillDamage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float BaseDamage = 1 [default = 0];
  if (has_basedamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->basedamage(), output);
  }

  // optional float BaseDamageTime = 2 [default = 0];
  if (has_basedamagetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->basedamagetime(), output);
  }

  // optional float DecreaseMinDamage = 3 [default = 0];
  if (has_decreasemindamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->decreasemindamage(), output);
  }

  // optional float MaxDamage = 4 [default = 0];
  if (has_maxdamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->maxdamage(), output);
  }

  // optional float DecreaseDamage = 5 [default = 0];
  if (has_decreasedamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->decreasedamage(), output);
  }

  // optional sint32 MaxHitCount = 6 [default = 0];
  if (has_maxhitcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->maxhitcount(), output);
  }

  // optional float FocoMinDamage = 7 [default = 0];
  if (has_focomindamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->focomindamage(), output);
  }

  // optional float FocoFullDamage = 8 [default = 0];
  if (has_focofulldamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->focofulldamage(), output);
  }

  // optional float ExplosionDamage = 9 [default = 0];
  if (has_explosiondamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->explosiondamage(), output);
  }

  // optional float ExplosionMiniDamage = 10 [default = 0];
  if (has_explosionminidamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->explosionminidamage(), output);
  }

  // optional float ExplosionRadius = 11 [default = 0];
  if (has_explosionradius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->explosionradius(), output);
  }

  // optional bool BFix = 12 [default = false];
  if (has_bfix()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->bfix(), output);
  }

  // optional float CollisionDamage = 13 [default = 0];
  if (has_collisiondamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->collisiondamage(), output);
  }

  // optional sint32 DamageType = 14 [default = 0];
  if (has_damagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(14, this->damagetype(), output);
  }

  // optional float FocoBaseDamage = 15 [default = 0];
  if (has_focobasedamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->focobasedamage(), output);
  }

  // optional float FocoMaxDamage = 16 [default = 0];
  if (has_focomaxdamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->focomaxdamage(), output);
  }

  // optional sint32 FocoMaxHitCount = 17 [default = 0];
  if (has_focomaxhitcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(17, this->focomaxhitcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillConfigSkillDamage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float BaseDamage = 1 [default = 0];
  if (has_basedamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->basedamage(), target);
  }

  // optional float BaseDamageTime = 2 [default = 0];
  if (has_basedamagetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->basedamagetime(), target);
  }

  // optional float DecreaseMinDamage = 3 [default = 0];
  if (has_decreasemindamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->decreasemindamage(), target);
  }

  // optional float MaxDamage = 4 [default = 0];
  if (has_maxdamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->maxdamage(), target);
  }

  // optional float DecreaseDamage = 5 [default = 0];
  if (has_decreasedamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->decreasedamage(), target);
  }

  // optional sint32 MaxHitCount = 6 [default = 0];
  if (has_maxhitcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->maxhitcount(), target);
  }

  // optional float FocoMinDamage = 7 [default = 0];
  if (has_focomindamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->focomindamage(), target);
  }

  // optional float FocoFullDamage = 8 [default = 0];
  if (has_focofulldamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->focofulldamage(), target);
  }

  // optional float ExplosionDamage = 9 [default = 0];
  if (has_explosiondamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->explosiondamage(), target);
  }

  // optional float ExplosionMiniDamage = 10 [default = 0];
  if (has_explosionminidamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->explosionminidamage(), target);
  }

  // optional float ExplosionRadius = 11 [default = 0];
  if (has_explosionradius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->explosionradius(), target);
  }

  // optional bool BFix = 12 [default = false];
  if (has_bfix()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->bfix(), target);
  }

  // optional float CollisionDamage = 13 [default = 0];
  if (has_collisiondamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->collisiondamage(), target);
  }

  // optional sint32 DamageType = 14 [default = 0];
  if (has_damagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(14, this->damagetype(), target);
  }

  // optional float FocoBaseDamage = 15 [default = 0];
  if (has_focobasedamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->focobasedamage(), target);
  }

  // optional float FocoMaxDamage = 16 [default = 0];
  if (has_focomaxdamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->focomaxdamage(), target);
  }

  // optional sint32 FocoMaxHitCount = 17 [default = 0];
  if (has_focomaxhitcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(17, this->focomaxhitcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillConfigSkillDamage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 DamageType = 14 [default = 0];
    if (has_damagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->damagetype());
    }

    // optional float BaseDamage = 1 [default = 0];
    if (has_basedamage()) {
      total_size += 1 + 4;
    }

    // optional float BaseDamageTime = 2 [default = 0];
    if (has_basedamagetime()) {
      total_size += 1 + 4;
    }

    // optional float DecreaseDamage = 5 [default = 0];
    if (has_decreasedamage()) {
      total_size += 1 + 4;
    }

    // optional float DecreaseMinDamage = 3 [default = 0];
    if (has_decreasemindamage()) {
      total_size += 1 + 4;
    }

    // optional float MaxDamage = 4 [default = 0];
    if (has_maxdamage()) {
      total_size += 1 + 4;
    }

    // optional sint32 MaxHitCount = 6 [default = 0];
    if (has_maxhitcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->maxhitcount());
    }

    // optional float FocoBaseDamage = 15 [default = 0];
    if (has_focobasedamage()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float FocoMinDamage = 7 [default = 0];
    if (has_focomindamage()) {
      total_size += 1 + 4;
    }

    // optional float FocoFullDamage = 8 [default = 0];
    if (has_focofulldamage()) {
      total_size += 1 + 4;
    }

    // optional float FocoMaxDamage = 16 [default = 0];
    if (has_focomaxdamage()) {
      total_size += 2 + 4;
    }

    // optional sint32 FocoMaxHitCount = 17 [default = 0];
    if (has_focomaxhitcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->focomaxhitcount());
    }

    // optional float ExplosionDamage = 9 [default = 0];
    if (has_explosiondamage()) {
      total_size += 1 + 4;
    }

    // optional float ExplosionMiniDamage = 10 [default = 0];
    if (has_explosionminidamage()) {
      total_size += 1 + 4;
    }

    // optional bool BFix = 12 [default = false];
    if (has_bfix()) {
      total_size += 1 + 1;
    }

    // optional float ExplosionRadius = 11 [default = 0];
    if (has_explosionradius()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float CollisionDamage = 13 [default = 0];
    if (has_collisiondamage()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillConfigSkillDamage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillConfigSkillDamage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillConfigSkillDamage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillConfigSkillDamage::MergeFrom(const SkillConfigSkillDamage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_damagetype()) {
      set_damagetype(from.damagetype());
    }
    if (from.has_basedamage()) {
      set_basedamage(from.basedamage());
    }
    if (from.has_basedamagetime()) {
      set_basedamagetime(from.basedamagetime());
    }
    if (from.has_decreasedamage()) {
      set_decreasedamage(from.decreasedamage());
    }
    if (from.has_decreasemindamage()) {
      set_decreasemindamage(from.decreasemindamage());
    }
    if (from.has_maxdamage()) {
      set_maxdamage(from.maxdamage());
    }
    if (from.has_maxhitcount()) {
      set_maxhitcount(from.maxhitcount());
    }
    if (from.has_focobasedamage()) {
      set_focobasedamage(from.focobasedamage());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_focomindamage()) {
      set_focomindamage(from.focomindamage());
    }
    if (from.has_focofulldamage()) {
      set_focofulldamage(from.focofulldamage());
    }
    if (from.has_focomaxdamage()) {
      set_focomaxdamage(from.focomaxdamage());
    }
    if (from.has_focomaxhitcount()) {
      set_focomaxhitcount(from.focomaxhitcount());
    }
    if (from.has_explosiondamage()) {
      set_explosiondamage(from.explosiondamage());
    }
    if (from.has_explosionminidamage()) {
      set_explosionminidamage(from.explosionminidamage());
    }
    if (from.has_bfix()) {
      set_bfix(from.bfix());
    }
    if (from.has_explosionradius()) {
      set_explosionradius(from.explosionradius());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_collisiondamage()) {
      set_collisiondamage(from.collisiondamage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillConfigSkillDamage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillConfigSkillDamage::CopyFrom(const SkillConfigSkillDamage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillConfigSkillDamage::IsInitialized() const {

  return true;
}

void SkillConfigSkillDamage::Swap(SkillConfigSkillDamage* other) {
  if (other != this) {
    std::swap(damagetype_, other->damagetype_);
    std::swap(basedamage_, other->basedamage_);
    std::swap(basedamagetime_, other->basedamagetime_);
    std::swap(decreasedamage_, other->decreasedamage_);
    std::swap(decreasemindamage_, other->decreasemindamage_);
    std::swap(maxdamage_, other->maxdamage_);
    std::swap(maxhitcount_, other->maxhitcount_);
    std::swap(focobasedamage_, other->focobasedamage_);
    std::swap(focomindamage_, other->focomindamage_);
    std::swap(focofulldamage_, other->focofulldamage_);
    std::swap(focomaxdamage_, other->focomaxdamage_);
    std::swap(focomaxhitcount_, other->focomaxhitcount_);
    std::swap(explosiondamage_, other->explosiondamage_);
    std::swap(explosionminidamage_, other->explosionminidamage_);
    std::swap(bfix_, other->bfix_);
    std::swap(explosionradius_, other->explosionradius_);
    std::swap(collisiondamage_, other->collisiondamage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillConfigSkillDamage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillConfigSkillDamage_descriptor_;
  metadata.reflection = SkillConfigSkillDamage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillConfigShotPoint::kAngleFieldNumber;
const int SkillConfigShotPoint::kLocalPosFieldNumber;
#endif  // !_MSC_VER

SkillConfigShotPoint::SkillConfigShotPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillConfigShotPoint::InitAsDefaultInstance() {
  localpos_ = const_cast< ::Vector3PB*>(&::Vector3PB::default_instance());
}

SkillConfigShotPoint::SkillConfigShotPoint(const SkillConfigShotPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillConfigShotPoint::SharedCtor() {
  _cached_size_ = 0;
  angle_ = -1;
  localpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillConfigShotPoint::~SkillConfigShotPoint() {
  SharedDtor();
}

void SkillConfigShotPoint::SharedDtor() {
  if (this != default_instance_) {
    delete localpos_;
  }
}

void SkillConfigShotPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillConfigShotPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillConfigShotPoint_descriptor_;
}

const SkillConfigShotPoint& SkillConfigShotPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillConfigCliRpc_2eproto();
  return *default_instance_;
}

SkillConfigShotPoint* SkillConfigShotPoint::default_instance_ = NULL;

SkillConfigShotPoint* SkillConfigShotPoint::New() const {
  return new SkillConfigShotPoint;
}

void SkillConfigShotPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    angle_ = -1;
    if (has_localpos()) {
      if (localpos_ != NULL) localpos_->::Vector3PB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillConfigShotPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Angle = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LocalPos;
        break;
      }

      // optional .Vector3PB LocalPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LocalPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_localpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillConfigShotPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Angle = 1 [default = -1];
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->angle(), output);
  }

  // optional .Vector3PB LocalPos = 2;
  if (has_localpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->localpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillConfigShotPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Angle = 1 [default = -1];
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->angle(), target);
  }

  // optional .Vector3PB LocalPos = 2;
  if (has_localpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->localpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillConfigShotPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Angle = 1 [default = -1];
    if (has_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->angle());
    }

    // optional .Vector3PB LocalPos = 2;
    if (has_localpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->localpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillConfigShotPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillConfigShotPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillConfigShotPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillConfigShotPoint::MergeFrom(const SkillConfigShotPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_localpos()) {
      mutable_localpos()->::Vector3PB::MergeFrom(from.localpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillConfigShotPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillConfigShotPoint::CopyFrom(const SkillConfigShotPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillConfigShotPoint::IsInitialized() const {

  return true;
}

void SkillConfigShotPoint::Swap(SkillConfigShotPoint* other) {
  if (other != this) {
    std::swap(angle_, other->angle_);
    std::swap(localpos_, other->localpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillConfigShotPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillConfigShotPoint_descriptor_;
  metadata.reflection = SkillConfigShotPoint_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
