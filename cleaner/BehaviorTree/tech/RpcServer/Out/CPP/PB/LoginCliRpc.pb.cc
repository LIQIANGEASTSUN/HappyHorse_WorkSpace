// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LoginCliRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LoginCliRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* LoginRpcReadyAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRpcReadyAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRpcReadyReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRpcReadyReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRpcStartNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRpcStartNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginUser_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_LoginCliRpc_2eproto() {
  protobuf_AddDesc_LoginCliRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "LoginCliRpc.proto");
  GOOGLE_CHECK(file != NULL);
  LoginRpcReadyAsk_descriptor_ = file->message_type(0);
  static const int LoginRpcReadyAsk_offsets_[1] = {
  };
  LoginRpcReadyAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRpcReadyAsk_descriptor_,
      LoginRpcReadyAsk::default_instance_,
      LoginRpcReadyAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcReadyAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcReadyAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRpcReadyAsk));
  LoginRpcReadyReply_descriptor_ = file->message_type(1);
  static const int LoginRpcReadyReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcReadyReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcReadyReply, remaintime_),
  };
  LoginRpcReadyReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRpcReadyReply_descriptor_,
      LoginRpcReadyReply::default_instance_,
      LoginRpcReadyReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcReadyReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcReadyReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRpcReadyReply));
  LoginRpcStartNotify_descriptor_ = file->message_type(2);
  static const int LoginRpcStartNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcStartNotify, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcStartNotify, sumtime_),
  };
  LoginRpcStartNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRpcStartNotify_descriptor_,
      LoginRpcStartNotify::default_instance_,
      LoginRpcStartNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcStartNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcStartNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRpcStartNotify));
  LoginUser_descriptor_ = file->message_type(3);
  static const int LoginUser_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginUser, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginUser, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginUser, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginUser, hangle_),
  };
  LoginUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginUser_descriptor_,
      LoginUser::default_instance_,
      LoginUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginUser));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_LoginCliRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRpcReadyAsk_descriptor_, &LoginRpcReadyAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRpcReadyReply_descriptor_, &LoginRpcReadyReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRpcStartNotify_descriptor_, &LoginRpcStartNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginUser_descriptor_, &LoginUser::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_LoginCliRpc_2eproto() {
  delete LoginRpcReadyAsk::default_instance_;
  delete LoginRpcReadyAsk_reflection_;
  delete LoginRpcReadyReply::default_instance_;
  delete LoginRpcReadyReply_reflection_;
  delete LoginRpcStartNotify::default_instance_;
  delete LoginRpcStartNotify_reflection_;
  delete LoginUser::default_instance_;
  delete LoginUser_reflection_;
}

void protobuf_AddDesc_LoginCliRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021LoginCliRpc.proto\032\022PublicStruct.proto\""
    "\022\n\020LoginRpcReadyAsk\"\?\n\022LoginRpcReadyRepl"
    "y\022\021\n\006Result\030\001 \001(\021:\0010\022\026\n\nRemainTime\030\002 \001(\021"
    ":\002-1\"9\n\023LoginRpcStartNotify\022\016\n\003Uid\030\001 \001(\021"
    ":\0010\022\022\n\007Sumtime\030\002 \001(\021:\0010\"X\n\tLoginUser\022\016\n\003"
    "Uid\030\001 \001(\021:\0010\022\020\n\005Group\030\002 \001(\021:\0010\022\025\n\003Pos\030\003 "
    "\001(\0132\010.Vector3\022\022\n\006HAngle\030\004 \001(\021:\002-1", 273);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LoginCliRpc.proto", &protobuf_RegisterTypes);
  LoginRpcReadyAsk::default_instance_ = new LoginRpcReadyAsk();
  LoginRpcReadyReply::default_instance_ = new LoginRpcReadyReply();
  LoginRpcStartNotify::default_instance_ = new LoginRpcStartNotify();
  LoginUser::default_instance_ = new LoginUser();
  LoginRpcReadyAsk::default_instance_->InitAsDefaultInstance();
  LoginRpcReadyReply::default_instance_->InitAsDefaultInstance();
  LoginRpcStartNotify::default_instance_->InitAsDefaultInstance();
  LoginUser::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LoginCliRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LoginCliRpc_2eproto {
  StaticDescriptorInitializer_LoginCliRpc_2eproto() {
    protobuf_AddDesc_LoginCliRpc_2eproto();
  }
} static_descriptor_initializer_LoginCliRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LoginRpcReadyAsk::LoginRpcReadyAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRpcReadyAsk::InitAsDefaultInstance() {
}

LoginRpcReadyAsk::LoginRpcReadyAsk(const LoginRpcReadyAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRpcReadyAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRpcReadyAsk::~LoginRpcReadyAsk() {
  SharedDtor();
}

void LoginRpcReadyAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginRpcReadyAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRpcReadyAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRpcReadyAsk_descriptor_;
}

const LoginRpcReadyAsk& LoginRpcReadyAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginCliRpc_2eproto();
  return *default_instance_;
}

LoginRpcReadyAsk* LoginRpcReadyAsk::default_instance_ = NULL;

LoginRpcReadyAsk* LoginRpcReadyAsk::New() const {
  return new LoginRpcReadyAsk;
}

void LoginRpcReadyAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRpcReadyAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void LoginRpcReadyAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRpcReadyAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRpcReadyAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRpcReadyAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRpcReadyAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRpcReadyAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRpcReadyAsk::MergeFrom(const LoginRpcReadyAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRpcReadyAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRpcReadyAsk::CopyFrom(const LoginRpcReadyAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRpcReadyAsk::IsInitialized() const {

  return true;
}

void LoginRpcReadyAsk::Swap(LoginRpcReadyAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRpcReadyAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRpcReadyAsk_descriptor_;
  metadata.reflection = LoginRpcReadyAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRpcReadyReply::kResultFieldNumber;
const int LoginRpcReadyReply::kRemainTimeFieldNumber;
#endif  // !_MSC_VER

LoginRpcReadyReply::LoginRpcReadyReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRpcReadyReply::InitAsDefaultInstance() {
}

LoginRpcReadyReply::LoginRpcReadyReply(const LoginRpcReadyReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRpcReadyReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  remaintime_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRpcReadyReply::~LoginRpcReadyReply() {
  SharedDtor();
}

void LoginRpcReadyReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginRpcReadyReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRpcReadyReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRpcReadyReply_descriptor_;
}

const LoginRpcReadyReply& LoginRpcReadyReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginCliRpc_2eproto();
  return *default_instance_;
}

LoginRpcReadyReply* LoginRpcReadyReply::default_instance_ = NULL;

LoginRpcReadyReply* LoginRpcReadyReply::New() const {
  return new LoginRpcReadyReply;
}

void LoginRpcReadyReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    remaintime_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRpcReadyReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RemainTime;
        break;
      }

      // optional sint32 RemainTime = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RemainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &remaintime_)));
          set_has_remaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRpcReadyReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = 0];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint32 RemainTime = 2 [default = -1];
  if (has_remaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->remaintime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRpcReadyReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = 0];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint32 RemainTime = 2 [default = -1];
  if (has_remaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->remaintime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRpcReadyReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = 0];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 RemainTime = 2 [default = -1];
    if (has_remaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->remaintime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRpcReadyReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRpcReadyReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRpcReadyReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRpcReadyReply::MergeFrom(const LoginRpcReadyReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_remaintime()) {
      set_remaintime(from.remaintime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRpcReadyReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRpcReadyReply::CopyFrom(const LoginRpcReadyReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRpcReadyReply::IsInitialized() const {

  return true;
}

void LoginRpcReadyReply::Swap(LoginRpcReadyReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(remaintime_, other->remaintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRpcReadyReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRpcReadyReply_descriptor_;
  metadata.reflection = LoginRpcReadyReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRpcStartNotify::kUidFieldNumber;
const int LoginRpcStartNotify::kSumtimeFieldNumber;
#endif  // !_MSC_VER

LoginRpcStartNotify::LoginRpcStartNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRpcStartNotify::InitAsDefaultInstance() {
}

LoginRpcStartNotify::LoginRpcStartNotify(const LoginRpcStartNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRpcStartNotify::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  sumtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRpcStartNotify::~LoginRpcStartNotify() {
  SharedDtor();
}

void LoginRpcStartNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginRpcStartNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRpcStartNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRpcStartNotify_descriptor_;
}

const LoginRpcStartNotify& LoginRpcStartNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginCliRpc_2eproto();
  return *default_instance_;
}

LoginRpcStartNotify* LoginRpcStartNotify::default_instance_ = NULL;

LoginRpcStartNotify* LoginRpcStartNotify::New() const {
  return new LoginRpcStartNotify;
}

void LoginRpcStartNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0;
    sumtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRpcStartNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Uid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Sumtime;
        break;
      }

      // optional sint32 Sumtime = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Sumtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &sumtime_)));
          set_has_sumtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRpcStartNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Uid = 1 [default = 0];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->uid(), output);
  }

  // optional sint32 Sumtime = 2 [default = 0];
  if (has_sumtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->sumtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRpcStartNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Uid = 1 [default = 0];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->uid(), target);
  }

  // optional sint32 Sumtime = 2 [default = 0];
  if (has_sumtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->sumtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRpcStartNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Uid = 1 [default = 0];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->uid());
    }

    // optional sint32 Sumtime = 2 [default = 0];
    if (has_sumtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->sumtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRpcStartNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRpcStartNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRpcStartNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRpcStartNotify::MergeFrom(const LoginRpcStartNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_sumtime()) {
      set_sumtime(from.sumtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRpcStartNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRpcStartNotify::CopyFrom(const LoginRpcStartNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRpcStartNotify::IsInitialized() const {

  return true;
}

void LoginRpcStartNotify::Swap(LoginRpcStartNotify* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(sumtime_, other->sumtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRpcStartNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRpcStartNotify_descriptor_;
  metadata.reflection = LoginRpcStartNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginUser::kUidFieldNumber;
const int LoginUser::kGroupFieldNumber;
const int LoginUser::kPosFieldNumber;
const int LoginUser::kHAngleFieldNumber;
#endif  // !_MSC_VER

LoginUser::LoginUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginUser::InitAsDefaultInstance() {
  pos_ = const_cast< ::Vector3*>(&::Vector3::default_instance());
}

LoginUser::LoginUser(const LoginUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginUser::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  group_ = 0;
  pos_ = NULL;
  hangle_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginUser::~LoginUser() {
  SharedDtor();
}

void LoginUser::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void LoginUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginUser_descriptor_;
}

const LoginUser& LoginUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginCliRpc_2eproto();
  return *default_instance_;
}

LoginUser* LoginUser::default_instance_ = NULL;

LoginUser* LoginUser::New() const {
  return new LoginUser;
}

void LoginUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0;
    group_ = 0;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Vector3::Clear();
    }
    hangle_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Uid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Group;
        break;
      }

      // optional sint32 Group = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Pos;
        break;
      }

      // optional .Vector3 Pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_HAngle;
        break;
      }

      // optional sint32 HAngle = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &hangle_)));
          set_has_hangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Uid = 1 [default = 0];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->uid(), output);
  }

  // optional sint32 Group = 2 [default = 0];
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->group(), output);
  }

  // optional .Vector3 Pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  // optional sint32 HAngle = 4 [default = -1];
  if (has_hangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->hangle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Uid = 1 [default = 0];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->uid(), target);
  }

  // optional sint32 Group = 2 [default = 0];
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->group(), target);
  }

  // optional .Vector3 Pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  // optional sint32 HAngle = 4 [default = -1];
  if (has_hangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->hangle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Uid = 1 [default = 0];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->uid());
    }

    // optional sint32 Group = 2 [default = 0];
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->group());
    }

    // optional .Vector3 Pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional sint32 HAngle = 4 [default = -1];
    if (has_hangle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->hangle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginUser::MergeFrom(const LoginUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_pos()) {
      mutable_pos()->::Vector3::MergeFrom(from.pos());
    }
    if (from.has_hangle()) {
      set_hangle(from.hangle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginUser::CopyFrom(const LoginUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginUser::IsInitialized() const {

  return true;
}

void LoginUser::Swap(LoginUser* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(group_, other->group_);
    std::swap(pos_, other->pos_);
    std::swap(hangle_, other->hangle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginUser_descriptor_;
  metadata.reflection = LoginUser_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
