// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DBCacheSvrRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DBCacheSvrRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* DBCacheRpcInsertAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBCacheRpcInsertAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBCacheRpcInsertReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBCacheRpcInsertReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBCacheRpcDeleteAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBCacheRpcDeleteAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBCacheRpcDeleteReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBCacheRpcDeleteReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBCacheRpcUpdateAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBCacheRpcUpdateAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBCacheRpcUpdateReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBCacheRpcUpdateReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBCacheRpcSelectAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBCacheRpcSelectAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBCacheRpcSelectReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBCacheRpcSelectReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBCacheFV_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBCacheFV_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBCacheRecordLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBCacheRecordLine_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DBCacheSvrRpc_2eproto() {
  protobuf_AddDesc_DBCacheSvrRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DBCacheSvrRpc.proto");
  GOOGLE_CHECK(file != NULL);
  DBCacheRpcInsertAsk_descriptor_ = file->message_type(0);
  static const int DBCacheRpcInsertAsk_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcInsertAsk, tabname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcInsertAsk, primarykey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcInsertAsk, subsidiarykey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcInsertAsk, pkvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcInsertAsk, skvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcInsertAsk, fvarray_),
  };
  DBCacheRpcInsertAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBCacheRpcInsertAsk_descriptor_,
      DBCacheRpcInsertAsk::default_instance_,
      DBCacheRpcInsertAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcInsertAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcInsertAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBCacheRpcInsertAsk));
  DBCacheRpcInsertReply_descriptor_ = file->message_type(1);
  static const int DBCacheRpcInsertReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcInsertReply, result_),
  };
  DBCacheRpcInsertReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBCacheRpcInsertReply_descriptor_,
      DBCacheRpcInsertReply::default_instance_,
      DBCacheRpcInsertReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcInsertReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcInsertReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBCacheRpcInsertReply));
  DBCacheRpcDeleteAsk_descriptor_ = file->message_type(2);
  static const int DBCacheRpcDeleteAsk_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcDeleteAsk, tabname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcDeleteAsk, primarykey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcDeleteAsk, subsidiarykey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcDeleteAsk, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcDeleteAsk, keyvalue_),
  };
  DBCacheRpcDeleteAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBCacheRpcDeleteAsk_descriptor_,
      DBCacheRpcDeleteAsk::default_instance_,
      DBCacheRpcDeleteAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcDeleteAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcDeleteAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBCacheRpcDeleteAsk));
  DBCacheRpcDeleteReply_descriptor_ = file->message_type(3);
  static const int DBCacheRpcDeleteReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcDeleteReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcDeleteReply, nraffects_),
  };
  DBCacheRpcDeleteReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBCacheRpcDeleteReply_descriptor_,
      DBCacheRpcDeleteReply::default_instance_,
      DBCacheRpcDeleteReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcDeleteReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcDeleteReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBCacheRpcDeleteReply));
  DBCacheRpcUpdateAsk_descriptor_ = file->message_type(4);
  static const int DBCacheRpcUpdateAsk_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcUpdateAsk, tabname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcUpdateAsk, primarykey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcUpdateAsk, subsidiarykey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcUpdateAsk, pkvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcUpdateAsk, fvarray_),
  };
  DBCacheRpcUpdateAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBCacheRpcUpdateAsk_descriptor_,
      DBCacheRpcUpdateAsk::default_instance_,
      DBCacheRpcUpdateAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcUpdateAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcUpdateAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBCacheRpcUpdateAsk));
  DBCacheRpcUpdateReply_descriptor_ = file->message_type(5);
  static const int DBCacheRpcUpdateReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcUpdateReply, result_),
  };
  DBCacheRpcUpdateReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBCacheRpcUpdateReply_descriptor_,
      DBCacheRpcUpdateReply::default_instance_,
      DBCacheRpcUpdateReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcUpdateReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcUpdateReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBCacheRpcUpdateReply));
  DBCacheRpcSelectAsk_descriptor_ = file->message_type(6);
  static const int DBCacheRpcSelectAsk_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcSelectAsk, tabname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcSelectAsk, primarykey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcSelectAsk, subsidiarykey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcSelectAsk, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcSelectAsk, keyvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcSelectAsk, fields_),
  };
  DBCacheRpcSelectAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBCacheRpcSelectAsk_descriptor_,
      DBCacheRpcSelectAsk::default_instance_,
      DBCacheRpcSelectAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcSelectAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcSelectAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBCacheRpcSelectAsk));
  DBCacheRpcSelectReply_descriptor_ = file->message_type(7);
  static const int DBCacheRpcSelectReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcSelectReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcSelectReply, nraffects_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcSelectReply, fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcSelectReply, records_),
  };
  DBCacheRpcSelectReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBCacheRpcSelectReply_descriptor_,
      DBCacheRpcSelectReply::default_instance_,
      DBCacheRpcSelectReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcSelectReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRpcSelectReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBCacheRpcSelectReply));
  DBCacheFV_descriptor_ = file->message_type(8);
  static const int DBCacheFV_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheFV, field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheFV, value_),
  };
  DBCacheFV_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBCacheFV_descriptor_,
      DBCacheFV::default_instance_,
      DBCacheFV_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheFV, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheFV, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBCacheFV));
  DBCacheRecordLine_descriptor_ = file->message_type(9);
  static const int DBCacheRecordLine_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRecordLine, values_),
  };
  DBCacheRecordLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBCacheRecordLine_descriptor_,
      DBCacheRecordLine::default_instance_,
      DBCacheRecordLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRecordLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCacheRecordLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBCacheRecordLine));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DBCacheSvrRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBCacheRpcInsertAsk_descriptor_, &DBCacheRpcInsertAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBCacheRpcInsertReply_descriptor_, &DBCacheRpcInsertReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBCacheRpcDeleteAsk_descriptor_, &DBCacheRpcDeleteAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBCacheRpcDeleteReply_descriptor_, &DBCacheRpcDeleteReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBCacheRpcUpdateAsk_descriptor_, &DBCacheRpcUpdateAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBCacheRpcUpdateReply_descriptor_, &DBCacheRpcUpdateReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBCacheRpcSelectAsk_descriptor_, &DBCacheRpcSelectAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBCacheRpcSelectReply_descriptor_, &DBCacheRpcSelectReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBCacheFV_descriptor_, &DBCacheFV::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBCacheRecordLine_descriptor_, &DBCacheRecordLine::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DBCacheSvrRpc_2eproto() {
  delete DBCacheRpcInsertAsk::default_instance_;
  delete DBCacheRpcInsertAsk_reflection_;
  delete DBCacheRpcInsertReply::default_instance_;
  delete DBCacheRpcInsertReply_reflection_;
  delete DBCacheRpcDeleteAsk::default_instance_;
  delete DBCacheRpcDeleteAsk_reflection_;
  delete DBCacheRpcDeleteReply::default_instance_;
  delete DBCacheRpcDeleteReply_reflection_;
  delete DBCacheRpcUpdateAsk::default_instance_;
  delete DBCacheRpcUpdateAsk_reflection_;
  delete DBCacheRpcUpdateReply::default_instance_;
  delete DBCacheRpcUpdateReply_reflection_;
  delete DBCacheRpcSelectAsk::default_instance_;
  delete DBCacheRpcSelectAsk_reflection_;
  delete DBCacheRpcSelectReply::default_instance_;
  delete DBCacheRpcSelectReply_reflection_;
  delete DBCacheFV::default_instance_;
  delete DBCacheFV_reflection_;
  delete DBCacheRecordLine::default_instance_;
  delete DBCacheRecordLine_reflection_;
}

void protobuf_AddDesc_DBCacheSvrRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023DBCacheSvrRpc.proto\032\022PublicStruct.prot"
    "o\"\220\001\n\023DBCacheRpcInsertAsk\022\017\n\007TabName\030\001 \001"
    "(\t\022\022\n\nPrimaryKey\030\002 \001(\t\022\025\n\rSubsidiaryKey\030"
    "\003 \001(\t\022\017\n\007PKValue\030\004 \001(\t\022\017\n\007SKValue\030\006 \001(\t\022"
    "\033\n\007FVArray\030\005 \003(\0132\n.DBCacheFV\".\n\025DBCacheR"
    "pcInsertReply\022\025\n\006Result\030\001 \001(\021:\005-9999\"t\n\023"
    "DBCacheRpcDeleteAsk\022\017\n\007TabName\030\001 \001(\t\022\022\n\n"
    "PrimaryKey\030\002 \001(\t\022\025\n\rSubsidiaryKey\030\003 \001(\t\022"
    "\017\n\004Type\030\004 \001(\021:\0010\022\020\n\010KeyValue\030\005 \001(\t\"D\n\025DB"
    "CacheRpcDeleteReply\022\025\n\006Result\030\001 \001(\021:\005-99"
    "99\022\024\n\tNrAffects\030\002 \001(\021:\0010\"\177\n\023DBCacheRpcUp"
    "dateAsk\022\017\n\007TabName\030\001 \001(\t\022\022\n\nPrimaryKey\030\002"
    " \001(\t\022\025\n\rSubsidiaryKey\030\006 \001(\t\022\017\n\007PKValue\030\004"
    " \001(\t\022\033\n\007FVArray\030\005 \003(\0132\n.DBCacheFV\".\n\025DBC"
    "acheRpcUpdateReply\022\025\n\006Result\030\001 \001(\021:\005-999"
    "9\"\204\001\n\023DBCacheRpcSelectAsk\022\017\n\007TabName\030\001 \001"
    "(\t\022\022\n\nPrimaryKey\030\002 \001(\t\022\025\n\rSubsidiaryKey\030"
    "\003 \001(\t\022\017\n\004Type\030\004 \001(\021:\0010\022\020\n\010KeyValue\030\005 \001(\t"
    "\022\016\n\006Fields\030\006 \003(\t\"y\n\025DBCacheRpcSelectRepl"
    "y\022\025\n\006Result\030\001 \001(\021:\005-9999\022\024\n\tNrAffects\030\002 "
    "\001(\021:\0010\022\016\n\006Fields\030\003 \003(\t\022#\n\007Records\030\004 \003(\0132"
    "\022.DBCacheRecordLine\")\n\tDBCacheFV\022\r\n\005Fiel"
    "d\030\001 \001(\t\022\r\n\005Value\030\002 \001(\t\"#\n\021DBCacheRecordL"
    "ine\022\016\n\006Values\030\002 \003(\t", 939);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DBCacheSvrRpc.proto", &protobuf_RegisterTypes);
  DBCacheRpcInsertAsk::default_instance_ = new DBCacheRpcInsertAsk();
  DBCacheRpcInsertReply::default_instance_ = new DBCacheRpcInsertReply();
  DBCacheRpcDeleteAsk::default_instance_ = new DBCacheRpcDeleteAsk();
  DBCacheRpcDeleteReply::default_instance_ = new DBCacheRpcDeleteReply();
  DBCacheRpcUpdateAsk::default_instance_ = new DBCacheRpcUpdateAsk();
  DBCacheRpcUpdateReply::default_instance_ = new DBCacheRpcUpdateReply();
  DBCacheRpcSelectAsk::default_instance_ = new DBCacheRpcSelectAsk();
  DBCacheRpcSelectReply::default_instance_ = new DBCacheRpcSelectReply();
  DBCacheFV::default_instance_ = new DBCacheFV();
  DBCacheRecordLine::default_instance_ = new DBCacheRecordLine();
  DBCacheRpcInsertAsk::default_instance_->InitAsDefaultInstance();
  DBCacheRpcInsertReply::default_instance_->InitAsDefaultInstance();
  DBCacheRpcDeleteAsk::default_instance_->InitAsDefaultInstance();
  DBCacheRpcDeleteReply::default_instance_->InitAsDefaultInstance();
  DBCacheRpcUpdateAsk::default_instance_->InitAsDefaultInstance();
  DBCacheRpcUpdateReply::default_instance_->InitAsDefaultInstance();
  DBCacheRpcSelectAsk::default_instance_->InitAsDefaultInstance();
  DBCacheRpcSelectReply::default_instance_->InitAsDefaultInstance();
  DBCacheFV::default_instance_->InitAsDefaultInstance();
  DBCacheRecordLine::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DBCacheSvrRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DBCacheSvrRpc_2eproto {
  StaticDescriptorInitializer_DBCacheSvrRpc_2eproto() {
    protobuf_AddDesc_DBCacheSvrRpc_2eproto();
  }
} static_descriptor_initializer_DBCacheSvrRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DBCacheRpcInsertAsk::kTabNameFieldNumber;
const int DBCacheRpcInsertAsk::kPrimaryKeyFieldNumber;
const int DBCacheRpcInsertAsk::kSubsidiaryKeyFieldNumber;
const int DBCacheRpcInsertAsk::kPKValueFieldNumber;
const int DBCacheRpcInsertAsk::kSKValueFieldNumber;
const int DBCacheRpcInsertAsk::kFVArrayFieldNumber;
#endif  // !_MSC_VER

DBCacheRpcInsertAsk::DBCacheRpcInsertAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DBCacheRpcInsertAsk::InitAsDefaultInstance() {
}

DBCacheRpcInsertAsk::DBCacheRpcInsertAsk(const DBCacheRpcInsertAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DBCacheRpcInsertAsk::SharedCtor() {
  _cached_size_ = 0;
  tabname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  primarykey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  subsidiarykey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pkvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  skvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBCacheRpcInsertAsk::~DBCacheRpcInsertAsk() {
  SharedDtor();
}

void DBCacheRpcInsertAsk::SharedDtor() {
  if (tabname_ != &::google::protobuf::internal::kEmptyString) {
    delete tabname_;
  }
  if (primarykey_ != &::google::protobuf::internal::kEmptyString) {
    delete primarykey_;
  }
  if (subsidiarykey_ != &::google::protobuf::internal::kEmptyString) {
    delete subsidiarykey_;
  }
  if (pkvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete pkvalue_;
  }
  if (skvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete skvalue_;
  }
  if (this != default_instance_) {
  }
}

void DBCacheRpcInsertAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBCacheRpcInsertAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBCacheRpcInsertAsk_descriptor_;
}

const DBCacheRpcInsertAsk& DBCacheRpcInsertAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBCacheSvrRpc_2eproto();
  return *default_instance_;
}

DBCacheRpcInsertAsk* DBCacheRpcInsertAsk::default_instance_ = NULL;

DBCacheRpcInsertAsk* DBCacheRpcInsertAsk::New() const {
  return new DBCacheRpcInsertAsk;
}

void DBCacheRpcInsertAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tabname()) {
      if (tabname_ != &::google::protobuf::internal::kEmptyString) {
        tabname_->clear();
      }
    }
    if (has_primarykey()) {
      if (primarykey_ != &::google::protobuf::internal::kEmptyString) {
        primarykey_->clear();
      }
    }
    if (has_subsidiarykey()) {
      if (subsidiarykey_ != &::google::protobuf::internal::kEmptyString) {
        subsidiarykey_->clear();
      }
    }
    if (has_pkvalue()) {
      if (pkvalue_ != &::google::protobuf::internal::kEmptyString) {
        pkvalue_->clear();
      }
    }
    if (has_skvalue()) {
      if (skvalue_ != &::google::protobuf::internal::kEmptyString) {
        skvalue_->clear();
      }
    }
  }
  fvarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBCacheRpcInsertAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string TabName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tabname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tabname().data(), this->tabname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PrimaryKey;
        break;
      }

      // optional string PrimaryKey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PrimaryKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_primarykey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->primarykey().data(), this->primarykey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_SubsidiaryKey;
        break;
      }

      // optional string SubsidiaryKey = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SubsidiaryKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subsidiarykey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subsidiarykey().data(), this->subsidiarykey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_PKValue;
        break;
      }

      // optional string PKValue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PKValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pkvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pkvalue().data(), this->pkvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_FVArray;
        break;
      }

      // repeated .DBCacheFV FVArray = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FVArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fvarray()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_FVArray;
        if (input->ExpectTag(50)) goto parse_SKValue;
        break;
      }

      // optional string SKValue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SKValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->skvalue().data(), this->skvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DBCacheRpcInsertAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string TabName = 1;
  if (has_tabname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tabname().data(), this->tabname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tabname(), output);
  }

  // optional string PrimaryKey = 2;
  if (has_primarykey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->primarykey().data(), this->primarykey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->primarykey(), output);
  }

  // optional string SubsidiaryKey = 3;
  if (has_subsidiarykey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subsidiarykey().data(), this->subsidiarykey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->subsidiarykey(), output);
  }

  // optional string PKValue = 4;
  if (has_pkvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pkvalue().data(), this->pkvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->pkvalue(), output);
  }

  // repeated .DBCacheFV FVArray = 5;
  for (int i = 0; i < this->fvarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->fvarray(i), output);
  }

  // optional string SKValue = 6;
  if (has_skvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skvalue().data(), this->skvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->skvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DBCacheRpcInsertAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string TabName = 1;
  if (has_tabname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tabname().data(), this->tabname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tabname(), target);
  }

  // optional string PrimaryKey = 2;
  if (has_primarykey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->primarykey().data(), this->primarykey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->primarykey(), target);
  }

  // optional string SubsidiaryKey = 3;
  if (has_subsidiarykey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subsidiarykey().data(), this->subsidiarykey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->subsidiarykey(), target);
  }

  // optional string PKValue = 4;
  if (has_pkvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pkvalue().data(), this->pkvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pkvalue(), target);
  }

  // repeated .DBCacheFV FVArray = 5;
  for (int i = 0; i < this->fvarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->fvarray(i), target);
  }

  // optional string SKValue = 6;
  if (has_skvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skvalue().data(), this->skvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->skvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DBCacheRpcInsertAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string TabName = 1;
    if (has_tabname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tabname());
    }

    // optional string PrimaryKey = 2;
    if (has_primarykey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->primarykey());
    }

    // optional string SubsidiaryKey = 3;
    if (has_subsidiarykey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subsidiarykey());
    }

    // optional string PKValue = 4;
    if (has_pkvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pkvalue());
    }

    // optional string SKValue = 6;
    if (has_skvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skvalue());
    }

  }
  // repeated .DBCacheFV FVArray = 5;
  total_size += 1 * this->fvarray_size();
  for (int i = 0; i < this->fvarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fvarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBCacheRpcInsertAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBCacheRpcInsertAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBCacheRpcInsertAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBCacheRpcInsertAsk::MergeFrom(const DBCacheRpcInsertAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  fvarray_.MergeFrom(from.fvarray_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tabname()) {
      set_tabname(from.tabname());
    }
    if (from.has_primarykey()) {
      set_primarykey(from.primarykey());
    }
    if (from.has_subsidiarykey()) {
      set_subsidiarykey(from.subsidiarykey());
    }
    if (from.has_pkvalue()) {
      set_pkvalue(from.pkvalue());
    }
    if (from.has_skvalue()) {
      set_skvalue(from.skvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBCacheRpcInsertAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBCacheRpcInsertAsk::CopyFrom(const DBCacheRpcInsertAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBCacheRpcInsertAsk::IsInitialized() const {

  return true;
}

void DBCacheRpcInsertAsk::Swap(DBCacheRpcInsertAsk* other) {
  if (other != this) {
    std::swap(tabname_, other->tabname_);
    std::swap(primarykey_, other->primarykey_);
    std::swap(subsidiarykey_, other->subsidiarykey_);
    std::swap(pkvalue_, other->pkvalue_);
    std::swap(skvalue_, other->skvalue_);
    fvarray_.Swap(&other->fvarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBCacheRpcInsertAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBCacheRpcInsertAsk_descriptor_;
  metadata.reflection = DBCacheRpcInsertAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBCacheRpcInsertReply::kResultFieldNumber;
#endif  // !_MSC_VER

DBCacheRpcInsertReply::DBCacheRpcInsertReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DBCacheRpcInsertReply::InitAsDefaultInstance() {
}

DBCacheRpcInsertReply::DBCacheRpcInsertReply(const DBCacheRpcInsertReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DBCacheRpcInsertReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBCacheRpcInsertReply::~DBCacheRpcInsertReply() {
  SharedDtor();
}

void DBCacheRpcInsertReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBCacheRpcInsertReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBCacheRpcInsertReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBCacheRpcInsertReply_descriptor_;
}

const DBCacheRpcInsertReply& DBCacheRpcInsertReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBCacheSvrRpc_2eproto();
  return *default_instance_;
}

DBCacheRpcInsertReply* DBCacheRpcInsertReply::default_instance_ = NULL;

DBCacheRpcInsertReply* DBCacheRpcInsertReply::New() const {
  return new DBCacheRpcInsertReply;
}

void DBCacheRpcInsertReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBCacheRpcInsertReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DBCacheRpcInsertReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DBCacheRpcInsertReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DBCacheRpcInsertReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBCacheRpcInsertReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBCacheRpcInsertReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBCacheRpcInsertReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBCacheRpcInsertReply::MergeFrom(const DBCacheRpcInsertReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBCacheRpcInsertReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBCacheRpcInsertReply::CopyFrom(const DBCacheRpcInsertReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBCacheRpcInsertReply::IsInitialized() const {

  return true;
}

void DBCacheRpcInsertReply::Swap(DBCacheRpcInsertReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBCacheRpcInsertReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBCacheRpcInsertReply_descriptor_;
  metadata.reflection = DBCacheRpcInsertReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBCacheRpcDeleteAsk::kTabNameFieldNumber;
const int DBCacheRpcDeleteAsk::kPrimaryKeyFieldNumber;
const int DBCacheRpcDeleteAsk::kSubsidiaryKeyFieldNumber;
const int DBCacheRpcDeleteAsk::kTypeFieldNumber;
const int DBCacheRpcDeleteAsk::kKeyValueFieldNumber;
#endif  // !_MSC_VER

DBCacheRpcDeleteAsk::DBCacheRpcDeleteAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DBCacheRpcDeleteAsk::InitAsDefaultInstance() {
}

DBCacheRpcDeleteAsk::DBCacheRpcDeleteAsk(const DBCacheRpcDeleteAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DBCacheRpcDeleteAsk::SharedCtor() {
  _cached_size_ = 0;
  tabname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  primarykey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  subsidiarykey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  keyvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBCacheRpcDeleteAsk::~DBCacheRpcDeleteAsk() {
  SharedDtor();
}

void DBCacheRpcDeleteAsk::SharedDtor() {
  if (tabname_ != &::google::protobuf::internal::kEmptyString) {
    delete tabname_;
  }
  if (primarykey_ != &::google::protobuf::internal::kEmptyString) {
    delete primarykey_;
  }
  if (subsidiarykey_ != &::google::protobuf::internal::kEmptyString) {
    delete subsidiarykey_;
  }
  if (keyvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete keyvalue_;
  }
  if (this != default_instance_) {
  }
}

void DBCacheRpcDeleteAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBCacheRpcDeleteAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBCacheRpcDeleteAsk_descriptor_;
}

const DBCacheRpcDeleteAsk& DBCacheRpcDeleteAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBCacheSvrRpc_2eproto();
  return *default_instance_;
}

DBCacheRpcDeleteAsk* DBCacheRpcDeleteAsk::default_instance_ = NULL;

DBCacheRpcDeleteAsk* DBCacheRpcDeleteAsk::New() const {
  return new DBCacheRpcDeleteAsk;
}

void DBCacheRpcDeleteAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tabname()) {
      if (tabname_ != &::google::protobuf::internal::kEmptyString) {
        tabname_->clear();
      }
    }
    if (has_primarykey()) {
      if (primarykey_ != &::google::protobuf::internal::kEmptyString) {
        primarykey_->clear();
      }
    }
    if (has_subsidiarykey()) {
      if (subsidiarykey_ != &::google::protobuf::internal::kEmptyString) {
        subsidiarykey_->clear();
      }
    }
    type_ = 0;
    if (has_keyvalue()) {
      if (keyvalue_ != &::google::protobuf::internal::kEmptyString) {
        keyvalue_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBCacheRpcDeleteAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string TabName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tabname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tabname().data(), this->tabname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PrimaryKey;
        break;
      }

      // optional string PrimaryKey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PrimaryKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_primarykey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->primarykey().data(), this->primarykey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_SubsidiaryKey;
        break;
      }

      // optional string SubsidiaryKey = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SubsidiaryKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subsidiarykey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subsidiarykey().data(), this->subsidiarykey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Type;
        break;
      }

      // optional sint32 Type = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_KeyValue;
        break;
      }

      // optional string KeyValue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_KeyValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keyvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keyvalue().data(), this->keyvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DBCacheRpcDeleteAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string TabName = 1;
  if (has_tabname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tabname().data(), this->tabname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tabname(), output);
  }

  // optional string PrimaryKey = 2;
  if (has_primarykey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->primarykey().data(), this->primarykey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->primarykey(), output);
  }

  // optional string SubsidiaryKey = 3;
  if (has_subsidiarykey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subsidiarykey().data(), this->subsidiarykey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->subsidiarykey(), output);
  }

  // optional sint32 Type = 4 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->type(), output);
  }

  // optional string KeyValue = 5;
  if (has_keyvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keyvalue().data(), this->keyvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->keyvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DBCacheRpcDeleteAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string TabName = 1;
  if (has_tabname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tabname().data(), this->tabname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tabname(), target);
  }

  // optional string PrimaryKey = 2;
  if (has_primarykey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->primarykey().data(), this->primarykey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->primarykey(), target);
  }

  // optional string SubsidiaryKey = 3;
  if (has_subsidiarykey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subsidiarykey().data(), this->subsidiarykey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->subsidiarykey(), target);
  }

  // optional sint32 Type = 4 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->type(), target);
  }

  // optional string KeyValue = 5;
  if (has_keyvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keyvalue().data(), this->keyvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->keyvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DBCacheRpcDeleteAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string TabName = 1;
    if (has_tabname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tabname());
    }

    // optional string PrimaryKey = 2;
    if (has_primarykey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->primarykey());
    }

    // optional string SubsidiaryKey = 3;
    if (has_subsidiarykey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subsidiarykey());
    }

    // optional sint32 Type = 4 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

    // optional string KeyValue = 5;
    if (has_keyvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keyvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBCacheRpcDeleteAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBCacheRpcDeleteAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBCacheRpcDeleteAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBCacheRpcDeleteAsk::MergeFrom(const DBCacheRpcDeleteAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tabname()) {
      set_tabname(from.tabname());
    }
    if (from.has_primarykey()) {
      set_primarykey(from.primarykey());
    }
    if (from.has_subsidiarykey()) {
      set_subsidiarykey(from.subsidiarykey());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_keyvalue()) {
      set_keyvalue(from.keyvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBCacheRpcDeleteAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBCacheRpcDeleteAsk::CopyFrom(const DBCacheRpcDeleteAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBCacheRpcDeleteAsk::IsInitialized() const {

  return true;
}

void DBCacheRpcDeleteAsk::Swap(DBCacheRpcDeleteAsk* other) {
  if (other != this) {
    std::swap(tabname_, other->tabname_);
    std::swap(primarykey_, other->primarykey_);
    std::swap(subsidiarykey_, other->subsidiarykey_);
    std::swap(type_, other->type_);
    std::swap(keyvalue_, other->keyvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBCacheRpcDeleteAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBCacheRpcDeleteAsk_descriptor_;
  metadata.reflection = DBCacheRpcDeleteAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBCacheRpcDeleteReply::kResultFieldNumber;
const int DBCacheRpcDeleteReply::kNrAffectsFieldNumber;
#endif  // !_MSC_VER

DBCacheRpcDeleteReply::DBCacheRpcDeleteReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DBCacheRpcDeleteReply::InitAsDefaultInstance() {
}

DBCacheRpcDeleteReply::DBCacheRpcDeleteReply(const DBCacheRpcDeleteReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DBCacheRpcDeleteReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  nraffects_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBCacheRpcDeleteReply::~DBCacheRpcDeleteReply() {
  SharedDtor();
}

void DBCacheRpcDeleteReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBCacheRpcDeleteReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBCacheRpcDeleteReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBCacheRpcDeleteReply_descriptor_;
}

const DBCacheRpcDeleteReply& DBCacheRpcDeleteReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBCacheSvrRpc_2eproto();
  return *default_instance_;
}

DBCacheRpcDeleteReply* DBCacheRpcDeleteReply::default_instance_ = NULL;

DBCacheRpcDeleteReply* DBCacheRpcDeleteReply::New() const {
  return new DBCacheRpcDeleteReply;
}

void DBCacheRpcDeleteReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    nraffects_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBCacheRpcDeleteReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_NrAffects;
        break;
      }

      // optional sint32 NrAffects = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NrAffects:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nraffects_)));
          set_has_nraffects();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DBCacheRpcDeleteReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint32 NrAffects = 2 [default = 0];
  if (has_nraffects()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->nraffects(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DBCacheRpcDeleteReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint32 NrAffects = 2 [default = 0];
  if (has_nraffects()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->nraffects(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DBCacheRpcDeleteReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 NrAffects = 2 [default = 0];
    if (has_nraffects()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nraffects());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBCacheRpcDeleteReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBCacheRpcDeleteReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBCacheRpcDeleteReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBCacheRpcDeleteReply::MergeFrom(const DBCacheRpcDeleteReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_nraffects()) {
      set_nraffects(from.nraffects());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBCacheRpcDeleteReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBCacheRpcDeleteReply::CopyFrom(const DBCacheRpcDeleteReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBCacheRpcDeleteReply::IsInitialized() const {

  return true;
}

void DBCacheRpcDeleteReply::Swap(DBCacheRpcDeleteReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(nraffects_, other->nraffects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBCacheRpcDeleteReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBCacheRpcDeleteReply_descriptor_;
  metadata.reflection = DBCacheRpcDeleteReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBCacheRpcUpdateAsk::kTabNameFieldNumber;
const int DBCacheRpcUpdateAsk::kPrimaryKeyFieldNumber;
const int DBCacheRpcUpdateAsk::kSubsidiaryKeyFieldNumber;
const int DBCacheRpcUpdateAsk::kPKValueFieldNumber;
const int DBCacheRpcUpdateAsk::kFVArrayFieldNumber;
#endif  // !_MSC_VER

DBCacheRpcUpdateAsk::DBCacheRpcUpdateAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DBCacheRpcUpdateAsk::InitAsDefaultInstance() {
}

DBCacheRpcUpdateAsk::DBCacheRpcUpdateAsk(const DBCacheRpcUpdateAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DBCacheRpcUpdateAsk::SharedCtor() {
  _cached_size_ = 0;
  tabname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  primarykey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  subsidiarykey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pkvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBCacheRpcUpdateAsk::~DBCacheRpcUpdateAsk() {
  SharedDtor();
}

void DBCacheRpcUpdateAsk::SharedDtor() {
  if (tabname_ != &::google::protobuf::internal::kEmptyString) {
    delete tabname_;
  }
  if (primarykey_ != &::google::protobuf::internal::kEmptyString) {
    delete primarykey_;
  }
  if (subsidiarykey_ != &::google::protobuf::internal::kEmptyString) {
    delete subsidiarykey_;
  }
  if (pkvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete pkvalue_;
  }
  if (this != default_instance_) {
  }
}

void DBCacheRpcUpdateAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBCacheRpcUpdateAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBCacheRpcUpdateAsk_descriptor_;
}

const DBCacheRpcUpdateAsk& DBCacheRpcUpdateAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBCacheSvrRpc_2eproto();
  return *default_instance_;
}

DBCacheRpcUpdateAsk* DBCacheRpcUpdateAsk::default_instance_ = NULL;

DBCacheRpcUpdateAsk* DBCacheRpcUpdateAsk::New() const {
  return new DBCacheRpcUpdateAsk;
}

void DBCacheRpcUpdateAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tabname()) {
      if (tabname_ != &::google::protobuf::internal::kEmptyString) {
        tabname_->clear();
      }
    }
    if (has_primarykey()) {
      if (primarykey_ != &::google::protobuf::internal::kEmptyString) {
        primarykey_->clear();
      }
    }
    if (has_subsidiarykey()) {
      if (subsidiarykey_ != &::google::protobuf::internal::kEmptyString) {
        subsidiarykey_->clear();
      }
    }
    if (has_pkvalue()) {
      if (pkvalue_ != &::google::protobuf::internal::kEmptyString) {
        pkvalue_->clear();
      }
    }
  }
  fvarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBCacheRpcUpdateAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string TabName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tabname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tabname().data(), this->tabname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PrimaryKey;
        break;
      }

      // optional string PrimaryKey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PrimaryKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_primarykey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->primarykey().data(), this->primarykey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_PKValue;
        break;
      }

      // optional string PKValue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PKValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pkvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pkvalue().data(), this->pkvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_FVArray;
        break;
      }

      // repeated .DBCacheFV FVArray = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FVArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fvarray()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_FVArray;
        if (input->ExpectTag(50)) goto parse_SubsidiaryKey;
        break;
      }

      // optional string SubsidiaryKey = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SubsidiaryKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subsidiarykey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subsidiarykey().data(), this->subsidiarykey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DBCacheRpcUpdateAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string TabName = 1;
  if (has_tabname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tabname().data(), this->tabname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tabname(), output);
  }

  // optional string PrimaryKey = 2;
  if (has_primarykey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->primarykey().data(), this->primarykey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->primarykey(), output);
  }

  // optional string PKValue = 4;
  if (has_pkvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pkvalue().data(), this->pkvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->pkvalue(), output);
  }

  // repeated .DBCacheFV FVArray = 5;
  for (int i = 0; i < this->fvarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->fvarray(i), output);
  }

  // optional string SubsidiaryKey = 6;
  if (has_subsidiarykey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subsidiarykey().data(), this->subsidiarykey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->subsidiarykey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DBCacheRpcUpdateAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string TabName = 1;
  if (has_tabname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tabname().data(), this->tabname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tabname(), target);
  }

  // optional string PrimaryKey = 2;
  if (has_primarykey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->primarykey().data(), this->primarykey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->primarykey(), target);
  }

  // optional string PKValue = 4;
  if (has_pkvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pkvalue().data(), this->pkvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pkvalue(), target);
  }

  // repeated .DBCacheFV FVArray = 5;
  for (int i = 0; i < this->fvarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->fvarray(i), target);
  }

  // optional string SubsidiaryKey = 6;
  if (has_subsidiarykey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subsidiarykey().data(), this->subsidiarykey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->subsidiarykey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DBCacheRpcUpdateAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string TabName = 1;
    if (has_tabname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tabname());
    }

    // optional string PrimaryKey = 2;
    if (has_primarykey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->primarykey());
    }

    // optional string SubsidiaryKey = 6;
    if (has_subsidiarykey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subsidiarykey());
    }

    // optional string PKValue = 4;
    if (has_pkvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pkvalue());
    }

  }
  // repeated .DBCacheFV FVArray = 5;
  total_size += 1 * this->fvarray_size();
  for (int i = 0; i < this->fvarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fvarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBCacheRpcUpdateAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBCacheRpcUpdateAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBCacheRpcUpdateAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBCacheRpcUpdateAsk::MergeFrom(const DBCacheRpcUpdateAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  fvarray_.MergeFrom(from.fvarray_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tabname()) {
      set_tabname(from.tabname());
    }
    if (from.has_primarykey()) {
      set_primarykey(from.primarykey());
    }
    if (from.has_subsidiarykey()) {
      set_subsidiarykey(from.subsidiarykey());
    }
    if (from.has_pkvalue()) {
      set_pkvalue(from.pkvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBCacheRpcUpdateAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBCacheRpcUpdateAsk::CopyFrom(const DBCacheRpcUpdateAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBCacheRpcUpdateAsk::IsInitialized() const {

  return true;
}

void DBCacheRpcUpdateAsk::Swap(DBCacheRpcUpdateAsk* other) {
  if (other != this) {
    std::swap(tabname_, other->tabname_);
    std::swap(primarykey_, other->primarykey_);
    std::swap(subsidiarykey_, other->subsidiarykey_);
    std::swap(pkvalue_, other->pkvalue_);
    fvarray_.Swap(&other->fvarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBCacheRpcUpdateAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBCacheRpcUpdateAsk_descriptor_;
  metadata.reflection = DBCacheRpcUpdateAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBCacheRpcUpdateReply::kResultFieldNumber;
#endif  // !_MSC_VER

DBCacheRpcUpdateReply::DBCacheRpcUpdateReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DBCacheRpcUpdateReply::InitAsDefaultInstance() {
}

DBCacheRpcUpdateReply::DBCacheRpcUpdateReply(const DBCacheRpcUpdateReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DBCacheRpcUpdateReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBCacheRpcUpdateReply::~DBCacheRpcUpdateReply() {
  SharedDtor();
}

void DBCacheRpcUpdateReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBCacheRpcUpdateReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBCacheRpcUpdateReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBCacheRpcUpdateReply_descriptor_;
}

const DBCacheRpcUpdateReply& DBCacheRpcUpdateReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBCacheSvrRpc_2eproto();
  return *default_instance_;
}

DBCacheRpcUpdateReply* DBCacheRpcUpdateReply::default_instance_ = NULL;

DBCacheRpcUpdateReply* DBCacheRpcUpdateReply::New() const {
  return new DBCacheRpcUpdateReply;
}

void DBCacheRpcUpdateReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBCacheRpcUpdateReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DBCacheRpcUpdateReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DBCacheRpcUpdateReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DBCacheRpcUpdateReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBCacheRpcUpdateReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBCacheRpcUpdateReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBCacheRpcUpdateReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBCacheRpcUpdateReply::MergeFrom(const DBCacheRpcUpdateReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBCacheRpcUpdateReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBCacheRpcUpdateReply::CopyFrom(const DBCacheRpcUpdateReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBCacheRpcUpdateReply::IsInitialized() const {

  return true;
}

void DBCacheRpcUpdateReply::Swap(DBCacheRpcUpdateReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBCacheRpcUpdateReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBCacheRpcUpdateReply_descriptor_;
  metadata.reflection = DBCacheRpcUpdateReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBCacheRpcSelectAsk::kTabNameFieldNumber;
const int DBCacheRpcSelectAsk::kPrimaryKeyFieldNumber;
const int DBCacheRpcSelectAsk::kSubsidiaryKeyFieldNumber;
const int DBCacheRpcSelectAsk::kTypeFieldNumber;
const int DBCacheRpcSelectAsk::kKeyValueFieldNumber;
const int DBCacheRpcSelectAsk::kFieldsFieldNumber;
#endif  // !_MSC_VER

DBCacheRpcSelectAsk::DBCacheRpcSelectAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DBCacheRpcSelectAsk::InitAsDefaultInstance() {
}

DBCacheRpcSelectAsk::DBCacheRpcSelectAsk(const DBCacheRpcSelectAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DBCacheRpcSelectAsk::SharedCtor() {
  _cached_size_ = 0;
  tabname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  primarykey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  subsidiarykey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  keyvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBCacheRpcSelectAsk::~DBCacheRpcSelectAsk() {
  SharedDtor();
}

void DBCacheRpcSelectAsk::SharedDtor() {
  if (tabname_ != &::google::protobuf::internal::kEmptyString) {
    delete tabname_;
  }
  if (primarykey_ != &::google::protobuf::internal::kEmptyString) {
    delete primarykey_;
  }
  if (subsidiarykey_ != &::google::protobuf::internal::kEmptyString) {
    delete subsidiarykey_;
  }
  if (keyvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete keyvalue_;
  }
  if (this != default_instance_) {
  }
}

void DBCacheRpcSelectAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBCacheRpcSelectAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBCacheRpcSelectAsk_descriptor_;
}

const DBCacheRpcSelectAsk& DBCacheRpcSelectAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBCacheSvrRpc_2eproto();
  return *default_instance_;
}

DBCacheRpcSelectAsk* DBCacheRpcSelectAsk::default_instance_ = NULL;

DBCacheRpcSelectAsk* DBCacheRpcSelectAsk::New() const {
  return new DBCacheRpcSelectAsk;
}

void DBCacheRpcSelectAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tabname()) {
      if (tabname_ != &::google::protobuf::internal::kEmptyString) {
        tabname_->clear();
      }
    }
    if (has_primarykey()) {
      if (primarykey_ != &::google::protobuf::internal::kEmptyString) {
        primarykey_->clear();
      }
    }
    if (has_subsidiarykey()) {
      if (subsidiarykey_ != &::google::protobuf::internal::kEmptyString) {
        subsidiarykey_->clear();
      }
    }
    type_ = 0;
    if (has_keyvalue()) {
      if (keyvalue_ != &::google::protobuf::internal::kEmptyString) {
        keyvalue_->clear();
      }
    }
  }
  fields_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBCacheRpcSelectAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string TabName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tabname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tabname().data(), this->tabname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PrimaryKey;
        break;
      }

      // optional string PrimaryKey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PrimaryKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_primarykey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->primarykey().data(), this->primarykey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_SubsidiaryKey;
        break;
      }

      // optional string SubsidiaryKey = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SubsidiaryKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subsidiarykey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subsidiarykey().data(), this->subsidiarykey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Type;
        break;
      }

      // optional sint32 Type = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_KeyValue;
        break;
      }

      // optional string KeyValue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_KeyValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keyvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keyvalue().data(), this->keyvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Fields;
        break;
      }

      // repeated string Fields = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fields()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fields(this->fields_size() - 1).data(),
            this->fields(this->fields_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Fields;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DBCacheRpcSelectAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string TabName = 1;
  if (has_tabname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tabname().data(), this->tabname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tabname(), output);
  }

  // optional string PrimaryKey = 2;
  if (has_primarykey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->primarykey().data(), this->primarykey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->primarykey(), output);
  }

  // optional string SubsidiaryKey = 3;
  if (has_subsidiarykey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subsidiarykey().data(), this->subsidiarykey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->subsidiarykey(), output);
  }

  // optional sint32 Type = 4 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->type(), output);
  }

  // optional string KeyValue = 5;
  if (has_keyvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keyvalue().data(), this->keyvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->keyvalue(), output);
  }

  // repeated string Fields = 6;
  for (int i = 0; i < this->fields_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->fields(i).data(), this->fields(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->fields(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DBCacheRpcSelectAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string TabName = 1;
  if (has_tabname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tabname().data(), this->tabname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tabname(), target);
  }

  // optional string PrimaryKey = 2;
  if (has_primarykey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->primarykey().data(), this->primarykey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->primarykey(), target);
  }

  // optional string SubsidiaryKey = 3;
  if (has_subsidiarykey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subsidiarykey().data(), this->subsidiarykey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->subsidiarykey(), target);
  }

  // optional sint32 Type = 4 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->type(), target);
  }

  // optional string KeyValue = 5;
  if (has_keyvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keyvalue().data(), this->keyvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->keyvalue(), target);
  }

  // repeated string Fields = 6;
  for (int i = 0; i < this->fields_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fields(i).data(), this->fields(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->fields(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DBCacheRpcSelectAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string TabName = 1;
    if (has_tabname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tabname());
    }

    // optional string PrimaryKey = 2;
    if (has_primarykey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->primarykey());
    }

    // optional string SubsidiaryKey = 3;
    if (has_subsidiarykey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subsidiarykey());
    }

    // optional sint32 Type = 4 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

    // optional string KeyValue = 5;
    if (has_keyvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keyvalue());
    }

  }
  // repeated string Fields = 6;
  total_size += 1 * this->fields_size();
  for (int i = 0; i < this->fields_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fields(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBCacheRpcSelectAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBCacheRpcSelectAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBCacheRpcSelectAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBCacheRpcSelectAsk::MergeFrom(const DBCacheRpcSelectAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  fields_.MergeFrom(from.fields_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tabname()) {
      set_tabname(from.tabname());
    }
    if (from.has_primarykey()) {
      set_primarykey(from.primarykey());
    }
    if (from.has_subsidiarykey()) {
      set_subsidiarykey(from.subsidiarykey());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_keyvalue()) {
      set_keyvalue(from.keyvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBCacheRpcSelectAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBCacheRpcSelectAsk::CopyFrom(const DBCacheRpcSelectAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBCacheRpcSelectAsk::IsInitialized() const {

  return true;
}

void DBCacheRpcSelectAsk::Swap(DBCacheRpcSelectAsk* other) {
  if (other != this) {
    std::swap(tabname_, other->tabname_);
    std::swap(primarykey_, other->primarykey_);
    std::swap(subsidiarykey_, other->subsidiarykey_);
    std::swap(type_, other->type_);
    std::swap(keyvalue_, other->keyvalue_);
    fields_.Swap(&other->fields_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBCacheRpcSelectAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBCacheRpcSelectAsk_descriptor_;
  metadata.reflection = DBCacheRpcSelectAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBCacheRpcSelectReply::kResultFieldNumber;
const int DBCacheRpcSelectReply::kNrAffectsFieldNumber;
const int DBCacheRpcSelectReply::kFieldsFieldNumber;
const int DBCacheRpcSelectReply::kRecordsFieldNumber;
#endif  // !_MSC_VER

DBCacheRpcSelectReply::DBCacheRpcSelectReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DBCacheRpcSelectReply::InitAsDefaultInstance() {
}

DBCacheRpcSelectReply::DBCacheRpcSelectReply(const DBCacheRpcSelectReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DBCacheRpcSelectReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  nraffects_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBCacheRpcSelectReply::~DBCacheRpcSelectReply() {
  SharedDtor();
}

void DBCacheRpcSelectReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBCacheRpcSelectReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBCacheRpcSelectReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBCacheRpcSelectReply_descriptor_;
}

const DBCacheRpcSelectReply& DBCacheRpcSelectReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBCacheSvrRpc_2eproto();
  return *default_instance_;
}

DBCacheRpcSelectReply* DBCacheRpcSelectReply::default_instance_ = NULL;

DBCacheRpcSelectReply* DBCacheRpcSelectReply::New() const {
  return new DBCacheRpcSelectReply;
}

void DBCacheRpcSelectReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    nraffects_ = 0;
  }
  fields_.Clear();
  records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBCacheRpcSelectReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_NrAffects;
        break;
      }

      // optional sint32 NrAffects = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NrAffects:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nraffects_)));
          set_has_nraffects();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Fields;
        break;
      }

      // repeated string Fields = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fields()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fields(this->fields_size() - 1).data(),
            this->fields(this->fields_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Fields;
        if (input->ExpectTag(34)) goto parse_Records;
        break;
      }

      // repeated .DBCacheRecordLine Records = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Records;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DBCacheRpcSelectReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint32 NrAffects = 2 [default = 0];
  if (has_nraffects()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->nraffects(), output);
  }

  // repeated string Fields = 3;
  for (int i = 0; i < this->fields_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->fields(i).data(), this->fields(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->fields(i), output);
  }

  // repeated .DBCacheRecordLine Records = 4;
  for (int i = 0; i < this->records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->records(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DBCacheRpcSelectReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint32 NrAffects = 2 [default = 0];
  if (has_nraffects()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->nraffects(), target);
  }

  // repeated string Fields = 3;
  for (int i = 0; i < this->fields_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fields(i).data(), this->fields(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->fields(i), target);
  }

  // repeated .DBCacheRecordLine Records = 4;
  for (int i = 0; i < this->records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->records(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DBCacheRpcSelectReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 NrAffects = 2 [default = 0];
    if (has_nraffects()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nraffects());
    }

  }
  // repeated string Fields = 3;
  total_size += 1 * this->fields_size();
  for (int i = 0; i < this->fields_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fields(i));
  }

  // repeated .DBCacheRecordLine Records = 4;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBCacheRpcSelectReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBCacheRpcSelectReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBCacheRpcSelectReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBCacheRpcSelectReply::MergeFrom(const DBCacheRpcSelectReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  fields_.MergeFrom(from.fields_);
  records_.MergeFrom(from.records_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_nraffects()) {
      set_nraffects(from.nraffects());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBCacheRpcSelectReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBCacheRpcSelectReply::CopyFrom(const DBCacheRpcSelectReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBCacheRpcSelectReply::IsInitialized() const {

  return true;
}

void DBCacheRpcSelectReply::Swap(DBCacheRpcSelectReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(nraffects_, other->nraffects_);
    fields_.Swap(&other->fields_);
    records_.Swap(&other->records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBCacheRpcSelectReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBCacheRpcSelectReply_descriptor_;
  metadata.reflection = DBCacheRpcSelectReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBCacheFV::kFieldFieldNumber;
const int DBCacheFV::kValueFieldNumber;
#endif  // !_MSC_VER

DBCacheFV::DBCacheFV()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DBCacheFV::InitAsDefaultInstance() {
}

DBCacheFV::DBCacheFV(const DBCacheFV& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DBCacheFV::SharedCtor() {
  _cached_size_ = 0;
  field_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBCacheFV::~DBCacheFV() {
  SharedDtor();
}

void DBCacheFV::SharedDtor() {
  if (field_ != &::google::protobuf::internal::kEmptyString) {
    delete field_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void DBCacheFV::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBCacheFV::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBCacheFV_descriptor_;
}

const DBCacheFV& DBCacheFV::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBCacheSvrRpc_2eproto();
  return *default_instance_;
}

DBCacheFV* DBCacheFV::default_instance_ = NULL;

DBCacheFV* DBCacheFV::New() const {
  return new DBCacheFV;
}

void DBCacheFV::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_field()) {
      if (field_ != &::google::protobuf::internal::kEmptyString) {
        field_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBCacheFV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Field = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->field().data(), this->field().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Value;
        break;
      }

      // optional string Value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DBCacheFV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Field = 1;
  if (has_field()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field().data(), this->field().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->field(), output);
  }

  // optional string Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DBCacheFV::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Field = 1;
  if (has_field()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field().data(), this->field().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->field(), target);
  }

  // optional string Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DBCacheFV::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Field = 1;
    if (has_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->field());
    }

    // optional string Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBCacheFV::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBCacheFV* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBCacheFV*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBCacheFV::MergeFrom(const DBCacheFV& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field()) {
      set_field(from.field());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBCacheFV::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBCacheFV::CopyFrom(const DBCacheFV& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBCacheFV::IsInitialized() const {

  return true;
}

void DBCacheFV::Swap(DBCacheFV* other) {
  if (other != this) {
    std::swap(field_, other->field_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBCacheFV::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBCacheFV_descriptor_;
  metadata.reflection = DBCacheFV_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBCacheRecordLine::kValuesFieldNumber;
#endif  // !_MSC_VER

DBCacheRecordLine::DBCacheRecordLine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DBCacheRecordLine::InitAsDefaultInstance() {
}

DBCacheRecordLine::DBCacheRecordLine(const DBCacheRecordLine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DBCacheRecordLine::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBCacheRecordLine::~DBCacheRecordLine() {
  SharedDtor();
}

void DBCacheRecordLine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBCacheRecordLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBCacheRecordLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBCacheRecordLine_descriptor_;
}

const DBCacheRecordLine& DBCacheRecordLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBCacheSvrRpc_2eproto();
  return *default_instance_;
}

DBCacheRecordLine* DBCacheRecordLine::default_instance_ = NULL;

DBCacheRecordLine* DBCacheRecordLine::New() const {
  return new DBCacheRecordLine;
}

void DBCacheRecordLine::Clear() {
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBCacheRecordLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string Values = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_values()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->values(this->values_size() - 1).data(),
            this->values(this->values_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DBCacheRecordLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string Values = 2;
  for (int i = 0; i < this->values_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->values(i).data(), this->values(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DBCacheRecordLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string Values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->values(i).data(), this->values(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DBCacheRecordLine::ByteSize() const {
  int total_size = 0;

  // repeated string Values = 2;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBCacheRecordLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBCacheRecordLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBCacheRecordLine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBCacheRecordLine::MergeFrom(const DBCacheRecordLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBCacheRecordLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBCacheRecordLine::CopyFrom(const DBCacheRecordLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBCacheRecordLine::IsInitialized() const {

  return true;
}

void DBCacheRecordLine::Swap(DBCacheRecordLine* other) {
  if (other != this) {
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBCacheRecordLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBCacheRecordLine_descriptor_;
  metadata.reflection = DBCacheRecordLine_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
