// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EffectConfigCliRpc.proto

#ifndef PROTOBUF_EffectConfigCliRpc_2eproto__INCLUDED
#define PROTOBUF_EffectConfigCliRpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "PublicStruct.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_EffectConfigCliRpc_2eproto();
void protobuf_AssignDesc_EffectConfigCliRpc_2eproto();
void protobuf_ShutdownFile_EffectConfigCliRpc_2eproto();

class EffectConfigEffectGroup;
class EffectConfigEffect;

// ===================================================================

class EffectConfigEffectGroup : public ::google::protobuf::Message {
 public:
  EffectConfigEffectGroup();
  virtual ~EffectConfigEffectGroup();

  EffectConfigEffectGroup(const EffectConfigEffectGroup& from);

  inline EffectConfigEffectGroup& operator=(const EffectConfigEffectGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EffectConfigEffectGroup& default_instance();

  void Swap(EffectConfigEffectGroup* other);

  // implements Message ----------------------------------------------

  EffectConfigEffectGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EffectConfigEffectGroup& from);
  void MergeFrom(const EffectConfigEffectGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string EffectName = 2;
  inline bool has_effectname() const;
  inline void clear_effectname();
  static const int kEffectNameFieldNumber = 2;
  inline const ::std::string& effectname() const;
  inline void set_effectname(const ::std::string& value);
  inline void set_effectname(const char* value);
  inline void set_effectname(const char* value, size_t size);
  inline ::std::string* mutable_effectname();
  inline ::std::string* release_effectname();
  inline void set_allocated_effectname(::std::string* effectname);

  // repeated .EffectConfigEffect EffectList = 1;
  inline int effectlist_size() const;
  inline void clear_effectlist();
  static const int kEffectListFieldNumber = 1;
  inline const ::EffectConfigEffect& effectlist(int index) const;
  inline ::EffectConfigEffect* mutable_effectlist(int index);
  inline ::EffectConfigEffect* add_effectlist();
  inline const ::google::protobuf::RepeatedPtrField< ::EffectConfigEffect >&
      effectlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::EffectConfigEffect >*
      mutable_effectlist();

  // @@protoc_insertion_point(class_scope:EffectConfigEffectGroup)
 private:
  inline void set_has_effectname();
  inline void clear_has_effectname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* effectname_;
  ::google::protobuf::RepeatedPtrField< ::EffectConfigEffect > effectlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_EffectConfigCliRpc_2eproto();
  friend void protobuf_AssignDesc_EffectConfigCliRpc_2eproto();
  friend void protobuf_ShutdownFile_EffectConfigCliRpc_2eproto();

  void InitAsDefaultInstance();
  static EffectConfigEffectGroup* default_instance_;
};
// -------------------------------------------------------------------

class EffectConfigEffect : public ::google::protobuf::Message {
 public:
  EffectConfigEffect();
  virtual ~EffectConfigEffect();

  EffectConfigEffect(const EffectConfigEffect& from);

  inline EffectConfigEffect& operator=(const EffectConfigEffect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EffectConfigEffect& default_instance();

  void Swap(EffectConfigEffect* other);

  // implements Message ----------------------------------------------

  EffectConfigEffect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EffectConfigEffect& from);
  void MergeFrom(const EffectConfigEffect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string EffectName = 1;
  inline bool has_effectname() const;
  inline void clear_effectname();
  static const int kEffectNameFieldNumber = 1;
  inline const ::std::string& effectname() const;
  inline void set_effectname(const ::std::string& value);
  inline void set_effectname(const char* value);
  inline void set_effectname(const char* value, size_t size);
  inline ::std::string* mutable_effectname();
  inline ::std::string* release_effectname();
  inline void set_allocated_effectname(::std::string* effectname);

  // optional sint32 EffectType = 2 [default = 0];
  inline bool has_effecttype() const;
  inline void clear_effecttype();
  static const int kEffectTypeFieldNumber = 2;
  inline ::google::protobuf::int32 effecttype() const;
  inline void set_effecttype(::google::protobuf::int32 value);

  // optional sint32 EffectParameter = 3 [default = 0];
  inline bool has_effectparameter() const;
  inline void clear_effectparameter();
  static const int kEffectParameterFieldNumber = 3;
  inline ::google::protobuf::int32 effectparameter() const;
  inline void set_effectparameter(::google::protobuf::int32 value);

  // repeated string ParamerList = 4;
  inline int paramerlist_size() const;
  inline void clear_paramerlist();
  static const int kParamerListFieldNumber = 4;
  inline const ::std::string& paramerlist(int index) const;
  inline ::std::string* mutable_paramerlist(int index);
  inline void set_paramerlist(int index, const ::std::string& value);
  inline void set_paramerlist(int index, const char* value);
  inline void set_paramerlist(int index, const char* value, size_t size);
  inline ::std::string* add_paramerlist();
  inline void add_paramerlist(const ::std::string& value);
  inline void add_paramerlist(const char* value);
  inline void add_paramerlist(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& paramerlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_paramerlist();

  // @@protoc_insertion_point(class_scope:EffectConfigEffect)
 private:
  inline void set_has_effectname();
  inline void clear_has_effectname();
  inline void set_has_effecttype();
  inline void clear_has_effecttype();
  inline void set_has_effectparameter();
  inline void clear_has_effectparameter();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* effectname_;
  ::google::protobuf::int32 effecttype_;
  ::google::protobuf::int32 effectparameter_;
  ::google::protobuf::RepeatedPtrField< ::std::string> paramerlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_EffectConfigCliRpc_2eproto();
  friend void protobuf_AssignDesc_EffectConfigCliRpc_2eproto();
  friend void protobuf_ShutdownFile_EffectConfigCliRpc_2eproto();

  void InitAsDefaultInstance();
  static EffectConfigEffect* default_instance_;
};
// ===================================================================


// ===================================================================

// EffectConfigEffectGroup

// optional string EffectName = 2;
inline bool EffectConfigEffectGroup::has_effectname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EffectConfigEffectGroup::set_has_effectname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EffectConfigEffectGroup::clear_has_effectname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EffectConfigEffectGroup::clear_effectname() {
  if (effectname_ != &::google::protobuf::internal::kEmptyString) {
    effectname_->clear();
  }
  clear_has_effectname();
}
inline const ::std::string& EffectConfigEffectGroup::effectname() const {
  return *effectname_;
}
inline void EffectConfigEffectGroup::set_effectname(const ::std::string& value) {
  set_has_effectname();
  if (effectname_ == &::google::protobuf::internal::kEmptyString) {
    effectname_ = new ::std::string;
  }
  effectname_->assign(value);
}
inline void EffectConfigEffectGroup::set_effectname(const char* value) {
  set_has_effectname();
  if (effectname_ == &::google::protobuf::internal::kEmptyString) {
    effectname_ = new ::std::string;
  }
  effectname_->assign(value);
}
inline void EffectConfigEffectGroup::set_effectname(const char* value, size_t size) {
  set_has_effectname();
  if (effectname_ == &::google::protobuf::internal::kEmptyString) {
    effectname_ = new ::std::string;
  }
  effectname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EffectConfigEffectGroup::mutable_effectname() {
  set_has_effectname();
  if (effectname_ == &::google::protobuf::internal::kEmptyString) {
    effectname_ = new ::std::string;
  }
  return effectname_;
}
inline ::std::string* EffectConfigEffectGroup::release_effectname() {
  clear_has_effectname();
  if (effectname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = effectname_;
    effectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EffectConfigEffectGroup::set_allocated_effectname(::std::string* effectname) {
  if (effectname_ != &::google::protobuf::internal::kEmptyString) {
    delete effectname_;
  }
  if (effectname) {
    set_has_effectname();
    effectname_ = effectname;
  } else {
    clear_has_effectname();
    effectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .EffectConfigEffect EffectList = 1;
inline int EffectConfigEffectGroup::effectlist_size() const {
  return effectlist_.size();
}
inline void EffectConfigEffectGroup::clear_effectlist() {
  effectlist_.Clear();
}
inline const ::EffectConfigEffect& EffectConfigEffectGroup::effectlist(int index) const {
  return effectlist_.Get(index);
}
inline ::EffectConfigEffect* EffectConfigEffectGroup::mutable_effectlist(int index) {
  return effectlist_.Mutable(index);
}
inline ::EffectConfigEffect* EffectConfigEffectGroup::add_effectlist() {
  return effectlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EffectConfigEffect >&
EffectConfigEffectGroup::effectlist() const {
  return effectlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::EffectConfigEffect >*
EffectConfigEffectGroup::mutable_effectlist() {
  return &effectlist_;
}

// -------------------------------------------------------------------

// EffectConfigEffect

// optional string EffectName = 1;
inline bool EffectConfigEffect::has_effectname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EffectConfigEffect::set_has_effectname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EffectConfigEffect::clear_has_effectname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EffectConfigEffect::clear_effectname() {
  if (effectname_ != &::google::protobuf::internal::kEmptyString) {
    effectname_->clear();
  }
  clear_has_effectname();
}
inline const ::std::string& EffectConfigEffect::effectname() const {
  return *effectname_;
}
inline void EffectConfigEffect::set_effectname(const ::std::string& value) {
  set_has_effectname();
  if (effectname_ == &::google::protobuf::internal::kEmptyString) {
    effectname_ = new ::std::string;
  }
  effectname_->assign(value);
}
inline void EffectConfigEffect::set_effectname(const char* value) {
  set_has_effectname();
  if (effectname_ == &::google::protobuf::internal::kEmptyString) {
    effectname_ = new ::std::string;
  }
  effectname_->assign(value);
}
inline void EffectConfigEffect::set_effectname(const char* value, size_t size) {
  set_has_effectname();
  if (effectname_ == &::google::protobuf::internal::kEmptyString) {
    effectname_ = new ::std::string;
  }
  effectname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EffectConfigEffect::mutable_effectname() {
  set_has_effectname();
  if (effectname_ == &::google::protobuf::internal::kEmptyString) {
    effectname_ = new ::std::string;
  }
  return effectname_;
}
inline ::std::string* EffectConfigEffect::release_effectname() {
  clear_has_effectname();
  if (effectname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = effectname_;
    effectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EffectConfigEffect::set_allocated_effectname(::std::string* effectname) {
  if (effectname_ != &::google::protobuf::internal::kEmptyString) {
    delete effectname_;
  }
  if (effectname) {
    set_has_effectname();
    effectname_ = effectname;
  } else {
    clear_has_effectname();
    effectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional sint32 EffectType = 2 [default = 0];
inline bool EffectConfigEffect::has_effecttype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EffectConfigEffect::set_has_effecttype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EffectConfigEffect::clear_has_effecttype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EffectConfigEffect::clear_effecttype() {
  effecttype_ = 0;
  clear_has_effecttype();
}
inline ::google::protobuf::int32 EffectConfigEffect::effecttype() const {
  return effecttype_;
}
inline void EffectConfigEffect::set_effecttype(::google::protobuf::int32 value) {
  set_has_effecttype();
  effecttype_ = value;
}

// optional sint32 EffectParameter = 3 [default = 0];
inline bool EffectConfigEffect::has_effectparameter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EffectConfigEffect::set_has_effectparameter() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EffectConfigEffect::clear_has_effectparameter() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EffectConfigEffect::clear_effectparameter() {
  effectparameter_ = 0;
  clear_has_effectparameter();
}
inline ::google::protobuf::int32 EffectConfigEffect::effectparameter() const {
  return effectparameter_;
}
inline void EffectConfigEffect::set_effectparameter(::google::protobuf::int32 value) {
  set_has_effectparameter();
  effectparameter_ = value;
}

// repeated string ParamerList = 4;
inline int EffectConfigEffect::paramerlist_size() const {
  return paramerlist_.size();
}
inline void EffectConfigEffect::clear_paramerlist() {
  paramerlist_.Clear();
}
inline const ::std::string& EffectConfigEffect::paramerlist(int index) const {
  return paramerlist_.Get(index);
}
inline ::std::string* EffectConfigEffect::mutable_paramerlist(int index) {
  return paramerlist_.Mutable(index);
}
inline void EffectConfigEffect::set_paramerlist(int index, const ::std::string& value) {
  paramerlist_.Mutable(index)->assign(value);
}
inline void EffectConfigEffect::set_paramerlist(int index, const char* value) {
  paramerlist_.Mutable(index)->assign(value);
}
inline void EffectConfigEffect::set_paramerlist(int index, const char* value, size_t size) {
  paramerlist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EffectConfigEffect::add_paramerlist() {
  return paramerlist_.Add();
}
inline void EffectConfigEffect::add_paramerlist(const ::std::string& value) {
  paramerlist_.Add()->assign(value);
}
inline void EffectConfigEffect::add_paramerlist(const char* value) {
  paramerlist_.Add()->assign(value);
}
inline void EffectConfigEffect::add_paramerlist(const char* value, size_t size) {
  paramerlist_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
EffectConfigEffect::paramerlist() const {
  return paramerlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
EffectConfigEffect::mutable_paramerlist() {
  return &paramerlist_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_EffectConfigCliRpc_2eproto__INCLUDED
