// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TeamCliRpc.proto

#ifndef PROTOBUF_TeamCliRpc_2eproto__INCLUDED
#define PROTOBUF_TeamCliRpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "PublicStruct.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TeamCliRpc_2eproto();
void protobuf_AssignDesc_TeamCliRpc_2eproto();
void protobuf_ShutdownFile_TeamCliRpc_2eproto();

class TeamRpcPullTeammateAsk;
class TeamRpcPullTeammateReply;
class TeamRpcAddTeamNoifyNotify;
class TeamRpcGetTeamNotify;
class TeamRpcCtrlTeamAsk;
class TeamRpcCtrlTeamReply;
class TeamRpcFindTeamAsk;
class TeamRpcFindTeamReply;
class TeamTeamV;

// ===================================================================

class TeamRpcPullTeammateAsk : public ::google::protobuf::Message {
 public:
  TeamRpcPullTeammateAsk();
  virtual ~TeamRpcPullTeammateAsk();

  TeamRpcPullTeammateAsk(const TeamRpcPullTeammateAsk& from);

  inline TeamRpcPullTeammateAsk& operator=(const TeamRpcPullTeammateAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcPullTeammateAsk& default_instance();

  void Swap(TeamRpcPullTeammateAsk* other);

  // implements Message ----------------------------------------------

  TeamRpcPullTeammateAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamRpcPullTeammateAsk& from);
  void MergeFrom(const TeamRpcPullTeammateAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 UID = 1 [default = -1];
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUIDFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional string UserName = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional sint32 Type = 3 [default = 0];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TeamRpcPullTeammateAsk)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_TeamCliRpc_2eproto();
  friend void protobuf_AssignDesc_TeamCliRpc_2eproto();
  friend void protobuf_ShutdownFile_TeamCliRpc_2eproto();

  void InitAsDefaultInstance();
  static TeamRpcPullTeammateAsk* default_instance_;
};
// -------------------------------------------------------------------

class TeamRpcPullTeammateReply : public ::google::protobuf::Message {
 public:
  TeamRpcPullTeammateReply();
  virtual ~TeamRpcPullTeammateReply();

  TeamRpcPullTeammateReply(const TeamRpcPullTeammateReply& from);

  inline TeamRpcPullTeammateReply& operator=(const TeamRpcPullTeammateReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcPullTeammateReply& default_instance();

  void Swap(TeamRpcPullTeammateReply* other);

  // implements Message ----------------------------------------------

  TeamRpcPullTeammateReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamRpcPullTeammateReply& from);
  void MergeFrom(const TeamRpcPullTeammateReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional sint32 UID = 2 [default = -1];
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUIDFieldNumber = 2;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional string UserName = 3;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 3;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional sint32 Type = 4 [default = 0];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TeamRpcPullTeammateReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 uid_;
  ::std::string* username_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_TeamCliRpc_2eproto();
  friend void protobuf_AssignDesc_TeamCliRpc_2eproto();
  friend void protobuf_ShutdownFile_TeamCliRpc_2eproto();

  void InitAsDefaultInstance();
  static TeamRpcPullTeammateReply* default_instance_;
};
// -------------------------------------------------------------------

class TeamRpcAddTeamNoifyNotify : public ::google::protobuf::Message {
 public:
  TeamRpcAddTeamNoifyNotify();
  virtual ~TeamRpcAddTeamNoifyNotify();

  TeamRpcAddTeamNoifyNotify(const TeamRpcAddTeamNoifyNotify& from);

  inline TeamRpcAddTeamNoifyNotify& operator=(const TeamRpcAddTeamNoifyNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcAddTeamNoifyNotify& default_instance();

  void Swap(TeamRpcAddTeamNoifyNotify* other);

  // implements Message ----------------------------------------------

  TeamRpcAddTeamNoifyNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamRpcAddTeamNoifyNotify& from);
  void MergeFrom(const TeamRpcAddTeamNoifyNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SmallUser User = 3;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 3;
  inline const ::SmallUser& user() const;
  inline ::SmallUser* mutable_user();
  inline ::SmallUser* release_user();
  inline void set_allocated_user(::SmallUser* user);

  // optional .SmallUser BeUser = 4;
  inline bool has_beuser() const;
  inline void clear_beuser();
  static const int kBeUserFieldNumber = 4;
  inline const ::SmallUser& beuser() const;
  inline ::SmallUser* mutable_beuser();
  inline ::SmallUser* release_beuser();
  inline void set_allocated_beuser(::SmallUser* beuser);

  // optional sint32 IsOk = 6 [default = -1];
  inline bool has_isok() const;
  inline void clear_isok();
  static const int kIsOkFieldNumber = 6;
  inline ::google::protobuf::int32 isok() const;
  inline void set_isok(::google::protobuf::int32 value);

  // optional sint32 Type = 7 [default = 0];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TeamRpcAddTeamNoifyNotify)
 private:
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_beuser();
  inline void clear_has_beuser();
  inline void set_has_isok();
  inline void clear_has_isok();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SmallUser* user_;
  ::SmallUser* beuser_;
  ::google::protobuf::int32 isok_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_TeamCliRpc_2eproto();
  friend void protobuf_AssignDesc_TeamCliRpc_2eproto();
  friend void protobuf_ShutdownFile_TeamCliRpc_2eproto();

  void InitAsDefaultInstance();
  static TeamRpcAddTeamNoifyNotify* default_instance_;
};
// -------------------------------------------------------------------

class TeamRpcGetTeamNotify : public ::google::protobuf::Message {
 public:
  TeamRpcGetTeamNotify();
  virtual ~TeamRpcGetTeamNotify();

  TeamRpcGetTeamNotify(const TeamRpcGetTeamNotify& from);

  inline TeamRpcGetTeamNotify& operator=(const TeamRpcGetTeamNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcGetTeamNotify& default_instance();

  void Swap(TeamRpcGetTeamNotify* other);

  // implements Message ----------------------------------------------

  TeamRpcGetTeamNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamRpcGetTeamNotify& from);
  void MergeFrom(const TeamRpcGetTeamNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TeamTeamV Team = 1;
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 1;
  inline const ::TeamTeamV& team() const;
  inline ::TeamTeamV* mutable_team();
  inline ::TeamTeamV* release_team();
  inline void set_allocated_team(::TeamTeamV* team);

  // @@protoc_insertion_point(class_scope:TeamRpcGetTeamNotify)
 private:
  inline void set_has_team();
  inline void clear_has_team();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TeamTeamV* team_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_TeamCliRpc_2eproto();
  friend void protobuf_AssignDesc_TeamCliRpc_2eproto();
  friend void protobuf_ShutdownFile_TeamCliRpc_2eproto();

  void InitAsDefaultInstance();
  static TeamRpcGetTeamNotify* default_instance_;
};
// -------------------------------------------------------------------

class TeamRpcCtrlTeamAsk : public ::google::protobuf::Message {
 public:
  TeamRpcCtrlTeamAsk();
  virtual ~TeamRpcCtrlTeamAsk();

  TeamRpcCtrlTeamAsk(const TeamRpcCtrlTeamAsk& from);

  inline TeamRpcCtrlTeamAsk& operator=(const TeamRpcCtrlTeamAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcCtrlTeamAsk& default_instance();

  void Swap(TeamRpcCtrlTeamAsk* other);

  // implements Message ----------------------------------------------

  TeamRpcCtrlTeamAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamRpcCtrlTeamAsk& from);
  void MergeFrom(const TeamRpcCtrlTeamAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Type = 1 [default = -1];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional sint32 UID = 3 [default = -1];
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUIDFieldNumber = 3;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TeamRpcCtrlTeamAsk)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TeamCliRpc_2eproto();
  friend void protobuf_AssignDesc_TeamCliRpc_2eproto();
  friend void protobuf_ShutdownFile_TeamCliRpc_2eproto();

  void InitAsDefaultInstance();
  static TeamRpcCtrlTeamAsk* default_instance_;
};
// -------------------------------------------------------------------

class TeamRpcCtrlTeamReply : public ::google::protobuf::Message {
 public:
  TeamRpcCtrlTeamReply();
  virtual ~TeamRpcCtrlTeamReply();

  TeamRpcCtrlTeamReply(const TeamRpcCtrlTeamReply& from);

  inline TeamRpcCtrlTeamReply& operator=(const TeamRpcCtrlTeamReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcCtrlTeamReply& default_instance();

  void Swap(TeamRpcCtrlTeamReply* other);

  // implements Message ----------------------------------------------

  TeamRpcCtrlTeamReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamRpcCtrlTeamReply& from);
  void MergeFrom(const TeamRpcCtrlTeamReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional sint32 Type = 2 [default = -1];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional sint32 UID = 3 [default = -1];
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUIDFieldNumber = 3;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TeamRpcCtrlTeamReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_TeamCliRpc_2eproto();
  friend void protobuf_AssignDesc_TeamCliRpc_2eproto();
  friend void protobuf_ShutdownFile_TeamCliRpc_2eproto();

  void InitAsDefaultInstance();
  static TeamRpcCtrlTeamReply* default_instance_;
};
// -------------------------------------------------------------------

class TeamRpcFindTeamAsk : public ::google::protobuf::Message {
 public:
  TeamRpcFindTeamAsk();
  virtual ~TeamRpcFindTeamAsk();

  TeamRpcFindTeamAsk(const TeamRpcFindTeamAsk& from);

  inline TeamRpcFindTeamAsk& operator=(const TeamRpcFindTeamAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcFindTeamAsk& default_instance();

  void Swap(TeamRpcFindTeamAsk* other);

  // implements Message ----------------------------------------------

  TeamRpcFindTeamAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamRpcFindTeamAsk& from);
  void MergeFrom(const TeamRpcFindTeamAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 TeamID = 1 [default = -1];
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIDFieldNumber = 1;
  inline ::google::protobuf::int64 teamid() const;
  inline void set_teamid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:TeamRpcFindTeamAsk)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 teamid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_TeamCliRpc_2eproto();
  friend void protobuf_AssignDesc_TeamCliRpc_2eproto();
  friend void protobuf_ShutdownFile_TeamCliRpc_2eproto();

  void InitAsDefaultInstance();
  static TeamRpcFindTeamAsk* default_instance_;
};
// -------------------------------------------------------------------

class TeamRpcFindTeamReply : public ::google::protobuf::Message {
 public:
  TeamRpcFindTeamReply();
  virtual ~TeamRpcFindTeamReply();

  TeamRpcFindTeamReply(const TeamRpcFindTeamReply& from);

  inline TeamRpcFindTeamReply& operator=(const TeamRpcFindTeamReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcFindTeamReply& default_instance();

  void Swap(TeamRpcFindTeamReply* other);

  // implements Message ----------------------------------------------

  TeamRpcFindTeamReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamRpcFindTeamReply& from);
  void MergeFrom(const TeamRpcFindTeamReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .TeamTeamV Teams = 2;
  inline int teams_size() const;
  inline void clear_teams();
  static const int kTeamsFieldNumber = 2;
  inline const ::TeamTeamV& teams(int index) const;
  inline ::TeamTeamV* mutable_teams(int index);
  inline ::TeamTeamV* add_teams();
  inline const ::google::protobuf::RepeatedPtrField< ::TeamTeamV >&
      teams() const;
  inline ::google::protobuf::RepeatedPtrField< ::TeamTeamV >*
      mutable_teams();

  // @@protoc_insertion_point(class_scope:TeamRpcFindTeamReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::TeamTeamV > teams_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TeamCliRpc_2eproto();
  friend void protobuf_AssignDesc_TeamCliRpc_2eproto();
  friend void protobuf_ShutdownFile_TeamCliRpc_2eproto();

  void InitAsDefaultInstance();
  static TeamRpcFindTeamReply* default_instance_;
};
// -------------------------------------------------------------------

class TeamTeamV : public ::google::protobuf::Message {
 public:
  TeamTeamV();
  virtual ~TeamTeamV();

  TeamTeamV(const TeamTeamV& from);

  inline TeamTeamV& operator=(const TeamTeamV& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamTeamV& default_instance();

  void Swap(TeamTeamV* other);

  // implements Message ----------------------------------------------

  TeamTeamV* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamTeamV& from);
  void MergeFrom(const TeamTeamV& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 TeamID = 1 [default = -1];
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIDFieldNumber = 1;
  inline ::google::protobuf::int32 teamid() const;
  inline void set_teamid(::google::protobuf::int32 value);

  // repeated .SmallUser Role = 2;
  inline int role_size() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 2;
  inline const ::SmallUser& role(int index) const;
  inline ::SmallUser* mutable_role(int index);
  inline ::SmallUser* add_role();
  inline const ::google::protobuf::RepeatedPtrField< ::SmallUser >&
      role() const;
  inline ::google::protobuf::RepeatedPtrField< ::SmallUser >*
      mutable_role();

  // optional sint32 CaptainID = 3 [default = -1];
  inline bool has_captainid() const;
  inline void clear_captainid();
  static const int kCaptainIDFieldNumber = 3;
  inline ::google::protobuf::int32 captainid() const;
  inline void set_captainid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TeamTeamV)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_captainid();
  inline void clear_has_captainid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SmallUser > role_;
  ::google::protobuf::int32 teamid_;
  ::google::protobuf::int32 captainid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_TeamCliRpc_2eproto();
  friend void protobuf_AssignDesc_TeamCliRpc_2eproto();
  friend void protobuf_ShutdownFile_TeamCliRpc_2eproto();

  void InitAsDefaultInstance();
  static TeamTeamV* default_instance_;
};
// ===================================================================


// ===================================================================

// TeamRpcPullTeammateAsk

// optional sint32 UID = 1 [default = -1];
inline bool TeamRpcPullTeammateAsk::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcPullTeammateAsk::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcPullTeammateAsk::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcPullTeammateAsk::clear_uid() {
  uid_ = -1;
  clear_has_uid();
}
inline ::google::protobuf::int32 TeamRpcPullTeammateAsk::uid() const {
  return uid_;
}
inline void TeamRpcPullTeammateAsk::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
}

// optional string UserName = 2;
inline bool TeamRpcPullTeammateAsk::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamRpcPullTeammateAsk::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamRpcPullTeammateAsk::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamRpcPullTeammateAsk::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& TeamRpcPullTeammateAsk::username() const {
  return *username_;
}
inline void TeamRpcPullTeammateAsk::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void TeamRpcPullTeammateAsk::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void TeamRpcPullTeammateAsk::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TeamRpcPullTeammateAsk::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* TeamRpcPullTeammateAsk::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TeamRpcPullTeammateAsk::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional sint32 Type = 3 [default = 0];
inline bool TeamRpcPullTeammateAsk::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamRpcPullTeammateAsk::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamRpcPullTeammateAsk::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamRpcPullTeammateAsk::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 TeamRpcPullTeammateAsk::type() const {
  return type_;
}
inline void TeamRpcPullTeammateAsk::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// TeamRpcPullTeammateReply

// optional sint32 Result = 1 [default = -9999];
inline bool TeamRpcPullTeammateReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcPullTeammateReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcPullTeammateReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcPullTeammateReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 TeamRpcPullTeammateReply::result() const {
  return result_;
}
inline void TeamRpcPullTeammateReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional sint32 UID = 2 [default = -1];
inline bool TeamRpcPullTeammateReply::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamRpcPullTeammateReply::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamRpcPullTeammateReply::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamRpcPullTeammateReply::clear_uid() {
  uid_ = -1;
  clear_has_uid();
}
inline ::google::protobuf::int32 TeamRpcPullTeammateReply::uid() const {
  return uid_;
}
inline void TeamRpcPullTeammateReply::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
}

// optional string UserName = 3;
inline bool TeamRpcPullTeammateReply::has_username() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamRpcPullTeammateReply::set_has_username() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamRpcPullTeammateReply::clear_has_username() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamRpcPullTeammateReply::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& TeamRpcPullTeammateReply::username() const {
  return *username_;
}
inline void TeamRpcPullTeammateReply::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void TeamRpcPullTeammateReply::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void TeamRpcPullTeammateReply::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TeamRpcPullTeammateReply::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* TeamRpcPullTeammateReply::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TeamRpcPullTeammateReply::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional sint32 Type = 4 [default = 0];
inline bool TeamRpcPullTeammateReply::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeamRpcPullTeammateReply::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeamRpcPullTeammateReply::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TeamRpcPullTeammateReply::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 TeamRpcPullTeammateReply::type() const {
  return type_;
}
inline void TeamRpcPullTeammateReply::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// TeamRpcAddTeamNoifyNotify

// optional .SmallUser User = 3;
inline bool TeamRpcAddTeamNoifyNotify::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcAddTeamNoifyNotify::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcAddTeamNoifyNotify::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcAddTeamNoifyNotify::clear_user() {
  if (user_ != NULL) user_->::SmallUser::Clear();
  clear_has_user();
}
inline const ::SmallUser& TeamRpcAddTeamNoifyNotify::user() const {
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::SmallUser* TeamRpcAddTeamNoifyNotify::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::SmallUser;
  return user_;
}
inline ::SmallUser* TeamRpcAddTeamNoifyNotify::release_user() {
  clear_has_user();
  ::SmallUser* temp = user_;
  user_ = NULL;
  return temp;
}
inline void TeamRpcAddTeamNoifyNotify::set_allocated_user(::SmallUser* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
}

// optional .SmallUser BeUser = 4;
inline bool TeamRpcAddTeamNoifyNotify::has_beuser() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamRpcAddTeamNoifyNotify::set_has_beuser() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamRpcAddTeamNoifyNotify::clear_has_beuser() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamRpcAddTeamNoifyNotify::clear_beuser() {
  if (beuser_ != NULL) beuser_->::SmallUser::Clear();
  clear_has_beuser();
}
inline const ::SmallUser& TeamRpcAddTeamNoifyNotify::beuser() const {
  return beuser_ != NULL ? *beuser_ : *default_instance_->beuser_;
}
inline ::SmallUser* TeamRpcAddTeamNoifyNotify::mutable_beuser() {
  set_has_beuser();
  if (beuser_ == NULL) beuser_ = new ::SmallUser;
  return beuser_;
}
inline ::SmallUser* TeamRpcAddTeamNoifyNotify::release_beuser() {
  clear_has_beuser();
  ::SmallUser* temp = beuser_;
  beuser_ = NULL;
  return temp;
}
inline void TeamRpcAddTeamNoifyNotify::set_allocated_beuser(::SmallUser* beuser) {
  delete beuser_;
  beuser_ = beuser;
  if (beuser) {
    set_has_beuser();
  } else {
    clear_has_beuser();
  }
}

// optional sint32 IsOk = 6 [default = -1];
inline bool TeamRpcAddTeamNoifyNotify::has_isok() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamRpcAddTeamNoifyNotify::set_has_isok() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamRpcAddTeamNoifyNotify::clear_has_isok() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamRpcAddTeamNoifyNotify::clear_isok() {
  isok_ = -1;
  clear_has_isok();
}
inline ::google::protobuf::int32 TeamRpcAddTeamNoifyNotify::isok() const {
  return isok_;
}
inline void TeamRpcAddTeamNoifyNotify::set_isok(::google::protobuf::int32 value) {
  set_has_isok();
  isok_ = value;
}

// optional sint32 Type = 7 [default = 0];
inline bool TeamRpcAddTeamNoifyNotify::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeamRpcAddTeamNoifyNotify::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeamRpcAddTeamNoifyNotify::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TeamRpcAddTeamNoifyNotify::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 TeamRpcAddTeamNoifyNotify::type() const {
  return type_;
}
inline void TeamRpcAddTeamNoifyNotify::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// TeamRpcGetTeamNotify

// optional .TeamTeamV Team = 1;
inline bool TeamRpcGetTeamNotify::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcGetTeamNotify::set_has_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcGetTeamNotify::clear_has_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcGetTeamNotify::clear_team() {
  if (team_ != NULL) team_->::TeamTeamV::Clear();
  clear_has_team();
}
inline const ::TeamTeamV& TeamRpcGetTeamNotify::team() const {
  return team_ != NULL ? *team_ : *default_instance_->team_;
}
inline ::TeamTeamV* TeamRpcGetTeamNotify::mutable_team() {
  set_has_team();
  if (team_ == NULL) team_ = new ::TeamTeamV;
  return team_;
}
inline ::TeamTeamV* TeamRpcGetTeamNotify::release_team() {
  clear_has_team();
  ::TeamTeamV* temp = team_;
  team_ = NULL;
  return temp;
}
inline void TeamRpcGetTeamNotify::set_allocated_team(::TeamTeamV* team) {
  delete team_;
  team_ = team;
  if (team) {
    set_has_team();
  } else {
    clear_has_team();
  }
}

// -------------------------------------------------------------------

// TeamRpcCtrlTeamAsk

// optional sint32 Type = 1 [default = -1];
inline bool TeamRpcCtrlTeamAsk::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcCtrlTeamAsk::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcCtrlTeamAsk::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcCtrlTeamAsk::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::google::protobuf::int32 TeamRpcCtrlTeamAsk::type() const {
  return type_;
}
inline void TeamRpcCtrlTeamAsk::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional sint32 UID = 3 [default = -1];
inline bool TeamRpcCtrlTeamAsk::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamRpcCtrlTeamAsk::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamRpcCtrlTeamAsk::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamRpcCtrlTeamAsk::clear_uid() {
  uid_ = -1;
  clear_has_uid();
}
inline ::google::protobuf::int32 TeamRpcCtrlTeamAsk::uid() const {
  return uid_;
}
inline void TeamRpcCtrlTeamAsk::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
}

// -------------------------------------------------------------------

// TeamRpcCtrlTeamReply

// optional sint32 Result = 1 [default = -9999];
inline bool TeamRpcCtrlTeamReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcCtrlTeamReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcCtrlTeamReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcCtrlTeamReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 TeamRpcCtrlTeamReply::result() const {
  return result_;
}
inline void TeamRpcCtrlTeamReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional sint32 Type = 2 [default = -1];
inline bool TeamRpcCtrlTeamReply::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamRpcCtrlTeamReply::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamRpcCtrlTeamReply::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamRpcCtrlTeamReply::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::google::protobuf::int32 TeamRpcCtrlTeamReply::type() const {
  return type_;
}
inline void TeamRpcCtrlTeamReply::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional sint32 UID = 3 [default = -1];
inline bool TeamRpcCtrlTeamReply::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamRpcCtrlTeamReply::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamRpcCtrlTeamReply::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamRpcCtrlTeamReply::clear_uid() {
  uid_ = -1;
  clear_has_uid();
}
inline ::google::protobuf::int32 TeamRpcCtrlTeamReply::uid() const {
  return uid_;
}
inline void TeamRpcCtrlTeamReply::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
}

// -------------------------------------------------------------------

// TeamRpcFindTeamAsk

// optional sint64 TeamID = 1 [default = -1];
inline bool TeamRpcFindTeamAsk::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcFindTeamAsk::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcFindTeamAsk::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcFindTeamAsk::clear_teamid() {
  teamid_ = GOOGLE_LONGLONG(-1);
  clear_has_teamid();
}
inline ::google::protobuf::int64 TeamRpcFindTeamAsk::teamid() const {
  return teamid_;
}
inline void TeamRpcFindTeamAsk::set_teamid(::google::protobuf::int64 value) {
  set_has_teamid();
  teamid_ = value;
}

// -------------------------------------------------------------------

// TeamRpcFindTeamReply

// optional sint32 Result = 1 [default = -9999];
inline bool TeamRpcFindTeamReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcFindTeamReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcFindTeamReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcFindTeamReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 TeamRpcFindTeamReply::result() const {
  return result_;
}
inline void TeamRpcFindTeamReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .TeamTeamV Teams = 2;
inline int TeamRpcFindTeamReply::teams_size() const {
  return teams_.size();
}
inline void TeamRpcFindTeamReply::clear_teams() {
  teams_.Clear();
}
inline const ::TeamTeamV& TeamRpcFindTeamReply::teams(int index) const {
  return teams_.Get(index);
}
inline ::TeamTeamV* TeamRpcFindTeamReply::mutable_teams(int index) {
  return teams_.Mutable(index);
}
inline ::TeamTeamV* TeamRpcFindTeamReply::add_teams() {
  return teams_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TeamTeamV >&
TeamRpcFindTeamReply::teams() const {
  return teams_;
}
inline ::google::protobuf::RepeatedPtrField< ::TeamTeamV >*
TeamRpcFindTeamReply::mutable_teams() {
  return &teams_;
}

// -------------------------------------------------------------------

// TeamTeamV

// optional sint32 TeamID = 1 [default = -1];
inline bool TeamTeamV::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamTeamV::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamTeamV::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamTeamV::clear_teamid() {
  teamid_ = -1;
  clear_has_teamid();
}
inline ::google::protobuf::int32 TeamTeamV::teamid() const {
  return teamid_;
}
inline void TeamTeamV::set_teamid(::google::protobuf::int32 value) {
  set_has_teamid();
  teamid_ = value;
}

// repeated .SmallUser Role = 2;
inline int TeamTeamV::role_size() const {
  return role_.size();
}
inline void TeamTeamV::clear_role() {
  role_.Clear();
}
inline const ::SmallUser& TeamTeamV::role(int index) const {
  return role_.Get(index);
}
inline ::SmallUser* TeamTeamV::mutable_role(int index) {
  return role_.Mutable(index);
}
inline ::SmallUser* TeamTeamV::add_role() {
  return role_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SmallUser >&
TeamTeamV::role() const {
  return role_;
}
inline ::google::protobuf::RepeatedPtrField< ::SmallUser >*
TeamTeamV::mutable_role() {
  return &role_;
}

// optional sint32 CaptainID = 3 [default = -1];
inline bool TeamTeamV::has_captainid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamTeamV::set_has_captainid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamTeamV::clear_has_captainid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamTeamV::clear_captainid() {
  captainid_ = -1;
  clear_has_captainid();
}
inline ::google::protobuf::int32 TeamTeamV::captainid() const {
  return captainid_;
}
inline void TeamTeamV::set_captainid(::google::protobuf::int32 value) {
  set_has_captainid();
  captainid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TeamCliRpc_2eproto__INCLUDED
