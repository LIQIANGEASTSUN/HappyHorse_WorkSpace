// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SPVPMatchCliRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SPVPMatchCliRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SPVPMatchUserMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SPVPMatchUserMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* SPVPMatchRpcStartMatchAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SPVPMatchRpcStartMatchAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* SPVPMatchRpcStartMatchReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SPVPMatchRpcStartMatchReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* SPVPMatchRpcInvitationAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SPVPMatchRpcInvitationAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* SPVPMatchRpcInvitationReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SPVPMatchRpcInvitationReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* SPVPMatchRpcMatchBroadcasNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SPVPMatchRpcMatchBroadcasNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* SPVPMatchRpcAgreeInvitationNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SPVPMatchRpcAgreeInvitationNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* SPVPMatchRpcStartGameNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SPVPMatchRpcStartGameNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* SPVPMatchRpcDeleteMatchNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SPVPMatchRpcDeleteMatchNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* SPVPMatchRpcStartSelectNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SPVPMatchRpcStartSelectNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* SPVPMatchRpcSelectHeroAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SPVPMatchRpcSelectHeroAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* SPVPMatchRpcSelectHeroReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SPVPMatchRpcSelectHeroReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* SPVPMatchRpcGetStatusAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SPVPMatchRpcGetStatusAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* SPVPMatchRpcGetStatusReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SPVPMatchRpcGetStatusReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* SPVPMatchRpcChangeStatusNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SPVPMatchRpcChangeStatusNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SPVPMatchCliRpc_2eproto() {
  protobuf_AddDesc_SPVPMatchCliRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SPVPMatchCliRpc.proto");
  GOOGLE_CHECK(file != NULL);
  SPVPMatchUserMessage_descriptor_ = file->message_type(0);
  static const int SPVPMatchUserMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchUserMessage, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchUserMessage, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchUserMessage, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchUserMessage, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchUserMessage, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchUserMessage, status_),
  };
  SPVPMatchUserMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SPVPMatchUserMessage_descriptor_,
      SPVPMatchUserMessage::default_instance_,
      SPVPMatchUserMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchUserMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchUserMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SPVPMatchUserMessage));
  SPVPMatchRpcStartMatchAsk_descriptor_ = file->message_type(1);
  static const int SPVPMatchRpcStartMatchAsk_offsets_[1] = {
  };
  SPVPMatchRpcStartMatchAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SPVPMatchRpcStartMatchAsk_descriptor_,
      SPVPMatchRpcStartMatchAsk::default_instance_,
      SPVPMatchRpcStartMatchAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcStartMatchAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcStartMatchAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SPVPMatchRpcStartMatchAsk));
  SPVPMatchRpcStartMatchReply_descriptor_ = file->message_type(2);
  static const int SPVPMatchRpcStartMatchReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcStartMatchReply, result_),
  };
  SPVPMatchRpcStartMatchReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SPVPMatchRpcStartMatchReply_descriptor_,
      SPVPMatchRpcStartMatchReply::default_instance_,
      SPVPMatchRpcStartMatchReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcStartMatchReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcStartMatchReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SPVPMatchRpcStartMatchReply));
  SPVPMatchRpcInvitationAsk_descriptor_ = file->message_type(3);
  static const int SPVPMatchRpcInvitationAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcInvitationAsk, uid_),
  };
  SPVPMatchRpcInvitationAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SPVPMatchRpcInvitationAsk_descriptor_,
      SPVPMatchRpcInvitationAsk::default_instance_,
      SPVPMatchRpcInvitationAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcInvitationAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcInvitationAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SPVPMatchRpcInvitationAsk));
  SPVPMatchRpcInvitationReply_descriptor_ = file->message_type(4);
  static const int SPVPMatchRpcInvitationReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcInvitationReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcInvitationReply, uid_),
  };
  SPVPMatchRpcInvitationReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SPVPMatchRpcInvitationReply_descriptor_,
      SPVPMatchRpcInvitationReply::default_instance_,
      SPVPMatchRpcInvitationReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcInvitationReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcInvitationReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SPVPMatchRpcInvitationReply));
  SPVPMatchRpcMatchBroadcasNotify_descriptor_ = file->message_type(5);
  static const int SPVPMatchRpcMatchBroadcasNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcMatchBroadcasNotify, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcMatchBroadcasNotify, timestart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcMatchBroadcasNotify, timeend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcMatchBroadcasNotify, timer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcMatchBroadcasNotify, umess_),
  };
  SPVPMatchRpcMatchBroadcasNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SPVPMatchRpcMatchBroadcasNotify_descriptor_,
      SPVPMatchRpcMatchBroadcasNotify::default_instance_,
      SPVPMatchRpcMatchBroadcasNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcMatchBroadcasNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcMatchBroadcasNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SPVPMatchRpcMatchBroadcasNotify));
  SPVPMatchRpcAgreeInvitationNotify_descriptor_ = file->message_type(6);
  static const int SPVPMatchRpcAgreeInvitationNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcAgreeInvitationNotify, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcAgreeInvitationNotify, isagree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcAgreeInvitationNotify, type_),
  };
  SPVPMatchRpcAgreeInvitationNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SPVPMatchRpcAgreeInvitationNotify_descriptor_,
      SPVPMatchRpcAgreeInvitationNotify::default_instance_,
      SPVPMatchRpcAgreeInvitationNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcAgreeInvitationNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcAgreeInvitationNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SPVPMatchRpcAgreeInvitationNotify));
  SPVPMatchRpcStartGameNotify_descriptor_ = file->message_type(7);
  static const int SPVPMatchRpcStartGameNotify_offsets_[1] = {
  };
  SPVPMatchRpcStartGameNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SPVPMatchRpcStartGameNotify_descriptor_,
      SPVPMatchRpcStartGameNotify::default_instance_,
      SPVPMatchRpcStartGameNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcStartGameNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcStartGameNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SPVPMatchRpcStartGameNotify));
  SPVPMatchRpcDeleteMatchNotify_descriptor_ = file->message_type(8);
  static const int SPVPMatchRpcDeleteMatchNotify_offsets_[1] = {
  };
  SPVPMatchRpcDeleteMatchNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SPVPMatchRpcDeleteMatchNotify_descriptor_,
      SPVPMatchRpcDeleteMatchNotify::default_instance_,
      SPVPMatchRpcDeleteMatchNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcDeleteMatchNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcDeleteMatchNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SPVPMatchRpcDeleteMatchNotify));
  SPVPMatchRpcStartSelectNotify_descriptor_ = file->message_type(9);
  static const int SPVPMatchRpcStartSelectNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcStartSelectNotify, timestart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcStartSelectNotify, timeend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcStartSelectNotify, umess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcStartSelectNotify, otherumess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcStartSelectNotify, timer_),
  };
  SPVPMatchRpcStartSelectNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SPVPMatchRpcStartSelectNotify_descriptor_,
      SPVPMatchRpcStartSelectNotify::default_instance_,
      SPVPMatchRpcStartSelectNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcStartSelectNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcStartSelectNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SPVPMatchRpcStartSelectNotify));
  SPVPMatchRpcSelectHeroAsk_descriptor_ = file->message_type(10);
  static const int SPVPMatchRpcSelectHeroAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcSelectHeroAsk, heroid_),
  };
  SPVPMatchRpcSelectHeroAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SPVPMatchRpcSelectHeroAsk_descriptor_,
      SPVPMatchRpcSelectHeroAsk::default_instance_,
      SPVPMatchRpcSelectHeroAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcSelectHeroAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcSelectHeroAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SPVPMatchRpcSelectHeroAsk));
  SPVPMatchRpcSelectHeroReply_descriptor_ = file->message_type(11);
  static const int SPVPMatchRpcSelectHeroReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcSelectHeroReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcSelectHeroReply, heroid_),
  };
  SPVPMatchRpcSelectHeroReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SPVPMatchRpcSelectHeroReply_descriptor_,
      SPVPMatchRpcSelectHeroReply::default_instance_,
      SPVPMatchRpcSelectHeroReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcSelectHeroReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcSelectHeroReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SPVPMatchRpcSelectHeroReply));
  SPVPMatchRpcGetStatusAsk_descriptor_ = file->message_type(12);
  static const int SPVPMatchRpcGetStatusAsk_offsets_[1] = {
  };
  SPVPMatchRpcGetStatusAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SPVPMatchRpcGetStatusAsk_descriptor_,
      SPVPMatchRpcGetStatusAsk::default_instance_,
      SPVPMatchRpcGetStatusAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcGetStatusAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcGetStatusAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SPVPMatchRpcGetStatusAsk));
  SPVPMatchRpcGetStatusReply_descriptor_ = file->message_type(13);
  static const int SPVPMatchRpcGetStatusReply_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcGetStatusReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcGetStatusReply, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcGetStatusReply, timestart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcGetStatusReply, timeend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcGetStatusReply, timer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcGetStatusReply, umess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcGetStatusReply, umessother_),
  };
  SPVPMatchRpcGetStatusReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SPVPMatchRpcGetStatusReply_descriptor_,
      SPVPMatchRpcGetStatusReply::default_instance_,
      SPVPMatchRpcGetStatusReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcGetStatusReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcGetStatusReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SPVPMatchRpcGetStatusReply));
  SPVPMatchRpcChangeStatusNotify_descriptor_ = file->message_type(14);
  static const int SPVPMatchRpcChangeStatusNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcChangeStatusNotify, umess_),
  };
  SPVPMatchRpcChangeStatusNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SPVPMatchRpcChangeStatusNotify_descriptor_,
      SPVPMatchRpcChangeStatusNotify::default_instance_,
      SPVPMatchRpcChangeStatusNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcChangeStatusNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPVPMatchRpcChangeStatusNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SPVPMatchRpcChangeStatusNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SPVPMatchCliRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SPVPMatchUserMessage_descriptor_, &SPVPMatchUserMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SPVPMatchRpcStartMatchAsk_descriptor_, &SPVPMatchRpcStartMatchAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SPVPMatchRpcStartMatchReply_descriptor_, &SPVPMatchRpcStartMatchReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SPVPMatchRpcInvitationAsk_descriptor_, &SPVPMatchRpcInvitationAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SPVPMatchRpcInvitationReply_descriptor_, &SPVPMatchRpcInvitationReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SPVPMatchRpcMatchBroadcasNotify_descriptor_, &SPVPMatchRpcMatchBroadcasNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SPVPMatchRpcAgreeInvitationNotify_descriptor_, &SPVPMatchRpcAgreeInvitationNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SPVPMatchRpcStartGameNotify_descriptor_, &SPVPMatchRpcStartGameNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SPVPMatchRpcDeleteMatchNotify_descriptor_, &SPVPMatchRpcDeleteMatchNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SPVPMatchRpcStartSelectNotify_descriptor_, &SPVPMatchRpcStartSelectNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SPVPMatchRpcSelectHeroAsk_descriptor_, &SPVPMatchRpcSelectHeroAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SPVPMatchRpcSelectHeroReply_descriptor_, &SPVPMatchRpcSelectHeroReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SPVPMatchRpcGetStatusAsk_descriptor_, &SPVPMatchRpcGetStatusAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SPVPMatchRpcGetStatusReply_descriptor_, &SPVPMatchRpcGetStatusReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SPVPMatchRpcChangeStatusNotify_descriptor_, &SPVPMatchRpcChangeStatusNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SPVPMatchCliRpc_2eproto() {
  delete SPVPMatchUserMessage::default_instance_;
  delete SPVPMatchUserMessage_reflection_;
  delete SPVPMatchRpcStartMatchAsk::default_instance_;
  delete SPVPMatchRpcStartMatchAsk_reflection_;
  delete SPVPMatchRpcStartMatchReply::default_instance_;
  delete SPVPMatchRpcStartMatchReply_reflection_;
  delete SPVPMatchRpcInvitationAsk::default_instance_;
  delete SPVPMatchRpcInvitationAsk_reflection_;
  delete SPVPMatchRpcInvitationReply::default_instance_;
  delete SPVPMatchRpcInvitationReply_reflection_;
  delete SPVPMatchRpcMatchBroadcasNotify::default_instance_;
  delete SPVPMatchRpcMatchBroadcasNotify_reflection_;
  delete SPVPMatchRpcAgreeInvitationNotify::default_instance_;
  delete SPVPMatchRpcAgreeInvitationNotify_reflection_;
  delete SPVPMatchRpcStartGameNotify::default_instance_;
  delete SPVPMatchRpcStartGameNotify_reflection_;
  delete SPVPMatchRpcDeleteMatchNotify::default_instance_;
  delete SPVPMatchRpcDeleteMatchNotify_reflection_;
  delete SPVPMatchRpcStartSelectNotify::default_instance_;
  delete SPVPMatchRpcStartSelectNotify_reflection_;
  delete SPVPMatchRpcSelectHeroAsk::default_instance_;
  delete SPVPMatchRpcSelectHeroAsk_reflection_;
  delete SPVPMatchRpcSelectHeroReply::default_instance_;
  delete SPVPMatchRpcSelectHeroReply_reflection_;
  delete SPVPMatchRpcGetStatusAsk::default_instance_;
  delete SPVPMatchRpcGetStatusAsk_reflection_;
  delete SPVPMatchRpcGetStatusReply::default_instance_;
  delete SPVPMatchRpcGetStatusReply_reflection_;
  delete SPVPMatchRpcChangeStatusNotify::default_instance_;
  delete SPVPMatchRpcChangeStatusNotify_reflection_;
}

void protobuf_AddDesc_SPVPMatchCliRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025SPVPMatchCliRpc.proto\032\022PublicStruct.pr"
    "oto\"~\n\024SPVPMatchUserMessage\022\017\n\003Uid\030\002 \001(\022"
    ":\002-1\022\014\n\004Head\030\003 \001(\t\022\020\n\010NickName\030\004 \001(\t\022\017\n\004"
    "Rank\030\005 \001(\021:\0010\022\021\n\006HeroID\030\006 \001(\021:\0010\022\021\n\006Stat"
    "us\030\007 \001(\021:\0010\"\033\n\031SPVPMatchRpcStartMatchAsk"
    "\"4\n\033SPVPMatchRpcStartMatchReply\022\025\n\006Resul"
    "t\030\001 \001(\021:\005-9999\",\n\031SPVPMatchRpcInvitation"
    "Ask\022\017\n\003Uid\030\001 \001(\022:\002-1\"E\n\033SPVPMatchRpcInvi"
    "tationReply\022\025\n\006Result\030\001 \001(\021:\005-9999\022\017\n\003Ui"
    "d\030\002 \001(\022:\002-1\"\227\001\n\037SPVPMatchRpcMatchBroadca"
    "sNotify\022\017\n\004Type\030\001 \001(\021:\0011\022\025\n\tTimeStart\030\002 "
    "\001(\021:\002-1\022\023\n\007TimeEnd\030\003 \001(\021:\002-1\022\021\n\005Timer\030\004 "
    "\001(\021:\002-1\022$\n\005UMess\030\005 \003(\0132\025.SPVPMatchUserMe"
    "ssage\"Y\n!SPVPMatchRpcAgreeInvitationNoti"
    "fy\022\017\n\003Uid\030\001 \001(\022:\002-1\022\022\n\007IsAgree\030\002 \001(\021:\0010\022"
    "\017\n\004Type\030\003 \001(\021:\0010\"\035\n\033SPVPMatchRpcStartGam"
    "eNotify\"\037\n\035SPVPMatchRpcDeleteMatchNotify"
    "\"\257\001\n\035SPVPMatchRpcStartSelectNotify\022\025\n\tTi"
    "meStart\030\001 \001(\021:\002-1\022\023\n\007TimeEnd\030\002 \001(\021:\002-1\022$"
    "\n\005UMess\030\003 \003(\0132\025.SPVPMatchUserMessage\022)\n\n"
    "OtherUMess\030\004 \003(\0132\025.SPVPMatchUserMessage\022"
    "\021\n\005Timer\030\005 \001(\021:\002-1\"/\n\031SPVPMatchRpcSelect"
    "HeroAsk\022\022\n\006HeroID\030\001 \001(\021:\002-1\"H\n\033SPVPMatch"
    "RpcSelectHeroReply\022\025\n\006Result\030\001 \001(\021:\005-999"
    "9\022\022\n\006HeroID\030\002 \001(\021:\002-1\"\032\n\030SPVPMatchRpcGet"
    "StatusAsk\"\325\001\n\032SPVPMatchRpcGetStatusReply"
    "\022\025\n\006Result\030\001 \001(\021:\005-9999\022\020\n\004Type\030\002 \001(\021:\002-"
    "1\022\025\n\tTimeStart\030\005 \001(\021:\002-1\022\023\n\007TimeEnd\030\006 \001("
    "\021:\002-1\022\021\n\005Timer\030\007 \001(\021:\002-1\022$\n\005UMess\030\010 \003(\0132"
    "\025.SPVPMatchUserMessage\022)\n\nUMessOther\030\t \003"
    "(\0132\025.SPVPMatchUserMessage\"F\n\036SPVPMatchRp"
    "cChangeStatusNotify\022$\n\005UMess\030\001 \001(\0132\025.SPV"
    "PMatchUserMessage", 1297);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SPVPMatchCliRpc.proto", &protobuf_RegisterTypes);
  SPVPMatchUserMessage::default_instance_ = new SPVPMatchUserMessage();
  SPVPMatchRpcStartMatchAsk::default_instance_ = new SPVPMatchRpcStartMatchAsk();
  SPVPMatchRpcStartMatchReply::default_instance_ = new SPVPMatchRpcStartMatchReply();
  SPVPMatchRpcInvitationAsk::default_instance_ = new SPVPMatchRpcInvitationAsk();
  SPVPMatchRpcInvitationReply::default_instance_ = new SPVPMatchRpcInvitationReply();
  SPVPMatchRpcMatchBroadcasNotify::default_instance_ = new SPVPMatchRpcMatchBroadcasNotify();
  SPVPMatchRpcAgreeInvitationNotify::default_instance_ = new SPVPMatchRpcAgreeInvitationNotify();
  SPVPMatchRpcStartGameNotify::default_instance_ = new SPVPMatchRpcStartGameNotify();
  SPVPMatchRpcDeleteMatchNotify::default_instance_ = new SPVPMatchRpcDeleteMatchNotify();
  SPVPMatchRpcStartSelectNotify::default_instance_ = new SPVPMatchRpcStartSelectNotify();
  SPVPMatchRpcSelectHeroAsk::default_instance_ = new SPVPMatchRpcSelectHeroAsk();
  SPVPMatchRpcSelectHeroReply::default_instance_ = new SPVPMatchRpcSelectHeroReply();
  SPVPMatchRpcGetStatusAsk::default_instance_ = new SPVPMatchRpcGetStatusAsk();
  SPVPMatchRpcGetStatusReply::default_instance_ = new SPVPMatchRpcGetStatusReply();
  SPVPMatchRpcChangeStatusNotify::default_instance_ = new SPVPMatchRpcChangeStatusNotify();
  SPVPMatchUserMessage::default_instance_->InitAsDefaultInstance();
  SPVPMatchRpcStartMatchAsk::default_instance_->InitAsDefaultInstance();
  SPVPMatchRpcStartMatchReply::default_instance_->InitAsDefaultInstance();
  SPVPMatchRpcInvitationAsk::default_instance_->InitAsDefaultInstance();
  SPVPMatchRpcInvitationReply::default_instance_->InitAsDefaultInstance();
  SPVPMatchRpcMatchBroadcasNotify::default_instance_->InitAsDefaultInstance();
  SPVPMatchRpcAgreeInvitationNotify::default_instance_->InitAsDefaultInstance();
  SPVPMatchRpcStartGameNotify::default_instance_->InitAsDefaultInstance();
  SPVPMatchRpcDeleteMatchNotify::default_instance_->InitAsDefaultInstance();
  SPVPMatchRpcStartSelectNotify::default_instance_->InitAsDefaultInstance();
  SPVPMatchRpcSelectHeroAsk::default_instance_->InitAsDefaultInstance();
  SPVPMatchRpcSelectHeroReply::default_instance_->InitAsDefaultInstance();
  SPVPMatchRpcGetStatusAsk::default_instance_->InitAsDefaultInstance();
  SPVPMatchRpcGetStatusReply::default_instance_->InitAsDefaultInstance();
  SPVPMatchRpcChangeStatusNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SPVPMatchCliRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SPVPMatchCliRpc_2eproto {
  StaticDescriptorInitializer_SPVPMatchCliRpc_2eproto() {
    protobuf_AddDesc_SPVPMatchCliRpc_2eproto();
  }
} static_descriptor_initializer_SPVPMatchCliRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SPVPMatchUserMessage::kUidFieldNumber;
const int SPVPMatchUserMessage::kHeadFieldNumber;
const int SPVPMatchUserMessage::kNickNameFieldNumber;
const int SPVPMatchUserMessage::kRankFieldNumber;
const int SPVPMatchUserMessage::kHeroIDFieldNumber;
const int SPVPMatchUserMessage::kStatusFieldNumber;
#endif  // !_MSC_VER

SPVPMatchUserMessage::SPVPMatchUserMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SPVPMatchUserMessage::InitAsDefaultInstance() {
}

SPVPMatchUserMessage::SPVPMatchUserMessage(const SPVPMatchUserMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SPVPMatchUserMessage::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(-1);
  head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rank_ = 0;
  heroid_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SPVPMatchUserMessage::~SPVPMatchUserMessage() {
  SharedDtor();
}

void SPVPMatchUserMessage::SharedDtor() {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void SPVPMatchUserMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SPVPMatchUserMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPVPMatchUserMessage_descriptor_;
}

const SPVPMatchUserMessage& SPVPMatchUserMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SPVPMatchCliRpc_2eproto();
  return *default_instance_;
}

SPVPMatchUserMessage* SPVPMatchUserMessage::default_instance_ = NULL;

SPVPMatchUserMessage* SPVPMatchUserMessage::New() const {
  return new SPVPMatchUserMessage;
}

void SPVPMatchUserMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(-1);
    if (has_head()) {
      if (head_ != &::google::protobuf::internal::kEmptyString) {
        head_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    rank_ = 0;
    heroid_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SPVPMatchUserMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 Uid = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Head;
        break;
      }

      // optional string Head = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_head()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->head().data(), this->head().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_NickName;
        break;
      }

      // optional string NickName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Rank;
        break;
      }

      // optional sint32 Rank = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_HeroID;
        break;
      }

      // optional sint32 HeroID = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HeroID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Status;
        break;
      }

      // optional sint32 Status = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SPVPMatchUserMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint64 Uid = 2 [default = -1];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->uid(), output);
  }

  // optional string Head = 3;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->head(), output);
  }

  // optional string NickName = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->nickname(), output);
  }

  // optional sint32 Rank = 5 [default = 0];
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->rank(), output);
  }

  // optional sint32 HeroID = 6 [default = 0];
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->heroid(), output);
  }

  // optional sint32 Status = 7 [default = 0];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SPVPMatchUserMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint64 Uid = 2 [default = -1];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->uid(), target);
  }

  // optional string Head = 3;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->head(), target);
  }

  // optional string NickName = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nickname(), target);
  }

  // optional sint32 Rank = 5 [default = 0];
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->rank(), target);
  }

  // optional sint32 HeroID = 6 [default = 0];
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->heroid(), target);
  }

  // optional sint32 Status = 7 [default = 0];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SPVPMatchUserMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 Uid = 2 [default = -1];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->uid());
    }

    // optional string Head = 3;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->head());
    }

    // optional string NickName = 4;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional sint32 Rank = 5 [default = 0];
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->rank());
    }

    // optional sint32 HeroID = 6 [default = 0];
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->heroid());
    }

    // optional sint32 Status = 7 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SPVPMatchUserMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SPVPMatchUserMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SPVPMatchUserMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SPVPMatchUserMessage::MergeFrom(const SPVPMatchUserMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SPVPMatchUserMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPVPMatchUserMessage::CopyFrom(const SPVPMatchUserMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPVPMatchUserMessage::IsInitialized() const {

  return true;
}

void SPVPMatchUserMessage::Swap(SPVPMatchUserMessage* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(head_, other->head_);
    std::swap(nickname_, other->nickname_);
    std::swap(rank_, other->rank_);
    std::swap(heroid_, other->heroid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SPVPMatchUserMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SPVPMatchUserMessage_descriptor_;
  metadata.reflection = SPVPMatchUserMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SPVPMatchRpcStartMatchAsk::SPVPMatchRpcStartMatchAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SPVPMatchRpcStartMatchAsk::InitAsDefaultInstance() {
}

SPVPMatchRpcStartMatchAsk::SPVPMatchRpcStartMatchAsk(const SPVPMatchRpcStartMatchAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SPVPMatchRpcStartMatchAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SPVPMatchRpcStartMatchAsk::~SPVPMatchRpcStartMatchAsk() {
  SharedDtor();
}

void SPVPMatchRpcStartMatchAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SPVPMatchRpcStartMatchAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SPVPMatchRpcStartMatchAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPVPMatchRpcStartMatchAsk_descriptor_;
}

const SPVPMatchRpcStartMatchAsk& SPVPMatchRpcStartMatchAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SPVPMatchCliRpc_2eproto();
  return *default_instance_;
}

SPVPMatchRpcStartMatchAsk* SPVPMatchRpcStartMatchAsk::default_instance_ = NULL;

SPVPMatchRpcStartMatchAsk* SPVPMatchRpcStartMatchAsk::New() const {
  return new SPVPMatchRpcStartMatchAsk;
}

void SPVPMatchRpcStartMatchAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SPVPMatchRpcStartMatchAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SPVPMatchRpcStartMatchAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SPVPMatchRpcStartMatchAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SPVPMatchRpcStartMatchAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SPVPMatchRpcStartMatchAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SPVPMatchRpcStartMatchAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SPVPMatchRpcStartMatchAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SPVPMatchRpcStartMatchAsk::MergeFrom(const SPVPMatchRpcStartMatchAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SPVPMatchRpcStartMatchAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPVPMatchRpcStartMatchAsk::CopyFrom(const SPVPMatchRpcStartMatchAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPVPMatchRpcStartMatchAsk::IsInitialized() const {

  return true;
}

void SPVPMatchRpcStartMatchAsk::Swap(SPVPMatchRpcStartMatchAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SPVPMatchRpcStartMatchAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SPVPMatchRpcStartMatchAsk_descriptor_;
  metadata.reflection = SPVPMatchRpcStartMatchAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SPVPMatchRpcStartMatchReply::kResultFieldNumber;
#endif  // !_MSC_VER

SPVPMatchRpcStartMatchReply::SPVPMatchRpcStartMatchReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SPVPMatchRpcStartMatchReply::InitAsDefaultInstance() {
}

SPVPMatchRpcStartMatchReply::SPVPMatchRpcStartMatchReply(const SPVPMatchRpcStartMatchReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SPVPMatchRpcStartMatchReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SPVPMatchRpcStartMatchReply::~SPVPMatchRpcStartMatchReply() {
  SharedDtor();
}

void SPVPMatchRpcStartMatchReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SPVPMatchRpcStartMatchReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SPVPMatchRpcStartMatchReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPVPMatchRpcStartMatchReply_descriptor_;
}

const SPVPMatchRpcStartMatchReply& SPVPMatchRpcStartMatchReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SPVPMatchCliRpc_2eproto();
  return *default_instance_;
}

SPVPMatchRpcStartMatchReply* SPVPMatchRpcStartMatchReply::default_instance_ = NULL;

SPVPMatchRpcStartMatchReply* SPVPMatchRpcStartMatchReply::New() const {
  return new SPVPMatchRpcStartMatchReply;
}

void SPVPMatchRpcStartMatchReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SPVPMatchRpcStartMatchReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SPVPMatchRpcStartMatchReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SPVPMatchRpcStartMatchReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SPVPMatchRpcStartMatchReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SPVPMatchRpcStartMatchReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SPVPMatchRpcStartMatchReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SPVPMatchRpcStartMatchReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SPVPMatchRpcStartMatchReply::MergeFrom(const SPVPMatchRpcStartMatchReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SPVPMatchRpcStartMatchReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPVPMatchRpcStartMatchReply::CopyFrom(const SPVPMatchRpcStartMatchReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPVPMatchRpcStartMatchReply::IsInitialized() const {

  return true;
}

void SPVPMatchRpcStartMatchReply::Swap(SPVPMatchRpcStartMatchReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SPVPMatchRpcStartMatchReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SPVPMatchRpcStartMatchReply_descriptor_;
  metadata.reflection = SPVPMatchRpcStartMatchReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SPVPMatchRpcInvitationAsk::kUidFieldNumber;
#endif  // !_MSC_VER

SPVPMatchRpcInvitationAsk::SPVPMatchRpcInvitationAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SPVPMatchRpcInvitationAsk::InitAsDefaultInstance() {
}

SPVPMatchRpcInvitationAsk::SPVPMatchRpcInvitationAsk(const SPVPMatchRpcInvitationAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SPVPMatchRpcInvitationAsk::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SPVPMatchRpcInvitationAsk::~SPVPMatchRpcInvitationAsk() {
  SharedDtor();
}

void SPVPMatchRpcInvitationAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SPVPMatchRpcInvitationAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SPVPMatchRpcInvitationAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPVPMatchRpcInvitationAsk_descriptor_;
}

const SPVPMatchRpcInvitationAsk& SPVPMatchRpcInvitationAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SPVPMatchCliRpc_2eproto();
  return *default_instance_;
}

SPVPMatchRpcInvitationAsk* SPVPMatchRpcInvitationAsk::default_instance_ = NULL;

SPVPMatchRpcInvitationAsk* SPVPMatchRpcInvitationAsk::New() const {
  return new SPVPMatchRpcInvitationAsk;
}

void SPVPMatchRpcInvitationAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(-1);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SPVPMatchRpcInvitationAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 Uid = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SPVPMatchRpcInvitationAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint64 Uid = 1 [default = -1];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SPVPMatchRpcInvitationAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint64 Uid = 1 [default = -1];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SPVPMatchRpcInvitationAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 Uid = 1 [default = -1];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SPVPMatchRpcInvitationAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SPVPMatchRpcInvitationAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SPVPMatchRpcInvitationAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SPVPMatchRpcInvitationAsk::MergeFrom(const SPVPMatchRpcInvitationAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SPVPMatchRpcInvitationAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPVPMatchRpcInvitationAsk::CopyFrom(const SPVPMatchRpcInvitationAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPVPMatchRpcInvitationAsk::IsInitialized() const {

  return true;
}

void SPVPMatchRpcInvitationAsk::Swap(SPVPMatchRpcInvitationAsk* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SPVPMatchRpcInvitationAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SPVPMatchRpcInvitationAsk_descriptor_;
  metadata.reflection = SPVPMatchRpcInvitationAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SPVPMatchRpcInvitationReply::kResultFieldNumber;
const int SPVPMatchRpcInvitationReply::kUidFieldNumber;
#endif  // !_MSC_VER

SPVPMatchRpcInvitationReply::SPVPMatchRpcInvitationReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SPVPMatchRpcInvitationReply::InitAsDefaultInstance() {
}

SPVPMatchRpcInvitationReply::SPVPMatchRpcInvitationReply(const SPVPMatchRpcInvitationReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SPVPMatchRpcInvitationReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  uid_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SPVPMatchRpcInvitationReply::~SPVPMatchRpcInvitationReply() {
  SharedDtor();
}

void SPVPMatchRpcInvitationReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SPVPMatchRpcInvitationReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SPVPMatchRpcInvitationReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPVPMatchRpcInvitationReply_descriptor_;
}

const SPVPMatchRpcInvitationReply& SPVPMatchRpcInvitationReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SPVPMatchCliRpc_2eproto();
  return *default_instance_;
}

SPVPMatchRpcInvitationReply* SPVPMatchRpcInvitationReply::default_instance_ = NULL;

SPVPMatchRpcInvitationReply* SPVPMatchRpcInvitationReply::New() const {
  return new SPVPMatchRpcInvitationReply;
}

void SPVPMatchRpcInvitationReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    uid_ = GOOGLE_LONGLONG(-1);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SPVPMatchRpcInvitationReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Uid;
        break;
      }

      // optional sint64 Uid = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SPVPMatchRpcInvitationReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint64 Uid = 2 [default = -1];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SPVPMatchRpcInvitationReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint64 Uid = 2 [default = -1];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SPVPMatchRpcInvitationReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint64 Uid = 2 [default = -1];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SPVPMatchRpcInvitationReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SPVPMatchRpcInvitationReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SPVPMatchRpcInvitationReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SPVPMatchRpcInvitationReply::MergeFrom(const SPVPMatchRpcInvitationReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SPVPMatchRpcInvitationReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPVPMatchRpcInvitationReply::CopyFrom(const SPVPMatchRpcInvitationReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPVPMatchRpcInvitationReply::IsInitialized() const {

  return true;
}

void SPVPMatchRpcInvitationReply::Swap(SPVPMatchRpcInvitationReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SPVPMatchRpcInvitationReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SPVPMatchRpcInvitationReply_descriptor_;
  metadata.reflection = SPVPMatchRpcInvitationReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SPVPMatchRpcMatchBroadcasNotify::kTypeFieldNumber;
const int SPVPMatchRpcMatchBroadcasNotify::kTimeStartFieldNumber;
const int SPVPMatchRpcMatchBroadcasNotify::kTimeEndFieldNumber;
const int SPVPMatchRpcMatchBroadcasNotify::kTimerFieldNumber;
const int SPVPMatchRpcMatchBroadcasNotify::kUMessFieldNumber;
#endif  // !_MSC_VER

SPVPMatchRpcMatchBroadcasNotify::SPVPMatchRpcMatchBroadcasNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SPVPMatchRpcMatchBroadcasNotify::InitAsDefaultInstance() {
}

SPVPMatchRpcMatchBroadcasNotify::SPVPMatchRpcMatchBroadcasNotify(const SPVPMatchRpcMatchBroadcasNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SPVPMatchRpcMatchBroadcasNotify::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  timestart_ = -1;
  timeend_ = -1;
  timer_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SPVPMatchRpcMatchBroadcasNotify::~SPVPMatchRpcMatchBroadcasNotify() {
  SharedDtor();
}

void SPVPMatchRpcMatchBroadcasNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SPVPMatchRpcMatchBroadcasNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SPVPMatchRpcMatchBroadcasNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPVPMatchRpcMatchBroadcasNotify_descriptor_;
}

const SPVPMatchRpcMatchBroadcasNotify& SPVPMatchRpcMatchBroadcasNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SPVPMatchCliRpc_2eproto();
  return *default_instance_;
}

SPVPMatchRpcMatchBroadcasNotify* SPVPMatchRpcMatchBroadcasNotify::default_instance_ = NULL;

SPVPMatchRpcMatchBroadcasNotify* SPVPMatchRpcMatchBroadcasNotify::New() const {
  return new SPVPMatchRpcMatchBroadcasNotify;
}

void SPVPMatchRpcMatchBroadcasNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    timestart_ = -1;
    timeend_ = -1;
    timer_ = -1;
  }
  umess_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SPVPMatchRpcMatchBroadcasNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Type = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TimeStart;
        break;
      }

      // optional sint32 TimeStart = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeStart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &timestart_)));
          set_has_timestart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TimeEnd;
        break;
      }

      // optional sint32 TimeEnd = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &timeend_)));
          set_has_timeend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Timer;
        break;
      }

      // optional sint32 Timer = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Timer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &timer_)));
          set_has_timer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_UMess;
        break;
      }

      // repeated .SPVPMatchUserMessage UMess = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UMess:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_umess()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_UMess;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SPVPMatchRpcMatchBroadcasNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Type = 1 [default = 1];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->type(), output);
  }

  // optional sint32 TimeStart = 2 [default = -1];
  if (has_timestart()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->timestart(), output);
  }

  // optional sint32 TimeEnd = 3 [default = -1];
  if (has_timeend()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->timeend(), output);
  }

  // optional sint32 Timer = 4 [default = -1];
  if (has_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->timer(), output);
  }

  // repeated .SPVPMatchUserMessage UMess = 5;
  for (int i = 0; i < this->umess_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->umess(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SPVPMatchRpcMatchBroadcasNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Type = 1 [default = 1];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->type(), target);
  }

  // optional sint32 TimeStart = 2 [default = -1];
  if (has_timestart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->timestart(), target);
  }

  // optional sint32 TimeEnd = 3 [default = -1];
  if (has_timeend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->timeend(), target);
  }

  // optional sint32 Timer = 4 [default = -1];
  if (has_timer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->timer(), target);
  }

  // repeated .SPVPMatchUserMessage UMess = 5;
  for (int i = 0; i < this->umess_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->umess(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SPVPMatchRpcMatchBroadcasNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Type = 1 [default = 1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

    // optional sint32 TimeStart = 2 [default = -1];
    if (has_timestart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->timestart());
    }

    // optional sint32 TimeEnd = 3 [default = -1];
    if (has_timeend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->timeend());
    }

    // optional sint32 Timer = 4 [default = -1];
    if (has_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->timer());
    }

  }
  // repeated .SPVPMatchUserMessage UMess = 5;
  total_size += 1 * this->umess_size();
  for (int i = 0; i < this->umess_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->umess(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SPVPMatchRpcMatchBroadcasNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SPVPMatchRpcMatchBroadcasNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SPVPMatchRpcMatchBroadcasNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SPVPMatchRpcMatchBroadcasNotify::MergeFrom(const SPVPMatchRpcMatchBroadcasNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  umess_.MergeFrom(from.umess_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_timestart()) {
      set_timestart(from.timestart());
    }
    if (from.has_timeend()) {
      set_timeend(from.timeend());
    }
    if (from.has_timer()) {
      set_timer(from.timer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SPVPMatchRpcMatchBroadcasNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPVPMatchRpcMatchBroadcasNotify::CopyFrom(const SPVPMatchRpcMatchBroadcasNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPVPMatchRpcMatchBroadcasNotify::IsInitialized() const {

  return true;
}

void SPVPMatchRpcMatchBroadcasNotify::Swap(SPVPMatchRpcMatchBroadcasNotify* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(timestart_, other->timestart_);
    std::swap(timeend_, other->timeend_);
    std::swap(timer_, other->timer_);
    umess_.Swap(&other->umess_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SPVPMatchRpcMatchBroadcasNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SPVPMatchRpcMatchBroadcasNotify_descriptor_;
  metadata.reflection = SPVPMatchRpcMatchBroadcasNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SPVPMatchRpcAgreeInvitationNotify::kUidFieldNumber;
const int SPVPMatchRpcAgreeInvitationNotify::kIsAgreeFieldNumber;
const int SPVPMatchRpcAgreeInvitationNotify::kTypeFieldNumber;
#endif  // !_MSC_VER

SPVPMatchRpcAgreeInvitationNotify::SPVPMatchRpcAgreeInvitationNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SPVPMatchRpcAgreeInvitationNotify::InitAsDefaultInstance() {
}

SPVPMatchRpcAgreeInvitationNotify::SPVPMatchRpcAgreeInvitationNotify(const SPVPMatchRpcAgreeInvitationNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SPVPMatchRpcAgreeInvitationNotify::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(-1);
  isagree_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SPVPMatchRpcAgreeInvitationNotify::~SPVPMatchRpcAgreeInvitationNotify() {
  SharedDtor();
}

void SPVPMatchRpcAgreeInvitationNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SPVPMatchRpcAgreeInvitationNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SPVPMatchRpcAgreeInvitationNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPVPMatchRpcAgreeInvitationNotify_descriptor_;
}

const SPVPMatchRpcAgreeInvitationNotify& SPVPMatchRpcAgreeInvitationNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SPVPMatchCliRpc_2eproto();
  return *default_instance_;
}

SPVPMatchRpcAgreeInvitationNotify* SPVPMatchRpcAgreeInvitationNotify::default_instance_ = NULL;

SPVPMatchRpcAgreeInvitationNotify* SPVPMatchRpcAgreeInvitationNotify::New() const {
  return new SPVPMatchRpcAgreeInvitationNotify;
}

void SPVPMatchRpcAgreeInvitationNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(-1);
    isagree_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SPVPMatchRpcAgreeInvitationNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 Uid = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_IsAgree;
        break;
      }

      // optional sint32 IsAgree = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsAgree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &isagree_)));
          set_has_isagree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Type;
        break;
      }

      // optional sint32 Type = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SPVPMatchRpcAgreeInvitationNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint64 Uid = 1 [default = -1];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->uid(), output);
  }

  // optional sint32 IsAgree = 2 [default = 0];
  if (has_isagree()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->isagree(), output);
  }

  // optional sint32 Type = 3 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SPVPMatchRpcAgreeInvitationNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint64 Uid = 1 [default = -1];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->uid(), target);
  }

  // optional sint32 IsAgree = 2 [default = 0];
  if (has_isagree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->isagree(), target);
  }

  // optional sint32 Type = 3 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SPVPMatchRpcAgreeInvitationNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 Uid = 1 [default = -1];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->uid());
    }

    // optional sint32 IsAgree = 2 [default = 0];
    if (has_isagree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->isagree());
    }

    // optional sint32 Type = 3 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SPVPMatchRpcAgreeInvitationNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SPVPMatchRpcAgreeInvitationNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SPVPMatchRpcAgreeInvitationNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SPVPMatchRpcAgreeInvitationNotify::MergeFrom(const SPVPMatchRpcAgreeInvitationNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_isagree()) {
      set_isagree(from.isagree());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SPVPMatchRpcAgreeInvitationNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPVPMatchRpcAgreeInvitationNotify::CopyFrom(const SPVPMatchRpcAgreeInvitationNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPVPMatchRpcAgreeInvitationNotify::IsInitialized() const {

  return true;
}

void SPVPMatchRpcAgreeInvitationNotify::Swap(SPVPMatchRpcAgreeInvitationNotify* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(isagree_, other->isagree_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SPVPMatchRpcAgreeInvitationNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SPVPMatchRpcAgreeInvitationNotify_descriptor_;
  metadata.reflection = SPVPMatchRpcAgreeInvitationNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SPVPMatchRpcStartGameNotify::SPVPMatchRpcStartGameNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SPVPMatchRpcStartGameNotify::InitAsDefaultInstance() {
}

SPVPMatchRpcStartGameNotify::SPVPMatchRpcStartGameNotify(const SPVPMatchRpcStartGameNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SPVPMatchRpcStartGameNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SPVPMatchRpcStartGameNotify::~SPVPMatchRpcStartGameNotify() {
  SharedDtor();
}

void SPVPMatchRpcStartGameNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SPVPMatchRpcStartGameNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SPVPMatchRpcStartGameNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPVPMatchRpcStartGameNotify_descriptor_;
}

const SPVPMatchRpcStartGameNotify& SPVPMatchRpcStartGameNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SPVPMatchCliRpc_2eproto();
  return *default_instance_;
}

SPVPMatchRpcStartGameNotify* SPVPMatchRpcStartGameNotify::default_instance_ = NULL;

SPVPMatchRpcStartGameNotify* SPVPMatchRpcStartGameNotify::New() const {
  return new SPVPMatchRpcStartGameNotify;
}

void SPVPMatchRpcStartGameNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SPVPMatchRpcStartGameNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SPVPMatchRpcStartGameNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SPVPMatchRpcStartGameNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SPVPMatchRpcStartGameNotify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SPVPMatchRpcStartGameNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SPVPMatchRpcStartGameNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SPVPMatchRpcStartGameNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SPVPMatchRpcStartGameNotify::MergeFrom(const SPVPMatchRpcStartGameNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SPVPMatchRpcStartGameNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPVPMatchRpcStartGameNotify::CopyFrom(const SPVPMatchRpcStartGameNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPVPMatchRpcStartGameNotify::IsInitialized() const {

  return true;
}

void SPVPMatchRpcStartGameNotify::Swap(SPVPMatchRpcStartGameNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SPVPMatchRpcStartGameNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SPVPMatchRpcStartGameNotify_descriptor_;
  metadata.reflection = SPVPMatchRpcStartGameNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SPVPMatchRpcDeleteMatchNotify::SPVPMatchRpcDeleteMatchNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SPVPMatchRpcDeleteMatchNotify::InitAsDefaultInstance() {
}

SPVPMatchRpcDeleteMatchNotify::SPVPMatchRpcDeleteMatchNotify(const SPVPMatchRpcDeleteMatchNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SPVPMatchRpcDeleteMatchNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SPVPMatchRpcDeleteMatchNotify::~SPVPMatchRpcDeleteMatchNotify() {
  SharedDtor();
}

void SPVPMatchRpcDeleteMatchNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SPVPMatchRpcDeleteMatchNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SPVPMatchRpcDeleteMatchNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPVPMatchRpcDeleteMatchNotify_descriptor_;
}

const SPVPMatchRpcDeleteMatchNotify& SPVPMatchRpcDeleteMatchNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SPVPMatchCliRpc_2eproto();
  return *default_instance_;
}

SPVPMatchRpcDeleteMatchNotify* SPVPMatchRpcDeleteMatchNotify::default_instance_ = NULL;

SPVPMatchRpcDeleteMatchNotify* SPVPMatchRpcDeleteMatchNotify::New() const {
  return new SPVPMatchRpcDeleteMatchNotify;
}

void SPVPMatchRpcDeleteMatchNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SPVPMatchRpcDeleteMatchNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SPVPMatchRpcDeleteMatchNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SPVPMatchRpcDeleteMatchNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SPVPMatchRpcDeleteMatchNotify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SPVPMatchRpcDeleteMatchNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SPVPMatchRpcDeleteMatchNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SPVPMatchRpcDeleteMatchNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SPVPMatchRpcDeleteMatchNotify::MergeFrom(const SPVPMatchRpcDeleteMatchNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SPVPMatchRpcDeleteMatchNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPVPMatchRpcDeleteMatchNotify::CopyFrom(const SPVPMatchRpcDeleteMatchNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPVPMatchRpcDeleteMatchNotify::IsInitialized() const {

  return true;
}

void SPVPMatchRpcDeleteMatchNotify::Swap(SPVPMatchRpcDeleteMatchNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SPVPMatchRpcDeleteMatchNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SPVPMatchRpcDeleteMatchNotify_descriptor_;
  metadata.reflection = SPVPMatchRpcDeleteMatchNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SPVPMatchRpcStartSelectNotify::kTimeStartFieldNumber;
const int SPVPMatchRpcStartSelectNotify::kTimeEndFieldNumber;
const int SPVPMatchRpcStartSelectNotify::kUMessFieldNumber;
const int SPVPMatchRpcStartSelectNotify::kOtherUMessFieldNumber;
const int SPVPMatchRpcStartSelectNotify::kTimerFieldNumber;
#endif  // !_MSC_VER

SPVPMatchRpcStartSelectNotify::SPVPMatchRpcStartSelectNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SPVPMatchRpcStartSelectNotify::InitAsDefaultInstance() {
}

SPVPMatchRpcStartSelectNotify::SPVPMatchRpcStartSelectNotify(const SPVPMatchRpcStartSelectNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SPVPMatchRpcStartSelectNotify::SharedCtor() {
  _cached_size_ = 0;
  timestart_ = -1;
  timeend_ = -1;
  timer_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SPVPMatchRpcStartSelectNotify::~SPVPMatchRpcStartSelectNotify() {
  SharedDtor();
}

void SPVPMatchRpcStartSelectNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SPVPMatchRpcStartSelectNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SPVPMatchRpcStartSelectNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPVPMatchRpcStartSelectNotify_descriptor_;
}

const SPVPMatchRpcStartSelectNotify& SPVPMatchRpcStartSelectNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SPVPMatchCliRpc_2eproto();
  return *default_instance_;
}

SPVPMatchRpcStartSelectNotify* SPVPMatchRpcStartSelectNotify::default_instance_ = NULL;

SPVPMatchRpcStartSelectNotify* SPVPMatchRpcStartSelectNotify::New() const {
  return new SPVPMatchRpcStartSelectNotify;
}

void SPVPMatchRpcStartSelectNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestart_ = -1;
    timeend_ = -1;
    timer_ = -1;
  }
  umess_.Clear();
  otherumess_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SPVPMatchRpcStartSelectNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 TimeStart = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &timestart_)));
          set_has_timestart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TimeEnd;
        break;
      }

      // optional sint32 TimeEnd = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &timeend_)));
          set_has_timeend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_UMess;
        break;
      }

      // repeated .SPVPMatchUserMessage UMess = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UMess:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_umess()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_UMess;
        if (input->ExpectTag(34)) goto parse_OtherUMess;
        break;
      }

      // repeated .SPVPMatchUserMessage OtherUMess = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OtherUMess:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_otherumess()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_OtherUMess;
        if (input->ExpectTag(40)) goto parse_Timer;
        break;
      }

      // optional sint32 Timer = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Timer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &timer_)));
          set_has_timer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SPVPMatchRpcStartSelectNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 TimeStart = 1 [default = -1];
  if (has_timestart()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->timestart(), output);
  }

  // optional sint32 TimeEnd = 2 [default = -1];
  if (has_timeend()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->timeend(), output);
  }

  // repeated .SPVPMatchUserMessage UMess = 3;
  for (int i = 0; i < this->umess_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->umess(i), output);
  }

  // repeated .SPVPMatchUserMessage OtherUMess = 4;
  for (int i = 0; i < this->otherumess_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->otherumess(i), output);
  }

  // optional sint32 Timer = 5 [default = -1];
  if (has_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->timer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SPVPMatchRpcStartSelectNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 TimeStart = 1 [default = -1];
  if (has_timestart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->timestart(), target);
  }

  // optional sint32 TimeEnd = 2 [default = -1];
  if (has_timeend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->timeend(), target);
  }

  // repeated .SPVPMatchUserMessage UMess = 3;
  for (int i = 0; i < this->umess_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->umess(i), target);
  }

  // repeated .SPVPMatchUserMessage OtherUMess = 4;
  for (int i = 0; i < this->otherumess_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->otherumess(i), target);
  }

  // optional sint32 Timer = 5 [default = -1];
  if (has_timer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->timer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SPVPMatchRpcStartSelectNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 TimeStart = 1 [default = -1];
    if (has_timestart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->timestart());
    }

    // optional sint32 TimeEnd = 2 [default = -1];
    if (has_timeend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->timeend());
    }

    // optional sint32 Timer = 5 [default = -1];
    if (has_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->timer());
    }

  }
  // repeated .SPVPMatchUserMessage UMess = 3;
  total_size += 1 * this->umess_size();
  for (int i = 0; i < this->umess_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->umess(i));
  }

  // repeated .SPVPMatchUserMessage OtherUMess = 4;
  total_size += 1 * this->otherumess_size();
  for (int i = 0; i < this->otherumess_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->otherumess(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SPVPMatchRpcStartSelectNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SPVPMatchRpcStartSelectNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SPVPMatchRpcStartSelectNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SPVPMatchRpcStartSelectNotify::MergeFrom(const SPVPMatchRpcStartSelectNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  umess_.MergeFrom(from.umess_);
  otherumess_.MergeFrom(from.otherumess_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestart()) {
      set_timestart(from.timestart());
    }
    if (from.has_timeend()) {
      set_timeend(from.timeend());
    }
    if (from.has_timer()) {
      set_timer(from.timer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SPVPMatchRpcStartSelectNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPVPMatchRpcStartSelectNotify::CopyFrom(const SPVPMatchRpcStartSelectNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPVPMatchRpcStartSelectNotify::IsInitialized() const {

  return true;
}

void SPVPMatchRpcStartSelectNotify::Swap(SPVPMatchRpcStartSelectNotify* other) {
  if (other != this) {
    std::swap(timestart_, other->timestart_);
    std::swap(timeend_, other->timeend_);
    umess_.Swap(&other->umess_);
    otherumess_.Swap(&other->otherumess_);
    std::swap(timer_, other->timer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SPVPMatchRpcStartSelectNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SPVPMatchRpcStartSelectNotify_descriptor_;
  metadata.reflection = SPVPMatchRpcStartSelectNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SPVPMatchRpcSelectHeroAsk::kHeroIDFieldNumber;
#endif  // !_MSC_VER

SPVPMatchRpcSelectHeroAsk::SPVPMatchRpcSelectHeroAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SPVPMatchRpcSelectHeroAsk::InitAsDefaultInstance() {
}

SPVPMatchRpcSelectHeroAsk::SPVPMatchRpcSelectHeroAsk(const SPVPMatchRpcSelectHeroAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SPVPMatchRpcSelectHeroAsk::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SPVPMatchRpcSelectHeroAsk::~SPVPMatchRpcSelectHeroAsk() {
  SharedDtor();
}

void SPVPMatchRpcSelectHeroAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SPVPMatchRpcSelectHeroAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SPVPMatchRpcSelectHeroAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPVPMatchRpcSelectHeroAsk_descriptor_;
}

const SPVPMatchRpcSelectHeroAsk& SPVPMatchRpcSelectHeroAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SPVPMatchCliRpc_2eproto();
  return *default_instance_;
}

SPVPMatchRpcSelectHeroAsk* SPVPMatchRpcSelectHeroAsk::default_instance_ = NULL;

SPVPMatchRpcSelectHeroAsk* SPVPMatchRpcSelectHeroAsk::New() const {
  return new SPVPMatchRpcSelectHeroAsk;
}

void SPVPMatchRpcSelectHeroAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SPVPMatchRpcSelectHeroAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 HeroID = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SPVPMatchRpcSelectHeroAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 HeroID = 1 [default = -1];
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SPVPMatchRpcSelectHeroAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 HeroID = 1 [default = -1];
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SPVPMatchRpcSelectHeroAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 HeroID = 1 [default = -1];
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SPVPMatchRpcSelectHeroAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SPVPMatchRpcSelectHeroAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SPVPMatchRpcSelectHeroAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SPVPMatchRpcSelectHeroAsk::MergeFrom(const SPVPMatchRpcSelectHeroAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SPVPMatchRpcSelectHeroAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPVPMatchRpcSelectHeroAsk::CopyFrom(const SPVPMatchRpcSelectHeroAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPVPMatchRpcSelectHeroAsk::IsInitialized() const {

  return true;
}

void SPVPMatchRpcSelectHeroAsk::Swap(SPVPMatchRpcSelectHeroAsk* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SPVPMatchRpcSelectHeroAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SPVPMatchRpcSelectHeroAsk_descriptor_;
  metadata.reflection = SPVPMatchRpcSelectHeroAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SPVPMatchRpcSelectHeroReply::kResultFieldNumber;
const int SPVPMatchRpcSelectHeroReply::kHeroIDFieldNumber;
#endif  // !_MSC_VER

SPVPMatchRpcSelectHeroReply::SPVPMatchRpcSelectHeroReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SPVPMatchRpcSelectHeroReply::InitAsDefaultInstance() {
}

SPVPMatchRpcSelectHeroReply::SPVPMatchRpcSelectHeroReply(const SPVPMatchRpcSelectHeroReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SPVPMatchRpcSelectHeroReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  heroid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SPVPMatchRpcSelectHeroReply::~SPVPMatchRpcSelectHeroReply() {
  SharedDtor();
}

void SPVPMatchRpcSelectHeroReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SPVPMatchRpcSelectHeroReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SPVPMatchRpcSelectHeroReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPVPMatchRpcSelectHeroReply_descriptor_;
}

const SPVPMatchRpcSelectHeroReply& SPVPMatchRpcSelectHeroReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SPVPMatchCliRpc_2eproto();
  return *default_instance_;
}

SPVPMatchRpcSelectHeroReply* SPVPMatchRpcSelectHeroReply::default_instance_ = NULL;

SPVPMatchRpcSelectHeroReply* SPVPMatchRpcSelectHeroReply::New() const {
  return new SPVPMatchRpcSelectHeroReply;
}

void SPVPMatchRpcSelectHeroReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    heroid_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SPVPMatchRpcSelectHeroReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HeroID;
        break;
      }

      // optional sint32 HeroID = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HeroID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SPVPMatchRpcSelectHeroReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint32 HeroID = 2 [default = -1];
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SPVPMatchRpcSelectHeroReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint32 HeroID = 2 [default = -1];
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SPVPMatchRpcSelectHeroReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 HeroID = 2 [default = -1];
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SPVPMatchRpcSelectHeroReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SPVPMatchRpcSelectHeroReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SPVPMatchRpcSelectHeroReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SPVPMatchRpcSelectHeroReply::MergeFrom(const SPVPMatchRpcSelectHeroReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SPVPMatchRpcSelectHeroReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPVPMatchRpcSelectHeroReply::CopyFrom(const SPVPMatchRpcSelectHeroReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPVPMatchRpcSelectHeroReply::IsInitialized() const {

  return true;
}

void SPVPMatchRpcSelectHeroReply::Swap(SPVPMatchRpcSelectHeroReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SPVPMatchRpcSelectHeroReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SPVPMatchRpcSelectHeroReply_descriptor_;
  metadata.reflection = SPVPMatchRpcSelectHeroReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SPVPMatchRpcGetStatusAsk::SPVPMatchRpcGetStatusAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SPVPMatchRpcGetStatusAsk::InitAsDefaultInstance() {
}

SPVPMatchRpcGetStatusAsk::SPVPMatchRpcGetStatusAsk(const SPVPMatchRpcGetStatusAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SPVPMatchRpcGetStatusAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SPVPMatchRpcGetStatusAsk::~SPVPMatchRpcGetStatusAsk() {
  SharedDtor();
}

void SPVPMatchRpcGetStatusAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SPVPMatchRpcGetStatusAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SPVPMatchRpcGetStatusAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPVPMatchRpcGetStatusAsk_descriptor_;
}

const SPVPMatchRpcGetStatusAsk& SPVPMatchRpcGetStatusAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SPVPMatchCliRpc_2eproto();
  return *default_instance_;
}

SPVPMatchRpcGetStatusAsk* SPVPMatchRpcGetStatusAsk::default_instance_ = NULL;

SPVPMatchRpcGetStatusAsk* SPVPMatchRpcGetStatusAsk::New() const {
  return new SPVPMatchRpcGetStatusAsk;
}

void SPVPMatchRpcGetStatusAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SPVPMatchRpcGetStatusAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SPVPMatchRpcGetStatusAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SPVPMatchRpcGetStatusAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SPVPMatchRpcGetStatusAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SPVPMatchRpcGetStatusAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SPVPMatchRpcGetStatusAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SPVPMatchRpcGetStatusAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SPVPMatchRpcGetStatusAsk::MergeFrom(const SPVPMatchRpcGetStatusAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SPVPMatchRpcGetStatusAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPVPMatchRpcGetStatusAsk::CopyFrom(const SPVPMatchRpcGetStatusAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPVPMatchRpcGetStatusAsk::IsInitialized() const {

  return true;
}

void SPVPMatchRpcGetStatusAsk::Swap(SPVPMatchRpcGetStatusAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SPVPMatchRpcGetStatusAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SPVPMatchRpcGetStatusAsk_descriptor_;
  metadata.reflection = SPVPMatchRpcGetStatusAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SPVPMatchRpcGetStatusReply::kResultFieldNumber;
const int SPVPMatchRpcGetStatusReply::kTypeFieldNumber;
const int SPVPMatchRpcGetStatusReply::kTimeStartFieldNumber;
const int SPVPMatchRpcGetStatusReply::kTimeEndFieldNumber;
const int SPVPMatchRpcGetStatusReply::kTimerFieldNumber;
const int SPVPMatchRpcGetStatusReply::kUMessFieldNumber;
const int SPVPMatchRpcGetStatusReply::kUMessOtherFieldNumber;
#endif  // !_MSC_VER

SPVPMatchRpcGetStatusReply::SPVPMatchRpcGetStatusReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SPVPMatchRpcGetStatusReply::InitAsDefaultInstance() {
}

SPVPMatchRpcGetStatusReply::SPVPMatchRpcGetStatusReply(const SPVPMatchRpcGetStatusReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SPVPMatchRpcGetStatusReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  type_ = -1;
  timestart_ = -1;
  timeend_ = -1;
  timer_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SPVPMatchRpcGetStatusReply::~SPVPMatchRpcGetStatusReply() {
  SharedDtor();
}

void SPVPMatchRpcGetStatusReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SPVPMatchRpcGetStatusReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SPVPMatchRpcGetStatusReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPVPMatchRpcGetStatusReply_descriptor_;
}

const SPVPMatchRpcGetStatusReply& SPVPMatchRpcGetStatusReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SPVPMatchCliRpc_2eproto();
  return *default_instance_;
}

SPVPMatchRpcGetStatusReply* SPVPMatchRpcGetStatusReply::default_instance_ = NULL;

SPVPMatchRpcGetStatusReply* SPVPMatchRpcGetStatusReply::New() const {
  return new SPVPMatchRpcGetStatusReply;
}

void SPVPMatchRpcGetStatusReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    type_ = -1;
    timestart_ = -1;
    timeend_ = -1;
    timer_ = -1;
  }
  umess_.Clear();
  umessother_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SPVPMatchRpcGetStatusReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // optional sint32 Type = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_TimeStart;
        break;
      }

      // optional sint32 TimeStart = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeStart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &timestart_)));
          set_has_timestart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_TimeEnd;
        break;
      }

      // optional sint32 TimeEnd = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &timeend_)));
          set_has_timeend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Timer;
        break;
      }

      // optional sint32 Timer = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Timer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &timer_)));
          set_has_timer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_UMess;
        break;
      }

      // repeated .SPVPMatchUserMessage UMess = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UMess:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_umess()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_UMess;
        if (input->ExpectTag(74)) goto parse_UMessOther;
        break;
      }

      // repeated .SPVPMatchUserMessage UMessOther = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UMessOther:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_umessother()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_UMessOther;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SPVPMatchRpcGetStatusReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint32 Type = 2 [default = -1];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->type(), output);
  }

  // optional sint32 TimeStart = 5 [default = -1];
  if (has_timestart()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->timestart(), output);
  }

  // optional sint32 TimeEnd = 6 [default = -1];
  if (has_timeend()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->timeend(), output);
  }

  // optional sint32 Timer = 7 [default = -1];
  if (has_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->timer(), output);
  }

  // repeated .SPVPMatchUserMessage UMess = 8;
  for (int i = 0; i < this->umess_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->umess(i), output);
  }

  // repeated .SPVPMatchUserMessage UMessOther = 9;
  for (int i = 0; i < this->umessother_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->umessother(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SPVPMatchRpcGetStatusReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint32 Type = 2 [default = -1];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->type(), target);
  }

  // optional sint32 TimeStart = 5 [default = -1];
  if (has_timestart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->timestart(), target);
  }

  // optional sint32 TimeEnd = 6 [default = -1];
  if (has_timeend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->timeend(), target);
  }

  // optional sint32 Timer = 7 [default = -1];
  if (has_timer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->timer(), target);
  }

  // repeated .SPVPMatchUserMessage UMess = 8;
  for (int i = 0; i < this->umess_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->umess(i), target);
  }

  // repeated .SPVPMatchUserMessage UMessOther = 9;
  for (int i = 0; i < this->umessother_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->umessother(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SPVPMatchRpcGetStatusReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 Type = 2 [default = -1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

    // optional sint32 TimeStart = 5 [default = -1];
    if (has_timestart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->timestart());
    }

    // optional sint32 TimeEnd = 6 [default = -1];
    if (has_timeend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->timeend());
    }

    // optional sint32 Timer = 7 [default = -1];
    if (has_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->timer());
    }

  }
  // repeated .SPVPMatchUserMessage UMess = 8;
  total_size += 1 * this->umess_size();
  for (int i = 0; i < this->umess_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->umess(i));
  }

  // repeated .SPVPMatchUserMessage UMessOther = 9;
  total_size += 1 * this->umessother_size();
  for (int i = 0; i < this->umessother_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->umessother(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SPVPMatchRpcGetStatusReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SPVPMatchRpcGetStatusReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SPVPMatchRpcGetStatusReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SPVPMatchRpcGetStatusReply::MergeFrom(const SPVPMatchRpcGetStatusReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  umess_.MergeFrom(from.umess_);
  umessother_.MergeFrom(from.umessother_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_timestart()) {
      set_timestart(from.timestart());
    }
    if (from.has_timeend()) {
      set_timeend(from.timeend());
    }
    if (from.has_timer()) {
      set_timer(from.timer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SPVPMatchRpcGetStatusReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPVPMatchRpcGetStatusReply::CopyFrom(const SPVPMatchRpcGetStatusReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPVPMatchRpcGetStatusReply::IsInitialized() const {

  return true;
}

void SPVPMatchRpcGetStatusReply::Swap(SPVPMatchRpcGetStatusReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(type_, other->type_);
    std::swap(timestart_, other->timestart_);
    std::swap(timeend_, other->timeend_);
    std::swap(timer_, other->timer_);
    umess_.Swap(&other->umess_);
    umessother_.Swap(&other->umessother_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SPVPMatchRpcGetStatusReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SPVPMatchRpcGetStatusReply_descriptor_;
  metadata.reflection = SPVPMatchRpcGetStatusReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SPVPMatchRpcChangeStatusNotify::kUMessFieldNumber;
#endif  // !_MSC_VER

SPVPMatchRpcChangeStatusNotify::SPVPMatchRpcChangeStatusNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SPVPMatchRpcChangeStatusNotify::InitAsDefaultInstance() {
  umess_ = const_cast< ::SPVPMatchUserMessage*>(&::SPVPMatchUserMessage::default_instance());
}

SPVPMatchRpcChangeStatusNotify::SPVPMatchRpcChangeStatusNotify(const SPVPMatchRpcChangeStatusNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SPVPMatchRpcChangeStatusNotify::SharedCtor() {
  _cached_size_ = 0;
  umess_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SPVPMatchRpcChangeStatusNotify::~SPVPMatchRpcChangeStatusNotify() {
  SharedDtor();
}

void SPVPMatchRpcChangeStatusNotify::SharedDtor() {
  if (this != default_instance_) {
    delete umess_;
  }
}

void SPVPMatchRpcChangeStatusNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SPVPMatchRpcChangeStatusNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPVPMatchRpcChangeStatusNotify_descriptor_;
}

const SPVPMatchRpcChangeStatusNotify& SPVPMatchRpcChangeStatusNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SPVPMatchCliRpc_2eproto();
  return *default_instance_;
}

SPVPMatchRpcChangeStatusNotify* SPVPMatchRpcChangeStatusNotify::default_instance_ = NULL;

SPVPMatchRpcChangeStatusNotify* SPVPMatchRpcChangeStatusNotify::New() const {
  return new SPVPMatchRpcChangeStatusNotify;
}

void SPVPMatchRpcChangeStatusNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_umess()) {
      if (umess_ != NULL) umess_->::SPVPMatchUserMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SPVPMatchRpcChangeStatusNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SPVPMatchUserMessage UMess = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_umess()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SPVPMatchRpcChangeStatusNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SPVPMatchUserMessage UMess = 1;
  if (has_umess()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->umess(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SPVPMatchRpcChangeStatusNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SPVPMatchUserMessage UMess = 1;
  if (has_umess()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->umess(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SPVPMatchRpcChangeStatusNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SPVPMatchUserMessage UMess = 1;
    if (has_umess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->umess());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SPVPMatchRpcChangeStatusNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SPVPMatchRpcChangeStatusNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SPVPMatchRpcChangeStatusNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SPVPMatchRpcChangeStatusNotify::MergeFrom(const SPVPMatchRpcChangeStatusNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_umess()) {
      mutable_umess()->::SPVPMatchUserMessage::MergeFrom(from.umess());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SPVPMatchRpcChangeStatusNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPVPMatchRpcChangeStatusNotify::CopyFrom(const SPVPMatchRpcChangeStatusNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPVPMatchRpcChangeStatusNotify::IsInitialized() const {

  return true;
}

void SPVPMatchRpcChangeStatusNotify::Swap(SPVPMatchRpcChangeStatusNotify* other) {
  if (other != this) {
    std::swap(umess_, other->umess_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SPVPMatchRpcChangeStatusNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SPVPMatchRpcChangeStatusNotify_descriptor_;
  metadata.reflection = SPVPMatchRpcChangeStatusNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
