// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FResultSvrRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FResultSvrRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* FResultRpcCalculationFResultNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FResultRpcCalculationFResultNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* FResultTeamV_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FResultTeamV_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FResultSvrRpc_2eproto() {
  protobuf_AddDesc_FResultSvrRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FResultSvrRpc.proto");
  GOOGLE_CHECK(file != NULL);
  FResultRpcCalculationFResultNotify_descriptor_ = file->message_type(0);
  static const int FResultRpcCalculationFResultNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FResultRpcCalculationFResultNotify, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FResultRpcCalculationFResultNotify, ateam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FResultRpcCalculationFResultNotify, bteam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FResultRpcCalculationFResultNotify, aorbwin_),
  };
  FResultRpcCalculationFResultNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FResultRpcCalculationFResultNotify_descriptor_,
      FResultRpcCalculationFResultNotify::default_instance_,
      FResultRpcCalculationFResultNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FResultRpcCalculationFResultNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FResultRpcCalculationFResultNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FResultRpcCalculationFResultNotify));
  FResultTeamV_descriptor_ = file->message_type(1);
  static const int FResultTeamV_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FResultTeamV, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FResultTeamV, teamid_),
  };
  FResultTeamV_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FResultTeamV_descriptor_,
      FResultTeamV::default_instance_,
      FResultTeamV_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FResultTeamV, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FResultTeamV, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FResultTeamV));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FResultSvrRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FResultRpcCalculationFResultNotify_descriptor_, &FResultRpcCalculationFResultNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FResultTeamV_descriptor_, &FResultTeamV::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FResultSvrRpc_2eproto() {
  delete FResultRpcCalculationFResultNotify::default_instance_;
  delete FResultRpcCalculationFResultNotify_reflection_;
  delete FResultTeamV::default_instance_;
  delete FResultTeamV_reflection_;
}

void protobuf_AddDesc_FResultSvrRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023FResultSvrRpc.proto\032\022PublicStruct.prot"
    "o\"\205\001\n\"FResultRpcCalculationFResultNotify"
    "\022\017\n\004Type\030\001 \001(\021:\0011\022\034\n\005ATeam\030\002 \001(\0132\r.FResu"
    "ltTeamV\022\034\n\005BTeam\030\003 \001(\0132\r.FResultTeamV\022\022\n"
    "\007AOrBWin\030\004 \001(\021:\0010\"<\n\014FResultTeamV\022\030\n\004Rol"
    "e\030\001 \003(\0132\n.SmallUser\022\022\n\006Teamid\030\002 \001(\021:\002-1", 239);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FResultSvrRpc.proto", &protobuf_RegisterTypes);
  FResultRpcCalculationFResultNotify::default_instance_ = new FResultRpcCalculationFResultNotify();
  FResultTeamV::default_instance_ = new FResultTeamV();
  FResultRpcCalculationFResultNotify::default_instance_->InitAsDefaultInstance();
  FResultTeamV::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FResultSvrRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FResultSvrRpc_2eproto {
  StaticDescriptorInitializer_FResultSvrRpc_2eproto() {
    protobuf_AddDesc_FResultSvrRpc_2eproto();
  }
} static_descriptor_initializer_FResultSvrRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FResultRpcCalculationFResultNotify::kTypeFieldNumber;
const int FResultRpcCalculationFResultNotify::kATeamFieldNumber;
const int FResultRpcCalculationFResultNotify::kBTeamFieldNumber;
const int FResultRpcCalculationFResultNotify::kAOrBWinFieldNumber;
#endif  // !_MSC_VER

FResultRpcCalculationFResultNotify::FResultRpcCalculationFResultNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FResultRpcCalculationFResultNotify::InitAsDefaultInstance() {
  ateam_ = const_cast< ::FResultTeamV*>(&::FResultTeamV::default_instance());
  bteam_ = const_cast< ::FResultTeamV*>(&::FResultTeamV::default_instance());
}

FResultRpcCalculationFResultNotify::FResultRpcCalculationFResultNotify(const FResultRpcCalculationFResultNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FResultRpcCalculationFResultNotify::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ateam_ = NULL;
  bteam_ = NULL;
  aorbwin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FResultRpcCalculationFResultNotify::~FResultRpcCalculationFResultNotify() {
  SharedDtor();
}

void FResultRpcCalculationFResultNotify::SharedDtor() {
  if (this != default_instance_) {
    delete ateam_;
    delete bteam_;
  }
}

void FResultRpcCalculationFResultNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FResultRpcCalculationFResultNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FResultRpcCalculationFResultNotify_descriptor_;
}

const FResultRpcCalculationFResultNotify& FResultRpcCalculationFResultNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FResultSvrRpc_2eproto();
  return *default_instance_;
}

FResultRpcCalculationFResultNotify* FResultRpcCalculationFResultNotify::default_instance_ = NULL;

FResultRpcCalculationFResultNotify* FResultRpcCalculationFResultNotify::New() const {
  return new FResultRpcCalculationFResultNotify;
}

void FResultRpcCalculationFResultNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_ateam()) {
      if (ateam_ != NULL) ateam_->::FResultTeamV::Clear();
    }
    if (has_bteam()) {
      if (bteam_ != NULL) bteam_->::FResultTeamV::Clear();
    }
    aorbwin_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FResultRpcCalculationFResultNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Type = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ATeam;
        break;
      }

      // optional .FResultTeamV ATeam = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ATeam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ateam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_BTeam;
        break;
      }

      // optional .FResultTeamV BTeam = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BTeam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bteam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_AOrBWin;
        break;
      }

      // optional sint32 AOrBWin = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AOrBWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &aorbwin_)));
          set_has_aorbwin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FResultRpcCalculationFResultNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Type = 1 [default = 1];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->type(), output);
  }

  // optional .FResultTeamV ATeam = 2;
  if (has_ateam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ateam(), output);
  }

  // optional .FResultTeamV BTeam = 3;
  if (has_bteam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bteam(), output);
  }

  // optional sint32 AOrBWin = 4 [default = 0];
  if (has_aorbwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->aorbwin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FResultRpcCalculationFResultNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Type = 1 [default = 1];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->type(), target);
  }

  // optional .FResultTeamV ATeam = 2;
  if (has_ateam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ateam(), target);
  }

  // optional .FResultTeamV BTeam = 3;
  if (has_bteam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bteam(), target);
  }

  // optional sint32 AOrBWin = 4 [default = 0];
  if (has_aorbwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->aorbwin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FResultRpcCalculationFResultNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Type = 1 [default = 1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

    // optional .FResultTeamV ATeam = 2;
    if (has_ateam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ateam());
    }

    // optional .FResultTeamV BTeam = 3;
    if (has_bteam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bteam());
    }

    // optional sint32 AOrBWin = 4 [default = 0];
    if (has_aorbwin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->aorbwin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FResultRpcCalculationFResultNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FResultRpcCalculationFResultNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FResultRpcCalculationFResultNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FResultRpcCalculationFResultNotify::MergeFrom(const FResultRpcCalculationFResultNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ateam()) {
      mutable_ateam()->::FResultTeamV::MergeFrom(from.ateam());
    }
    if (from.has_bteam()) {
      mutable_bteam()->::FResultTeamV::MergeFrom(from.bteam());
    }
    if (from.has_aorbwin()) {
      set_aorbwin(from.aorbwin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FResultRpcCalculationFResultNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FResultRpcCalculationFResultNotify::CopyFrom(const FResultRpcCalculationFResultNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FResultRpcCalculationFResultNotify::IsInitialized() const {

  return true;
}

void FResultRpcCalculationFResultNotify::Swap(FResultRpcCalculationFResultNotify* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(ateam_, other->ateam_);
    std::swap(bteam_, other->bteam_);
    std::swap(aorbwin_, other->aorbwin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FResultRpcCalculationFResultNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FResultRpcCalculationFResultNotify_descriptor_;
  metadata.reflection = FResultRpcCalculationFResultNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FResultTeamV::kRoleFieldNumber;
const int FResultTeamV::kTeamidFieldNumber;
#endif  // !_MSC_VER

FResultTeamV::FResultTeamV()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FResultTeamV::InitAsDefaultInstance() {
}

FResultTeamV::FResultTeamV(const FResultTeamV& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FResultTeamV::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FResultTeamV::~FResultTeamV() {
  SharedDtor();
}

void FResultTeamV::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FResultTeamV::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FResultTeamV::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FResultTeamV_descriptor_;
}

const FResultTeamV& FResultTeamV::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FResultSvrRpc_2eproto();
  return *default_instance_;
}

FResultTeamV* FResultTeamV::default_instance_ = NULL;

FResultTeamV* FResultTeamV::New() const {
  return new FResultTeamV;
}

void FResultTeamV::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    teamid_ = -1;
  }
  role_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FResultTeamV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SmallUser Role = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Role;
        if (input->ExpectTag(16)) goto parse_Teamid;
        break;
      }

      // optional sint32 Teamid = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FResultTeamV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SmallUser Role = 1;
  for (int i = 0; i < this->role_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->role(i), output);
  }

  // optional sint32 Teamid = 2 [default = -1];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FResultTeamV::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SmallUser Role = 1;
  for (int i = 0; i < this->role_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->role(i), target);
  }

  // optional sint32 Teamid = 2 [default = -1];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FResultTeamV::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional sint32 Teamid = 2 [default = -1];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->teamid());
    }

  }
  // repeated .SmallUser Role = 1;
  total_size += 1 * this->role_size();
  for (int i = 0; i < this->role_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FResultTeamV::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FResultTeamV* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FResultTeamV*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FResultTeamV::MergeFrom(const FResultTeamV& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_.MergeFrom(from.role_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FResultTeamV::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FResultTeamV::CopyFrom(const FResultTeamV& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FResultTeamV::IsInitialized() const {

  return true;
}

void FResultTeamV::Swap(FResultTeamV* other) {
  if (other != this) {
    role_.Swap(&other->role_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FResultTeamV::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FResultTeamV_descriptor_;
  metadata.reflection = FResultTeamV_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
