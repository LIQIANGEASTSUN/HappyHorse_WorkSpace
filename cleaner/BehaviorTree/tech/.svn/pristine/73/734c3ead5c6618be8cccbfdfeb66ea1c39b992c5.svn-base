// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FightCliRpc.proto

#ifndef PROTOBUF_FightCliRpc_2eproto__INCLUDED
#define PROTOBUF_FightCliRpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "PublicStruct.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_FightCliRpc_2eproto();
void protobuf_AssignDesc_FightCliRpc_2eproto();
void protobuf_ShutdownFile_FightCliRpc_2eproto();

class FightFightUser;
class FightRpcSyncUserInfoNotify;
class FightRpcStartNotify;
class FightRpcSyncUserPropNotify;
class FightUserProp;
class FightRpcInsertRoomAsk;
class FightRpcInsertRoomReply;
class FightBuffData;
class FightRpcHPChangeNotify;
class FightRpcRoveOverNotify;
class FightRpcSkillTransferNotify;

// ===================================================================

class FightFightUser : public ::google::protobuf::Message {
 public:
  FightFightUser();
  virtual ~FightFightUser();

  FightFightUser(const FightFightUser& from);

  inline FightFightUser& operator=(const FightFightUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightFightUser& default_instance();

  void Swap(FightFightUser* other);

  // implements Message ----------------------------------------------

  FightFightUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FightFightUser& from);
  void MergeFrom(const FightFightUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 Uid = 1 [default = 0];
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);

  // optional sint32 ObjId = 11 [default = 0];
  inline bool has_objid() const;
  inline void clear_objid();
  static const int kObjIdFieldNumber = 11;
  inline ::google::protobuf::int32 objid() const;
  inline void set_objid(::google::protobuf::int32 value);

  // optional .Vector3PB Pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline const ::Vector3PB& pos() const;
  inline ::Vector3PB* mutable_pos();
  inline ::Vector3PB* release_pos();
  inline void set_allocated_pos(::Vector3PB* pos);

  // optional sint32 Stat = 3 [default = 0];
  inline bool has_stat() const;
  inline void clear_stat();
  static const int kStatFieldNumber = 3;
  inline ::google::protobuf::int32 stat() const;
  inline void set_stat(::google::protobuf::int32 value);

  // optional bool Shake = 4 [default = false];
  inline bool has_shake() const;
  inline void clear_shake();
  static const int kShakeFieldNumber = 4;
  inline bool shake() const;
  inline void set_shake(bool value);

  // optional float VAngle = 5 [default = 0];
  inline bool has_vangle() const;
  inline void clear_vangle();
  static const int kVAngleFieldNumber = 5;
  inline float vangle() const;
  inline void set_vangle(float value);

  // optional float HAngle = 6 [default = 0];
  inline bool has_hangle() const;
  inline void clear_hangle();
  static const int kHAngleFieldNumber = 6;
  inline float hangle() const;
  inline void set_hangle(float value);

  // optional sint32 Group = 7 [default = 0];
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 7;
  inline ::google::protobuf::int32 group() const;
  inline void set_group(::google::protobuf::int32 value);

  // optional sint32 HeroID = 8 [default = -1];
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 8;
  inline ::google::protobuf::int32 heroid() const;
  inline void set_heroid(::google::protobuf::int32 value);

  // optional .Vector3PB ForwardVec = 9;
  inline bool has_forwardvec() const;
  inline void clear_forwardvec();
  static const int kForwardVecFieldNumber = 9;
  inline const ::Vector3PB& forwardvec() const;
  inline ::Vector3PB* mutable_forwardvec();
  inline ::Vector3PB* release_forwardvec();
  inline void set_allocated_forwardvec(::Vector3PB* forwardvec);

  // optional .Vector3PB FootVec = 10;
  inline bool has_footvec() const;
  inline void clear_footvec();
  static const int kFootVecFieldNumber = 10;
  inline const ::Vector3PB& footvec() const;
  inline ::Vector3PB* mutable_footvec();
  inline ::Vector3PB* release_footvec();
  inline void set_allocated_footvec(::Vector3PB* footvec);

  // optional .FightUserProp Prop = 12;
  inline bool has_prop() const;
  inline void clear_prop();
  static const int kPropFieldNumber = 12;
  inline const ::FightUserProp& prop() const;
  inline ::FightUserProp* mutable_prop();
  inline ::FightUserProp* release_prop();
  inline void set_allocated_prop(::FightUserProp* prop);

  // optional sint32 AvatarID = 13 [default = -1];
  inline bool has_avatarid() const;
  inline void clear_avatarid();
  static const int kAvatarIDFieldNumber = 13;
  inline ::google::protobuf::int32 avatarid() const;
  inline void set_avatarid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightFightUser)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_objid();
  inline void clear_has_objid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_stat();
  inline void clear_has_stat();
  inline void set_has_shake();
  inline void clear_has_shake();
  inline void set_has_vangle();
  inline void clear_has_vangle();
  inline void set_has_hangle();
  inline void clear_has_hangle();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_forwardvec();
  inline void clear_has_forwardvec();
  inline void set_has_footvec();
  inline void clear_has_footvec();
  inline void set_has_prop();
  inline void clear_has_prop();
  inline void set_has_avatarid();
  inline void clear_has_avatarid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 uid_;
  ::Vector3PB* pos_;
  ::google::protobuf::int32 objid_;
  ::google::protobuf::int32 stat_;
  bool shake_;
  float vangle_;
  float hangle_;
  ::google::protobuf::int32 group_;
  ::Vector3PB* forwardvec_;
  ::Vector3PB* footvec_;
  ::google::protobuf::int32 heroid_;
  ::google::protobuf::int32 avatarid_;
  ::FightUserProp* prop_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_FightCliRpc_2eproto();
  friend void protobuf_AssignDesc_FightCliRpc_2eproto();
  friend void protobuf_ShutdownFile_FightCliRpc_2eproto();

  void InitAsDefaultInstance();
  static FightFightUser* default_instance_;
};
// -------------------------------------------------------------------

class FightRpcSyncUserInfoNotify : public ::google::protobuf::Message {
 public:
  FightRpcSyncUserInfoNotify();
  virtual ~FightRpcSyncUserInfoNotify();

  FightRpcSyncUserInfoNotify(const FightRpcSyncUserInfoNotify& from);

  inline FightRpcSyncUserInfoNotify& operator=(const FightRpcSyncUserInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightRpcSyncUserInfoNotify& default_instance();

  void Swap(FightRpcSyncUserInfoNotify* other);

  // implements Message ----------------------------------------------

  FightRpcSyncUserInfoNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FightRpcSyncUserInfoNotify& from);
  void MergeFrom(const FightRpcSyncUserInfoNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FightFightUser FightUserInfos = 1;
  inline int fightuserinfos_size() const;
  inline void clear_fightuserinfos();
  static const int kFightUserInfosFieldNumber = 1;
  inline const ::FightFightUser& fightuserinfos(int index) const;
  inline ::FightFightUser* mutable_fightuserinfos(int index);
  inline ::FightFightUser* add_fightuserinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::FightFightUser >&
      fightuserinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::FightFightUser >*
      mutable_fightuserinfos();

  // @@protoc_insertion_point(class_scope:FightRpcSyncUserInfoNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::FightFightUser > fightuserinfos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FightCliRpc_2eproto();
  friend void protobuf_AssignDesc_FightCliRpc_2eproto();
  friend void protobuf_ShutdownFile_FightCliRpc_2eproto();

  void InitAsDefaultInstance();
  static FightRpcSyncUserInfoNotify* default_instance_;
};
// -------------------------------------------------------------------

class FightRpcStartNotify : public ::google::protobuf::Message {
 public:
  FightRpcStartNotify();
  virtual ~FightRpcStartNotify();

  FightRpcStartNotify(const FightRpcStartNotify& from);

  inline FightRpcStartNotify& operator=(const FightRpcStartNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightRpcStartNotify& default_instance();

  void Swap(FightRpcStartNotify* other);

  // implements Message ----------------------------------------------

  FightRpcStartNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FightRpcStartNotify& from);
  void MergeFrom(const FightRpcStartNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FightFightUser FightUserInfos = 1;
  inline int fightuserinfos_size() const;
  inline void clear_fightuserinfos();
  static const int kFightUserInfosFieldNumber = 1;
  inline const ::FightFightUser& fightuserinfos(int index) const;
  inline ::FightFightUser* mutable_fightuserinfos(int index);
  inline ::FightFightUser* add_fightuserinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::FightFightUser >&
      fightuserinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::FightFightUser >*
      mutable_fightuserinfos();

  // optional sint32 Sumtime = 2 [default = 0];
  inline bool has_sumtime() const;
  inline void clear_sumtime();
  static const int kSumtimeFieldNumber = 2;
  inline ::google::protobuf::int32 sumtime() const;
  inline void set_sumtime(::google::protobuf::int32 value);

  // optional sint64 Uid = 3 [default = 0];
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 3;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);

  // optional sint32 SceneID = 4 [default = 1];
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneIDFieldNumber = 4;
  inline ::google::protobuf::int32 sceneid() const;
  inline void set_sceneid(::google::protobuf::int32 value);

  // optional sint32 ObjId = 5 [default = -1];
  inline bool has_objid() const;
  inline void clear_objid();
  static const int kObjIdFieldNumber = 5;
  inline ::google::protobuf::int32 objid() const;
  inline void set_objid(::google::protobuf::int32 value);

  // optional sint32 TeamFlagC0 = 6 [default = 1];
  inline bool has_teamflagc0() const;
  inline void clear_teamflagc0();
  static const int kTeamFlagC0FieldNumber = 6;
  inline ::google::protobuf::int32 teamflagc0() const;
  inline void set_teamflagc0(::google::protobuf::int32 value);

  // optional sint32 TeamFlagC1 = 7 [default = 1];
  inline bool has_teamflagc1() const;
  inline void clear_teamflagc1();
  static const int kTeamFlagC1FieldNumber = 7;
  inline ::google::protobuf::int32 teamflagc1() const;
  inline void set_teamflagc1(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightRpcStartNotify)
 private:
  inline void set_has_sumtime();
  inline void clear_has_sumtime();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_sceneid();
  inline void clear_has_sceneid();
  inline void set_has_objid();
  inline void clear_has_objid();
  inline void set_has_teamflagc0();
  inline void clear_has_teamflagc0();
  inline void set_has_teamflagc1();
  inline void clear_has_teamflagc1();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::FightFightUser > fightuserinfos_;
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int32 sumtime_;
  ::google::protobuf::int32 sceneid_;
  ::google::protobuf::int32 objid_;
  ::google::protobuf::int32 teamflagc0_;
  ::google::protobuf::int32 teamflagc1_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_FightCliRpc_2eproto();
  friend void protobuf_AssignDesc_FightCliRpc_2eproto();
  friend void protobuf_ShutdownFile_FightCliRpc_2eproto();

  void InitAsDefaultInstance();
  static FightRpcStartNotify* default_instance_;
};
// -------------------------------------------------------------------

class FightRpcSyncUserPropNotify : public ::google::protobuf::Message {
 public:
  FightRpcSyncUserPropNotify();
  virtual ~FightRpcSyncUserPropNotify();

  FightRpcSyncUserPropNotify(const FightRpcSyncUserPropNotify& from);

  inline FightRpcSyncUserPropNotify& operator=(const FightRpcSyncUserPropNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightRpcSyncUserPropNotify& default_instance();

  void Swap(FightRpcSyncUserPropNotify* other);

  // implements Message ----------------------------------------------

  FightRpcSyncUserPropNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FightRpcSyncUserPropNotify& from);
  void MergeFrom(const FightRpcSyncUserPropNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FightUserProp UserValue = 1;
  inline int uservalue_size() const;
  inline void clear_uservalue();
  static const int kUserValueFieldNumber = 1;
  inline const ::FightUserProp& uservalue(int index) const;
  inline ::FightUserProp* mutable_uservalue(int index);
  inline ::FightUserProp* add_uservalue();
  inline const ::google::protobuf::RepeatedPtrField< ::FightUserProp >&
      uservalue() const;
  inline ::google::protobuf::RepeatedPtrField< ::FightUserProp >*
      mutable_uservalue();

  // optional sint32 Type = 7 [default = 0];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightRpcSyncUserPropNotify)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::FightUserProp > uservalue_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_FightCliRpc_2eproto();
  friend void protobuf_AssignDesc_FightCliRpc_2eproto();
  friend void protobuf_ShutdownFile_FightCliRpc_2eproto();

  void InitAsDefaultInstance();
  static FightRpcSyncUserPropNotify* default_instance_;
};
// -------------------------------------------------------------------

class FightUserProp : public ::google::protobuf::Message {
 public:
  FightUserProp();
  virtual ~FightUserProp();

  FightUserProp(const FightUserProp& from);

  inline FightUserProp& operator=(const FightUserProp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightUserProp& default_instance();

  void Swap(FightUserProp* other);

  // implements Message ----------------------------------------------

  FightUserProp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FightUserProp& from);
  void MergeFrom(const FightUserProp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 ObjId = 1 [default = 0];
  inline bool has_objid() const;
  inline void clear_objid();
  static const int kObjIdFieldNumber = 1;
  inline ::google::protobuf::int32 objid() const;
  inline void set_objid(::google::protobuf::int32 value);

  // optional float Hp = 2 [default = 0];
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 2;
  inline float hp() const;
  inline void set_hp(float value);

  // optional float Energy = 3 [default = 0];
  inline bool has_energy() const;
  inline void clear_energy();
  static const int kEnergyFieldNumber = 3;
  inline float energy() const;
  inline void set_energy(float value);

  // optional float Stunt = 4 [default = 0];
  inline bool has_stunt() const;
  inline void clear_stunt();
  static const int kStuntFieldNumber = 4;
  inline float stunt() const;
  inline void set_stunt(float value);

  // optional sint32 HeroID = 5 [default = -1];
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 5;
  inline ::google::protobuf::int32 heroid() const;
  inline void set_heroid(::google::protobuf::int32 value);

  // optional sint32 IsMonster = 6 [default = -1];
  inline bool has_ismonster() const;
  inline void clear_ismonster();
  static const int kIsMonsterFieldNumber = 6;
  inline ::google::protobuf::int32 ismonster() const;
  inline void set_ismonster(::google::protobuf::int32 value);

  // optional sint32 Group = 8 [default = 0];
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 8;
  inline ::google::protobuf::int32 group() const;
  inline void set_group(::google::protobuf::int32 value);

  // optional sint32 State = 9 [default = 0];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 9;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional sint64 ReviveTime = 10 [default = 0];
  inline bool has_revivetime() const;
  inline void clear_revivetime();
  static const int kReviveTimeFieldNumber = 10;
  inline ::google::protobuf::int64 revivetime() const;
  inline void set_revivetime(::google::protobuf::int64 value);

  // optional sint64 ReviveTimeSys = 11 [default = 0];
  inline bool has_revivetimesys() const;
  inline void clear_revivetimesys();
  static const int kReviveTimeSysFieldNumber = 11;
  inline ::google::protobuf::int64 revivetimesys() const;
  inline void set_revivetimesys(::google::protobuf::int64 value);

  // optional sint32 KillPeopleNum = 12 [default = 0];
  inline bool has_killpeoplenum() const;
  inline void clear_killpeoplenum();
  static const int kKillPeopleNumFieldNumber = 12;
  inline ::google::protobuf::int32 killpeoplenum() const;
  inline void set_killpeoplenum(::google::protobuf::int32 value);

  // repeated .FightBuffData BuffV = 13;
  inline int buffv_size() const;
  inline void clear_buffv();
  static const int kBuffVFieldNumber = 13;
  inline const ::FightBuffData& buffv(int index) const;
  inline ::FightBuffData* mutable_buffv(int index);
  inline ::FightBuffData* add_buffv();
  inline const ::google::protobuf::RepeatedPtrField< ::FightBuffData >&
      buffv() const;
  inline ::google::protobuf::RepeatedPtrField< ::FightBuffData >*
      mutable_buffv();

  // optional sint32 Flag = 14 [default = -1];
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 14;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // optional sint32 Seed = 16 [default = 0];
  inline bool has_seed() const;
  inline void clear_seed();
  static const int kSeedFieldNumber = 16;
  inline ::google::protobuf::int32 seed() const;
  inline void set_seed(::google::protobuf::int32 value);

  // optional sint64 MainMonster = 19 [default = -1];
  inline bool has_mainmonster() const;
  inline void clear_mainmonster();
  static const int kMainMonsterFieldNumber = 19;
  inline ::google::protobuf::int64 mainmonster() const;
  inline void set_mainmonster(::google::protobuf::int64 value);

  // optional sint32 AvatarID = 20 [default = -1];
  inline bool has_avatarid() const;
  inline void clear_avatarid();
  static const int kAvatarIDFieldNumber = 20;
  inline ::google::protobuf::int32 avatarid() const;
  inline void set_avatarid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightUserProp)
 private:
  inline void set_has_objid();
  inline void clear_has_objid();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_energy();
  inline void clear_has_energy();
  inline void set_has_stunt();
  inline void clear_has_stunt();
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_ismonster();
  inline void clear_has_ismonster();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_revivetime();
  inline void clear_has_revivetime();
  inline void set_has_revivetimesys();
  inline void clear_has_revivetimesys();
  inline void set_has_killpeoplenum();
  inline void clear_has_killpeoplenum();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_seed();
  inline void clear_has_seed();
  inline void set_has_mainmonster();
  inline void clear_has_mainmonster();
  inline void set_has_avatarid();
  inline void clear_has_avatarid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 objid_;
  float hp_;
  float energy_;
  float stunt_;
  ::google::protobuf::int32 heroid_;
  ::google::protobuf::int32 ismonster_;
  ::google::protobuf::int32 group_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int64 revivetime_;
  ::google::protobuf::int64 revivetimesys_;
  ::google::protobuf::RepeatedPtrField< ::FightBuffData > buffv_;
  ::google::protobuf::int32 killpeoplenum_;
  ::google::protobuf::int32 flag_;
  ::google::protobuf::int64 mainmonster_;
  ::google::protobuf::int32 seed_;
  ::google::protobuf::int32 avatarid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_FightCliRpc_2eproto();
  friend void protobuf_AssignDesc_FightCliRpc_2eproto();
  friend void protobuf_ShutdownFile_FightCliRpc_2eproto();

  void InitAsDefaultInstance();
  static FightUserProp* default_instance_;
};
// -------------------------------------------------------------------

class FightRpcInsertRoomAsk : public ::google::protobuf::Message {
 public:
  FightRpcInsertRoomAsk();
  virtual ~FightRpcInsertRoomAsk();

  FightRpcInsertRoomAsk(const FightRpcInsertRoomAsk& from);

  inline FightRpcInsertRoomAsk& operator=(const FightRpcInsertRoomAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightRpcInsertRoomAsk& default_instance();

  void Swap(FightRpcInsertRoomAsk* other);

  // implements Message ----------------------------------------------

  FightRpcInsertRoomAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FightRpcInsertRoomAsk& from);
  void MergeFrom(const FightRpcInsertRoomAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:FightRpcInsertRoomAsk)
 private:
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FightCliRpc_2eproto();
  friend void protobuf_AssignDesc_FightCliRpc_2eproto();
  friend void protobuf_ShutdownFile_FightCliRpc_2eproto();

  void InitAsDefaultInstance();
  static FightRpcInsertRoomAsk* default_instance_;
};
// -------------------------------------------------------------------

class FightRpcInsertRoomReply : public ::google::protobuf::Message {
 public:
  FightRpcInsertRoomReply();
  virtual ~FightRpcInsertRoomReply();

  FightRpcInsertRoomReply(const FightRpcInsertRoomReply& from);

  inline FightRpcInsertRoomReply& operator=(const FightRpcInsertRoomReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightRpcInsertRoomReply& default_instance();

  void Swap(FightRpcInsertRoomReply* other);

  // implements Message ----------------------------------------------

  FightRpcInsertRoomReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FightRpcInsertRoomReply& from);
  void MergeFrom(const FightRpcInsertRoomReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightRpcInsertRoomReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FightCliRpc_2eproto();
  friend void protobuf_AssignDesc_FightCliRpc_2eproto();
  friend void protobuf_ShutdownFile_FightCliRpc_2eproto();

  void InitAsDefaultInstance();
  static FightRpcInsertRoomReply* default_instance_;
};
// -------------------------------------------------------------------

class FightBuffData : public ::google::protobuf::Message {
 public:
  FightBuffData();
  virtual ~FightBuffData();

  FightBuffData(const FightBuffData& from);

  inline FightBuffData& operator=(const FightBuffData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightBuffData& default_instance();

  void Swap(FightBuffData* other);

  // implements Message ----------------------------------------------

  FightBuffData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FightBuffData& from);
  void MergeFrom(const FightBuffData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 ID = 2 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional sint32 Lifttime = 5 [default = 0];
  inline bool has_lifttime() const;
  inline void clear_lifttime();
  static const int kLifttimeFieldNumber = 5;
  inline ::google::protobuf::int32 lifttime() const;
  inline void set_lifttime(::google::protobuf::int32 value);

  // optional .Vector3PB Pos = 9;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 9;
  inline const ::Vector3PB& pos() const;
  inline ::Vector3PB* mutable_pos();
  inline ::Vector3PB* release_pos();
  inline void set_allocated_pos(::Vector3PB* pos);

  // @@protoc_insertion_point(class_scope:FightBuffData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_lifttime();
  inline void clear_has_lifttime();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 lifttime_;
  ::Vector3PB* pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_FightCliRpc_2eproto();
  friend void protobuf_AssignDesc_FightCliRpc_2eproto();
  friend void protobuf_ShutdownFile_FightCliRpc_2eproto();

  void InitAsDefaultInstance();
  static FightBuffData* default_instance_;
};
// -------------------------------------------------------------------

class FightRpcHPChangeNotify : public ::google::protobuf::Message {
 public:
  FightRpcHPChangeNotify();
  virtual ~FightRpcHPChangeNotify();

  FightRpcHPChangeNotify(const FightRpcHPChangeNotify& from);

  inline FightRpcHPChangeNotify& operator=(const FightRpcHPChangeNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightRpcHPChangeNotify& default_instance();

  void Swap(FightRpcHPChangeNotify* other);

  // implements Message ----------------------------------------------

  FightRpcHPChangeNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FightRpcHPChangeNotify& from);
  void MergeFrom(const FightRpcHPChangeNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Objid = 1 [default = -1];
  inline bool has_objid() const;
  inline void clear_objid();
  static const int kObjidFieldNumber = 1;
  inline ::google::protobuf::int32 objid() const;
  inline void set_objid(::google::protobuf::int32 value);

  // optional sint32 ObjSrcId = 2 [default = -1];
  inline bool has_objsrcid() const;
  inline void clear_objsrcid();
  static const int kObjSrcIdFieldNumber = 2;
  inline ::google::protobuf::int32 objsrcid() const;
  inline void set_objsrcid(::google::protobuf::int32 value);

  // optional sint32 ChangeHP = 3 [default = -1];
  inline bool has_changehp() const;
  inline void clear_changehp();
  static const int kChangeHPFieldNumber = 3;
  inline ::google::protobuf::int32 changehp() const;
  inline void set_changehp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightRpcHPChangeNotify)
 private:
  inline void set_has_objid();
  inline void clear_has_objid();
  inline void set_has_objsrcid();
  inline void clear_has_objsrcid();
  inline void set_has_changehp();
  inline void clear_has_changehp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 objid_;
  ::google::protobuf::int32 objsrcid_;
  ::google::protobuf::int32 changehp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_FightCliRpc_2eproto();
  friend void protobuf_AssignDesc_FightCliRpc_2eproto();
  friend void protobuf_ShutdownFile_FightCliRpc_2eproto();

  void InitAsDefaultInstance();
  static FightRpcHPChangeNotify* default_instance_;
};
// -------------------------------------------------------------------

class FightRpcRoveOverNotify : public ::google::protobuf::Message {
 public:
  FightRpcRoveOverNotify();
  virtual ~FightRpcRoveOverNotify();

  FightRpcRoveOverNotify(const FightRpcRoveOverNotify& from);

  inline FightRpcRoveOverNotify& operator=(const FightRpcRoveOverNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightRpcRoveOverNotify& default_instance();

  void Swap(FightRpcRoveOverNotify* other);

  // implements Message ----------------------------------------------

  FightRpcRoveOverNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FightRpcRoveOverNotify& from);
  void MergeFrom(const FightRpcRoveOverNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Timer = 1 [default = 0];
  inline bool has_timer() const;
  inline void clear_timer();
  static const int kTimerFieldNumber = 1;
  inline ::google::protobuf::int32 timer() const;
  inline void set_timer(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightRpcRoveOverNotify)
 private:
  inline void set_has_timer();
  inline void clear_has_timer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 timer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FightCliRpc_2eproto();
  friend void protobuf_AssignDesc_FightCliRpc_2eproto();
  friend void protobuf_ShutdownFile_FightCliRpc_2eproto();

  void InitAsDefaultInstance();
  static FightRpcRoveOverNotify* default_instance_;
};
// -------------------------------------------------------------------

class FightRpcSkillTransferNotify : public ::google::protobuf::Message {
 public:
  FightRpcSkillTransferNotify();
  virtual ~FightRpcSkillTransferNotify();

  FightRpcSkillTransferNotify(const FightRpcSkillTransferNotify& from);

  inline FightRpcSkillTransferNotify& operator=(const FightRpcSkillTransferNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightRpcSkillTransferNotify& default_instance();

  void Swap(FightRpcSkillTransferNotify* other);

  // implements Message ----------------------------------------------

  FightRpcSkillTransferNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FightRpcSkillTransferNotify& from);
  void MergeFrom(const FightRpcSkillTransferNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 ObjId = 1 [default = -1];
  inline bool has_objid() const;
  inline void clear_objid();
  static const int kObjIdFieldNumber = 1;
  inline ::google::protobuf::int32 objid() const;
  inline void set_objid(::google::protobuf::int32 value);

  // optional sint32 SkillId = 2 [default = -1];
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIdFieldNumber = 2;
  inline ::google::protobuf::int32 skillid() const;
  inline void set_skillid(::google::protobuf::int32 value);

  // optional sint32 TargetObjId = 3 [default = -1];
  inline bool has_targetobjid() const;
  inline void clear_targetobjid();
  static const int kTargetObjIdFieldNumber = 3;
  inline ::google::protobuf::int32 targetobjid() const;
  inline void set_targetobjid(::google::protobuf::int32 value);

  // optional .Vector3PB TargetPos = 4;
  inline bool has_targetpos() const;
  inline void clear_targetpos();
  static const int kTargetPosFieldNumber = 4;
  inline const ::Vector3PB& targetpos() const;
  inline ::Vector3PB* mutable_targetpos();
  inline ::Vector3PB* release_targetpos();
  inline void set_allocated_targetpos(::Vector3PB* targetpos);

  // optional sint32 Ret = 5 [default = -1];
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 5;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional sint32 Type = 6 [default = -1];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightRpcSkillTransferNotify)
 private:
  inline void set_has_objid();
  inline void clear_has_objid();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_targetobjid();
  inline void clear_has_targetobjid();
  inline void set_has_targetpos();
  inline void clear_has_targetpos();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 objid_;
  ::google::protobuf::int32 skillid_;
  ::Vector3PB* targetpos_;
  ::google::protobuf::int32 targetobjid_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_FightCliRpc_2eproto();
  friend void protobuf_AssignDesc_FightCliRpc_2eproto();
  friend void protobuf_ShutdownFile_FightCliRpc_2eproto();

  void InitAsDefaultInstance();
  static FightRpcSkillTransferNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// FightFightUser

// optional sint64 Uid = 1 [default = 0];
inline bool FightFightUser::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightFightUser::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightFightUser::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightFightUser::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::int64 FightFightUser::uid() const {
  return uid_;
}
inline void FightFightUser::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// optional sint32 ObjId = 11 [default = 0];
inline bool FightFightUser::has_objid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightFightUser::set_has_objid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightFightUser::clear_has_objid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightFightUser::clear_objid() {
  objid_ = 0;
  clear_has_objid();
}
inline ::google::protobuf::int32 FightFightUser::objid() const {
  return objid_;
}
inline void FightFightUser::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
}

// optional .Vector3PB Pos = 2;
inline bool FightFightUser::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightFightUser::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightFightUser::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightFightUser::clear_pos() {
  if (pos_ != NULL) pos_->::Vector3PB::Clear();
  clear_has_pos();
}
inline const ::Vector3PB& FightFightUser::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::Vector3PB* FightFightUser::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::Vector3PB;
  return pos_;
}
inline ::Vector3PB* FightFightUser::release_pos() {
  clear_has_pos();
  ::Vector3PB* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void FightFightUser::set_allocated_pos(::Vector3PB* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// optional sint32 Stat = 3 [default = 0];
inline bool FightFightUser::has_stat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FightFightUser::set_has_stat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FightFightUser::clear_has_stat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FightFightUser::clear_stat() {
  stat_ = 0;
  clear_has_stat();
}
inline ::google::protobuf::int32 FightFightUser::stat() const {
  return stat_;
}
inline void FightFightUser::set_stat(::google::protobuf::int32 value) {
  set_has_stat();
  stat_ = value;
}

// optional bool Shake = 4 [default = false];
inline bool FightFightUser::has_shake() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FightFightUser::set_has_shake() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FightFightUser::clear_has_shake() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FightFightUser::clear_shake() {
  shake_ = false;
  clear_has_shake();
}
inline bool FightFightUser::shake() const {
  return shake_;
}
inline void FightFightUser::set_shake(bool value) {
  set_has_shake();
  shake_ = value;
}

// optional float VAngle = 5 [default = 0];
inline bool FightFightUser::has_vangle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FightFightUser::set_has_vangle() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FightFightUser::clear_has_vangle() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FightFightUser::clear_vangle() {
  vangle_ = 0;
  clear_has_vangle();
}
inline float FightFightUser::vangle() const {
  return vangle_;
}
inline void FightFightUser::set_vangle(float value) {
  set_has_vangle();
  vangle_ = value;
}

// optional float HAngle = 6 [default = 0];
inline bool FightFightUser::has_hangle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FightFightUser::set_has_hangle() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FightFightUser::clear_has_hangle() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FightFightUser::clear_hangle() {
  hangle_ = 0;
  clear_has_hangle();
}
inline float FightFightUser::hangle() const {
  return hangle_;
}
inline void FightFightUser::set_hangle(float value) {
  set_has_hangle();
  hangle_ = value;
}

// optional sint32 Group = 7 [default = 0];
inline bool FightFightUser::has_group() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FightFightUser::set_has_group() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FightFightUser::clear_has_group() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FightFightUser::clear_group() {
  group_ = 0;
  clear_has_group();
}
inline ::google::protobuf::int32 FightFightUser::group() const {
  return group_;
}
inline void FightFightUser::set_group(::google::protobuf::int32 value) {
  set_has_group();
  group_ = value;
}

// optional sint32 HeroID = 8 [default = -1];
inline bool FightFightUser::has_heroid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FightFightUser::set_has_heroid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FightFightUser::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FightFightUser::clear_heroid() {
  heroid_ = -1;
  clear_has_heroid();
}
inline ::google::protobuf::int32 FightFightUser::heroid() const {
  return heroid_;
}
inline void FightFightUser::set_heroid(::google::protobuf::int32 value) {
  set_has_heroid();
  heroid_ = value;
}

// optional .Vector3PB ForwardVec = 9;
inline bool FightFightUser::has_forwardvec() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FightFightUser::set_has_forwardvec() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FightFightUser::clear_has_forwardvec() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FightFightUser::clear_forwardvec() {
  if (forwardvec_ != NULL) forwardvec_->::Vector3PB::Clear();
  clear_has_forwardvec();
}
inline const ::Vector3PB& FightFightUser::forwardvec() const {
  return forwardvec_ != NULL ? *forwardvec_ : *default_instance_->forwardvec_;
}
inline ::Vector3PB* FightFightUser::mutable_forwardvec() {
  set_has_forwardvec();
  if (forwardvec_ == NULL) forwardvec_ = new ::Vector3PB;
  return forwardvec_;
}
inline ::Vector3PB* FightFightUser::release_forwardvec() {
  clear_has_forwardvec();
  ::Vector3PB* temp = forwardvec_;
  forwardvec_ = NULL;
  return temp;
}
inline void FightFightUser::set_allocated_forwardvec(::Vector3PB* forwardvec) {
  delete forwardvec_;
  forwardvec_ = forwardvec;
  if (forwardvec) {
    set_has_forwardvec();
  } else {
    clear_has_forwardvec();
  }
}

// optional .Vector3PB FootVec = 10;
inline bool FightFightUser::has_footvec() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FightFightUser::set_has_footvec() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FightFightUser::clear_has_footvec() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FightFightUser::clear_footvec() {
  if (footvec_ != NULL) footvec_->::Vector3PB::Clear();
  clear_has_footvec();
}
inline const ::Vector3PB& FightFightUser::footvec() const {
  return footvec_ != NULL ? *footvec_ : *default_instance_->footvec_;
}
inline ::Vector3PB* FightFightUser::mutable_footvec() {
  set_has_footvec();
  if (footvec_ == NULL) footvec_ = new ::Vector3PB;
  return footvec_;
}
inline ::Vector3PB* FightFightUser::release_footvec() {
  clear_has_footvec();
  ::Vector3PB* temp = footvec_;
  footvec_ = NULL;
  return temp;
}
inline void FightFightUser::set_allocated_footvec(::Vector3PB* footvec) {
  delete footvec_;
  footvec_ = footvec;
  if (footvec) {
    set_has_footvec();
  } else {
    clear_has_footvec();
  }
}

// optional .FightUserProp Prop = 12;
inline bool FightFightUser::has_prop() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FightFightUser::set_has_prop() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FightFightUser::clear_has_prop() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FightFightUser::clear_prop() {
  if (prop_ != NULL) prop_->::FightUserProp::Clear();
  clear_has_prop();
}
inline const ::FightUserProp& FightFightUser::prop() const {
  return prop_ != NULL ? *prop_ : *default_instance_->prop_;
}
inline ::FightUserProp* FightFightUser::mutable_prop() {
  set_has_prop();
  if (prop_ == NULL) prop_ = new ::FightUserProp;
  return prop_;
}
inline ::FightUserProp* FightFightUser::release_prop() {
  clear_has_prop();
  ::FightUserProp* temp = prop_;
  prop_ = NULL;
  return temp;
}
inline void FightFightUser::set_allocated_prop(::FightUserProp* prop) {
  delete prop_;
  prop_ = prop;
  if (prop) {
    set_has_prop();
  } else {
    clear_has_prop();
  }
}

// optional sint32 AvatarID = 13 [default = -1];
inline bool FightFightUser::has_avatarid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FightFightUser::set_has_avatarid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FightFightUser::clear_has_avatarid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FightFightUser::clear_avatarid() {
  avatarid_ = -1;
  clear_has_avatarid();
}
inline ::google::protobuf::int32 FightFightUser::avatarid() const {
  return avatarid_;
}
inline void FightFightUser::set_avatarid(::google::protobuf::int32 value) {
  set_has_avatarid();
  avatarid_ = value;
}

// -------------------------------------------------------------------

// FightRpcSyncUserInfoNotify

// repeated .FightFightUser FightUserInfos = 1;
inline int FightRpcSyncUserInfoNotify::fightuserinfos_size() const {
  return fightuserinfos_.size();
}
inline void FightRpcSyncUserInfoNotify::clear_fightuserinfos() {
  fightuserinfos_.Clear();
}
inline const ::FightFightUser& FightRpcSyncUserInfoNotify::fightuserinfos(int index) const {
  return fightuserinfos_.Get(index);
}
inline ::FightFightUser* FightRpcSyncUserInfoNotify::mutable_fightuserinfos(int index) {
  return fightuserinfos_.Mutable(index);
}
inline ::FightFightUser* FightRpcSyncUserInfoNotify::add_fightuserinfos() {
  return fightuserinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FightFightUser >&
FightRpcSyncUserInfoNotify::fightuserinfos() const {
  return fightuserinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::FightFightUser >*
FightRpcSyncUserInfoNotify::mutable_fightuserinfos() {
  return &fightuserinfos_;
}

// -------------------------------------------------------------------

// FightRpcStartNotify

// repeated .FightFightUser FightUserInfos = 1;
inline int FightRpcStartNotify::fightuserinfos_size() const {
  return fightuserinfos_.size();
}
inline void FightRpcStartNotify::clear_fightuserinfos() {
  fightuserinfos_.Clear();
}
inline const ::FightFightUser& FightRpcStartNotify::fightuserinfos(int index) const {
  return fightuserinfos_.Get(index);
}
inline ::FightFightUser* FightRpcStartNotify::mutable_fightuserinfos(int index) {
  return fightuserinfos_.Mutable(index);
}
inline ::FightFightUser* FightRpcStartNotify::add_fightuserinfos() {
  return fightuserinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FightFightUser >&
FightRpcStartNotify::fightuserinfos() const {
  return fightuserinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::FightFightUser >*
FightRpcStartNotify::mutable_fightuserinfos() {
  return &fightuserinfos_;
}

// optional sint32 Sumtime = 2 [default = 0];
inline bool FightRpcStartNotify::has_sumtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightRpcStartNotify::set_has_sumtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightRpcStartNotify::clear_has_sumtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightRpcStartNotify::clear_sumtime() {
  sumtime_ = 0;
  clear_has_sumtime();
}
inline ::google::protobuf::int32 FightRpcStartNotify::sumtime() const {
  return sumtime_;
}
inline void FightRpcStartNotify::set_sumtime(::google::protobuf::int32 value) {
  set_has_sumtime();
  sumtime_ = value;
}

// optional sint64 Uid = 3 [default = 0];
inline bool FightRpcStartNotify::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightRpcStartNotify::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightRpcStartNotify::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightRpcStartNotify::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::int64 FightRpcStartNotify::uid() const {
  return uid_;
}
inline void FightRpcStartNotify::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// optional sint32 SceneID = 4 [default = 1];
inline bool FightRpcStartNotify::has_sceneid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FightRpcStartNotify::set_has_sceneid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FightRpcStartNotify::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FightRpcStartNotify::clear_sceneid() {
  sceneid_ = 1;
  clear_has_sceneid();
}
inline ::google::protobuf::int32 FightRpcStartNotify::sceneid() const {
  return sceneid_;
}
inline void FightRpcStartNotify::set_sceneid(::google::protobuf::int32 value) {
  set_has_sceneid();
  sceneid_ = value;
}

// optional sint32 ObjId = 5 [default = -1];
inline bool FightRpcStartNotify::has_objid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FightRpcStartNotify::set_has_objid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FightRpcStartNotify::clear_has_objid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FightRpcStartNotify::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
inline ::google::protobuf::int32 FightRpcStartNotify::objid() const {
  return objid_;
}
inline void FightRpcStartNotify::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
}

// optional sint32 TeamFlagC0 = 6 [default = 1];
inline bool FightRpcStartNotify::has_teamflagc0() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FightRpcStartNotify::set_has_teamflagc0() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FightRpcStartNotify::clear_has_teamflagc0() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FightRpcStartNotify::clear_teamflagc0() {
  teamflagc0_ = 1;
  clear_has_teamflagc0();
}
inline ::google::protobuf::int32 FightRpcStartNotify::teamflagc0() const {
  return teamflagc0_;
}
inline void FightRpcStartNotify::set_teamflagc0(::google::protobuf::int32 value) {
  set_has_teamflagc0();
  teamflagc0_ = value;
}

// optional sint32 TeamFlagC1 = 7 [default = 1];
inline bool FightRpcStartNotify::has_teamflagc1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FightRpcStartNotify::set_has_teamflagc1() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FightRpcStartNotify::clear_has_teamflagc1() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FightRpcStartNotify::clear_teamflagc1() {
  teamflagc1_ = 1;
  clear_has_teamflagc1();
}
inline ::google::protobuf::int32 FightRpcStartNotify::teamflagc1() const {
  return teamflagc1_;
}
inline void FightRpcStartNotify::set_teamflagc1(::google::protobuf::int32 value) {
  set_has_teamflagc1();
  teamflagc1_ = value;
}

// -------------------------------------------------------------------

// FightRpcSyncUserPropNotify

// repeated .FightUserProp UserValue = 1;
inline int FightRpcSyncUserPropNotify::uservalue_size() const {
  return uservalue_.size();
}
inline void FightRpcSyncUserPropNotify::clear_uservalue() {
  uservalue_.Clear();
}
inline const ::FightUserProp& FightRpcSyncUserPropNotify::uservalue(int index) const {
  return uservalue_.Get(index);
}
inline ::FightUserProp* FightRpcSyncUserPropNotify::mutable_uservalue(int index) {
  return uservalue_.Mutable(index);
}
inline ::FightUserProp* FightRpcSyncUserPropNotify::add_uservalue() {
  return uservalue_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FightUserProp >&
FightRpcSyncUserPropNotify::uservalue() const {
  return uservalue_;
}
inline ::google::protobuf::RepeatedPtrField< ::FightUserProp >*
FightRpcSyncUserPropNotify::mutable_uservalue() {
  return &uservalue_;
}

// optional sint32 Type = 7 [default = 0];
inline bool FightRpcSyncUserPropNotify::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightRpcSyncUserPropNotify::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightRpcSyncUserPropNotify::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightRpcSyncUserPropNotify::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 FightRpcSyncUserPropNotify::type() const {
  return type_;
}
inline void FightRpcSyncUserPropNotify::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// FightUserProp

// optional sint32 ObjId = 1 [default = 0];
inline bool FightUserProp::has_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightUserProp::set_has_objid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightUserProp::clear_has_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightUserProp::clear_objid() {
  objid_ = 0;
  clear_has_objid();
}
inline ::google::protobuf::int32 FightUserProp::objid() const {
  return objid_;
}
inline void FightUserProp::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
}

// optional float Hp = 2 [default = 0];
inline bool FightUserProp::has_hp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightUserProp::set_has_hp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightUserProp::clear_has_hp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightUserProp::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline float FightUserProp::hp() const {
  return hp_;
}
inline void FightUserProp::set_hp(float value) {
  set_has_hp();
  hp_ = value;
}

// optional float Energy = 3 [default = 0];
inline bool FightUserProp::has_energy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightUserProp::set_has_energy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightUserProp::clear_has_energy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightUserProp::clear_energy() {
  energy_ = 0;
  clear_has_energy();
}
inline float FightUserProp::energy() const {
  return energy_;
}
inline void FightUserProp::set_energy(float value) {
  set_has_energy();
  energy_ = value;
}

// optional float Stunt = 4 [default = 0];
inline bool FightUserProp::has_stunt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FightUserProp::set_has_stunt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FightUserProp::clear_has_stunt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FightUserProp::clear_stunt() {
  stunt_ = 0;
  clear_has_stunt();
}
inline float FightUserProp::stunt() const {
  return stunt_;
}
inline void FightUserProp::set_stunt(float value) {
  set_has_stunt();
  stunt_ = value;
}

// optional sint32 HeroID = 5 [default = -1];
inline bool FightUserProp::has_heroid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FightUserProp::set_has_heroid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FightUserProp::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FightUserProp::clear_heroid() {
  heroid_ = -1;
  clear_has_heroid();
}
inline ::google::protobuf::int32 FightUserProp::heroid() const {
  return heroid_;
}
inline void FightUserProp::set_heroid(::google::protobuf::int32 value) {
  set_has_heroid();
  heroid_ = value;
}

// optional sint32 IsMonster = 6 [default = -1];
inline bool FightUserProp::has_ismonster() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FightUserProp::set_has_ismonster() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FightUserProp::clear_has_ismonster() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FightUserProp::clear_ismonster() {
  ismonster_ = -1;
  clear_has_ismonster();
}
inline ::google::protobuf::int32 FightUserProp::ismonster() const {
  return ismonster_;
}
inline void FightUserProp::set_ismonster(::google::protobuf::int32 value) {
  set_has_ismonster();
  ismonster_ = value;
}

// optional sint32 Group = 8 [default = 0];
inline bool FightUserProp::has_group() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FightUserProp::set_has_group() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FightUserProp::clear_has_group() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FightUserProp::clear_group() {
  group_ = 0;
  clear_has_group();
}
inline ::google::protobuf::int32 FightUserProp::group() const {
  return group_;
}
inline void FightUserProp::set_group(::google::protobuf::int32 value) {
  set_has_group();
  group_ = value;
}

// optional sint32 State = 9 [default = 0];
inline bool FightUserProp::has_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FightUserProp::set_has_state() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FightUserProp::clear_has_state() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FightUserProp::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 FightUserProp::state() const {
  return state_;
}
inline void FightUserProp::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional sint64 ReviveTime = 10 [default = 0];
inline bool FightUserProp::has_revivetime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FightUserProp::set_has_revivetime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FightUserProp::clear_has_revivetime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FightUserProp::clear_revivetime() {
  revivetime_ = GOOGLE_LONGLONG(0);
  clear_has_revivetime();
}
inline ::google::protobuf::int64 FightUserProp::revivetime() const {
  return revivetime_;
}
inline void FightUserProp::set_revivetime(::google::protobuf::int64 value) {
  set_has_revivetime();
  revivetime_ = value;
}

// optional sint64 ReviveTimeSys = 11 [default = 0];
inline bool FightUserProp::has_revivetimesys() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FightUserProp::set_has_revivetimesys() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FightUserProp::clear_has_revivetimesys() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FightUserProp::clear_revivetimesys() {
  revivetimesys_ = GOOGLE_LONGLONG(0);
  clear_has_revivetimesys();
}
inline ::google::protobuf::int64 FightUserProp::revivetimesys() const {
  return revivetimesys_;
}
inline void FightUserProp::set_revivetimesys(::google::protobuf::int64 value) {
  set_has_revivetimesys();
  revivetimesys_ = value;
}

// optional sint32 KillPeopleNum = 12 [default = 0];
inline bool FightUserProp::has_killpeoplenum() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FightUserProp::set_has_killpeoplenum() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FightUserProp::clear_has_killpeoplenum() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FightUserProp::clear_killpeoplenum() {
  killpeoplenum_ = 0;
  clear_has_killpeoplenum();
}
inline ::google::protobuf::int32 FightUserProp::killpeoplenum() const {
  return killpeoplenum_;
}
inline void FightUserProp::set_killpeoplenum(::google::protobuf::int32 value) {
  set_has_killpeoplenum();
  killpeoplenum_ = value;
}

// repeated .FightBuffData BuffV = 13;
inline int FightUserProp::buffv_size() const {
  return buffv_.size();
}
inline void FightUserProp::clear_buffv() {
  buffv_.Clear();
}
inline const ::FightBuffData& FightUserProp::buffv(int index) const {
  return buffv_.Get(index);
}
inline ::FightBuffData* FightUserProp::mutable_buffv(int index) {
  return buffv_.Mutable(index);
}
inline ::FightBuffData* FightUserProp::add_buffv() {
  return buffv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FightBuffData >&
FightUserProp::buffv() const {
  return buffv_;
}
inline ::google::protobuf::RepeatedPtrField< ::FightBuffData >*
FightUserProp::mutable_buffv() {
  return &buffv_;
}

// optional sint32 Flag = 14 [default = -1];
inline bool FightUserProp::has_flag() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FightUserProp::set_has_flag() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FightUserProp::clear_has_flag() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FightUserProp::clear_flag() {
  flag_ = -1;
  clear_has_flag();
}
inline ::google::protobuf::int32 FightUserProp::flag() const {
  return flag_;
}
inline void FightUserProp::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// optional sint32 Seed = 16 [default = 0];
inline bool FightUserProp::has_seed() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FightUserProp::set_has_seed() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FightUserProp::clear_has_seed() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FightUserProp::clear_seed() {
  seed_ = 0;
  clear_has_seed();
}
inline ::google::protobuf::int32 FightUserProp::seed() const {
  return seed_;
}
inline void FightUserProp::set_seed(::google::protobuf::int32 value) {
  set_has_seed();
  seed_ = value;
}

// optional sint64 MainMonster = 19 [default = -1];
inline bool FightUserProp::has_mainmonster() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FightUserProp::set_has_mainmonster() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FightUserProp::clear_has_mainmonster() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FightUserProp::clear_mainmonster() {
  mainmonster_ = GOOGLE_LONGLONG(-1);
  clear_has_mainmonster();
}
inline ::google::protobuf::int64 FightUserProp::mainmonster() const {
  return mainmonster_;
}
inline void FightUserProp::set_mainmonster(::google::protobuf::int64 value) {
  set_has_mainmonster();
  mainmonster_ = value;
}

// optional sint32 AvatarID = 20 [default = -1];
inline bool FightUserProp::has_avatarid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FightUserProp::set_has_avatarid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FightUserProp::clear_has_avatarid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FightUserProp::clear_avatarid() {
  avatarid_ = -1;
  clear_has_avatarid();
}
inline ::google::protobuf::int32 FightUserProp::avatarid() const {
  return avatarid_;
}
inline void FightUserProp::set_avatarid(::google::protobuf::int32 value) {
  set_has_avatarid();
  avatarid_ = value;
}

// -------------------------------------------------------------------

// FightRpcInsertRoomAsk

// optional string Key = 1;
inline bool FightRpcInsertRoomAsk::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightRpcInsertRoomAsk::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightRpcInsertRoomAsk::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightRpcInsertRoomAsk::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& FightRpcInsertRoomAsk::key() const {
  return *key_;
}
inline void FightRpcInsertRoomAsk::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void FightRpcInsertRoomAsk::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void FightRpcInsertRoomAsk::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FightRpcInsertRoomAsk::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* FightRpcInsertRoomAsk::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FightRpcInsertRoomAsk::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FightRpcInsertRoomReply

// optional sint32 Result = 1 [default = -9999];
inline bool FightRpcInsertRoomReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightRpcInsertRoomReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightRpcInsertRoomReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightRpcInsertRoomReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 FightRpcInsertRoomReply::result() const {
  return result_;
}
inline void FightRpcInsertRoomReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// FightBuffData

// optional sint32 ID = 2 [default = -1];
inline bool FightBuffData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightBuffData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightBuffData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightBuffData::clear_id() {
  id_ = -1;
  clear_has_id();
}
inline ::google::protobuf::int32 FightBuffData::id() const {
  return id_;
}
inline void FightBuffData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional sint32 Lifttime = 5 [default = 0];
inline bool FightBuffData::has_lifttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightBuffData::set_has_lifttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightBuffData::clear_has_lifttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightBuffData::clear_lifttime() {
  lifttime_ = 0;
  clear_has_lifttime();
}
inline ::google::protobuf::int32 FightBuffData::lifttime() const {
  return lifttime_;
}
inline void FightBuffData::set_lifttime(::google::protobuf::int32 value) {
  set_has_lifttime();
  lifttime_ = value;
}

// optional .Vector3PB Pos = 9;
inline bool FightBuffData::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightBuffData::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightBuffData::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightBuffData::clear_pos() {
  if (pos_ != NULL) pos_->::Vector3PB::Clear();
  clear_has_pos();
}
inline const ::Vector3PB& FightBuffData::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::Vector3PB* FightBuffData::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::Vector3PB;
  return pos_;
}
inline ::Vector3PB* FightBuffData::release_pos() {
  clear_has_pos();
  ::Vector3PB* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void FightBuffData::set_allocated_pos(::Vector3PB* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// -------------------------------------------------------------------

// FightRpcHPChangeNotify

// optional sint32 Objid = 1 [default = -1];
inline bool FightRpcHPChangeNotify::has_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightRpcHPChangeNotify::set_has_objid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightRpcHPChangeNotify::clear_has_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightRpcHPChangeNotify::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
inline ::google::protobuf::int32 FightRpcHPChangeNotify::objid() const {
  return objid_;
}
inline void FightRpcHPChangeNotify::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
}

// optional sint32 ObjSrcId = 2 [default = -1];
inline bool FightRpcHPChangeNotify::has_objsrcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightRpcHPChangeNotify::set_has_objsrcid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightRpcHPChangeNotify::clear_has_objsrcid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightRpcHPChangeNotify::clear_objsrcid() {
  objsrcid_ = -1;
  clear_has_objsrcid();
}
inline ::google::protobuf::int32 FightRpcHPChangeNotify::objsrcid() const {
  return objsrcid_;
}
inline void FightRpcHPChangeNotify::set_objsrcid(::google::protobuf::int32 value) {
  set_has_objsrcid();
  objsrcid_ = value;
}

// optional sint32 ChangeHP = 3 [default = -1];
inline bool FightRpcHPChangeNotify::has_changehp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightRpcHPChangeNotify::set_has_changehp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightRpcHPChangeNotify::clear_has_changehp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightRpcHPChangeNotify::clear_changehp() {
  changehp_ = -1;
  clear_has_changehp();
}
inline ::google::protobuf::int32 FightRpcHPChangeNotify::changehp() const {
  return changehp_;
}
inline void FightRpcHPChangeNotify::set_changehp(::google::protobuf::int32 value) {
  set_has_changehp();
  changehp_ = value;
}

// -------------------------------------------------------------------

// FightRpcRoveOverNotify

// optional sint32 Timer = 1 [default = 0];
inline bool FightRpcRoveOverNotify::has_timer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightRpcRoveOverNotify::set_has_timer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightRpcRoveOverNotify::clear_has_timer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightRpcRoveOverNotify::clear_timer() {
  timer_ = 0;
  clear_has_timer();
}
inline ::google::protobuf::int32 FightRpcRoveOverNotify::timer() const {
  return timer_;
}
inline void FightRpcRoveOverNotify::set_timer(::google::protobuf::int32 value) {
  set_has_timer();
  timer_ = value;
}

// -------------------------------------------------------------------

// FightRpcSkillTransferNotify

// optional sint32 ObjId = 1 [default = -1];
inline bool FightRpcSkillTransferNotify::has_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightRpcSkillTransferNotify::set_has_objid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightRpcSkillTransferNotify::clear_has_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightRpcSkillTransferNotify::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
inline ::google::protobuf::int32 FightRpcSkillTransferNotify::objid() const {
  return objid_;
}
inline void FightRpcSkillTransferNotify::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
}

// optional sint32 SkillId = 2 [default = -1];
inline bool FightRpcSkillTransferNotify::has_skillid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightRpcSkillTransferNotify::set_has_skillid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightRpcSkillTransferNotify::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightRpcSkillTransferNotify::clear_skillid() {
  skillid_ = -1;
  clear_has_skillid();
}
inline ::google::protobuf::int32 FightRpcSkillTransferNotify::skillid() const {
  return skillid_;
}
inline void FightRpcSkillTransferNotify::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional sint32 TargetObjId = 3 [default = -1];
inline bool FightRpcSkillTransferNotify::has_targetobjid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightRpcSkillTransferNotify::set_has_targetobjid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightRpcSkillTransferNotify::clear_has_targetobjid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightRpcSkillTransferNotify::clear_targetobjid() {
  targetobjid_ = -1;
  clear_has_targetobjid();
}
inline ::google::protobuf::int32 FightRpcSkillTransferNotify::targetobjid() const {
  return targetobjid_;
}
inline void FightRpcSkillTransferNotify::set_targetobjid(::google::protobuf::int32 value) {
  set_has_targetobjid();
  targetobjid_ = value;
}

// optional .Vector3PB TargetPos = 4;
inline bool FightRpcSkillTransferNotify::has_targetpos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FightRpcSkillTransferNotify::set_has_targetpos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FightRpcSkillTransferNotify::clear_has_targetpos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FightRpcSkillTransferNotify::clear_targetpos() {
  if (targetpos_ != NULL) targetpos_->::Vector3PB::Clear();
  clear_has_targetpos();
}
inline const ::Vector3PB& FightRpcSkillTransferNotify::targetpos() const {
  return targetpos_ != NULL ? *targetpos_ : *default_instance_->targetpos_;
}
inline ::Vector3PB* FightRpcSkillTransferNotify::mutable_targetpos() {
  set_has_targetpos();
  if (targetpos_ == NULL) targetpos_ = new ::Vector3PB;
  return targetpos_;
}
inline ::Vector3PB* FightRpcSkillTransferNotify::release_targetpos() {
  clear_has_targetpos();
  ::Vector3PB* temp = targetpos_;
  targetpos_ = NULL;
  return temp;
}
inline void FightRpcSkillTransferNotify::set_allocated_targetpos(::Vector3PB* targetpos) {
  delete targetpos_;
  targetpos_ = targetpos;
  if (targetpos) {
    set_has_targetpos();
  } else {
    clear_has_targetpos();
  }
}

// optional sint32 Ret = 5 [default = -1];
inline bool FightRpcSkillTransferNotify::has_ret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FightRpcSkillTransferNotify::set_has_ret() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FightRpcSkillTransferNotify::clear_has_ret() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FightRpcSkillTransferNotify::clear_ret() {
  ret_ = -1;
  clear_has_ret();
}
inline ::google::protobuf::int32 FightRpcSkillTransferNotify::ret() const {
  return ret_;
}
inline void FightRpcSkillTransferNotify::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional sint32 Type = 6 [default = -1];
inline bool FightRpcSkillTransferNotify::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FightRpcSkillTransferNotify::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FightRpcSkillTransferNotify::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FightRpcSkillTransferNotify::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::google::protobuf::int32 FightRpcSkillTransferNotify::type() const {
  return type_;
}
inline void FightRpcSkillTransferNotify::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FightCliRpc_2eproto__INCLUDED
