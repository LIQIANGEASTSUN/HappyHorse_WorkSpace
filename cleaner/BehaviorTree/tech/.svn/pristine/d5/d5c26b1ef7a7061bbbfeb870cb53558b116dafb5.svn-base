// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AuthCliRpc.proto

#ifndef PROTOBUF_AuthCliRpc_2eproto__INCLUDED
#define PROTOBUF_AuthCliRpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "PublicStruct.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AuthCliRpc_2eproto();
void protobuf_AssignDesc_AuthCliRpc_2eproto();
void protobuf_ShutdownFile_AuthCliRpc_2eproto();

class AuthRpcAuthAsk;
class AuthRpcAuthReply;
class AuthRpcKickNotify;

// ===================================================================

class AuthRpcAuthAsk : public ::google::protobuf::Message {
 public:
  AuthRpcAuthAsk();
  virtual ~AuthRpcAuthAsk();

  AuthRpcAuthAsk(const AuthRpcAuthAsk& from);

  inline AuthRpcAuthAsk& operator=(const AuthRpcAuthAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthRpcAuthAsk& default_instance();

  void Swap(AuthRpcAuthAsk* other);

  // implements Message ----------------------------------------------

  AuthRpcAuthAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuthRpcAuthAsk& from);
  void MergeFrom(const AuthRpcAuthAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string UserName = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional string PassWord = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPassWordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:AuthRpcAuthAsk)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  ::std::string* password_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_AuthCliRpc_2eproto();
  friend void protobuf_AssignDesc_AuthCliRpc_2eproto();
  friend void protobuf_ShutdownFile_AuthCliRpc_2eproto();

  void InitAsDefaultInstance();
  static AuthRpcAuthAsk* default_instance_;
};
// -------------------------------------------------------------------

class AuthRpcAuthReply : public ::google::protobuf::Message {
 public:
  AuthRpcAuthReply();
  virtual ~AuthRpcAuthReply();

  AuthRpcAuthReply(const AuthRpcAuthReply& from);

  inline AuthRpcAuthReply& operator=(const AuthRpcAuthReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthRpcAuthReply& default_instance();

  void Swap(AuthRpcAuthReply* other);

  // implements Message ----------------------------------------------

  AuthRpcAuthReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuthRpcAuthReply& from);
  void MergeFrom(const AuthRpcAuthReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional sint64 UID = 14 [default = 0];
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUIDFieldNumber = 14;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:AuthRpcAuthReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 uid_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_AuthCliRpc_2eproto();
  friend void protobuf_AssignDesc_AuthCliRpc_2eproto();
  friend void protobuf_ShutdownFile_AuthCliRpc_2eproto();

  void InitAsDefaultInstance();
  static AuthRpcAuthReply* default_instance_;
};
// -------------------------------------------------------------------

class AuthRpcKickNotify : public ::google::protobuf::Message {
 public:
  AuthRpcKickNotify();
  virtual ~AuthRpcKickNotify();

  AuthRpcKickNotify(const AuthRpcKickNotify& from);

  inline AuthRpcKickNotify& operator=(const AuthRpcKickNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthRpcKickNotify& default_instance();

  void Swap(AuthRpcKickNotify* other);

  // implements Message ----------------------------------------------

  AuthRpcKickNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuthRpcKickNotify& from);
  void MergeFrom(const AuthRpcKickNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AuthRpcKickNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_AuthCliRpc_2eproto();
  friend void protobuf_AssignDesc_AuthCliRpc_2eproto();
  friend void protobuf_ShutdownFile_AuthCliRpc_2eproto();

  void InitAsDefaultInstance();
  static AuthRpcKickNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// AuthRpcAuthAsk

// optional string UserName = 1;
inline bool AuthRpcAuthAsk::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthRpcAuthAsk::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthRpcAuthAsk::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuthRpcAuthAsk::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& AuthRpcAuthAsk::username() const {
  return *username_;
}
inline void AuthRpcAuthAsk::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void AuthRpcAuthAsk::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void AuthRpcAuthAsk::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AuthRpcAuthAsk::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* AuthRpcAuthAsk::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AuthRpcAuthAsk::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string PassWord = 2;
inline bool AuthRpcAuthAsk::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuthRpcAuthAsk::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuthRpcAuthAsk::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuthRpcAuthAsk::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& AuthRpcAuthAsk::password() const {
  return *password_;
}
inline void AuthRpcAuthAsk::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void AuthRpcAuthAsk::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void AuthRpcAuthAsk::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AuthRpcAuthAsk::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* AuthRpcAuthAsk::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AuthRpcAuthAsk::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AuthRpcAuthReply

// optional sint32 Result = 1 [default = -9999];
inline bool AuthRpcAuthReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthRpcAuthReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthRpcAuthReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuthRpcAuthReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 AuthRpcAuthReply::result() const {
  return result_;
}
inline void AuthRpcAuthReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional sint64 UID = 14 [default = 0];
inline bool AuthRpcAuthReply::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuthRpcAuthReply::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuthRpcAuthReply::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuthRpcAuthReply::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::int64 AuthRpcAuthReply::uid() const {
  return uid_;
}
inline void AuthRpcAuthReply::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// -------------------------------------------------------------------

// AuthRpcKickNotify


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AuthCliRpc_2eproto__INCLUDED
