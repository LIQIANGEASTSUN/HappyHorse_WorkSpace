// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SPVPMatchCliRpc.proto

#ifndef PROTOBUF_SPVPMatchCliRpc_2eproto__INCLUDED
#define PROTOBUF_SPVPMatchCliRpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "PublicStruct.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SPVPMatchCliRpc_2eproto();
void protobuf_AssignDesc_SPVPMatchCliRpc_2eproto();
void protobuf_ShutdownFile_SPVPMatchCliRpc_2eproto();

class SPVPMatchUserMessage;
class SPVPMatchRpcStartMatchAsk;
class SPVPMatchRpcStartMatchReply;
class SPVPMatchRpcInvitationAsk;
class SPVPMatchRpcInvitationReply;
class SPVPMatchRpcMatchBroadcasNotify;
class SPVPMatchRpcAgreeInvitationNotify;
class SPVPMatchRpcStartGameNotify;
class SPVPMatchRpcDeleteMatchNotify;
class SPVPMatchRpcStartSelectNotify;
class SPVPMatchRpcSelectHeroAsk;
class SPVPMatchRpcSelectHeroReply;
class SPVPMatchRpcGetStatusAsk;
class SPVPMatchRpcGetStatusReply;
class SPVPMatchRpcChangeStatusNotify;

// ===================================================================

class SPVPMatchUserMessage : public ::google::protobuf::Message {
 public:
  SPVPMatchUserMessage();
  virtual ~SPVPMatchUserMessage();

  SPVPMatchUserMessage(const SPVPMatchUserMessage& from);

  inline SPVPMatchUserMessage& operator=(const SPVPMatchUserMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SPVPMatchUserMessage& default_instance();

  void Swap(SPVPMatchUserMessage* other);

  // implements Message ----------------------------------------------

  SPVPMatchUserMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SPVPMatchUserMessage& from);
  void MergeFrom(const SPVPMatchUserMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 Uid = 2 [default = -1];
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);

  // optional string Head = 3;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 3;
  inline const ::std::string& head() const;
  inline void set_head(const ::std::string& value);
  inline void set_head(const char* value);
  inline void set_head(const char* value, size_t size);
  inline ::std::string* mutable_head();
  inline ::std::string* release_head();
  inline void set_allocated_head(::std::string* head);

  // optional string NickName = 4;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 4;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional sint32 Rank = 5 [default = 0];
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 5;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional sint32 HeroID = 6 [default = 0];
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 6;
  inline ::google::protobuf::int32 heroid() const;
  inline void set_heroid(::google::protobuf::int32 value);

  // optional sint32 Status = 7 [default = 0];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 7;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SPVPMatchUserMessage)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 uid_;
  ::std::string* head_;
  ::std::string* nickname_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 heroid_;
  ::google::protobuf::int32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_SPVPMatchCliRpc_2eproto();
  friend void protobuf_AssignDesc_SPVPMatchCliRpc_2eproto();
  friend void protobuf_ShutdownFile_SPVPMatchCliRpc_2eproto();

  void InitAsDefaultInstance();
  static SPVPMatchUserMessage* default_instance_;
};
// -------------------------------------------------------------------

class SPVPMatchRpcStartMatchAsk : public ::google::protobuf::Message {
 public:
  SPVPMatchRpcStartMatchAsk();
  virtual ~SPVPMatchRpcStartMatchAsk();

  SPVPMatchRpcStartMatchAsk(const SPVPMatchRpcStartMatchAsk& from);

  inline SPVPMatchRpcStartMatchAsk& operator=(const SPVPMatchRpcStartMatchAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SPVPMatchRpcStartMatchAsk& default_instance();

  void Swap(SPVPMatchRpcStartMatchAsk* other);

  // implements Message ----------------------------------------------

  SPVPMatchRpcStartMatchAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SPVPMatchRpcStartMatchAsk& from);
  void MergeFrom(const SPVPMatchRpcStartMatchAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SPVPMatchRpcStartMatchAsk)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_SPVPMatchCliRpc_2eproto();
  friend void protobuf_AssignDesc_SPVPMatchCliRpc_2eproto();
  friend void protobuf_ShutdownFile_SPVPMatchCliRpc_2eproto();

  void InitAsDefaultInstance();
  static SPVPMatchRpcStartMatchAsk* default_instance_;
};
// -------------------------------------------------------------------

class SPVPMatchRpcStartMatchReply : public ::google::protobuf::Message {
 public:
  SPVPMatchRpcStartMatchReply();
  virtual ~SPVPMatchRpcStartMatchReply();

  SPVPMatchRpcStartMatchReply(const SPVPMatchRpcStartMatchReply& from);

  inline SPVPMatchRpcStartMatchReply& operator=(const SPVPMatchRpcStartMatchReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SPVPMatchRpcStartMatchReply& default_instance();

  void Swap(SPVPMatchRpcStartMatchReply* other);

  // implements Message ----------------------------------------------

  SPVPMatchRpcStartMatchReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SPVPMatchRpcStartMatchReply& from);
  void MergeFrom(const SPVPMatchRpcStartMatchReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SPVPMatchRpcStartMatchReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SPVPMatchCliRpc_2eproto();
  friend void protobuf_AssignDesc_SPVPMatchCliRpc_2eproto();
  friend void protobuf_ShutdownFile_SPVPMatchCliRpc_2eproto();

  void InitAsDefaultInstance();
  static SPVPMatchRpcStartMatchReply* default_instance_;
};
// -------------------------------------------------------------------

class SPVPMatchRpcInvitationAsk : public ::google::protobuf::Message {
 public:
  SPVPMatchRpcInvitationAsk();
  virtual ~SPVPMatchRpcInvitationAsk();

  SPVPMatchRpcInvitationAsk(const SPVPMatchRpcInvitationAsk& from);

  inline SPVPMatchRpcInvitationAsk& operator=(const SPVPMatchRpcInvitationAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SPVPMatchRpcInvitationAsk& default_instance();

  void Swap(SPVPMatchRpcInvitationAsk* other);

  // implements Message ----------------------------------------------

  SPVPMatchRpcInvitationAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SPVPMatchRpcInvitationAsk& from);
  void MergeFrom(const SPVPMatchRpcInvitationAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 Uid = 1 [default = -1];
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:SPVPMatchRpcInvitationAsk)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SPVPMatchCliRpc_2eproto();
  friend void protobuf_AssignDesc_SPVPMatchCliRpc_2eproto();
  friend void protobuf_ShutdownFile_SPVPMatchCliRpc_2eproto();

  void InitAsDefaultInstance();
  static SPVPMatchRpcInvitationAsk* default_instance_;
};
// -------------------------------------------------------------------

class SPVPMatchRpcInvitationReply : public ::google::protobuf::Message {
 public:
  SPVPMatchRpcInvitationReply();
  virtual ~SPVPMatchRpcInvitationReply();

  SPVPMatchRpcInvitationReply(const SPVPMatchRpcInvitationReply& from);

  inline SPVPMatchRpcInvitationReply& operator=(const SPVPMatchRpcInvitationReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SPVPMatchRpcInvitationReply& default_instance();

  void Swap(SPVPMatchRpcInvitationReply* other);

  // implements Message ----------------------------------------------

  SPVPMatchRpcInvitationReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SPVPMatchRpcInvitationReply& from);
  void MergeFrom(const SPVPMatchRpcInvitationReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional sint64 Uid = 2 [default = -1];
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:SPVPMatchRpcInvitationReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 uid_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SPVPMatchCliRpc_2eproto();
  friend void protobuf_AssignDesc_SPVPMatchCliRpc_2eproto();
  friend void protobuf_ShutdownFile_SPVPMatchCliRpc_2eproto();

  void InitAsDefaultInstance();
  static SPVPMatchRpcInvitationReply* default_instance_;
};
// -------------------------------------------------------------------

class SPVPMatchRpcMatchBroadcasNotify : public ::google::protobuf::Message {
 public:
  SPVPMatchRpcMatchBroadcasNotify();
  virtual ~SPVPMatchRpcMatchBroadcasNotify();

  SPVPMatchRpcMatchBroadcasNotify(const SPVPMatchRpcMatchBroadcasNotify& from);

  inline SPVPMatchRpcMatchBroadcasNotify& operator=(const SPVPMatchRpcMatchBroadcasNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SPVPMatchRpcMatchBroadcasNotify& default_instance();

  void Swap(SPVPMatchRpcMatchBroadcasNotify* other);

  // implements Message ----------------------------------------------

  SPVPMatchRpcMatchBroadcasNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SPVPMatchRpcMatchBroadcasNotify& from);
  void MergeFrom(const SPVPMatchRpcMatchBroadcasNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Type = 1 [default = 1];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional sint32 TimeStart = 2 [default = -1];
  inline bool has_timestart() const;
  inline void clear_timestart();
  static const int kTimeStartFieldNumber = 2;
  inline ::google::protobuf::int32 timestart() const;
  inline void set_timestart(::google::protobuf::int32 value);

  // optional sint32 TimeEnd = 3 [default = -1];
  inline bool has_timeend() const;
  inline void clear_timeend();
  static const int kTimeEndFieldNumber = 3;
  inline ::google::protobuf::int32 timeend() const;
  inline void set_timeend(::google::protobuf::int32 value);

  // optional sint32 Timer = 4 [default = -1];
  inline bool has_timer() const;
  inline void clear_timer();
  static const int kTimerFieldNumber = 4;
  inline ::google::protobuf::int32 timer() const;
  inline void set_timer(::google::protobuf::int32 value);

  // repeated .SPVPMatchUserMessage UMess = 5;
  inline int umess_size() const;
  inline void clear_umess();
  static const int kUMessFieldNumber = 5;
  inline const ::SPVPMatchUserMessage& umess(int index) const;
  inline ::SPVPMatchUserMessage* mutable_umess(int index);
  inline ::SPVPMatchUserMessage* add_umess();
  inline const ::google::protobuf::RepeatedPtrField< ::SPVPMatchUserMessage >&
      umess() const;
  inline ::google::protobuf::RepeatedPtrField< ::SPVPMatchUserMessage >*
      mutable_umess();

  // @@protoc_insertion_point(class_scope:SPVPMatchRpcMatchBroadcasNotify)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_timestart();
  inline void clear_has_timestart();
  inline void set_has_timeend();
  inline void clear_has_timeend();
  inline void set_has_timer();
  inline void clear_has_timer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 timestart_;
  ::google::protobuf::int32 timeend_;
  ::google::protobuf::int32 timer_;
  ::google::protobuf::RepeatedPtrField< ::SPVPMatchUserMessage > umess_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_SPVPMatchCliRpc_2eproto();
  friend void protobuf_AssignDesc_SPVPMatchCliRpc_2eproto();
  friend void protobuf_ShutdownFile_SPVPMatchCliRpc_2eproto();

  void InitAsDefaultInstance();
  static SPVPMatchRpcMatchBroadcasNotify* default_instance_;
};
// -------------------------------------------------------------------

class SPVPMatchRpcAgreeInvitationNotify : public ::google::protobuf::Message {
 public:
  SPVPMatchRpcAgreeInvitationNotify();
  virtual ~SPVPMatchRpcAgreeInvitationNotify();

  SPVPMatchRpcAgreeInvitationNotify(const SPVPMatchRpcAgreeInvitationNotify& from);

  inline SPVPMatchRpcAgreeInvitationNotify& operator=(const SPVPMatchRpcAgreeInvitationNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SPVPMatchRpcAgreeInvitationNotify& default_instance();

  void Swap(SPVPMatchRpcAgreeInvitationNotify* other);

  // implements Message ----------------------------------------------

  SPVPMatchRpcAgreeInvitationNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SPVPMatchRpcAgreeInvitationNotify& from);
  void MergeFrom(const SPVPMatchRpcAgreeInvitationNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 Uid = 1 [default = -1];
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);

  // optional sint32 IsAgree = 2 [default = 0];
  inline bool has_isagree() const;
  inline void clear_isagree();
  static const int kIsAgreeFieldNumber = 2;
  inline ::google::protobuf::int32 isagree() const;
  inline void set_isagree(::google::protobuf::int32 value);

  // optional sint32 Type = 3 [default = 0];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SPVPMatchRpcAgreeInvitationNotify)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_isagree();
  inline void clear_has_isagree();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 uid_;
  ::google::protobuf::int32 isagree_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SPVPMatchCliRpc_2eproto();
  friend void protobuf_AssignDesc_SPVPMatchCliRpc_2eproto();
  friend void protobuf_ShutdownFile_SPVPMatchCliRpc_2eproto();

  void InitAsDefaultInstance();
  static SPVPMatchRpcAgreeInvitationNotify* default_instance_;
};
// -------------------------------------------------------------------

class SPVPMatchRpcStartGameNotify : public ::google::protobuf::Message {
 public:
  SPVPMatchRpcStartGameNotify();
  virtual ~SPVPMatchRpcStartGameNotify();

  SPVPMatchRpcStartGameNotify(const SPVPMatchRpcStartGameNotify& from);

  inline SPVPMatchRpcStartGameNotify& operator=(const SPVPMatchRpcStartGameNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SPVPMatchRpcStartGameNotify& default_instance();

  void Swap(SPVPMatchRpcStartGameNotify* other);

  // implements Message ----------------------------------------------

  SPVPMatchRpcStartGameNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SPVPMatchRpcStartGameNotify& from);
  void MergeFrom(const SPVPMatchRpcStartGameNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SPVPMatchRpcStartGameNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_SPVPMatchCliRpc_2eproto();
  friend void protobuf_AssignDesc_SPVPMatchCliRpc_2eproto();
  friend void protobuf_ShutdownFile_SPVPMatchCliRpc_2eproto();

  void InitAsDefaultInstance();
  static SPVPMatchRpcStartGameNotify* default_instance_;
};
// -------------------------------------------------------------------

class SPVPMatchRpcDeleteMatchNotify : public ::google::protobuf::Message {
 public:
  SPVPMatchRpcDeleteMatchNotify();
  virtual ~SPVPMatchRpcDeleteMatchNotify();

  SPVPMatchRpcDeleteMatchNotify(const SPVPMatchRpcDeleteMatchNotify& from);

  inline SPVPMatchRpcDeleteMatchNotify& operator=(const SPVPMatchRpcDeleteMatchNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SPVPMatchRpcDeleteMatchNotify& default_instance();

  void Swap(SPVPMatchRpcDeleteMatchNotify* other);

  // implements Message ----------------------------------------------

  SPVPMatchRpcDeleteMatchNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SPVPMatchRpcDeleteMatchNotify& from);
  void MergeFrom(const SPVPMatchRpcDeleteMatchNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SPVPMatchRpcDeleteMatchNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_SPVPMatchCliRpc_2eproto();
  friend void protobuf_AssignDesc_SPVPMatchCliRpc_2eproto();
  friend void protobuf_ShutdownFile_SPVPMatchCliRpc_2eproto();

  void InitAsDefaultInstance();
  static SPVPMatchRpcDeleteMatchNotify* default_instance_;
};
// -------------------------------------------------------------------

class SPVPMatchRpcStartSelectNotify : public ::google::protobuf::Message {
 public:
  SPVPMatchRpcStartSelectNotify();
  virtual ~SPVPMatchRpcStartSelectNotify();

  SPVPMatchRpcStartSelectNotify(const SPVPMatchRpcStartSelectNotify& from);

  inline SPVPMatchRpcStartSelectNotify& operator=(const SPVPMatchRpcStartSelectNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SPVPMatchRpcStartSelectNotify& default_instance();

  void Swap(SPVPMatchRpcStartSelectNotify* other);

  // implements Message ----------------------------------------------

  SPVPMatchRpcStartSelectNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SPVPMatchRpcStartSelectNotify& from);
  void MergeFrom(const SPVPMatchRpcStartSelectNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 TimeStart = 1 [default = -1];
  inline bool has_timestart() const;
  inline void clear_timestart();
  static const int kTimeStartFieldNumber = 1;
  inline ::google::protobuf::int32 timestart() const;
  inline void set_timestart(::google::protobuf::int32 value);

  // optional sint32 TimeEnd = 2 [default = -1];
  inline bool has_timeend() const;
  inline void clear_timeend();
  static const int kTimeEndFieldNumber = 2;
  inline ::google::protobuf::int32 timeend() const;
  inline void set_timeend(::google::protobuf::int32 value);

  // repeated .SPVPMatchUserMessage UMess = 3;
  inline int umess_size() const;
  inline void clear_umess();
  static const int kUMessFieldNumber = 3;
  inline const ::SPVPMatchUserMessage& umess(int index) const;
  inline ::SPVPMatchUserMessage* mutable_umess(int index);
  inline ::SPVPMatchUserMessage* add_umess();
  inline const ::google::protobuf::RepeatedPtrField< ::SPVPMatchUserMessage >&
      umess() const;
  inline ::google::protobuf::RepeatedPtrField< ::SPVPMatchUserMessage >*
      mutable_umess();

  // repeated .SPVPMatchUserMessage OtherUMess = 4;
  inline int otherumess_size() const;
  inline void clear_otherumess();
  static const int kOtherUMessFieldNumber = 4;
  inline const ::SPVPMatchUserMessage& otherumess(int index) const;
  inline ::SPVPMatchUserMessage* mutable_otherumess(int index);
  inline ::SPVPMatchUserMessage* add_otherumess();
  inline const ::google::protobuf::RepeatedPtrField< ::SPVPMatchUserMessage >&
      otherumess() const;
  inline ::google::protobuf::RepeatedPtrField< ::SPVPMatchUserMessage >*
      mutable_otherumess();

  // optional sint32 Timer = 5 [default = -1];
  inline bool has_timer() const;
  inline void clear_timer();
  static const int kTimerFieldNumber = 5;
  inline ::google::protobuf::int32 timer() const;
  inline void set_timer(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SPVPMatchRpcStartSelectNotify)
 private:
  inline void set_has_timestart();
  inline void clear_has_timestart();
  inline void set_has_timeend();
  inline void clear_has_timeend();
  inline void set_has_timer();
  inline void clear_has_timer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 timestart_;
  ::google::protobuf::int32 timeend_;
  ::google::protobuf::RepeatedPtrField< ::SPVPMatchUserMessage > umess_;
  ::google::protobuf::RepeatedPtrField< ::SPVPMatchUserMessage > otherumess_;
  ::google::protobuf::int32 timer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_SPVPMatchCliRpc_2eproto();
  friend void protobuf_AssignDesc_SPVPMatchCliRpc_2eproto();
  friend void protobuf_ShutdownFile_SPVPMatchCliRpc_2eproto();

  void InitAsDefaultInstance();
  static SPVPMatchRpcStartSelectNotify* default_instance_;
};
// -------------------------------------------------------------------

class SPVPMatchRpcSelectHeroAsk : public ::google::protobuf::Message {
 public:
  SPVPMatchRpcSelectHeroAsk();
  virtual ~SPVPMatchRpcSelectHeroAsk();

  SPVPMatchRpcSelectHeroAsk(const SPVPMatchRpcSelectHeroAsk& from);

  inline SPVPMatchRpcSelectHeroAsk& operator=(const SPVPMatchRpcSelectHeroAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SPVPMatchRpcSelectHeroAsk& default_instance();

  void Swap(SPVPMatchRpcSelectHeroAsk* other);

  // implements Message ----------------------------------------------

  SPVPMatchRpcSelectHeroAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SPVPMatchRpcSelectHeroAsk& from);
  void MergeFrom(const SPVPMatchRpcSelectHeroAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 HeroID = 1 [default = -1];
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 1;
  inline ::google::protobuf::int32 heroid() const;
  inline void set_heroid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SPVPMatchRpcSelectHeroAsk)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 heroid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SPVPMatchCliRpc_2eproto();
  friend void protobuf_AssignDesc_SPVPMatchCliRpc_2eproto();
  friend void protobuf_ShutdownFile_SPVPMatchCliRpc_2eproto();

  void InitAsDefaultInstance();
  static SPVPMatchRpcSelectHeroAsk* default_instance_;
};
// -------------------------------------------------------------------

class SPVPMatchRpcSelectHeroReply : public ::google::protobuf::Message {
 public:
  SPVPMatchRpcSelectHeroReply();
  virtual ~SPVPMatchRpcSelectHeroReply();

  SPVPMatchRpcSelectHeroReply(const SPVPMatchRpcSelectHeroReply& from);

  inline SPVPMatchRpcSelectHeroReply& operator=(const SPVPMatchRpcSelectHeroReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SPVPMatchRpcSelectHeroReply& default_instance();

  void Swap(SPVPMatchRpcSelectHeroReply* other);

  // implements Message ----------------------------------------------

  SPVPMatchRpcSelectHeroReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SPVPMatchRpcSelectHeroReply& from);
  void MergeFrom(const SPVPMatchRpcSelectHeroReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional sint32 HeroID = 2 [default = -1];
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 2;
  inline ::google::protobuf::int32 heroid() const;
  inline void set_heroid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SPVPMatchRpcSelectHeroReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_heroid();
  inline void clear_has_heroid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 heroid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SPVPMatchCliRpc_2eproto();
  friend void protobuf_AssignDesc_SPVPMatchCliRpc_2eproto();
  friend void protobuf_ShutdownFile_SPVPMatchCliRpc_2eproto();

  void InitAsDefaultInstance();
  static SPVPMatchRpcSelectHeroReply* default_instance_;
};
// -------------------------------------------------------------------

class SPVPMatchRpcGetStatusAsk : public ::google::protobuf::Message {
 public:
  SPVPMatchRpcGetStatusAsk();
  virtual ~SPVPMatchRpcGetStatusAsk();

  SPVPMatchRpcGetStatusAsk(const SPVPMatchRpcGetStatusAsk& from);

  inline SPVPMatchRpcGetStatusAsk& operator=(const SPVPMatchRpcGetStatusAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SPVPMatchRpcGetStatusAsk& default_instance();

  void Swap(SPVPMatchRpcGetStatusAsk* other);

  // implements Message ----------------------------------------------

  SPVPMatchRpcGetStatusAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SPVPMatchRpcGetStatusAsk& from);
  void MergeFrom(const SPVPMatchRpcGetStatusAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SPVPMatchRpcGetStatusAsk)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_SPVPMatchCliRpc_2eproto();
  friend void protobuf_AssignDesc_SPVPMatchCliRpc_2eproto();
  friend void protobuf_ShutdownFile_SPVPMatchCliRpc_2eproto();

  void InitAsDefaultInstance();
  static SPVPMatchRpcGetStatusAsk* default_instance_;
};
// -------------------------------------------------------------------

class SPVPMatchRpcGetStatusReply : public ::google::protobuf::Message {
 public:
  SPVPMatchRpcGetStatusReply();
  virtual ~SPVPMatchRpcGetStatusReply();

  SPVPMatchRpcGetStatusReply(const SPVPMatchRpcGetStatusReply& from);

  inline SPVPMatchRpcGetStatusReply& operator=(const SPVPMatchRpcGetStatusReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SPVPMatchRpcGetStatusReply& default_instance();

  void Swap(SPVPMatchRpcGetStatusReply* other);

  // implements Message ----------------------------------------------

  SPVPMatchRpcGetStatusReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SPVPMatchRpcGetStatusReply& from);
  void MergeFrom(const SPVPMatchRpcGetStatusReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional sint32 Type = 2 [default = -1];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional sint32 TimeStart = 5 [default = -1];
  inline bool has_timestart() const;
  inline void clear_timestart();
  static const int kTimeStartFieldNumber = 5;
  inline ::google::protobuf::int32 timestart() const;
  inline void set_timestart(::google::protobuf::int32 value);

  // optional sint32 TimeEnd = 6 [default = -1];
  inline bool has_timeend() const;
  inline void clear_timeend();
  static const int kTimeEndFieldNumber = 6;
  inline ::google::protobuf::int32 timeend() const;
  inline void set_timeend(::google::protobuf::int32 value);

  // optional sint32 Timer = 7 [default = -1];
  inline bool has_timer() const;
  inline void clear_timer();
  static const int kTimerFieldNumber = 7;
  inline ::google::protobuf::int32 timer() const;
  inline void set_timer(::google::protobuf::int32 value);

  // repeated .SPVPMatchUserMessage UMess = 8;
  inline int umess_size() const;
  inline void clear_umess();
  static const int kUMessFieldNumber = 8;
  inline const ::SPVPMatchUserMessage& umess(int index) const;
  inline ::SPVPMatchUserMessage* mutable_umess(int index);
  inline ::SPVPMatchUserMessage* add_umess();
  inline const ::google::protobuf::RepeatedPtrField< ::SPVPMatchUserMessage >&
      umess() const;
  inline ::google::protobuf::RepeatedPtrField< ::SPVPMatchUserMessage >*
      mutable_umess();

  // repeated .SPVPMatchUserMessage UMessOther = 9;
  inline int umessother_size() const;
  inline void clear_umessother();
  static const int kUMessOtherFieldNumber = 9;
  inline const ::SPVPMatchUserMessage& umessother(int index) const;
  inline ::SPVPMatchUserMessage* mutable_umessother(int index);
  inline ::SPVPMatchUserMessage* add_umessother();
  inline const ::google::protobuf::RepeatedPtrField< ::SPVPMatchUserMessage >&
      umessother() const;
  inline ::google::protobuf::RepeatedPtrField< ::SPVPMatchUserMessage >*
      mutable_umessother();

  // @@protoc_insertion_point(class_scope:SPVPMatchRpcGetStatusReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_timestart();
  inline void clear_has_timestart();
  inline void set_has_timeend();
  inline void clear_has_timeend();
  inline void set_has_timer();
  inline void clear_has_timer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 timestart_;
  ::google::protobuf::int32 timeend_;
  ::google::protobuf::RepeatedPtrField< ::SPVPMatchUserMessage > umess_;
  ::google::protobuf::RepeatedPtrField< ::SPVPMatchUserMessage > umessother_;
  ::google::protobuf::int32 timer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_SPVPMatchCliRpc_2eproto();
  friend void protobuf_AssignDesc_SPVPMatchCliRpc_2eproto();
  friend void protobuf_ShutdownFile_SPVPMatchCliRpc_2eproto();

  void InitAsDefaultInstance();
  static SPVPMatchRpcGetStatusReply* default_instance_;
};
// -------------------------------------------------------------------

class SPVPMatchRpcChangeStatusNotify : public ::google::protobuf::Message {
 public:
  SPVPMatchRpcChangeStatusNotify();
  virtual ~SPVPMatchRpcChangeStatusNotify();

  SPVPMatchRpcChangeStatusNotify(const SPVPMatchRpcChangeStatusNotify& from);

  inline SPVPMatchRpcChangeStatusNotify& operator=(const SPVPMatchRpcChangeStatusNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SPVPMatchRpcChangeStatusNotify& default_instance();

  void Swap(SPVPMatchRpcChangeStatusNotify* other);

  // implements Message ----------------------------------------------

  SPVPMatchRpcChangeStatusNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SPVPMatchRpcChangeStatusNotify& from);
  void MergeFrom(const SPVPMatchRpcChangeStatusNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SPVPMatchUserMessage UMess = 1;
  inline bool has_umess() const;
  inline void clear_umess();
  static const int kUMessFieldNumber = 1;
  inline const ::SPVPMatchUserMessage& umess() const;
  inline ::SPVPMatchUserMessage* mutable_umess();
  inline ::SPVPMatchUserMessage* release_umess();
  inline void set_allocated_umess(::SPVPMatchUserMessage* umess);

  // @@protoc_insertion_point(class_scope:SPVPMatchRpcChangeStatusNotify)
 private:
  inline void set_has_umess();
  inline void clear_has_umess();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SPVPMatchUserMessage* umess_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SPVPMatchCliRpc_2eproto();
  friend void protobuf_AssignDesc_SPVPMatchCliRpc_2eproto();
  friend void protobuf_ShutdownFile_SPVPMatchCliRpc_2eproto();

  void InitAsDefaultInstance();
  static SPVPMatchRpcChangeStatusNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// SPVPMatchUserMessage

// optional sint64 Uid = 2 [default = -1];
inline bool SPVPMatchUserMessage::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SPVPMatchUserMessage::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SPVPMatchUserMessage::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SPVPMatchUserMessage::clear_uid() {
  uid_ = GOOGLE_LONGLONG(-1);
  clear_has_uid();
}
inline ::google::protobuf::int64 SPVPMatchUserMessage::uid() const {
  return uid_;
}
inline void SPVPMatchUserMessage::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// optional string Head = 3;
inline bool SPVPMatchUserMessage::has_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SPVPMatchUserMessage::set_has_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SPVPMatchUserMessage::clear_has_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SPVPMatchUserMessage::clear_head() {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    head_->clear();
  }
  clear_has_head();
}
inline const ::std::string& SPVPMatchUserMessage::head() const {
  return *head_;
}
inline void SPVPMatchUserMessage::set_head(const ::std::string& value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void SPVPMatchUserMessage::set_head(const char* value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void SPVPMatchUserMessage::set_head(const char* value, size_t size) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SPVPMatchUserMessage::mutable_head() {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  return head_;
}
inline ::std::string* SPVPMatchUserMessage::release_head() {
  clear_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = head_;
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SPVPMatchUserMessage::set_allocated_head(::std::string* head) {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (head) {
    set_has_head();
    head_ = head;
  } else {
    clear_has_head();
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string NickName = 4;
inline bool SPVPMatchUserMessage::has_nickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SPVPMatchUserMessage::set_has_nickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SPVPMatchUserMessage::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SPVPMatchUserMessage::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& SPVPMatchUserMessage::nickname() const {
  return *nickname_;
}
inline void SPVPMatchUserMessage::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void SPVPMatchUserMessage::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void SPVPMatchUserMessage::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SPVPMatchUserMessage::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* SPVPMatchUserMessage::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SPVPMatchUserMessage::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional sint32 Rank = 5 [default = 0];
inline bool SPVPMatchUserMessage::has_rank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SPVPMatchUserMessage::set_has_rank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SPVPMatchUserMessage::clear_has_rank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SPVPMatchUserMessage::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 SPVPMatchUserMessage::rank() const {
  return rank_;
}
inline void SPVPMatchUserMessage::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional sint32 HeroID = 6 [default = 0];
inline bool SPVPMatchUserMessage::has_heroid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SPVPMatchUserMessage::set_has_heroid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SPVPMatchUserMessage::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SPVPMatchUserMessage::clear_heroid() {
  heroid_ = 0;
  clear_has_heroid();
}
inline ::google::protobuf::int32 SPVPMatchUserMessage::heroid() const {
  return heroid_;
}
inline void SPVPMatchUserMessage::set_heroid(::google::protobuf::int32 value) {
  set_has_heroid();
  heroid_ = value;
}

// optional sint32 Status = 7 [default = 0];
inline bool SPVPMatchUserMessage::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SPVPMatchUserMessage::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SPVPMatchUserMessage::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SPVPMatchUserMessage::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 SPVPMatchUserMessage::status() const {
  return status_;
}
inline void SPVPMatchUserMessage::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// SPVPMatchRpcStartMatchAsk

// -------------------------------------------------------------------

// SPVPMatchRpcStartMatchReply

// optional sint32 Result = 1 [default = -9999];
inline bool SPVPMatchRpcStartMatchReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SPVPMatchRpcStartMatchReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SPVPMatchRpcStartMatchReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SPVPMatchRpcStartMatchReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 SPVPMatchRpcStartMatchReply::result() const {
  return result_;
}
inline void SPVPMatchRpcStartMatchReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// SPVPMatchRpcInvitationAsk

// optional sint64 Uid = 1 [default = -1];
inline bool SPVPMatchRpcInvitationAsk::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SPVPMatchRpcInvitationAsk::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SPVPMatchRpcInvitationAsk::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SPVPMatchRpcInvitationAsk::clear_uid() {
  uid_ = GOOGLE_LONGLONG(-1);
  clear_has_uid();
}
inline ::google::protobuf::int64 SPVPMatchRpcInvitationAsk::uid() const {
  return uid_;
}
inline void SPVPMatchRpcInvitationAsk::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// -------------------------------------------------------------------

// SPVPMatchRpcInvitationReply

// optional sint32 Result = 1 [default = -9999];
inline bool SPVPMatchRpcInvitationReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SPVPMatchRpcInvitationReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SPVPMatchRpcInvitationReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SPVPMatchRpcInvitationReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 SPVPMatchRpcInvitationReply::result() const {
  return result_;
}
inline void SPVPMatchRpcInvitationReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional sint64 Uid = 2 [default = -1];
inline bool SPVPMatchRpcInvitationReply::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SPVPMatchRpcInvitationReply::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SPVPMatchRpcInvitationReply::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SPVPMatchRpcInvitationReply::clear_uid() {
  uid_ = GOOGLE_LONGLONG(-1);
  clear_has_uid();
}
inline ::google::protobuf::int64 SPVPMatchRpcInvitationReply::uid() const {
  return uid_;
}
inline void SPVPMatchRpcInvitationReply::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// -------------------------------------------------------------------

// SPVPMatchRpcMatchBroadcasNotify

// optional sint32 Type = 1 [default = 1];
inline bool SPVPMatchRpcMatchBroadcasNotify::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SPVPMatchRpcMatchBroadcasNotify::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SPVPMatchRpcMatchBroadcasNotify::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SPVPMatchRpcMatchBroadcasNotify::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::google::protobuf::int32 SPVPMatchRpcMatchBroadcasNotify::type() const {
  return type_;
}
inline void SPVPMatchRpcMatchBroadcasNotify::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional sint32 TimeStart = 2 [default = -1];
inline bool SPVPMatchRpcMatchBroadcasNotify::has_timestart() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SPVPMatchRpcMatchBroadcasNotify::set_has_timestart() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SPVPMatchRpcMatchBroadcasNotify::clear_has_timestart() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SPVPMatchRpcMatchBroadcasNotify::clear_timestart() {
  timestart_ = -1;
  clear_has_timestart();
}
inline ::google::protobuf::int32 SPVPMatchRpcMatchBroadcasNotify::timestart() const {
  return timestart_;
}
inline void SPVPMatchRpcMatchBroadcasNotify::set_timestart(::google::protobuf::int32 value) {
  set_has_timestart();
  timestart_ = value;
}

// optional sint32 TimeEnd = 3 [default = -1];
inline bool SPVPMatchRpcMatchBroadcasNotify::has_timeend() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SPVPMatchRpcMatchBroadcasNotify::set_has_timeend() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SPVPMatchRpcMatchBroadcasNotify::clear_has_timeend() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SPVPMatchRpcMatchBroadcasNotify::clear_timeend() {
  timeend_ = -1;
  clear_has_timeend();
}
inline ::google::protobuf::int32 SPVPMatchRpcMatchBroadcasNotify::timeend() const {
  return timeend_;
}
inline void SPVPMatchRpcMatchBroadcasNotify::set_timeend(::google::protobuf::int32 value) {
  set_has_timeend();
  timeend_ = value;
}

// optional sint32 Timer = 4 [default = -1];
inline bool SPVPMatchRpcMatchBroadcasNotify::has_timer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SPVPMatchRpcMatchBroadcasNotify::set_has_timer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SPVPMatchRpcMatchBroadcasNotify::clear_has_timer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SPVPMatchRpcMatchBroadcasNotify::clear_timer() {
  timer_ = -1;
  clear_has_timer();
}
inline ::google::protobuf::int32 SPVPMatchRpcMatchBroadcasNotify::timer() const {
  return timer_;
}
inline void SPVPMatchRpcMatchBroadcasNotify::set_timer(::google::protobuf::int32 value) {
  set_has_timer();
  timer_ = value;
}

// repeated .SPVPMatchUserMessage UMess = 5;
inline int SPVPMatchRpcMatchBroadcasNotify::umess_size() const {
  return umess_.size();
}
inline void SPVPMatchRpcMatchBroadcasNotify::clear_umess() {
  umess_.Clear();
}
inline const ::SPVPMatchUserMessage& SPVPMatchRpcMatchBroadcasNotify::umess(int index) const {
  return umess_.Get(index);
}
inline ::SPVPMatchUserMessage* SPVPMatchRpcMatchBroadcasNotify::mutable_umess(int index) {
  return umess_.Mutable(index);
}
inline ::SPVPMatchUserMessage* SPVPMatchRpcMatchBroadcasNotify::add_umess() {
  return umess_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SPVPMatchUserMessage >&
SPVPMatchRpcMatchBroadcasNotify::umess() const {
  return umess_;
}
inline ::google::protobuf::RepeatedPtrField< ::SPVPMatchUserMessage >*
SPVPMatchRpcMatchBroadcasNotify::mutable_umess() {
  return &umess_;
}

// -------------------------------------------------------------------

// SPVPMatchRpcAgreeInvitationNotify

// optional sint64 Uid = 1 [default = -1];
inline bool SPVPMatchRpcAgreeInvitationNotify::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SPVPMatchRpcAgreeInvitationNotify::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SPVPMatchRpcAgreeInvitationNotify::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SPVPMatchRpcAgreeInvitationNotify::clear_uid() {
  uid_ = GOOGLE_LONGLONG(-1);
  clear_has_uid();
}
inline ::google::protobuf::int64 SPVPMatchRpcAgreeInvitationNotify::uid() const {
  return uid_;
}
inline void SPVPMatchRpcAgreeInvitationNotify::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// optional sint32 IsAgree = 2 [default = 0];
inline bool SPVPMatchRpcAgreeInvitationNotify::has_isagree() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SPVPMatchRpcAgreeInvitationNotify::set_has_isagree() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SPVPMatchRpcAgreeInvitationNotify::clear_has_isagree() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SPVPMatchRpcAgreeInvitationNotify::clear_isagree() {
  isagree_ = 0;
  clear_has_isagree();
}
inline ::google::protobuf::int32 SPVPMatchRpcAgreeInvitationNotify::isagree() const {
  return isagree_;
}
inline void SPVPMatchRpcAgreeInvitationNotify::set_isagree(::google::protobuf::int32 value) {
  set_has_isagree();
  isagree_ = value;
}

// optional sint32 Type = 3 [default = 0];
inline bool SPVPMatchRpcAgreeInvitationNotify::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SPVPMatchRpcAgreeInvitationNotify::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SPVPMatchRpcAgreeInvitationNotify::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SPVPMatchRpcAgreeInvitationNotify::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 SPVPMatchRpcAgreeInvitationNotify::type() const {
  return type_;
}
inline void SPVPMatchRpcAgreeInvitationNotify::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// SPVPMatchRpcStartGameNotify

// -------------------------------------------------------------------

// SPVPMatchRpcDeleteMatchNotify

// -------------------------------------------------------------------

// SPVPMatchRpcStartSelectNotify

// optional sint32 TimeStart = 1 [default = -1];
inline bool SPVPMatchRpcStartSelectNotify::has_timestart() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SPVPMatchRpcStartSelectNotify::set_has_timestart() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SPVPMatchRpcStartSelectNotify::clear_has_timestart() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SPVPMatchRpcStartSelectNotify::clear_timestart() {
  timestart_ = -1;
  clear_has_timestart();
}
inline ::google::protobuf::int32 SPVPMatchRpcStartSelectNotify::timestart() const {
  return timestart_;
}
inline void SPVPMatchRpcStartSelectNotify::set_timestart(::google::protobuf::int32 value) {
  set_has_timestart();
  timestart_ = value;
}

// optional sint32 TimeEnd = 2 [default = -1];
inline bool SPVPMatchRpcStartSelectNotify::has_timeend() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SPVPMatchRpcStartSelectNotify::set_has_timeend() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SPVPMatchRpcStartSelectNotify::clear_has_timeend() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SPVPMatchRpcStartSelectNotify::clear_timeend() {
  timeend_ = -1;
  clear_has_timeend();
}
inline ::google::protobuf::int32 SPVPMatchRpcStartSelectNotify::timeend() const {
  return timeend_;
}
inline void SPVPMatchRpcStartSelectNotify::set_timeend(::google::protobuf::int32 value) {
  set_has_timeend();
  timeend_ = value;
}

// repeated .SPVPMatchUserMessage UMess = 3;
inline int SPVPMatchRpcStartSelectNotify::umess_size() const {
  return umess_.size();
}
inline void SPVPMatchRpcStartSelectNotify::clear_umess() {
  umess_.Clear();
}
inline const ::SPVPMatchUserMessage& SPVPMatchRpcStartSelectNotify::umess(int index) const {
  return umess_.Get(index);
}
inline ::SPVPMatchUserMessage* SPVPMatchRpcStartSelectNotify::mutable_umess(int index) {
  return umess_.Mutable(index);
}
inline ::SPVPMatchUserMessage* SPVPMatchRpcStartSelectNotify::add_umess() {
  return umess_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SPVPMatchUserMessage >&
SPVPMatchRpcStartSelectNotify::umess() const {
  return umess_;
}
inline ::google::protobuf::RepeatedPtrField< ::SPVPMatchUserMessage >*
SPVPMatchRpcStartSelectNotify::mutable_umess() {
  return &umess_;
}

// repeated .SPVPMatchUserMessage OtherUMess = 4;
inline int SPVPMatchRpcStartSelectNotify::otherumess_size() const {
  return otherumess_.size();
}
inline void SPVPMatchRpcStartSelectNotify::clear_otherumess() {
  otherumess_.Clear();
}
inline const ::SPVPMatchUserMessage& SPVPMatchRpcStartSelectNotify::otherumess(int index) const {
  return otherumess_.Get(index);
}
inline ::SPVPMatchUserMessage* SPVPMatchRpcStartSelectNotify::mutable_otherumess(int index) {
  return otherumess_.Mutable(index);
}
inline ::SPVPMatchUserMessage* SPVPMatchRpcStartSelectNotify::add_otherumess() {
  return otherumess_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SPVPMatchUserMessage >&
SPVPMatchRpcStartSelectNotify::otherumess() const {
  return otherumess_;
}
inline ::google::protobuf::RepeatedPtrField< ::SPVPMatchUserMessage >*
SPVPMatchRpcStartSelectNotify::mutable_otherumess() {
  return &otherumess_;
}

// optional sint32 Timer = 5 [default = -1];
inline bool SPVPMatchRpcStartSelectNotify::has_timer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SPVPMatchRpcStartSelectNotify::set_has_timer() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SPVPMatchRpcStartSelectNotify::clear_has_timer() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SPVPMatchRpcStartSelectNotify::clear_timer() {
  timer_ = -1;
  clear_has_timer();
}
inline ::google::protobuf::int32 SPVPMatchRpcStartSelectNotify::timer() const {
  return timer_;
}
inline void SPVPMatchRpcStartSelectNotify::set_timer(::google::protobuf::int32 value) {
  set_has_timer();
  timer_ = value;
}

// -------------------------------------------------------------------

// SPVPMatchRpcSelectHeroAsk

// optional sint32 HeroID = 1 [default = -1];
inline bool SPVPMatchRpcSelectHeroAsk::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SPVPMatchRpcSelectHeroAsk::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SPVPMatchRpcSelectHeroAsk::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SPVPMatchRpcSelectHeroAsk::clear_heroid() {
  heroid_ = -1;
  clear_has_heroid();
}
inline ::google::protobuf::int32 SPVPMatchRpcSelectHeroAsk::heroid() const {
  return heroid_;
}
inline void SPVPMatchRpcSelectHeroAsk::set_heroid(::google::protobuf::int32 value) {
  set_has_heroid();
  heroid_ = value;
}

// -------------------------------------------------------------------

// SPVPMatchRpcSelectHeroReply

// optional sint32 Result = 1 [default = -9999];
inline bool SPVPMatchRpcSelectHeroReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SPVPMatchRpcSelectHeroReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SPVPMatchRpcSelectHeroReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SPVPMatchRpcSelectHeroReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 SPVPMatchRpcSelectHeroReply::result() const {
  return result_;
}
inline void SPVPMatchRpcSelectHeroReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional sint32 HeroID = 2 [default = -1];
inline bool SPVPMatchRpcSelectHeroReply::has_heroid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SPVPMatchRpcSelectHeroReply::set_has_heroid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SPVPMatchRpcSelectHeroReply::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SPVPMatchRpcSelectHeroReply::clear_heroid() {
  heroid_ = -1;
  clear_has_heroid();
}
inline ::google::protobuf::int32 SPVPMatchRpcSelectHeroReply::heroid() const {
  return heroid_;
}
inline void SPVPMatchRpcSelectHeroReply::set_heroid(::google::protobuf::int32 value) {
  set_has_heroid();
  heroid_ = value;
}

// -------------------------------------------------------------------

// SPVPMatchRpcGetStatusAsk

// -------------------------------------------------------------------

// SPVPMatchRpcGetStatusReply

// optional sint32 Result = 1 [default = -9999];
inline bool SPVPMatchRpcGetStatusReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SPVPMatchRpcGetStatusReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SPVPMatchRpcGetStatusReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SPVPMatchRpcGetStatusReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 SPVPMatchRpcGetStatusReply::result() const {
  return result_;
}
inline void SPVPMatchRpcGetStatusReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional sint32 Type = 2 [default = -1];
inline bool SPVPMatchRpcGetStatusReply::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SPVPMatchRpcGetStatusReply::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SPVPMatchRpcGetStatusReply::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SPVPMatchRpcGetStatusReply::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::google::protobuf::int32 SPVPMatchRpcGetStatusReply::type() const {
  return type_;
}
inline void SPVPMatchRpcGetStatusReply::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional sint32 TimeStart = 5 [default = -1];
inline bool SPVPMatchRpcGetStatusReply::has_timestart() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SPVPMatchRpcGetStatusReply::set_has_timestart() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SPVPMatchRpcGetStatusReply::clear_has_timestart() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SPVPMatchRpcGetStatusReply::clear_timestart() {
  timestart_ = -1;
  clear_has_timestart();
}
inline ::google::protobuf::int32 SPVPMatchRpcGetStatusReply::timestart() const {
  return timestart_;
}
inline void SPVPMatchRpcGetStatusReply::set_timestart(::google::protobuf::int32 value) {
  set_has_timestart();
  timestart_ = value;
}

// optional sint32 TimeEnd = 6 [default = -1];
inline bool SPVPMatchRpcGetStatusReply::has_timeend() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SPVPMatchRpcGetStatusReply::set_has_timeend() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SPVPMatchRpcGetStatusReply::clear_has_timeend() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SPVPMatchRpcGetStatusReply::clear_timeend() {
  timeend_ = -1;
  clear_has_timeend();
}
inline ::google::protobuf::int32 SPVPMatchRpcGetStatusReply::timeend() const {
  return timeend_;
}
inline void SPVPMatchRpcGetStatusReply::set_timeend(::google::protobuf::int32 value) {
  set_has_timeend();
  timeend_ = value;
}

// optional sint32 Timer = 7 [default = -1];
inline bool SPVPMatchRpcGetStatusReply::has_timer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SPVPMatchRpcGetStatusReply::set_has_timer() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SPVPMatchRpcGetStatusReply::clear_has_timer() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SPVPMatchRpcGetStatusReply::clear_timer() {
  timer_ = -1;
  clear_has_timer();
}
inline ::google::protobuf::int32 SPVPMatchRpcGetStatusReply::timer() const {
  return timer_;
}
inline void SPVPMatchRpcGetStatusReply::set_timer(::google::protobuf::int32 value) {
  set_has_timer();
  timer_ = value;
}

// repeated .SPVPMatchUserMessage UMess = 8;
inline int SPVPMatchRpcGetStatusReply::umess_size() const {
  return umess_.size();
}
inline void SPVPMatchRpcGetStatusReply::clear_umess() {
  umess_.Clear();
}
inline const ::SPVPMatchUserMessage& SPVPMatchRpcGetStatusReply::umess(int index) const {
  return umess_.Get(index);
}
inline ::SPVPMatchUserMessage* SPVPMatchRpcGetStatusReply::mutable_umess(int index) {
  return umess_.Mutable(index);
}
inline ::SPVPMatchUserMessage* SPVPMatchRpcGetStatusReply::add_umess() {
  return umess_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SPVPMatchUserMessage >&
SPVPMatchRpcGetStatusReply::umess() const {
  return umess_;
}
inline ::google::protobuf::RepeatedPtrField< ::SPVPMatchUserMessage >*
SPVPMatchRpcGetStatusReply::mutable_umess() {
  return &umess_;
}

// repeated .SPVPMatchUserMessage UMessOther = 9;
inline int SPVPMatchRpcGetStatusReply::umessother_size() const {
  return umessother_.size();
}
inline void SPVPMatchRpcGetStatusReply::clear_umessother() {
  umessother_.Clear();
}
inline const ::SPVPMatchUserMessage& SPVPMatchRpcGetStatusReply::umessother(int index) const {
  return umessother_.Get(index);
}
inline ::SPVPMatchUserMessage* SPVPMatchRpcGetStatusReply::mutable_umessother(int index) {
  return umessother_.Mutable(index);
}
inline ::SPVPMatchUserMessage* SPVPMatchRpcGetStatusReply::add_umessother() {
  return umessother_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SPVPMatchUserMessage >&
SPVPMatchRpcGetStatusReply::umessother() const {
  return umessother_;
}
inline ::google::protobuf::RepeatedPtrField< ::SPVPMatchUserMessage >*
SPVPMatchRpcGetStatusReply::mutable_umessother() {
  return &umessother_;
}

// -------------------------------------------------------------------

// SPVPMatchRpcChangeStatusNotify

// optional .SPVPMatchUserMessage UMess = 1;
inline bool SPVPMatchRpcChangeStatusNotify::has_umess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SPVPMatchRpcChangeStatusNotify::set_has_umess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SPVPMatchRpcChangeStatusNotify::clear_has_umess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SPVPMatchRpcChangeStatusNotify::clear_umess() {
  if (umess_ != NULL) umess_->::SPVPMatchUserMessage::Clear();
  clear_has_umess();
}
inline const ::SPVPMatchUserMessage& SPVPMatchRpcChangeStatusNotify::umess() const {
  return umess_ != NULL ? *umess_ : *default_instance_->umess_;
}
inline ::SPVPMatchUserMessage* SPVPMatchRpcChangeStatusNotify::mutable_umess() {
  set_has_umess();
  if (umess_ == NULL) umess_ = new ::SPVPMatchUserMessage;
  return umess_;
}
inline ::SPVPMatchUserMessage* SPVPMatchRpcChangeStatusNotify::release_umess() {
  clear_has_umess();
  ::SPVPMatchUserMessage* temp = umess_;
  umess_ = NULL;
  return temp;
}
inline void SPVPMatchRpcChangeStatusNotify::set_allocated_umess(::SPVPMatchUserMessage* umess) {
  delete umess_;
  umess_ = umess;
  if (umess) {
    set_has_umess();
  } else {
    clear_has_umess();
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SPVPMatchCliRpc_2eproto__INCLUDED
