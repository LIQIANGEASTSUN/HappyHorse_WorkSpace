// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IDSvrRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IDSvrRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* IDRpcIDAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IDRpcIDAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* IDRpcIDReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IDRpcIDReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* IDRpcAddUserNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IDRpcAddUserNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_IDSvrRpc_2eproto() {
  protobuf_AddDesc_IDSvrRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "IDSvrRpc.proto");
  GOOGLE_CHECK(file != NULL);
  IDRpcIDAsk_descriptor_ = file->message_type(0);
  static const int IDRpcIDAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDRpcIDAsk, fieldname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDRpcIDAsk, username_),
  };
  IDRpcIDAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IDRpcIDAsk_descriptor_,
      IDRpcIDAsk::default_instance_,
      IDRpcIDAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDRpcIDAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDRpcIDAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IDRpcIDAsk));
  IDRpcIDReply_descriptor_ = file->message_type(1);
  static const int IDRpcIDReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDRpcIDReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDRpcIDReply, id_),
  };
  IDRpcIDReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IDRpcIDReply_descriptor_,
      IDRpcIDReply::default_instance_,
      IDRpcIDReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDRpcIDReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDRpcIDReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IDRpcIDReply));
  IDRpcAddUserNotify_descriptor_ = file->message_type(2);
  static const int IDRpcAddUserNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDRpcAddUserNotify, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDRpcAddUserNotify, id_),
  };
  IDRpcAddUserNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IDRpcAddUserNotify_descriptor_,
      IDRpcAddUserNotify::default_instance_,
      IDRpcAddUserNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDRpcAddUserNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDRpcAddUserNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IDRpcAddUserNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_IDSvrRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IDRpcIDAsk_descriptor_, &IDRpcIDAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IDRpcIDReply_descriptor_, &IDRpcIDReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IDRpcAddUserNotify_descriptor_, &IDRpcAddUserNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_IDSvrRpc_2eproto() {
  delete IDRpcIDAsk::default_instance_;
  delete IDRpcIDAsk_reflection_;
  delete IDRpcIDReply::default_instance_;
  delete IDRpcIDReply_reflection_;
  delete IDRpcAddUserNotify::default_instance_;
  delete IDRpcAddUserNotify_reflection_;
}

void protobuf_AddDesc_IDSvrRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016IDSvrRpc.proto\032\022PublicStruct.proto\"1\n\n"
    "IDRpcIDAsk\022\021\n\tFieldName\030\001 \001(\t\022\020\n\010UserNam"
    "e\030\002 \001(\t\"5\n\014IDRpcIDReply\022\025\n\006Result\030\001 \001(\021:"
    "\005-9999\022\016\n\002ID\030\002 \001(\022:\002-1\"6\n\022IDRpcAddUserNo"
    "tify\022\020\n\010UserName\030\001 \001(\t\022\016\n\002ID\030\002 \001(\022:\002-1", 198);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "IDSvrRpc.proto", &protobuf_RegisterTypes);
  IDRpcIDAsk::default_instance_ = new IDRpcIDAsk();
  IDRpcIDReply::default_instance_ = new IDRpcIDReply();
  IDRpcAddUserNotify::default_instance_ = new IDRpcAddUserNotify();
  IDRpcIDAsk::default_instance_->InitAsDefaultInstance();
  IDRpcIDReply::default_instance_->InitAsDefaultInstance();
  IDRpcAddUserNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_IDSvrRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_IDSvrRpc_2eproto {
  StaticDescriptorInitializer_IDSvrRpc_2eproto() {
    protobuf_AddDesc_IDSvrRpc_2eproto();
  }
} static_descriptor_initializer_IDSvrRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int IDRpcIDAsk::kFieldNameFieldNumber;
const int IDRpcIDAsk::kUserNameFieldNumber;
#endif  // !_MSC_VER

IDRpcIDAsk::IDRpcIDAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IDRpcIDAsk::InitAsDefaultInstance() {
}

IDRpcIDAsk::IDRpcIDAsk(const IDRpcIDAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IDRpcIDAsk::SharedCtor() {
  _cached_size_ = 0;
  fieldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IDRpcIDAsk::~IDRpcIDAsk() {
  SharedDtor();
}

void IDRpcIDAsk::SharedDtor() {
  if (fieldname_ != &::google::protobuf::internal::kEmptyString) {
    delete fieldname_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void IDRpcIDAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IDRpcIDAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IDRpcIDAsk_descriptor_;
}

const IDRpcIDAsk& IDRpcIDAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IDSvrRpc_2eproto();
  return *default_instance_;
}

IDRpcIDAsk* IDRpcIDAsk::default_instance_ = NULL;

IDRpcIDAsk* IDRpcIDAsk::New() const {
  return new IDRpcIDAsk;
}

void IDRpcIDAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fieldname()) {
      if (fieldname_ != &::google::protobuf::internal::kEmptyString) {
        fieldname_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IDRpcIDAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string FieldName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fieldname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fieldname().data(), this->fieldname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_UserName;
        break;
      }

      // optional string UserName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IDRpcIDAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string FieldName = 1;
  if (has_fieldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fieldname().data(), this->fieldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->fieldname(), output);
  }

  // optional string UserName = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IDRpcIDAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string FieldName = 1;
  if (has_fieldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fieldname().data(), this->fieldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fieldname(), target);
  }

  // optional string UserName = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IDRpcIDAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string FieldName = 1;
    if (has_fieldname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fieldname());
    }

    // optional string UserName = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IDRpcIDAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IDRpcIDAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IDRpcIDAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IDRpcIDAsk::MergeFrom(const IDRpcIDAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fieldname()) {
      set_fieldname(from.fieldname());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IDRpcIDAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IDRpcIDAsk::CopyFrom(const IDRpcIDAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IDRpcIDAsk::IsInitialized() const {

  return true;
}

void IDRpcIDAsk::Swap(IDRpcIDAsk* other) {
  if (other != this) {
    std::swap(fieldname_, other->fieldname_);
    std::swap(username_, other->username_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IDRpcIDAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IDRpcIDAsk_descriptor_;
  metadata.reflection = IDRpcIDAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IDRpcIDReply::kResultFieldNumber;
const int IDRpcIDReply::kIDFieldNumber;
#endif  // !_MSC_VER

IDRpcIDReply::IDRpcIDReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IDRpcIDReply::InitAsDefaultInstance() {
}

IDRpcIDReply::IDRpcIDReply(const IDRpcIDReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IDRpcIDReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  id_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IDRpcIDReply::~IDRpcIDReply() {
  SharedDtor();
}

void IDRpcIDReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IDRpcIDReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IDRpcIDReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IDRpcIDReply_descriptor_;
}

const IDRpcIDReply& IDRpcIDReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IDSvrRpc_2eproto();
  return *default_instance_;
}

IDRpcIDReply* IDRpcIDReply::default_instance_ = NULL;

IDRpcIDReply* IDRpcIDReply::New() const {
  return new IDRpcIDReply;
}

void IDRpcIDReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    id_ = GOOGLE_LONGLONG(-1);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IDRpcIDReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ID;
        break;
      }

      // optional sint64 ID = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IDRpcIDReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint64 ID = 2 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IDRpcIDReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint64 ID = 2 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IDRpcIDReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint64 ID = 2 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IDRpcIDReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IDRpcIDReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IDRpcIDReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IDRpcIDReply::MergeFrom(const IDRpcIDReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IDRpcIDReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IDRpcIDReply::CopyFrom(const IDRpcIDReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IDRpcIDReply::IsInitialized() const {

  return true;
}

void IDRpcIDReply::Swap(IDRpcIDReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IDRpcIDReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IDRpcIDReply_descriptor_;
  metadata.reflection = IDRpcIDReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IDRpcAddUserNotify::kUserNameFieldNumber;
const int IDRpcAddUserNotify::kIDFieldNumber;
#endif  // !_MSC_VER

IDRpcAddUserNotify::IDRpcAddUserNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IDRpcAddUserNotify::InitAsDefaultInstance() {
}

IDRpcAddUserNotify::IDRpcAddUserNotify(const IDRpcAddUserNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IDRpcAddUserNotify::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IDRpcAddUserNotify::~IDRpcAddUserNotify() {
  SharedDtor();
}

void IDRpcAddUserNotify::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void IDRpcAddUserNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IDRpcAddUserNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IDRpcAddUserNotify_descriptor_;
}

const IDRpcAddUserNotify& IDRpcAddUserNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IDSvrRpc_2eproto();
  return *default_instance_;
}

IDRpcAddUserNotify* IDRpcAddUserNotify::default_instance_ = NULL;

IDRpcAddUserNotify* IDRpcAddUserNotify::New() const {
  return new IDRpcAddUserNotify;
}

void IDRpcAddUserNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    id_ = GOOGLE_LONGLONG(-1);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IDRpcAddUserNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string UserName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ID;
        break;
      }

      // optional sint64 ID = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IDRpcAddUserNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string UserName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }

  // optional sint64 ID = 2 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IDRpcAddUserNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string UserName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional sint64 ID = 2 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IDRpcAddUserNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string UserName = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional sint64 ID = 2 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IDRpcAddUserNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IDRpcAddUserNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IDRpcAddUserNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IDRpcAddUserNotify::MergeFrom(const IDRpcAddUserNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IDRpcAddUserNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IDRpcAddUserNotify::CopyFrom(const IDRpcAddUserNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IDRpcAddUserNotify::IsInitialized() const {

  return true;
}

void IDRpcAddUserNotify::Swap(IDRpcAddUserNotify* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IDRpcAddUserNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IDRpcAddUserNotify_descriptor_;
  metadata.reflection = IDRpcAddUserNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
