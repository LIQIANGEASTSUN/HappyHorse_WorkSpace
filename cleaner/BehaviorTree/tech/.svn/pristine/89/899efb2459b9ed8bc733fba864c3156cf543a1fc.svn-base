// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MysqlShardingSvrRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MysqlShardingSvrRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MysqlShardingRpcGetTableInfoAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MysqlShardingRpcGetTableInfoAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* MysqlShardingRpcGetTableInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MysqlShardingRpcGetTableInfoReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* MysqlShardingRpcExecuteAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MysqlShardingRpcExecuteAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* MysqlShardingRpcExecuteReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MysqlShardingRpcExecuteReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* MysqlShardingRpcTransactionAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MysqlShardingRpcTransactionAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* MysqlShardingRpcTransactionReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MysqlShardingRpcTransactionReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* MysqlShardingRecordLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MysqlShardingRecordLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* MysqlShardingTableInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MysqlShardingTableInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MysqlShardingSvrRpc_2eproto() {
  protobuf_AddDesc_MysqlShardingSvrRpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MysqlShardingSvrRpc.proto");
  GOOGLE_CHECK(file != NULL);
  MysqlShardingRpcGetTableInfoAsk_descriptor_ = file->message_type(0);
  static const int MysqlShardingRpcGetTableInfoAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlShardingRpcGetTableInfoAsk, name_),
  };
  MysqlShardingRpcGetTableInfoAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MysqlShardingRpcGetTableInfoAsk_descriptor_,
      MysqlShardingRpcGetTableInfoAsk::default_instance_,
      MysqlShardingRpcGetTableInfoAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlShardingRpcGetTableInfoAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlShardingRpcGetTableInfoAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MysqlShardingRpcGetTableInfoAsk));
  MysqlShardingRpcGetTableInfoReply_descriptor_ = file->message_type(1);
  static const int MysqlShardingRpcGetTableInfoReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlShardingRpcGetTableInfoReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlShardingRpcGetTableInfoReply, tablearr_),
  };
  MysqlShardingRpcGetTableInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MysqlShardingRpcGetTableInfoReply_descriptor_,
      MysqlShardingRpcGetTableInfoReply::default_instance_,
      MysqlShardingRpcGetTableInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlShardingRpcGetTableInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlShardingRpcGetTableInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MysqlShardingRpcGetTableInfoReply));
  MysqlShardingRpcExecuteAsk_descriptor_ = file->message_type(2);
  static const int MysqlShardingRpcExecuteAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlShardingRpcExecuteAsk, sql_),
  };
  MysqlShardingRpcExecuteAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MysqlShardingRpcExecuteAsk_descriptor_,
      MysqlShardingRpcExecuteAsk::default_instance_,
      MysqlShardingRpcExecuteAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlShardingRpcExecuteAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlShardingRpcExecuteAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MysqlShardingRpcExecuteAsk));
  MysqlShardingRpcExecuteReply_descriptor_ = file->message_type(3);
  static const int MysqlShardingRpcExecuteReply_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlShardingRpcExecuteReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlShardingRpcExecuteReply, fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlShardingRpcExecuteReply, records_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlShardingRpcExecuteReply, errorstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlShardingRpcExecuteReply, insertid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlShardingRpcExecuteReply, nraffects_),
  };
  MysqlShardingRpcExecuteReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MysqlShardingRpcExecuteReply_descriptor_,
      MysqlShardingRpcExecuteReply::default_instance_,
      MysqlShardingRpcExecuteReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlShardingRpcExecuteReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlShardingRpcExecuteReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MysqlShardingRpcExecuteReply));
  MysqlShardingRpcTransactionAsk_descriptor_ = file->message_type(4);
  static const int MysqlShardingRpcTransactionAsk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlShardingRpcTransactionAsk, sqlarr_),
  };
  MysqlShardingRpcTransactionAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MysqlShardingRpcTransactionAsk_descriptor_,
      MysqlShardingRpcTransactionAsk::default_instance_,
      MysqlShardingRpcTransactionAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlShardingRpcTransactionAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlShardingRpcTransactionAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MysqlShardingRpcTransactionAsk));
  MysqlShardingRpcTransactionReply_descriptor_ = file->message_type(5);
  static const int MysqlShardingRpcTransactionReply_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlShardingRpcTransactionReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlShardingRpcTransactionReply, fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlShardingRpcTransactionReply, records_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlShardingRpcTransactionReply, errorstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlShardingRpcTransactionReply, insertid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlShardingRpcTransactionReply, nraffects_),
  };
  MysqlShardingRpcTransactionReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MysqlShardingRpcTransactionReply_descriptor_,
      MysqlShardingRpcTransactionReply::default_instance_,
      MysqlShardingRpcTransactionReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlShardingRpcTransactionReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlShardingRpcTransactionReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MysqlShardingRpcTransactionReply));
  MysqlShardingRecordLine_descriptor_ = file->message_type(6);
  static const int MysqlShardingRecordLine_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlShardingRecordLine, values_),
  };
  MysqlShardingRecordLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MysqlShardingRecordLine_descriptor_,
      MysqlShardingRecordLine::default_instance_,
      MysqlShardingRecordLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlShardingRecordLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlShardingRecordLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MysqlShardingRecordLine));
  MysqlShardingTableInfo_descriptor_ = file->message_type(7);
  static const int MysqlShardingTableInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlShardingTableInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlShardingTableInfo, partfield_),
  };
  MysqlShardingTableInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MysqlShardingTableInfo_descriptor_,
      MysqlShardingTableInfo::default_instance_,
      MysqlShardingTableInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlShardingTableInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlShardingTableInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MysqlShardingTableInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MysqlShardingSvrRpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MysqlShardingRpcGetTableInfoAsk_descriptor_, &MysqlShardingRpcGetTableInfoAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MysqlShardingRpcGetTableInfoReply_descriptor_, &MysqlShardingRpcGetTableInfoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MysqlShardingRpcExecuteAsk_descriptor_, &MysqlShardingRpcExecuteAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MysqlShardingRpcExecuteReply_descriptor_, &MysqlShardingRpcExecuteReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MysqlShardingRpcTransactionAsk_descriptor_, &MysqlShardingRpcTransactionAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MysqlShardingRpcTransactionReply_descriptor_, &MysqlShardingRpcTransactionReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MysqlShardingRecordLine_descriptor_, &MysqlShardingRecordLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MysqlShardingTableInfo_descriptor_, &MysqlShardingTableInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MysqlShardingSvrRpc_2eproto() {
  delete MysqlShardingRpcGetTableInfoAsk::default_instance_;
  delete MysqlShardingRpcGetTableInfoAsk_reflection_;
  delete MysqlShardingRpcGetTableInfoReply::default_instance_;
  delete MysqlShardingRpcGetTableInfoReply_reflection_;
  delete MysqlShardingRpcExecuteAsk::default_instance_;
  delete MysqlShardingRpcExecuteAsk_reflection_;
  delete MysqlShardingRpcExecuteReply::default_instance_;
  delete MysqlShardingRpcExecuteReply_reflection_;
  delete MysqlShardingRpcTransactionAsk::default_instance_;
  delete MysqlShardingRpcTransactionAsk_reflection_;
  delete MysqlShardingRpcTransactionReply::default_instance_;
  delete MysqlShardingRpcTransactionReply_reflection_;
  delete MysqlShardingRecordLine::default_instance_;
  delete MysqlShardingRecordLine_reflection_;
  delete MysqlShardingTableInfo::default_instance_;
  delete MysqlShardingTableInfo_reflection_;
}

void protobuf_AddDesc_MysqlShardingSvrRpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031MysqlShardingSvrRpc.proto\032\022PublicStruc"
    "t.proto\"/\n\037MysqlShardingRpcGetTableInfoA"
    "sk\022\014\n\004Name\030\001 \001(\t\"e\n!MysqlShardingRpcGetT"
    "ableInfoReply\022\025\n\006Result\030\001 \001(\021:\005-9999\022)\n\010"
    "TableArr\030\002 \003(\0132\027.MysqlShardingTableInfo\""
    ")\n\032MysqlShardingRpcExecuteAsk\022\013\n\003Sql\030\001 \001"
    "(\t\"\260\001\n\034MysqlShardingRpcExecuteReply\022\025\n\006R"
    "esult\030\001 \001(\021:\005-9999\022\016\n\006Fields\030\003 \003(\t\022)\n\007Re"
    "cords\030\004 \003(\0132\030.MysqlShardingRecordLine\022\023\n"
    "\013ErrorString\030\005 \001(\t\022\023\n\010InsertId\030\006 \001(\022:\0010\022"
    "\024\n\tNrAffects\030\007 \001(\021:\0010\"0\n\036MysqlShardingRp"
    "cTransactionAsk\022\016\n\006SqlArr\030\001 \003(\t\"\264\001\n Mysq"
    "lShardingRpcTransactionReply\022\025\n\006Result\030\001"
    " \001(\021:\005-9999\022\016\n\006Fields\030\003 \003(\t\022)\n\007Records\030\004"
    " \003(\0132\030.MysqlShardingRecordLine\022\023\n\013ErrorS"
    "tring\030\005 \001(\t\022\023\n\010InsertId\030\006 \001(\022:\0010\022\024\n\tNrAf"
    "fects\030\007 \001(\021:\0010\")\n\027MysqlShardingRecordLin"
    "e\022\016\n\006Values\030\001 \003(\t\"9\n\026MysqlShardingTableI"
    "nfo\022\014\n\004Name\030\001 \001(\t\022\021\n\tPartField\030\002 \001(\t", 756);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MysqlShardingSvrRpc.proto", &protobuf_RegisterTypes);
  MysqlShardingRpcGetTableInfoAsk::default_instance_ = new MysqlShardingRpcGetTableInfoAsk();
  MysqlShardingRpcGetTableInfoReply::default_instance_ = new MysqlShardingRpcGetTableInfoReply();
  MysqlShardingRpcExecuteAsk::default_instance_ = new MysqlShardingRpcExecuteAsk();
  MysqlShardingRpcExecuteReply::default_instance_ = new MysqlShardingRpcExecuteReply();
  MysqlShardingRpcTransactionAsk::default_instance_ = new MysqlShardingRpcTransactionAsk();
  MysqlShardingRpcTransactionReply::default_instance_ = new MysqlShardingRpcTransactionReply();
  MysqlShardingRecordLine::default_instance_ = new MysqlShardingRecordLine();
  MysqlShardingTableInfo::default_instance_ = new MysqlShardingTableInfo();
  MysqlShardingRpcGetTableInfoAsk::default_instance_->InitAsDefaultInstance();
  MysqlShardingRpcGetTableInfoReply::default_instance_->InitAsDefaultInstance();
  MysqlShardingRpcExecuteAsk::default_instance_->InitAsDefaultInstance();
  MysqlShardingRpcExecuteReply::default_instance_->InitAsDefaultInstance();
  MysqlShardingRpcTransactionAsk::default_instance_->InitAsDefaultInstance();
  MysqlShardingRpcTransactionReply::default_instance_->InitAsDefaultInstance();
  MysqlShardingRecordLine::default_instance_->InitAsDefaultInstance();
  MysqlShardingTableInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MysqlShardingSvrRpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MysqlShardingSvrRpc_2eproto {
  StaticDescriptorInitializer_MysqlShardingSvrRpc_2eproto() {
    protobuf_AddDesc_MysqlShardingSvrRpc_2eproto();
  }
} static_descriptor_initializer_MysqlShardingSvrRpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MysqlShardingRpcGetTableInfoAsk::kNameFieldNumber;
#endif  // !_MSC_VER

MysqlShardingRpcGetTableInfoAsk::MysqlShardingRpcGetTableInfoAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MysqlShardingRpcGetTableInfoAsk::InitAsDefaultInstance() {
}

MysqlShardingRpcGetTableInfoAsk::MysqlShardingRpcGetTableInfoAsk(const MysqlShardingRpcGetTableInfoAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MysqlShardingRpcGetTableInfoAsk::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MysqlShardingRpcGetTableInfoAsk::~MysqlShardingRpcGetTableInfoAsk() {
  SharedDtor();
}

void MysqlShardingRpcGetTableInfoAsk::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MysqlShardingRpcGetTableInfoAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MysqlShardingRpcGetTableInfoAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MysqlShardingRpcGetTableInfoAsk_descriptor_;
}

const MysqlShardingRpcGetTableInfoAsk& MysqlShardingRpcGetTableInfoAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MysqlShardingSvrRpc_2eproto();
  return *default_instance_;
}

MysqlShardingRpcGetTableInfoAsk* MysqlShardingRpcGetTableInfoAsk::default_instance_ = NULL;

MysqlShardingRpcGetTableInfoAsk* MysqlShardingRpcGetTableInfoAsk::New() const {
  return new MysqlShardingRpcGetTableInfoAsk;
}

void MysqlShardingRpcGetTableInfoAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MysqlShardingRpcGetTableInfoAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MysqlShardingRpcGetTableInfoAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MysqlShardingRpcGetTableInfoAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MysqlShardingRpcGetTableInfoAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MysqlShardingRpcGetTableInfoAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MysqlShardingRpcGetTableInfoAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MysqlShardingRpcGetTableInfoAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MysqlShardingRpcGetTableInfoAsk::MergeFrom(const MysqlShardingRpcGetTableInfoAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MysqlShardingRpcGetTableInfoAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlShardingRpcGetTableInfoAsk::CopyFrom(const MysqlShardingRpcGetTableInfoAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlShardingRpcGetTableInfoAsk::IsInitialized() const {

  return true;
}

void MysqlShardingRpcGetTableInfoAsk::Swap(MysqlShardingRpcGetTableInfoAsk* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MysqlShardingRpcGetTableInfoAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MysqlShardingRpcGetTableInfoAsk_descriptor_;
  metadata.reflection = MysqlShardingRpcGetTableInfoAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MysqlShardingRpcGetTableInfoReply::kResultFieldNumber;
const int MysqlShardingRpcGetTableInfoReply::kTableArrFieldNumber;
#endif  // !_MSC_VER

MysqlShardingRpcGetTableInfoReply::MysqlShardingRpcGetTableInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MysqlShardingRpcGetTableInfoReply::InitAsDefaultInstance() {
}

MysqlShardingRpcGetTableInfoReply::MysqlShardingRpcGetTableInfoReply(const MysqlShardingRpcGetTableInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MysqlShardingRpcGetTableInfoReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MysqlShardingRpcGetTableInfoReply::~MysqlShardingRpcGetTableInfoReply() {
  SharedDtor();
}

void MysqlShardingRpcGetTableInfoReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MysqlShardingRpcGetTableInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MysqlShardingRpcGetTableInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MysqlShardingRpcGetTableInfoReply_descriptor_;
}

const MysqlShardingRpcGetTableInfoReply& MysqlShardingRpcGetTableInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MysqlShardingSvrRpc_2eproto();
  return *default_instance_;
}

MysqlShardingRpcGetTableInfoReply* MysqlShardingRpcGetTableInfoReply::default_instance_ = NULL;

MysqlShardingRpcGetTableInfoReply* MysqlShardingRpcGetTableInfoReply::New() const {
  return new MysqlShardingRpcGetTableInfoReply;
}

void MysqlShardingRpcGetTableInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
  }
  tablearr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MysqlShardingRpcGetTableInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_TableArr;
        break;
      }

      // repeated .MysqlShardingTableInfo TableArr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TableArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tablearr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_TableArr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MysqlShardingRpcGetTableInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // repeated .MysqlShardingTableInfo TableArr = 2;
  for (int i = 0; i < this->tablearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tablearr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MysqlShardingRpcGetTableInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // repeated .MysqlShardingTableInfo TableArr = 2;
  for (int i = 0; i < this->tablearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tablearr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MysqlShardingRpcGetTableInfoReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

  }
  // repeated .MysqlShardingTableInfo TableArr = 2;
  total_size += 1 * this->tablearr_size();
  for (int i = 0; i < this->tablearr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tablearr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MysqlShardingRpcGetTableInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MysqlShardingRpcGetTableInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MysqlShardingRpcGetTableInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MysqlShardingRpcGetTableInfoReply::MergeFrom(const MysqlShardingRpcGetTableInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  tablearr_.MergeFrom(from.tablearr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MysqlShardingRpcGetTableInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlShardingRpcGetTableInfoReply::CopyFrom(const MysqlShardingRpcGetTableInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlShardingRpcGetTableInfoReply::IsInitialized() const {

  return true;
}

void MysqlShardingRpcGetTableInfoReply::Swap(MysqlShardingRpcGetTableInfoReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    tablearr_.Swap(&other->tablearr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MysqlShardingRpcGetTableInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MysqlShardingRpcGetTableInfoReply_descriptor_;
  metadata.reflection = MysqlShardingRpcGetTableInfoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MysqlShardingRpcExecuteAsk::kSqlFieldNumber;
#endif  // !_MSC_VER

MysqlShardingRpcExecuteAsk::MysqlShardingRpcExecuteAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MysqlShardingRpcExecuteAsk::InitAsDefaultInstance() {
}

MysqlShardingRpcExecuteAsk::MysqlShardingRpcExecuteAsk(const MysqlShardingRpcExecuteAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MysqlShardingRpcExecuteAsk::SharedCtor() {
  _cached_size_ = 0;
  sql_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MysqlShardingRpcExecuteAsk::~MysqlShardingRpcExecuteAsk() {
  SharedDtor();
}

void MysqlShardingRpcExecuteAsk::SharedDtor() {
  if (sql_ != &::google::protobuf::internal::kEmptyString) {
    delete sql_;
  }
  if (this != default_instance_) {
  }
}

void MysqlShardingRpcExecuteAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MysqlShardingRpcExecuteAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MysqlShardingRpcExecuteAsk_descriptor_;
}

const MysqlShardingRpcExecuteAsk& MysqlShardingRpcExecuteAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MysqlShardingSvrRpc_2eproto();
  return *default_instance_;
}

MysqlShardingRpcExecuteAsk* MysqlShardingRpcExecuteAsk::default_instance_ = NULL;

MysqlShardingRpcExecuteAsk* MysqlShardingRpcExecuteAsk::New() const {
  return new MysqlShardingRpcExecuteAsk;
}

void MysqlShardingRpcExecuteAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sql()) {
      if (sql_ != &::google::protobuf::internal::kEmptyString) {
        sql_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MysqlShardingRpcExecuteAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Sql = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sql()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sql().data(), this->sql().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MysqlShardingRpcExecuteAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Sql = 1;
  if (has_sql()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sql().data(), this->sql().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sql(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MysqlShardingRpcExecuteAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Sql = 1;
  if (has_sql()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sql().data(), this->sql().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sql(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MysqlShardingRpcExecuteAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Sql = 1;
    if (has_sql()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sql());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MysqlShardingRpcExecuteAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MysqlShardingRpcExecuteAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MysqlShardingRpcExecuteAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MysqlShardingRpcExecuteAsk::MergeFrom(const MysqlShardingRpcExecuteAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sql()) {
      set_sql(from.sql());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MysqlShardingRpcExecuteAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlShardingRpcExecuteAsk::CopyFrom(const MysqlShardingRpcExecuteAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlShardingRpcExecuteAsk::IsInitialized() const {

  return true;
}

void MysqlShardingRpcExecuteAsk::Swap(MysqlShardingRpcExecuteAsk* other) {
  if (other != this) {
    std::swap(sql_, other->sql_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MysqlShardingRpcExecuteAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MysqlShardingRpcExecuteAsk_descriptor_;
  metadata.reflection = MysqlShardingRpcExecuteAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MysqlShardingRpcExecuteReply::kResultFieldNumber;
const int MysqlShardingRpcExecuteReply::kFieldsFieldNumber;
const int MysqlShardingRpcExecuteReply::kRecordsFieldNumber;
const int MysqlShardingRpcExecuteReply::kErrorStringFieldNumber;
const int MysqlShardingRpcExecuteReply::kInsertIdFieldNumber;
const int MysqlShardingRpcExecuteReply::kNrAffectsFieldNumber;
#endif  // !_MSC_VER

MysqlShardingRpcExecuteReply::MysqlShardingRpcExecuteReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MysqlShardingRpcExecuteReply::InitAsDefaultInstance() {
}

MysqlShardingRpcExecuteReply::MysqlShardingRpcExecuteReply(const MysqlShardingRpcExecuteReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MysqlShardingRpcExecuteReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  errorstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  insertid_ = GOOGLE_LONGLONG(0);
  nraffects_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MysqlShardingRpcExecuteReply::~MysqlShardingRpcExecuteReply() {
  SharedDtor();
}

void MysqlShardingRpcExecuteReply::SharedDtor() {
  if (errorstring_ != &::google::protobuf::internal::kEmptyString) {
    delete errorstring_;
  }
  if (this != default_instance_) {
  }
}

void MysqlShardingRpcExecuteReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MysqlShardingRpcExecuteReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MysqlShardingRpcExecuteReply_descriptor_;
}

const MysqlShardingRpcExecuteReply& MysqlShardingRpcExecuteReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MysqlShardingSvrRpc_2eproto();
  return *default_instance_;
}

MysqlShardingRpcExecuteReply* MysqlShardingRpcExecuteReply::default_instance_ = NULL;

MysqlShardingRpcExecuteReply* MysqlShardingRpcExecuteReply::New() const {
  return new MysqlShardingRpcExecuteReply;
}

void MysqlShardingRpcExecuteReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    if (has_errorstring()) {
      if (errorstring_ != &::google::protobuf::internal::kEmptyString) {
        errorstring_->clear();
      }
    }
    insertid_ = GOOGLE_LONGLONG(0);
    nraffects_ = 0;
  }
  fields_.Clear();
  records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MysqlShardingRpcExecuteReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Fields;
        break;
      }

      // repeated string Fields = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fields()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fields(this->fields_size() - 1).data(),
            this->fields(this->fields_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Fields;
        if (input->ExpectTag(34)) goto parse_Records;
        break;
      }

      // repeated .MysqlShardingRecordLine Records = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Records;
        if (input->ExpectTag(42)) goto parse_ErrorString;
        break;
      }

      // optional string ErrorString = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ErrorString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errorstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errorstring().data(), this->errorstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_InsertId;
        break;
      }

      // optional sint64 InsertId = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InsertId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &insertid_)));
          set_has_insertid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_NrAffects;
        break;
      }

      // optional sint32 NrAffects = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NrAffects:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nraffects_)));
          set_has_nraffects();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MysqlShardingRpcExecuteReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // repeated string Fields = 3;
  for (int i = 0; i < this->fields_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->fields(i).data(), this->fields(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->fields(i), output);
  }

  // repeated .MysqlShardingRecordLine Records = 4;
  for (int i = 0; i < this->records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->records(i), output);
  }

  // optional string ErrorString = 5;
  if (has_errorstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errorstring().data(), this->errorstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->errorstring(), output);
  }

  // optional sint64 InsertId = 6 [default = 0];
  if (has_insertid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(6, this->insertid(), output);
  }

  // optional sint32 NrAffects = 7 [default = 0];
  if (has_nraffects()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->nraffects(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MysqlShardingRpcExecuteReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // repeated string Fields = 3;
  for (int i = 0; i < this->fields_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fields(i).data(), this->fields(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->fields(i), target);
  }

  // repeated .MysqlShardingRecordLine Records = 4;
  for (int i = 0; i < this->records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->records(i), target);
  }

  // optional string ErrorString = 5;
  if (has_errorstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errorstring().data(), this->errorstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->errorstring(), target);
  }

  // optional sint64 InsertId = 6 [default = 0];
  if (has_insertid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(6, this->insertid(), target);
  }

  // optional sint32 NrAffects = 7 [default = 0];
  if (has_nraffects()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->nraffects(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MysqlShardingRpcExecuteReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional string ErrorString = 5;
    if (has_errorstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errorstring());
    }

    // optional sint64 InsertId = 6 [default = 0];
    if (has_insertid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->insertid());
    }

    // optional sint32 NrAffects = 7 [default = 0];
    if (has_nraffects()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nraffects());
    }

  }
  // repeated string Fields = 3;
  total_size += 1 * this->fields_size();
  for (int i = 0; i < this->fields_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fields(i));
  }

  // repeated .MysqlShardingRecordLine Records = 4;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MysqlShardingRpcExecuteReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MysqlShardingRpcExecuteReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MysqlShardingRpcExecuteReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MysqlShardingRpcExecuteReply::MergeFrom(const MysqlShardingRpcExecuteReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  fields_.MergeFrom(from.fields_);
  records_.MergeFrom(from.records_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_errorstring()) {
      set_errorstring(from.errorstring());
    }
    if (from.has_insertid()) {
      set_insertid(from.insertid());
    }
    if (from.has_nraffects()) {
      set_nraffects(from.nraffects());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MysqlShardingRpcExecuteReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlShardingRpcExecuteReply::CopyFrom(const MysqlShardingRpcExecuteReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlShardingRpcExecuteReply::IsInitialized() const {

  return true;
}

void MysqlShardingRpcExecuteReply::Swap(MysqlShardingRpcExecuteReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    fields_.Swap(&other->fields_);
    records_.Swap(&other->records_);
    std::swap(errorstring_, other->errorstring_);
    std::swap(insertid_, other->insertid_);
    std::swap(nraffects_, other->nraffects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MysqlShardingRpcExecuteReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MysqlShardingRpcExecuteReply_descriptor_;
  metadata.reflection = MysqlShardingRpcExecuteReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MysqlShardingRpcTransactionAsk::kSqlArrFieldNumber;
#endif  // !_MSC_VER

MysqlShardingRpcTransactionAsk::MysqlShardingRpcTransactionAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MysqlShardingRpcTransactionAsk::InitAsDefaultInstance() {
}

MysqlShardingRpcTransactionAsk::MysqlShardingRpcTransactionAsk(const MysqlShardingRpcTransactionAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MysqlShardingRpcTransactionAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MysqlShardingRpcTransactionAsk::~MysqlShardingRpcTransactionAsk() {
  SharedDtor();
}

void MysqlShardingRpcTransactionAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MysqlShardingRpcTransactionAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MysqlShardingRpcTransactionAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MysqlShardingRpcTransactionAsk_descriptor_;
}

const MysqlShardingRpcTransactionAsk& MysqlShardingRpcTransactionAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MysqlShardingSvrRpc_2eproto();
  return *default_instance_;
}

MysqlShardingRpcTransactionAsk* MysqlShardingRpcTransactionAsk::default_instance_ = NULL;

MysqlShardingRpcTransactionAsk* MysqlShardingRpcTransactionAsk::New() const {
  return new MysqlShardingRpcTransactionAsk;
}

void MysqlShardingRpcTransactionAsk::Clear() {
  sqlarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MysqlShardingRpcTransactionAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string SqlArr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SqlArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sqlarr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sqlarr(this->sqlarr_size() - 1).data(),
            this->sqlarr(this->sqlarr_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_SqlArr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MysqlShardingRpcTransactionAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string SqlArr = 1;
  for (int i = 0; i < this->sqlarr_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->sqlarr(i).data(), this->sqlarr(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sqlarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MysqlShardingRpcTransactionAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string SqlArr = 1;
  for (int i = 0; i < this->sqlarr_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sqlarr(i).data(), this->sqlarr(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->sqlarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MysqlShardingRpcTransactionAsk::ByteSize() const {
  int total_size = 0;

  // repeated string SqlArr = 1;
  total_size += 1 * this->sqlarr_size();
  for (int i = 0; i < this->sqlarr_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sqlarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MysqlShardingRpcTransactionAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MysqlShardingRpcTransactionAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MysqlShardingRpcTransactionAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MysqlShardingRpcTransactionAsk::MergeFrom(const MysqlShardingRpcTransactionAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  sqlarr_.MergeFrom(from.sqlarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MysqlShardingRpcTransactionAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlShardingRpcTransactionAsk::CopyFrom(const MysqlShardingRpcTransactionAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlShardingRpcTransactionAsk::IsInitialized() const {

  return true;
}

void MysqlShardingRpcTransactionAsk::Swap(MysqlShardingRpcTransactionAsk* other) {
  if (other != this) {
    sqlarr_.Swap(&other->sqlarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MysqlShardingRpcTransactionAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MysqlShardingRpcTransactionAsk_descriptor_;
  metadata.reflection = MysqlShardingRpcTransactionAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MysqlShardingRpcTransactionReply::kResultFieldNumber;
const int MysqlShardingRpcTransactionReply::kFieldsFieldNumber;
const int MysqlShardingRpcTransactionReply::kRecordsFieldNumber;
const int MysqlShardingRpcTransactionReply::kErrorStringFieldNumber;
const int MysqlShardingRpcTransactionReply::kInsertIdFieldNumber;
const int MysqlShardingRpcTransactionReply::kNrAffectsFieldNumber;
#endif  // !_MSC_VER

MysqlShardingRpcTransactionReply::MysqlShardingRpcTransactionReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MysqlShardingRpcTransactionReply::InitAsDefaultInstance() {
}

MysqlShardingRpcTransactionReply::MysqlShardingRpcTransactionReply(const MysqlShardingRpcTransactionReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MysqlShardingRpcTransactionReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  errorstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  insertid_ = GOOGLE_LONGLONG(0);
  nraffects_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MysqlShardingRpcTransactionReply::~MysqlShardingRpcTransactionReply() {
  SharedDtor();
}

void MysqlShardingRpcTransactionReply::SharedDtor() {
  if (errorstring_ != &::google::protobuf::internal::kEmptyString) {
    delete errorstring_;
  }
  if (this != default_instance_) {
  }
}

void MysqlShardingRpcTransactionReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MysqlShardingRpcTransactionReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MysqlShardingRpcTransactionReply_descriptor_;
}

const MysqlShardingRpcTransactionReply& MysqlShardingRpcTransactionReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MysqlShardingSvrRpc_2eproto();
  return *default_instance_;
}

MysqlShardingRpcTransactionReply* MysqlShardingRpcTransactionReply::default_instance_ = NULL;

MysqlShardingRpcTransactionReply* MysqlShardingRpcTransactionReply::New() const {
  return new MysqlShardingRpcTransactionReply;
}

void MysqlShardingRpcTransactionReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = -9999;
    if (has_errorstring()) {
      if (errorstring_ != &::google::protobuf::internal::kEmptyString) {
        errorstring_->clear();
      }
    }
    insertid_ = GOOGLE_LONGLONG(0);
    nraffects_ = 0;
  }
  fields_.Clear();
  records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MysqlShardingRpcTransactionReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Fields;
        break;
      }

      // repeated string Fields = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fields()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fields(this->fields_size() - 1).data(),
            this->fields(this->fields_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Fields;
        if (input->ExpectTag(34)) goto parse_Records;
        break;
      }

      // repeated .MysqlShardingRecordLine Records = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Records;
        if (input->ExpectTag(42)) goto parse_ErrorString;
        break;
      }

      // optional string ErrorString = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ErrorString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errorstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errorstring().data(), this->errorstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_InsertId;
        break;
      }

      // optional sint64 InsertId = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InsertId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &insertid_)));
          set_has_insertid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_NrAffects;
        break;
      }

      // optional sint32 NrAffects = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NrAffects:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nraffects_)));
          set_has_nraffects();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MysqlShardingRpcTransactionReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // repeated string Fields = 3;
  for (int i = 0; i < this->fields_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->fields(i).data(), this->fields(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->fields(i), output);
  }

  // repeated .MysqlShardingRecordLine Records = 4;
  for (int i = 0; i < this->records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->records(i), output);
  }

  // optional string ErrorString = 5;
  if (has_errorstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errorstring().data(), this->errorstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->errorstring(), output);
  }

  // optional sint64 InsertId = 6 [default = 0];
  if (has_insertid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(6, this->insertid(), output);
  }

  // optional sint32 NrAffects = 7 [default = 0];
  if (has_nraffects()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->nraffects(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MysqlShardingRpcTransactionReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // repeated string Fields = 3;
  for (int i = 0; i < this->fields_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fields(i).data(), this->fields(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->fields(i), target);
  }

  // repeated .MysqlShardingRecordLine Records = 4;
  for (int i = 0; i < this->records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->records(i), target);
  }

  // optional string ErrorString = 5;
  if (has_errorstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errorstring().data(), this->errorstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->errorstring(), target);
  }

  // optional sint64 InsertId = 6 [default = 0];
  if (has_insertid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(6, this->insertid(), target);
  }

  // optional sint32 NrAffects = 7 [default = 0];
  if (has_nraffects()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->nraffects(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MysqlShardingRpcTransactionReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional string ErrorString = 5;
    if (has_errorstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errorstring());
    }

    // optional sint64 InsertId = 6 [default = 0];
    if (has_insertid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->insertid());
    }

    // optional sint32 NrAffects = 7 [default = 0];
    if (has_nraffects()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nraffects());
    }

  }
  // repeated string Fields = 3;
  total_size += 1 * this->fields_size();
  for (int i = 0; i < this->fields_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fields(i));
  }

  // repeated .MysqlShardingRecordLine Records = 4;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MysqlShardingRpcTransactionReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MysqlShardingRpcTransactionReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MysqlShardingRpcTransactionReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MysqlShardingRpcTransactionReply::MergeFrom(const MysqlShardingRpcTransactionReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  fields_.MergeFrom(from.fields_);
  records_.MergeFrom(from.records_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_errorstring()) {
      set_errorstring(from.errorstring());
    }
    if (from.has_insertid()) {
      set_insertid(from.insertid());
    }
    if (from.has_nraffects()) {
      set_nraffects(from.nraffects());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MysqlShardingRpcTransactionReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlShardingRpcTransactionReply::CopyFrom(const MysqlShardingRpcTransactionReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlShardingRpcTransactionReply::IsInitialized() const {

  return true;
}

void MysqlShardingRpcTransactionReply::Swap(MysqlShardingRpcTransactionReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    fields_.Swap(&other->fields_);
    records_.Swap(&other->records_);
    std::swap(errorstring_, other->errorstring_);
    std::swap(insertid_, other->insertid_);
    std::swap(nraffects_, other->nraffects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MysqlShardingRpcTransactionReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MysqlShardingRpcTransactionReply_descriptor_;
  metadata.reflection = MysqlShardingRpcTransactionReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MysqlShardingRecordLine::kValuesFieldNumber;
#endif  // !_MSC_VER

MysqlShardingRecordLine::MysqlShardingRecordLine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MysqlShardingRecordLine::InitAsDefaultInstance() {
}

MysqlShardingRecordLine::MysqlShardingRecordLine(const MysqlShardingRecordLine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MysqlShardingRecordLine::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MysqlShardingRecordLine::~MysqlShardingRecordLine() {
  SharedDtor();
}

void MysqlShardingRecordLine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MysqlShardingRecordLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MysqlShardingRecordLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MysqlShardingRecordLine_descriptor_;
}

const MysqlShardingRecordLine& MysqlShardingRecordLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MysqlShardingSvrRpc_2eproto();
  return *default_instance_;
}

MysqlShardingRecordLine* MysqlShardingRecordLine::default_instance_ = NULL;

MysqlShardingRecordLine* MysqlShardingRecordLine::New() const {
  return new MysqlShardingRecordLine;
}

void MysqlShardingRecordLine::Clear() {
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MysqlShardingRecordLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string Values = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_values()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->values(this->values_size() - 1).data(),
            this->values(this->values_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MysqlShardingRecordLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string Values = 1;
  for (int i = 0; i < this->values_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->values(i).data(), this->values(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MysqlShardingRecordLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string Values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->values(i).data(), this->values(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MysqlShardingRecordLine::ByteSize() const {
  int total_size = 0;

  // repeated string Values = 1;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MysqlShardingRecordLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MysqlShardingRecordLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MysqlShardingRecordLine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MysqlShardingRecordLine::MergeFrom(const MysqlShardingRecordLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MysqlShardingRecordLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlShardingRecordLine::CopyFrom(const MysqlShardingRecordLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlShardingRecordLine::IsInitialized() const {

  return true;
}

void MysqlShardingRecordLine::Swap(MysqlShardingRecordLine* other) {
  if (other != this) {
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MysqlShardingRecordLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MysqlShardingRecordLine_descriptor_;
  metadata.reflection = MysqlShardingRecordLine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MysqlShardingTableInfo::kNameFieldNumber;
const int MysqlShardingTableInfo::kPartFieldFieldNumber;
#endif  // !_MSC_VER

MysqlShardingTableInfo::MysqlShardingTableInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MysqlShardingTableInfo::InitAsDefaultInstance() {
}

MysqlShardingTableInfo::MysqlShardingTableInfo(const MysqlShardingTableInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MysqlShardingTableInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  partfield_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MysqlShardingTableInfo::~MysqlShardingTableInfo() {
  SharedDtor();
}

void MysqlShardingTableInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (partfield_ != &::google::protobuf::internal::kEmptyString) {
    delete partfield_;
  }
  if (this != default_instance_) {
  }
}

void MysqlShardingTableInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MysqlShardingTableInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MysqlShardingTableInfo_descriptor_;
}

const MysqlShardingTableInfo& MysqlShardingTableInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MysqlShardingSvrRpc_2eproto();
  return *default_instance_;
}

MysqlShardingTableInfo* MysqlShardingTableInfo::default_instance_ = NULL;

MysqlShardingTableInfo* MysqlShardingTableInfo::New() const {
  return new MysqlShardingTableInfo;
}

void MysqlShardingTableInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_partfield()) {
      if (partfield_ != &::google::protobuf::internal::kEmptyString) {
        partfield_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MysqlShardingTableInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PartField;
        break;
      }

      // optional string PartField = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PartField:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partfield()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->partfield().data(), this->partfield().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MysqlShardingTableInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string PartField = 2;
  if (has_partfield()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->partfield().data(), this->partfield().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->partfield(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MysqlShardingTableInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string PartField = 2;
  if (has_partfield()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->partfield().data(), this->partfield().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->partfield(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MysqlShardingTableInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string PartField = 2;
    if (has_partfield()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->partfield());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MysqlShardingTableInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MysqlShardingTableInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MysqlShardingTableInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MysqlShardingTableInfo::MergeFrom(const MysqlShardingTableInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_partfield()) {
      set_partfield(from.partfield());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MysqlShardingTableInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlShardingTableInfo::CopyFrom(const MysqlShardingTableInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlShardingTableInfo::IsInitialized() const {

  return true;
}

void MysqlShardingTableInfo::Swap(MysqlShardingTableInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(partfield_, other->partfield_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MysqlShardingTableInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MysqlShardingTableInfo_descriptor_;
  metadata.reflection = MysqlShardingTableInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
