// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FResultSvrRpc.proto

#ifndef PROTOBUF_FResultSvrRpc_2eproto__INCLUDED
#define PROTOBUF_FResultSvrRpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "PublicStruct.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_FResultSvrRpc_2eproto();
void protobuf_AssignDesc_FResultSvrRpc_2eproto();
void protobuf_ShutdownFile_FResultSvrRpc_2eproto();

class FResultRpcCalculationFResultNotify;
class FResultTeamV;

// ===================================================================

class FResultRpcCalculationFResultNotify : public ::google::protobuf::Message {
 public:
  FResultRpcCalculationFResultNotify();
  virtual ~FResultRpcCalculationFResultNotify();

  FResultRpcCalculationFResultNotify(const FResultRpcCalculationFResultNotify& from);

  inline FResultRpcCalculationFResultNotify& operator=(const FResultRpcCalculationFResultNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FResultRpcCalculationFResultNotify& default_instance();

  void Swap(FResultRpcCalculationFResultNotify* other);

  // implements Message ----------------------------------------------

  FResultRpcCalculationFResultNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FResultRpcCalculationFResultNotify& from);
  void MergeFrom(const FResultRpcCalculationFResultNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Type = 1 [default = 1];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional .FResultTeamV ATeam = 2;
  inline bool has_ateam() const;
  inline void clear_ateam();
  static const int kATeamFieldNumber = 2;
  inline const ::FResultTeamV& ateam() const;
  inline ::FResultTeamV* mutable_ateam();
  inline ::FResultTeamV* release_ateam();
  inline void set_allocated_ateam(::FResultTeamV* ateam);

  // optional .FResultTeamV BTeam = 3;
  inline bool has_bteam() const;
  inline void clear_bteam();
  static const int kBTeamFieldNumber = 3;
  inline const ::FResultTeamV& bteam() const;
  inline ::FResultTeamV* mutable_bteam();
  inline ::FResultTeamV* release_bteam();
  inline void set_allocated_bteam(::FResultTeamV* bteam);

  // optional sint32 AOrBWin = 4 [default = 0];
  inline bool has_aorbwin() const;
  inline void clear_aorbwin();
  static const int kAOrBWinFieldNumber = 4;
  inline ::google::protobuf::int32 aorbwin() const;
  inline void set_aorbwin(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FResultRpcCalculationFResultNotify)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_ateam();
  inline void clear_has_ateam();
  inline void set_has_bteam();
  inline void clear_has_bteam();
  inline void set_has_aorbwin();
  inline void clear_has_aorbwin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::FResultTeamV* ateam_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 aorbwin_;
  ::FResultTeamV* bteam_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_FResultSvrRpc_2eproto();
  friend void protobuf_AssignDesc_FResultSvrRpc_2eproto();
  friend void protobuf_ShutdownFile_FResultSvrRpc_2eproto();

  void InitAsDefaultInstance();
  static FResultRpcCalculationFResultNotify* default_instance_;
};
// -------------------------------------------------------------------

class FResultTeamV : public ::google::protobuf::Message {
 public:
  FResultTeamV();
  virtual ~FResultTeamV();

  FResultTeamV(const FResultTeamV& from);

  inline FResultTeamV& operator=(const FResultTeamV& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FResultTeamV& default_instance();

  void Swap(FResultTeamV* other);

  // implements Message ----------------------------------------------

  FResultTeamV* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FResultTeamV& from);
  void MergeFrom(const FResultTeamV& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SmallUser Role = 1;
  inline int role_size() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 1;
  inline const ::SmallUser& role(int index) const;
  inline ::SmallUser* mutable_role(int index);
  inline ::SmallUser* add_role();
  inline const ::google::protobuf::RepeatedPtrField< ::SmallUser >&
      role() const;
  inline ::google::protobuf::RepeatedPtrField< ::SmallUser >*
      mutable_role();

  // optional sint32 Teamid = 2 [default = -1];
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 2;
  inline ::google::protobuf::int32 teamid() const;
  inline void set_teamid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FResultTeamV)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SmallUser > role_;
  ::google::protobuf::int32 teamid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_FResultSvrRpc_2eproto();
  friend void protobuf_AssignDesc_FResultSvrRpc_2eproto();
  friend void protobuf_ShutdownFile_FResultSvrRpc_2eproto();

  void InitAsDefaultInstance();
  static FResultTeamV* default_instance_;
};
// ===================================================================


// ===================================================================

// FResultRpcCalculationFResultNotify

// optional sint32 Type = 1 [default = 1];
inline bool FResultRpcCalculationFResultNotify::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FResultRpcCalculationFResultNotify::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FResultRpcCalculationFResultNotify::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FResultRpcCalculationFResultNotify::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::google::protobuf::int32 FResultRpcCalculationFResultNotify::type() const {
  return type_;
}
inline void FResultRpcCalculationFResultNotify::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional .FResultTeamV ATeam = 2;
inline bool FResultRpcCalculationFResultNotify::has_ateam() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FResultRpcCalculationFResultNotify::set_has_ateam() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FResultRpcCalculationFResultNotify::clear_has_ateam() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FResultRpcCalculationFResultNotify::clear_ateam() {
  if (ateam_ != NULL) ateam_->::FResultTeamV::Clear();
  clear_has_ateam();
}
inline const ::FResultTeamV& FResultRpcCalculationFResultNotify::ateam() const {
  return ateam_ != NULL ? *ateam_ : *default_instance_->ateam_;
}
inline ::FResultTeamV* FResultRpcCalculationFResultNotify::mutable_ateam() {
  set_has_ateam();
  if (ateam_ == NULL) ateam_ = new ::FResultTeamV;
  return ateam_;
}
inline ::FResultTeamV* FResultRpcCalculationFResultNotify::release_ateam() {
  clear_has_ateam();
  ::FResultTeamV* temp = ateam_;
  ateam_ = NULL;
  return temp;
}
inline void FResultRpcCalculationFResultNotify::set_allocated_ateam(::FResultTeamV* ateam) {
  delete ateam_;
  ateam_ = ateam;
  if (ateam) {
    set_has_ateam();
  } else {
    clear_has_ateam();
  }
}

// optional .FResultTeamV BTeam = 3;
inline bool FResultRpcCalculationFResultNotify::has_bteam() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FResultRpcCalculationFResultNotify::set_has_bteam() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FResultRpcCalculationFResultNotify::clear_has_bteam() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FResultRpcCalculationFResultNotify::clear_bteam() {
  if (bteam_ != NULL) bteam_->::FResultTeamV::Clear();
  clear_has_bteam();
}
inline const ::FResultTeamV& FResultRpcCalculationFResultNotify::bteam() const {
  return bteam_ != NULL ? *bteam_ : *default_instance_->bteam_;
}
inline ::FResultTeamV* FResultRpcCalculationFResultNotify::mutable_bteam() {
  set_has_bteam();
  if (bteam_ == NULL) bteam_ = new ::FResultTeamV;
  return bteam_;
}
inline ::FResultTeamV* FResultRpcCalculationFResultNotify::release_bteam() {
  clear_has_bteam();
  ::FResultTeamV* temp = bteam_;
  bteam_ = NULL;
  return temp;
}
inline void FResultRpcCalculationFResultNotify::set_allocated_bteam(::FResultTeamV* bteam) {
  delete bteam_;
  bteam_ = bteam;
  if (bteam) {
    set_has_bteam();
  } else {
    clear_has_bteam();
  }
}

// optional sint32 AOrBWin = 4 [default = 0];
inline bool FResultRpcCalculationFResultNotify::has_aorbwin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FResultRpcCalculationFResultNotify::set_has_aorbwin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FResultRpcCalculationFResultNotify::clear_has_aorbwin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FResultRpcCalculationFResultNotify::clear_aorbwin() {
  aorbwin_ = 0;
  clear_has_aorbwin();
}
inline ::google::protobuf::int32 FResultRpcCalculationFResultNotify::aorbwin() const {
  return aorbwin_;
}
inline void FResultRpcCalculationFResultNotify::set_aorbwin(::google::protobuf::int32 value) {
  set_has_aorbwin();
  aorbwin_ = value;
}

// -------------------------------------------------------------------

// FResultTeamV

// repeated .SmallUser Role = 1;
inline int FResultTeamV::role_size() const {
  return role_.size();
}
inline void FResultTeamV::clear_role() {
  role_.Clear();
}
inline const ::SmallUser& FResultTeamV::role(int index) const {
  return role_.Get(index);
}
inline ::SmallUser* FResultTeamV::mutable_role(int index) {
  return role_.Mutable(index);
}
inline ::SmallUser* FResultTeamV::add_role() {
  return role_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SmallUser >&
FResultTeamV::role() const {
  return role_;
}
inline ::google::protobuf::RepeatedPtrField< ::SmallUser >*
FResultTeamV::mutable_role() {
  return &role_;
}

// optional sint32 Teamid = 2 [default = -1];
inline bool FResultTeamV::has_teamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FResultTeamV::set_has_teamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FResultTeamV::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FResultTeamV::clear_teamid() {
  teamid_ = -1;
  clear_has_teamid();
}
inline ::google::protobuf::int32 FResultTeamV::teamid() const {
  return teamid_;
}
inline void FResultTeamV::set_teamid(::google::protobuf::int32 value) {
  set_has_teamid();
  teamid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FResultSvrRpc_2eproto__INCLUDED
